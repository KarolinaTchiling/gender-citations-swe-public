FN Clarivate Analytics Web of Science
VR 1.0
PT J
AU Lambertz, C
   Majster-Cederbaum, M
AF Lambertz, Christian
   Majster-Cederbaum, Mila
TI Efficient deadlock analysis of component-based software architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 20-22, 2011
CL Tehran, IRAN
SP Inst Studies Fundamental Sci, Sch Comp Sci, ACM SIGSOFT, IFIP WG 2 2, Inst Studies Fundamental Sci
DE Component-based development; Architectural constraints;
   Deadlock-freedom; Software architectures; Design patterns; Interaction
   systems
ID COMPOSITIONAL VERIFICATION; SYSTEMS; FRAMEWORK; PROTOCOLS; BEHAVIOR;
   FREEDOM
AB Component-based development (CBD) is a promising approach to master the design complexity of huge software products. In addition, knowledge about the architecture of such component systems can help in establishing important system properties, which in general is computationally hard because of the state space explosion problem. Extending previous work, we here investigate the novel class of disjoint circular wait free component systems and show how we can use the architectural information to establish a condition for the property of deadlock-freedom in polynomial time. Furthermore, we emphasize the importance of this class by showing how to transform an arbitrary system into a disjoint circular wait free one in linear time and in a property preserving way and by providing various computational complexity results. A running example is included. We use the framework of interaction systems, but our results carry over to other CBD models. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Lambertz, Christian; Majster-Cederbaum, Mila] Univ Mannheim, Dept Comp Sci, D-68131 Mannheim, Germany.
C3 University of Mannheim
RP Lambertz, C (corresponding author), Univ Mannheim, Dept Comp Sci, D-68131 Mannheim, Germany.
EM lambertz@informatik.uni-mannheim.de
RI Lambertz, Christian/AAJ-9769-2020
CR Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   [Anonymous], 2001, LNCS, DOI [DOI 10.1007/3-540-45449-7_11, DOI 10.1007/3-540-45449-711]
   [Anonymous], 1957, Canada Journal of Mathematics, DOI DOI 10.4153/CJM-1957-024-0
   [Anonymous], 2009, ACM INT C EMB SOFTW, DOI DOI 10.1145/1629335.1629347
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Attie PC, 2005, LECT NOTES COMPUT SC, V3385, P465
   BACK RJR, 1988, ACM T PROGR LANG SYS, V10, P513, DOI 10.1145/48022.48023
   Baier C, 2009, LECT NOTES COMPUT SC, V5521, P247, DOI 10.1007/978-3-642-02053-7_13
   Bastide R, 2006, ELECTRON NOTES THEOR, V160, P57, DOI 10.1016/j.entcs.2006.05.016
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Baumeister H, 2006, ELECTRON NOTES THEOR, V160, P75, DOI 10.1016/j.entcs.2006.05.015
   Bensalem S, 2010, IET SOFTW, V4, P181, DOI 10.1049/iet-sen.2009.0011
   Bensalem S, 2009, LECT NOTES COMPUT SC, V5643, P614, DOI 10.1007/978-3-642-02658-4_45
   Bensalem S, 2008, LECT NOTES COMPUT SC, V5311, P64, DOI 10.1007/978-3-540-88387-6_7
   Bernardo M, 2002, ACM T SOFTW ENG METH, V11, P386, DOI 10.1145/606612.606614
   BROOKES SD, 1991, DISTRIB COMPUT, V4, P209, DOI 10.1007/BF01784721
   CHARLESWORTH A, 1987, ACM T PROGR LANG SYS, V9, P350, DOI 10.1145/24039.24050
   CHENG A, 1995, THEOR COMPUT SCI, V147, P117, DOI 10.1016/0304-3975(94)00231-7
   Cormen Thomas H., 2001, INTRO ALGORITHMS
   da Silva LD, 2005, SCI COMPUT PROGRAM, V56, P171, DOI 10.1016/j.scico.2004.11.011
   de Alfaro L, 2005, NATO SCI SER II-MATH, V195, P83
   Doyen L., 2008, Proc. ACM IEEE Int. Conf. Embedded Software, P79, DOI DOI 10.1145/1450058.1450070
   GODEFROID P, 1992, LECT NOTES COMPUT SC, V575, P332
   Gössler G, 2007, LECT NOTES COMPUT SC, V4444, P201
   Gössler G, 2005, SCI COMPUT PROGRAM, V55, P161, DOI 10.1016/j.scico.2004.05.014
   Gössler G, 2003, LECT NOTES COMPUT SC, V2852, P443
   Groote J.F., 2007, METHODS MODELLING SO, V06351
   Hennicker R, 2010, ELECTRON NOTES THEOR, V260, P125, DOI 10.1016/j.entcs.2009.12.035
   Inverardi P., 2001, Fundamental Approaches to Software Engineering. 4th International Conference, FASE 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2029), P60
   JOUNG YJ, 1994, ACM T PROGR LANG SYS, V16, P954, DOI 10.1145/177492.177739
   Karger DavidR., 2002, Proceedings on 34th Annual ACM Symposium on Theory of Computing, May 19-21, 2002, Montreal, Quebec, Canada, P63
   Lambertz C., 2009, P DOCT S FM2009 U EI, V0915, P1
   Lambertz C, 2010, ELECTRON P THEOR COM, P7, DOI 10.4204/EPTCS.38.3
   Lambertz Christian, 2011, FSEN, P64
   Majster-Cederbaum M, 2008, P 8 ACM INT C EMB SO, P199, DOI DOI 10.1145/1450058.1450085
   Majster-Cederbaum M, 2008, LECT NOTES COMPUT SC, V5160, P216, DOI 10.1007/978-3-540-85762-4_15
   Majster-Cederbaum M, 2008, LECT NOTES COMPUT SC, V4910, P352
   Majster-Cederbaum M, 2010, ELECTRON NOTES THEOR, V263, P197, DOI 10.1016/j.entcs.2010.05.012
   Martens M, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P225, DOI 10.1109/TASE.2009.18
   Montesi F, 2010, LECT NOTES COMPUT SC, V6084, P153, DOI 10.1007/978-3-642-15640-3_11
   Plasil F, 2002, IEEE T SOFTWARE ENG, V28, P1056, DOI 10.1109/TSE.2002.1049404
   Ramos R, 2009, LECT NOTES COMPUT SC, V5850, P140, DOI 10.1007/978-3-642-05089-3_10
   van der Aalst WMP, 2002, SCI COMPUT PROGRAM, V42, P129, DOI 10.1016/S0167-6423(01)00005-3
NR 43
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2488
EP 2510
DI 10.1016/j.scico.2013.02.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 234SL
UT WOS:000325664500014
OA hybrid
DA 2024-07-18
ER

PT J
AU Leger, P
   Tanter, É
   Douence, R
AF Leger, Paul
   Tanter, Eric
   Douence, Remi
TI Modular and flexible causality control on the Web
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE WeCa; AspectScript; OTM; JavaScript; Web 2.0 Applications; Distributed
   computing; Aspect-oriented programming
ID EVENTS
AB Ajax allows JavaScript programmers to create interactive, collaborative, and user-centered Web applications, known as Web 2.0 Applications. These Web applications behave as distributed systems because processors are user machines that are used to send and receive messages between one another. Unsurprisingly, these applications have to address the same causality issues present in distributed systems like the need (a) to control the causality between messages sent and responses received and (b) to react to distributed causal relations. JavaScript programmers overcome these issues using rudimentary and alternative techniques that largely ignore the distributed computing theory. In addition, these techniques are not very flexible and need to intrusively modify these Web applications. In this paper, we study how causality issues affect these applications and present WeCa, a practical library that allows for modular and flexible control over these causality issues in Web applications. In contrast to current proposals, WeCa is based on (stateful) aspects, message ordering strategies, and vector clocks. We illustrate WeCa in action with several practical examples from the realm of Web applications. In addition, we evaluate our proposal with a third-party application and its performance. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Tanter, Eric] Univ Chile, PLEIAD Lab, Dept Comp Sci, Santiago, Chile.
   [Leger, Paul] Univ Catolica Norte, Antofagasta, Chile.
   [Douence, Remi] INRIA, ASCOLA Project, Paris, France.
C3 Universidad de Chile; Universidad Catolica del Norte; Inria
RP Leger, P (corresponding author), Univ Catolica Norte, Antofagasta, Chile.
EM pleger@dcc.uchile.cl
RI Douence, Remi/KGL-9014-2024; Leger, Paul/Q-6174-2017; Tanter,
   Éric/A-7955-2008
OI Leger, Paul/0000-0003-0969-5139; Tanter, Éric/0000-0002-7359-890X
FU FONDECYT [1110051]
FX E. Tanter is partially funded by FONDECYT project 1110051.
CR Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   [Anonymous], 2010, IMC 2010 P
   [Anonymous], P 5 INT C ASP OR SOF
   [Anonymous], 1994, STRUCTURAL ANAL SOCI
   Benevenuto F, 2009, IMC'09: PROCEEDINGS OF THE 2009 ACM SIGCOMM INTERNET MEASUREMENT CONFERENCE, P49
   Douence Remi, 2005, Aspect-Oriented Software Development, P201
   Farkas A., 2011, JAVASCRIPT LIB BLOCK
   Garg VK., 2002, Elements of distributed computing
   Garrett JJ, 2005, AJAX NEW APPROACH WE
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G, 1997, PROC INT CONF SOFTW, P481, DOI 10.1145/253228.253431
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Kossinets G., 2008, P 14 ACM SIGKDD INT, P435, DOI DOI 10.1145/1401890.1401945
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Leger P., 2010, P 9 WORKSH FDN ASP O, P25
   Leger P., 2010, P 14 BRAZ S PROGR LA, P123
   Leger P., 2012, JAVASCRIPT DEV MESSA
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2622, P46
   Mattern F., 1989, Parallel and Distributed Algorithms. Proceedings of the International Workshop, P215
   Might M, 2010, ACM SIGPLAN NOTICES, V45, P305, DOI 10.1145/1809028.1806631
   Murty V., 1997, 17 IEEE INT C DISTR, P492
   Navarro LDB, 2008, LECT NOTES COMPUT SC, V5346, P183, DOI 10.1007/978-3-540-89856-6_10
   O'Reilly T, 2005, COMMUNICATIONS STRAT
   Owyang J., 2008, TECHNICAL REPORT
   Rajan H, 2008, LECT NOTES COMPUT SC, V5142, P155, DOI 10.1007/978-3-540-70592-5_8
   Rico, 2011, JAVASCRIPT LIB RICH
   Shahin, 2006, AJAX VIDEO PLAYER ST
   Toledo R., 2010, P 9 INT C ASPECT ORI, P13, DOI DOI 10.1145/1739230.1739233
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   Wilson C, 2009, EUROSYS'09: PROCEEDINGS OF THE FOURTH EUROSYS CONFERENCE, P205
NR 30
TC 8
Z9 8
U1 0
U2 13
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1538
EP 1558
DI 10.1016/j.scico.2012.11.005
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100017
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hauswirth, M
   Adamoli, A
AF Hauswirth, Matthias
   Adamoli, Andrea
TI Teaching Java programming with the Informa clicker system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; Teaching; Learning; Programming skills
AB This paper describes the use of clickers in a Java programming course. However, instead of using ordinary hardware clickers, we use software clickers, implemented in Java, that allow for much richer problem types than the traditional multiple-choice question. The problem types we introduce in this paper give students a much higher degree of freedom in solving a problem, and thus more opportunities for making mistakes. We look at mistakes as learning opportunities, and we introduce a pedagogical approach that allows students to learn from mistakes of their peers. We finish with a case study and an evaluation of our approach based on the detailed analysis of its use in two semesters of an undergraduate Java programming course. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Hauswirth, Matthias; Adamoli, Andrea] Univ Lugano, Fac Informat, Lugano, Switzerland.
C3 Universita della Svizzera Italiana
RP Adamoli, A (corresponding author), Univ Lugano, Fac Informat, Lugano, Switzerland.
EM Matthias.Hauswirth@usi.ch; Andrea.Adamoli@usi.ch
OI Adamoli, Andrea/0000-0001-5997-2187
CR Abrahamson A. L., 1998, P INT C TEACH MATH J
   Barkley E.F., 2005, COLLABORATIVE LEARNI
   Barnes D.J., 2006, Objects First With Java: A Practical Introdution Using BlueJ, V3
   Bligh DonaldA., 2000, WHATS USE LECT
   Carreras M. A. M., 2005, 2005 International Conference on Collaborative Computing: Networking, Applications and Worksharing and Workshops (IEEE Cat. No. 05EX1251C)
   De Chiara Rosario, 2007, 2007 International Conference on Collaborative Computing: Networking, Applications and Worksharing (CollaborateCom 2007), P243, DOI 10.1109/COLCOM.2007.4553836
   Dijkstra E., 1979, STRUCTURED PROGRAMMI, P41
   Dillenbourg P., 2002, 3 WORLDS CSCL, P61
   Draper S. W., 2002, Australian Journal of Educational Technology, V18, P13
   Duncan D., 2005, CLICKERS CLASSROOM
   Hauswirth Matthias, 2008, P 4 INT C COLL COMP
   Koile K., 2006, WORKSH IMP PEN BAS T
   Koile K., 2006, ICER, P119
   Kolling M., 2003, Journal of Computer Science Education, V13, p249
   Pargas R., 2006, P ACM TECHN S COMP S
   Penner J.G., 1984, WHY MANY COLL TEACHE
   Roschelle J., 2003, P 2003 JOINT M PME P
   Roschelle J., 2004, CLASSROOM RESPONSE C
   Trees A.R., 2007, LEARN MEDIA TECHNOL, V32, P21, DOI DOI 10.1080/17439880601141179
   Waite W. M., 2003, P 34 SIGCSE TECHN S
NR 20
TC 18
Z9 20
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 499
EP 520
DI 10.1016/j.scico.2011.06.006
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Damm, W
   Dierks, H
   Disch, S
   Hagemann, W
   Pigorsch, F
   Scholl, C
   Waldmann, U
   Wirtz, B
AF Damm, Werner
   Dierks, Henning
   Disch, Stefan
   Hagemann, Willem
   Pigorsch, Florian
   Scholl, Christoph
   Waldmann, Uwe
   Wirtz, Boris
TI Exact and fully symbolic verification of linear hybrid automata with
   large discrete state spaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Verification; Linear hybrid automata; Symbolic representations;
   Non-convex polyhedra; Redundancy elimination; Satisfiability Modulo
   Theories (SMT)
ID SYSTEMS; REPRESENTATIONS; INTERPOLATION
AB We propose an improved symbolic algorithm for the verification of linear hybrid automata with large discrete state spaces (where an explicit representation of discrete states is difficult). Here both the discrete part and the continuous part of the hybrid state space are represented by one symbolic representation called LinAlGs. LinAlGs represent (possibly non-convex) polyhedra extended by Boolean variables. Key components of our method for state space traversal are redundancy elimination and constraint minimization: redundancy elimination eliminates so-called redundant linear constraints from LinAlG representations by a suitable exploitation of the capabilities of SMT (Satisfiability Modulo Theories) solvers. Constraint minimization optimizes polyhedra by exploiting the fact that states already reached in previous steps can be interpreted as "don't cares" in the current step. Experimental results (including comparisons to the state-of-the-art model checkers PHAVer and RED) demonstrate the advantages of our approach. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Disch, Stefan; Pigorsch, Florian; Scholl, Christoph] Univ Freiburg, D-79110 Freiburg, Germany.
   [Damm, Werner] OFFIS eV, D-26121 Oldenburg, Germany.
   [Damm, Werner; Wirtz, Boris] Carl von Ossietzky Univ Oldenburg, D-26111 Oldenburg, Germany.
   [Dierks, Henning] HAW Hamburg, D-20099 Hamburg, Germany.
   [Hagemann, Willem; Waldmann, Uwe] Max Planck Inst Informat, D-66123 Saarbrucken, Germany.
C3 University of Freiburg; Carl von Ossietzky Universitat Oldenburg;
   Hochschule Angewandte Wissenschaft Hamburg; Max Planck Society
RP Scholl, C (corresponding author), Univ Freiburg, Georges Kohler Allee 51, D-79110 Freiburg, Germany.
EM damm@offis.de; henning.dierks@haw-hamburg.de;
   disch@informatik.uni-freiburg.de; hagemann@mpi-sb.mpg.de;
   pigorsch@informatik.uni-freiburg.de; scholl@informatik.uni-freiburg.de;
   uwe@mpi-inf.mpg.de; Boris.Wirtz@uni-oldenburg.de
FU German Research Council (DFG) as part of the Transregional Collaborative
   Research Center "Automatic Verification and Analysis of Complex Systems"
   [SFB/TR 14 AVACS]
FX This work was partly supported by the German Research Council (DFG) as
   part of the Transregional Collaborative Research Center "Automatic
   Verification and Analysis of Complex Systems" (SFB/TR 14 AVACS,
   http://www.avacs.org/).
CR Agrawal M, 2005, LECT NOTES COMPUT SC, V3414, P55
   Agrawal M, 2004, LECT NOTES COMPUT SC, V2993, P1
   Aho A. V., 1972, SIAM Journal on Computing, V1, P131, DOI 10.1137/0201008
   Alur R, 1996, IEEE T SOFTWARE ENG, V22, P181, DOI 10.1109/32.489079
   [Anonymous], 1990, LICS, DOI DOI 10.1109/LICS.1990.113767
   [Anonymous], 1968, STUDIES CONSTRUCTIVE
   ASARIN E, 2002, LNCS, V2404, P365, DOI DOI 10.1007/3-540-45657-0_30
   Asarin E, 2007, ACTA INFORM, V43, P451, DOI 10.1007/s00236-006-0035-7
   BENVENISTE A, 1991, P IEEE, V79, P1270, DOI 10.1109/5.97297
   Beyer D, 2003, LECT NOTES COMPUT SC, V2767, P193
   Brayton R. K., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P428
   Bruttomesso R, 2008, LECT NOTES COMPUT SC, V5123, P299
   Coudert O., 1990, 1990 IEEE International Conference on Computer-Aided Design. Digest of Technical Papers (Cat. No.90CH2924-9), P126, DOI 10.1109/ICCAD.1990.129859
   COUDERT O, 1990, LECT NOTES COMPUT SC, V407, P365
   Craig W., 1957, J SYMBOLIC LOGIC, V22, P269
   Damm W, 2005, LECT NOTES COMPUT SC, V3707, P99
   Damm W, 2007, LECT NOTES COMPUT SC, V4762, P425
   Damm W, 2006, LECT NOTES COMPUT SC, V4218, P276
   Dolzmann A., 2000, THESIS U PASSAU
   Dutertre B, 2006, LECT NOTES COMPUT SC, V4144, P81, DOI 10.1007/11817963_11
   Een N., 2003, LECT NOTES COMPUTER, V2919, P541
   Frehse G, 2005, LECT NOTES COMPUT SC, V3414, P258
   Frehse Goran, 2005, Ph. D. Dissertation
   Girard A, 2007, IEEE T AUTOMAT CONTR, V52, P782, DOI 10.1109/TAC.2007.895849
   Haible B., CLN CLASS LIB NUMBER
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Henzinger TA, 1997, LECT NOTES COMPUT SC, V1254, P460, DOI 10.1007/s100090050008
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   JHA S, 2007, SYMBOLIC REACHABILIT
   Lee CC, 2007, IEEE IC CAD, P227, DOI 10.1109/ICCAD.2007.4397270
   Lewis M, 2007, ASIA S PACIF DES AUT, P926
   LOOS R, 1993, COMPUT J, V36, P450, DOI 10.1093/comjnl/36.5.450
   McMillan K. L., 1993, Symbolic model checking
   McMillan KL, 2003, LECT NOTES COMPUT SC, V2725, P1
   Mishchenko A., 2005, FRAIGs: A Unifying Representation for Logic Synthesis and Verification
   PIGORSCH F, 2006, FMCAD, P89
   Pigorsch F., 2009, DES AUT C
   Pigorsch F., 2009, GI ITG GMM WORKSH ME, P77
   Pigorsch F, 2009, DES AUT TEST EUROPE, P1596
   Platzer A, 2007, LECT NOTES COMPUT SC, V4416, P473
   Pudlak P, 1997, J SYMBOLIC LOGIC, V62, P981, DOI 10.2307/2275583
   Scholl C, 2009, LECT NOTES COMPUT SC, V5505, P383, DOI 10.1007/978-3-642-00768-2_32
   Sebastiani R., 2007, J SAT, V3, P141, DOI [DOI 10.3233/978-1-58603-929-5-825, 10.3233/SAT190034, 10.3233/sat190034, DOI 10.3233/SAT190034]
   Segelken M, 2007, LECT NOTES COMPUT SC, V4590, P433
   SILVA BI, 2000, 4 C AUT MIX PROC
   Somenzi Fabio., CUDD CU DECISION DIA
   Wang F, 2005, IEEE T SOFTWARE ENG, V31, P38, DOI 10.1109/TSE.2005.13
NR 47
TC 14
Z9 15
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2012
VL 77
IS 10-11
SI SI
BP 1122
EP 1150
DI 10.1016/j.scico.2011.07.006
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980JQ
UT WOS:000306889800006
OA Bronze
DA 2024-07-18
ER

PT J
AU Talpin, JP
   Ouy, J
   Gautier, T
   Besnard, L
   Le Guernic, P
AF Talpin, Jean-Pierre
   Ouy, Julien
   Gautier, Thierry
   Besnard, Loic
   Le Guernic, Paul
TI Compositional design of isochronous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Embedded systems; Software engineering; Synchronous modeling; Formal
   verification; Automated distribution
AB The synchronous modeling paradigm provides strong correctness guarantees for embedded system design while requiring minimal environmental assumptions. In most related frameworks, global execution correctness is achieved by ensuring the insensitivity of (logical) time in the program from (real) time in the environment. This property, called endochrony or patience, can be statically checked, making it fast to ensure design correctness. Unfortunately, it is not preserved by composition, which makes it difficult to exploit with component-based design concepts in mind. Compositionality can be achieved by weakening this objective, but at the cost of an exhaustive state-space exploration. This raises a trade-off between performance and precision. Our aim is to balance it by proposing a formal design methodology that adheres to a weakened global design objective: the non-blocking composition of weakly endochronous processes, while preserving local design objectives for synchronous modules. This yields an effective and cost-efficient approach to compositional synchronous modeling. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Talpin, Jean-Pierre] INRIA, Unite Rech Rennes Bretagne Atlantique, F-35042 Rennes, France.
   IRISA, CNRS, UMR 6074, F-35042 Rennes, France.
C3 Universite de Rennes; Inria; Universite de Rennes; Centre National de la
   Recherche Scientifique (CNRS)
RP Talpin, JP (corresponding author), INRIA, Unite Rech Rennes Bretagne Atlantique, Campus Beaulieu, F-35042 Rennes, France.
EM Jean-Pierre.Talpin@inria.fr; Julien.Ouy@inria.fr;
   Thierry.Gautier@inria.fr; Loic.Besnard@irisa.fr; Paul.LeGuernic@inria.fr
CR ABRAMSKY S, 1989, LECT NOTES COMPUTER, V442
   [Anonymous], 1998, IEEE T COMPUTER AIDE
   [Anonymous], P IEEE
   AUBRY P, 1997, THESIS U RENNES
   BENVENISTE A, 2002, LECT NOTES COMPUTER
   BESNARD L, 1992, THESIS U RENNES
   BUCK J, 2001, MORGANKAUFMANN SERIE
   Carloni Luca, 2001, IEEE T COMPUTER AIDE, V20
   Caspi Paul, 1987, PRINCIPLES PROGRAMMI
   Casu M., 2004, DES AUT C
   DASGUPTA S, 2006, ELECT NOTES THEORETI
   EDWARDS S, 2005, INT C EMB SOFTW
   GAMATIE A, 2003, REAL TIM EMB TECHN A
   GIRAULT A, 2006, ACM T EMBEDDED COMPU, V5
   Girault Alain, 2005, ELECT NOTES THEORETI
   Le Guernic P., 2003, J CIRCUITS SYSTEMS C
   Marchand H., 2001, SCI COMPUTER PROGRAM, V41
   OUY J, 2007, ELECT NOTES THEORETI
   Potop-Butucaru D., 2006, FORMAL METHODS SYSTE
   POTOPBUTUCARU D, 2009, APPL CONCURRENCY SYS
   Talpin Jean-Pierre, 2005, EMB SOFTW C
   TALPIN JP, 2008, DES AN TEST EUR DATE
   TALPIN JP, 2006, FORMAL METHODS SYSTE
NR 23
TC 7
Z9 7
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2012
VL 77
IS 2
SI SI
BP 113
EP 128
DI 10.1016/j.scico.2010.06.006
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 867OX
UT WOS:000298464800004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Resinas, M
   Fernández, P
   Corchuelo, R
AF Resinas, Manuel
   Fernandez, Pablo
   Corchuelo, Rafael
TI A bargaining-specific architecture for supporting automated service
   agreement negotiation systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software architecture; Automated negotiation; Service agreements
ID WEB SERVICES; FRAMEWORK; AGENT; MODEL
AB The provision of services is often regulated by means of agreements that must be negotiated beforehand. Automating such negotiations is appealing insofar as it overcomes one of the most often cited shortcomings of human negotiation: slowness. Our analysis of the requirements of automated negotiation systems in open environments suggests that some of them cannot be tackled in a protocol-independent manner, which motivates the need for a protocol-specific architecture. However, current state-of-the-art bargaining architectures fail to address all of these requirements together. Our key contribution is a bargaining architecture that addresses all of the requirements we have identified. The definition of the architecture includes a logical view that identifies the key architectural elements and their interactions, a process view that identifies how the architectural elements can be grouped together into processes, a development view that includes a software framework that provides a reference implementation developers can use to build their own negotiation systems, and a scenarios view by means of which the architecture is illustrated and validated. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Resinas, Manuel; Fernandez, Pablo; Corchuelo, Rafael] Univ Seville, ETSI Informat, E-41012 Seville, Spain.
C3 University of Sevilla
RP Resinas, M (corresponding author), Univ Seville, ETSI Informat, Avda Reina Mercedes S-N, E-41012 Seville, Spain.
EM resinas@us.es
RI Fernandez, Pablo/E-6362-2010; Resinas, Manuel/B-3063-2008; Corchuelo,
   Rafael/G-3149-2016
OI Fernandez, Pablo/0000-0002-8763-0819; Resinas,
   Manuel/0000-0003-1575-406X; Corchuelo, Rafael/0000-0003-1563-6979
FU European Commission; Spanish Ministry of Science and Innovation;
   Andalusian Government; SETI [TIN2009-07366]; Isabel [P07-TIC-2533]; 
   [TIN2010-21744-C02];  [TIN2007-64119];  [P07-TIC-02602]; 
   [P08-TIC-4100];  [TIN2008-04718-E]
FX The work on which this paper reports was partially funded by the
   European Commission (FEDER), the Spanish Ministry of Science and
   Innovation, and the Andalusian Government. The work by MR and PF was
   supported by grants TIN2009-07366 (SETI) and P07-TIC-2533 (Isabel); the
   work by RC was supported by grants TIN2010-21744-C02, TIN2007-64119,
   P07-TIC-02602, P08-TIC-4100, and TIN2008-04718-E (IntegraWeb).
CR ANRIEUX A, 2007, WS AGREEMENT SPECIFI
   Ashri R, 2003, LECT NOTES ARTIF INT, V2691, P136
   Bartolini C, 2004, LECT NOTES COMPUT SC, V3390, P213
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Battre Dominic, 2010, Proceedings 2010 11th IEEE/ACM International Conference on Grid Computing (GRID 2010), P233, DOI 10.1109/GRID.2010.5697976
   Benyoucef M, 2008, GROUP DECIS NEGOT, V17, P211, DOI 10.1007/s10726-007-9073-y
   Bichler M, 2000, DECIS SUPPORT SYST, V29, P249, DOI 10.1016/S0167-9236(00)00075-0
   Elfatatry A, 2005, SOFTWARE PRACT EXPER, V35, P323, DOI 10.1002/spe.638
   Elfatatry AM, 2004, COMMUN ACM, V47, P103, DOI 10.1145/1012037.1012044
   Faratin P, 1998, ROBOT AUTON SYST, V24, P159, DOI 10.1016/S0921-8890(98)00029-3
   Faratin P, 2002, ARTIF INTELL, V142, P205, DOI 10.1016/S0004-3702(02)00290-4
   Fatima SS, 2004, ARTIF INTELL, V152, P1, DOI 10.1016/S0004-3702(03)00115-2
   Fowler M., 2002, Patterns of Enterprise Application Architecture
   Gimpel H, 2003, LECT NOTES COMPUT SC, V2910, P287
   He MH, 2003, IEEE T KNOWL DATA EN, V15, P985, DOI 10.1109/TKDE.2003.1209014
   Jennings NR, 2001, GROUP DECIS NEGOT, V10, P199, DOI 10.1023/A:1008746126376
   Jonker CM, 2007, AUTON AGENT MULTI-AG, V15, P221, DOI 10.1007/s10458-006-9009-y
   Karp AH, 2004, FIRST IEEE INTERNATIONAL WORKSHOP ON ELECTRONIC CONTRACTING, PROCEEDINGS, P32
   Kim JB, 2005, DECIS SUPPORT SYST, V40, P71, DOI 10.1016/j.dss.2004.04.005
   Klein M, 2003, IEEE INTELL SYST, V18, P32, DOI 10.1109/MIS.2003.1249167
   Kowalczyk R., 2002, Soft Computing, V6, P337, DOI 10.1007/s00500-002-0187-5
   KRUCHTEN PB, 1995, IEEE SOFTWARE, V12, P42, DOI 10.1109/52.469759
   Lodi G, 2007, IEEE T SOFTWARE ENG, V33, P186, DOI 10.1109/TSE.2007.28
   Ludwig A, 2006, LECT NOTES COMPUT SC, V3812, P89
   Luo XD, 2003, ARTIF INTELL, V148, P53, DOI 10.1016/S0004-3702(03)00041-9
   Molina-Jimenez C, 2005, LECT NOTES COMPUT SC, V3549, P36
   Nash JF, 1950, ECONOMETRICA, V18, P155, DOI 10.2307/1907266
   Nguyen TD, 2005, ELECTRON COMMER R A, V4, P362, DOI 10.1016/j.elerap.2005.06.005
   Papazoglou MP, 2008, LECT NOTES COMPUT SC, V5074, P1
   Paurobally S, 2007, ACM T AUTON ADAP SYS, V2, DOI 10.1145/1293731.1293734
   Rahwan I, 2003, KNOWL ENG REV, V18, P343, DOI 10.1017/S0269888904000098
   Resinas M, 2010, INT J ELECTRON COMM, V14, P93, DOI 10.2753/JEC1086-4415140305
   Rinderle S, 2005, LECT NOTES COMPUT SC, V3806, P443
   Ros R, 2006, AUTON AGENT MULTI-AG, V12, P163, DOI 10.1007/s10458-006-5837-z
   Sandholm TW, 2001, GAME ECON BEHAV, V35, P212, DOI 10.1006/game.2000.0831
   Sim KM, 2004, IEEE T SYST MAN CY B, V34, P1602, DOI 10.1109/TSMCB.2004.825935
   Sim KM, 2010, IEEE T SYST MAN CY C, V40, P245, DOI 10.1109/TSMCC.2009.2037134
   Strobel M., 2001, Electronic Commerce Research, V1, P335, DOI 10.1023/A:1011554323604
   Su SYW, 2001, VLDB J, V10, P72
   TU T, 2001, ELECTRON COMMER RES, V1, P101
   Wainer J, 2007, DECIS SUPPORT SYST, V44, P285, DOI 10.1016/j.dss.2007.03.015
   Zambonelli F, 2003, ACM T SOFTW ENG METH, V12, P317, DOI 10.1145/958961.958963
   Zeng DJ, 1998, INT J HUM-COMPUT ST, V48, P125, DOI 10.1006/ijhc.1997.0164
NR 43
TC 15
Z9 17
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2012
VL 77
IS 1
SI SI
BP 4
EP 28
DI 10.1016/j.scico.2010.09.008
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 834JQ
UT WOS:000295956000002
OA Green Published
DA 2024-07-18
ER

PT J
AU Bettini, L
   Bono, V
   Venneri, B
AF Bettini, Lorenzo
   Bono, Viviana
   Venneri, Betti
TI Delegation by object composition
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on the Principles and Practice of
   Programming in Java (PPPJ 2008)
CY SEP 08-11, 2008
CL Modena, ITALY
DE Language extensions; Featherweight Java; Object composition; Delegation;
   Consultation
ID JAVA
AB Class inheritance and method overriding, as provided by standard class-based languages, are often not flexible enough to represent objects with some dynamic behavior. In this respect, object composition equipped with different forms of method body lookup is often advocated as a more flexible alternative to class inheritance since it takes place at run time, thus permitting the behavior of objects to be specialized dynamically. In this paper, we illustrate Incomplete Featherweight Java (IFJ), an extension of Featherweight Java with a novel linguistic construct, the incomplete object. Incomplete objects require some missing methods which can be provided at run time by composition with another (complete) object. Furthermore, we present two mechanisms for the method body lookup on (composed) objects, one based on delegation and the other based on consultation. Thanks to the design of the language, the consultation-based lookup is a simple extension of the delegation-based one. Both mechanisms are disciplined by static typing, therefore the language enjoys type safety (which implies no "message-not-understood" run-time errors) and avoids possible accidental overrides due to method name clashes. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Bettini, Lorenzo; Bono, Viviana] Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
   [Venneri, Betti] Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
C3 University of Turin; University of Florence
RP Bettini, L (corresponding author), Univ Turin, Dipartimento Informat, I-10124 Turin, Italy.
EM bettini@di.unito.it; bono@di.unito.it; venneri@dsi.unifi.it
RI Bono, Viviana/C-6292-2011
OI Bettini, Lorenzo/0000-0002-4481-8096; BONO, Viviana/0000-0002-2533-0511;
   VENNERI, BATTISTINA/0000-0001-6458-0305
CR ANDERSON C, 2003, ENTCS, V82, P1
   [Anonymous], 1996, A Theory of Objects
   Babu C, 2004, ACM SIGPLAN NOTICES, V39, P61, DOI 10.1145/1026474.1026484
   BABU C, 2005, P WORKSH REFL AOP ME
   BETTINI L, 2004, P 3 IFIP INT C THEOR
   Bettini L, 2008, P PPPJ, P171
   Bettini L, 2008, LECT NOTES BUS INF P, V11, P198
   Bettini L, 2005, J OBJECT TECHNOL, V4
   Bettini L, 2008, J OBJECT TECHNOL, V7, P5, DOI 10.5381/jot.2008.7.2.a1
   Bettini L, 2009, LECT NOTES COMPUT SC, V5634, P27, DOI 10.1007/978-3-642-02655-3_4
   Bono V., 1999, Fundamenta Informaticae, V38, P325
   Bracha G., 2016, The Dart Programming Language. Always learning
   Bruce KimB., 2002, Foundations of Object-Oriented Languages: Types and Semantics
   Castagna Giuseppe., 1997, Progress in Theoretical Computer Science
   CHAMBERS C, 1992, LECT NOTES COMPUT SC, V615, P33, DOI 10.1007/BFb0053029
   CRAWFORD D, 2001, COMMUNICATIONS ACM A, V44
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ernst E., 1999, THESIS U ARHUS DENMA
   Fisher K., 1994, Nordic Journal of Computing, V1, P3
   Fisher K., 1995, LECT NOTES COMPUTER, V965, P42
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Goldberg A., 1989, Smalltalk-80 : The Language
   Herrmann S, 2007, APPL ONTOL, V2, P181
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Kniesel G, 1999, LECT NOTES COMPUT SC, V1628, P351
   Kochan S.G., 2008, - Programming in Objective-C 2.0, VSecond
   Kristensen B. B., 1996, Theory and Practice of Object Systems, V2, P143, DOI 10.1002/(SICI)1096-9942(1996)2:3<143::AID-TAPO2>3.0.CO;2-X
   LIEBERMAN H, 1986, SIGPLAN NOTICES, V21, P214, DOI 10.1145/960112.28718
   Nielsen AB, 2008, LECT NOTES BUS INF, V11, P161
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Riecke JG, 2002, INFORM COMPUT, V172, P2, DOI 10.1006/inco.2000.2925
   Riel AJ., 1996, Object-Oriented Design Heuristics
   Steimann F, 2000, DATA KNOWL ENG, V35, P83, DOI 10.1016/S0169-023X(00)00023-9
   Taivalsaari A, 1996, ACM COMPUT SURV, V28, P438, DOI 10.1145/243439.243441
   UNGAR D, 1987, SIGPLAN NOTICES, V22, P227, DOI 10.1145/38807.38828
   van der Torre L., 2007, J OBJECT TECHNOLOGY, V6
   VIEGA J, 1998, CS9803 UVA COMP SCI
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 38
TC 8
Z9 11
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2011
VL 76
IS 11
SI SI
BP 992
EP 1014
DI 10.1016/j.scico.2010.04.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 791ND
UT WOS:000292671000003
OA Green Published
DA 2024-07-18
ER

PT J
AU Noguera, M
   Hurtado, MV
   Rodríguez, ML
   Chung, L
   Garrido, JL
AF Noguera, Manuel
   Hurtado, Maria V.
   Luisa Rodriguez, Maria
   Chung, Lawrence
   Luis Garrido, Jose
TI Ontology-driven analysis of UML-based collaborative processes using
   OWL-DL and CPN
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE OWL; Process modelling; CSCW; CPN; Process analysis; Reasoning; Task
   modelling; Collaborative systems
AB A key ingredient in system and organization modeling is modeling business processes that involve the collaborative participation of different teams within and outside the organization. Recently, the use of the Unified Modeling Language (UML) for collaborative business modeling has been increasing, thanks to its human-friendly visual representation of a rich set of structural and behavioral views, albeit its unclear semantics. In the meantime, the use of the Web Ontology Language (OWL) has also been emerging, thanks to its clearly-defined semantics, hence being amenable to automatic analysis and reasoning, although it is less human friendly than, and also perhaps not as rich as, the UML notation especially concerning processes, or activities. In this paper, we view the UML and the OWL as being complementary to each other, and exploit their relative strengths. We provide a mapping between the two, through a set of mapping rules, which allow for the capture of UML activity diagrams in an OWL-ontology. This mapping, which results in a formalization of collaborative processes, also sets a basis for subsequent construction of executable models using the Colored Petri Nets (CPN) formalism. For this purpose, we also provide appropriate mappings from OWL-based ontological elements into CPN elements. A case study of a mortgage granting system is described, along with the potential benefits and limitations of our proposal. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Noguera, Manuel; Hurtado, Maria V.; Luisa Rodriguez, Maria; Luis Garrido, Jose] Univ Granada, ETSIIT, Dept Lenguajes & Sistemas Informat, E-18071 Granada, Spain.
   [Chung, Lawrence] Univ Texas Dallas, Dept Comp Sci, Richardson, TX 75083 USA.
C3 University of Granada; University of Texas System; University of Texas
   Dallas
RP Noguera, M (corresponding author), Univ Granada, ETSIIT, Dept Lenguajes & Sistemas Informat, C Periodista Daniel Saucedo Aranda S-N, E-18071 Granada, Spain.
EM mnoguera@ugr.es; mhurtado@ugr.es; mlra@ugr.es; chung@utdallas.edu;
   jgarrido@ugr.es
RI Hurtado Torres, Maria Visitacion/C-2398-2012; Noguera,
   Manuel/A-7073-2008; Rodriguez Almendros, Maria Luisa/C-7430-2012;
   Garrido, Jose Luis/C-2410-2012
OI Hurtado Torres, Maria Visitacion/0000-0001-6345-6062; Noguera,
   Manuel/0000-0003-0503-6451; Rodriguez Almendros, Maria
   Luisa/0000-0002-7648-6380; Garrido, Jose Luis/0000-0001-7004-1957
FU Spanish Ministry of Education and Science (MEC) [TIN2004-08000-C03-02,
   TIN 2007-60199, TIN2008-05995/TSI]
FX This research has been supported by the Spanish Ministry of Education
   and Science (MEC) under its R&D programs TIN2004-08000-C03-02, TIN
   2007-60199 and TIN2008-05995/TSI. Part of this work was completed during
   a visit to the Department of Computer Science at the University of Texas
   at Dallas. We would like to thank our hosts for the facilities and
   opportunities for discussion. We would like to thank Weimin Ma, Ebenezer
   Oladimeji and Sam Supakkul for their comments. Likewise, we would also
   like to thank Agustin Gazquez, senior risk analyst and manager from
   Unicaja, and Nuria Hurtado, from the School of Economics and Business at
   the University of Granada, for their valuable insight and advice which
   have helped us to better comprehend and model lending systems.
CR Akhlaki KB, 2007, SCI COMPUT PROGRAM, V65, P41, DOI 10.1016/j.scico.2006.08.005
   [Anonymous], 2006, Technical Report
   [Anonymous], 2006, DEF N AR REL SEM WEB
   [Anonymous], J WEB SEMANTICS
   [Anonymous], OWL WEB ONT LANG SEM
   [Anonymous], 2007, Web Services Description Language (WSDL) Version 2.0
   [Anonymous], 1999, XSL TRANSF XSLT VERS
   [Anonymous], 2006, P 10 INT C PRINCIPLE
   [Anonymous], CPN Tools
   [Anonymous], JESS, the Rule Engine for the Java platform
   Baader F., 2003, DESCRIPTION LOGIC HD
   Barjis J, 2008, SCI COMPUT PROGRAM, V71, P73, DOI 10.1016/j.scico.2008.01.002
   Barjis J, 2007, ICEIS 2007: PROCEEDINGS OF THE NINTH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, P5
   Berardi D, 2005, ARTIF INTELL, V168, P70, DOI 10.1016/j.artint.2005.05.003
   Brickley D., 2004, RDF VOCABULARY DESCR
   Calvanese D., 2001, P 17 INT JOINT C ART, P155
   Carstensen P.H., 2003, Handbook of Human Factors/Ergonomics, P619
   Christensen S., 2001, Applications and Theory of Petri Nets 2001. 22nd International Conference, ICATPN 2001. Proceedings (Lecture Notes in Computer Science Vol.2075), P101
   CHRISTENSEN S, 2001, LNCS, V2031, P450
   DEBRUIJN IJ, 2005, P 14 INT C WORLD WID, P623
   DESEL J, 2004, LNCS, V3098, DOI DOI 10.1007/B98282
   Donini FM, 1998, ARTIF INTELL, V100, P225, DOI 10.1016/S0004-3702(98)00009-5
   DRUMMOND N, 2006, P 2 OWL EXP DIR WORK
   EVERMANN J, SOFTWARE SYSTEMS MOD, V8, P235
   FERNANDES JM, APSE C 2007, DOI DOI 10.1109/APSEC.2007.81
   Garrido JL, 2002, LECT NOTES COMPUT SC, V2545, P16
   GARRIDO JL, 2005, REQUIREMENTS ENG SOC, P226
   Garrido JL, 2007, SCI COMPUT PROGRAM, V66, P25, DOI 10.1016/j.scico.2006.10.008
   Gasevic D., 2007, International Journal on Software Tools for Technology Transfer, V9, P103, DOI 10.1007/s10009-006-0002-1
   Gasevic D, 2006, KNOWL-BASED SYST, V19, P220, DOI 10.1016/j.knosys.2005.12.003
   Green P, 2007, DATA KNOWL ENG, V62, P274, DOI 10.1016/j.datak.2006.08.004
   GROSSO W, 2005, PROTEGE AXIOM LANGUA
   Guarino N, 1998, FR ART INT, V46, P3
   Horrocks I., 1999, Logic for Programming and Automated Reasoning. 6th International Conference, LPAR'99. Proceedings (Lecture Notes in Artificial Intelligence Vol.1705), P161, DOI 10.1007/3-540-48242-3_11
   HORROCKS I, 2001, P 17 INT JOINT C ART, P199
   Jaekel FW, 2005, LECT NOTES COMPUT SC, V3762, P552
   Jensen Kurt, 2007, International Journal on Software Tools for Technology Transfer, V9, P213, DOI 10.1007/s10009-007-0038-x
   Jonkers H, 2004, INT J COOP INF SYST, V13, P257, DOI 10.1142/S0218843004000985
   KATZ Y, 2005, P WORKSH OWL EXP DIR
   Knublauch H, 2004, LECT NOTES COMPUT SC, V3298, P229
   Kristensen LM, 2004, LECT NOTES COMPUT SC, V3098, P626, DOI 10.1007/978-3-540-27755-2_18
   Lange CFJ, 2006, IEEE SOFTWARE, V23, P40, DOI 10.1109/MS.2006.50
   Lera I, 2006, SCI COMPUT PROGRAM, V61, P27, DOI 10.1016/j.scico.2005.11.003
   Martinez J., 1982, Informatik-Fachbrichte, V52, P301
   MOTIK B, 2008, P 17 INT C WORLD WID, P255
   Noguera M, 2006, LECT NOTES COMPUT SC, V4277, P863
   OASIS, 2007, Web Services Business Process Execution Language Version 2.0
   Object Management Group (OMG), OCL 2 0 SPEC VERS 2
   *OMG, ONT DEF MET OMG AD
   *OMG, MET OBJ FAC MOF COR
   *OMG, 2007, UN MOD LANG SUP VERS
   OSOA, 2007, SCA SERV COMP ARCH A
   Ouyang C, 2007, SCI COMPUT PROGRAM, V67, P162, DOI 10.1016/j.scico.2007.03.002
   Pahl C, 2005, LECT NOTES COMPUT SC, V3748, P88
   RUSSELL N, 2006, APCCM 06, V53, P95
   van der Aalst WMP, 2008, INFORM SOFTWARE TECH, V50, P131, DOI 10.1016/j.infsof.2006.11.004
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
   van der Aalst WMP, 1997, LECT NOTES COMPUT SC, V1248, P407
   Van der Aalst WMP, 2001, INT J COOP INF SYST, V10, P443, DOI 10.1142/S0218843001000412
   VANDERAALST WMP, 2007, INT C ENT INF SYST I, P12
   W3C, 2004, SEM WEB RUL LANG COM
   *W3C, 2004, OWL S SEM MARK WEB S
   W3C, 2004, SWRL SEM WEB RUL LAN
   *W3C, 2004, OWL WEB ONT LANG GUI
   *W3C, 2004, OWL WEB ONT LANG REF
   XI K, 1988, P 1 INT WORKSH SOFT, P70
   JAMBALAYA 2 6 0
   SCRIPTRULES
   DESIGN CPN
NR 69
TC 22
Z9 23
U1 0
U2 22
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2010
VL 75
IS 8
SI SI
BP 726
EP 760
DI 10.1016/j.scico.2009.05.002
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 620YD
UT WOS:000279538200004
OA Bronze
DA 2024-07-18
ER

PT J
AU D'Ambros, M
   Lanza, M
AF D'Ambros, Marco
   Lanza, Michele
TI Distributed and Collaborative Software Evolution Analysis with Churrasco
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software evolution analysis; Collaboration; Visualization
AB Analyzing the evolution of large and long-lived software systems is a complex problem that requires extensive tool support due to the amount and complexity of the data that needs to be processed. In this paper, we present Churrasco, a tool to support collaborative software evolution analysis through a web interface. After describing the tool and its architecture, we provide a usage scenario of Churrasco on a large open source software system, and we present two collaboration experiments performed with, respectively, 8 and 4 participants. (C) 2009 Elsevier B.V. All rights reserved.
C1 [D'Ambros, Marco; Lanza, Michele] Univ Lugano, REVEAL, Fac Informat, Lugano, Switzerland.
C3 Universita della Svizzera Italiana
RP D'Ambros, M (corresponding author), Univ Lugano, REVEAL, Fac Informat, Lugano, Switzerland.
EM marco.dambros@usi.ch; michele.lanza@usi.ch
RI Lanza, Michele/JNQ-9470-2023
OI Lanza, Michele/0000-0003-4391-0197
FU Swiss National Science foundation [118063]
FX We gratefully acknowledge the financial support of the Swiss National
   Science foundation for the project "DiCoSA" (SNF Project No. 118063).
CR Beyer D, 2006, WORK CONF REVERSE EN, P199
   Cubranic D, 2003, PROC INT CONF SOFTW, P408, DOI 10.1109/ICSE.2003.1201219
   D'Ambros M, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P3
   D'Ambros M, 2007, 4TH IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEDINGS, P113, DOI 10.1109/VISSOF.2007.4290709
   D'Ambros M, 2006, WORK CONF REVERSE EN, P189
   D'Ambros Marco., 2006, MINING SOFTWARE REPO, P26, DOI DOI 10.1145/1137983.1137992
   DAMBROS M, 2007, P 1 WORKSH FAMIX MOO
   Demeyer S., 2001, FAMIX 2 1 FAMOOS INF
   DUCASSE S, 2005, P ESEC FSE 2005 SEPT, P99
   Ducasse S, 2007, IEEE SOFTWARE, V24, P56, DOI 10.1109/MS.2007.144
   DUCASSE TS, 2000, P ICSE 2000 WORKSH S
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Frost R, 2007, IEEE SOFTWARE, V24, P114, DOI 10.1109/MS.2007.170
   Kim S, 2006, 2006 IEEE WORKSHOP ON MULTIMEDIA SIGNAL PROCESSING, P225
   KNIGHT A, 2000, P OOPSL 2000 MINN MI, P173
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Lungu M, 2007, 14TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P120, DOI 10.1109/WCRE.2007.46
   Mancoridis S, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P221, DOI 10.1109/WCRE.2001.957826
   Meyer M., 2006, Proceedings of the 2006 ACM symposium on Software visualization, P135, DOI DOI 10.1145/1148493.1148513
   Nentwich C, 2000, SOFTWARE PRACT EXPER, V30, P1661, DOI 10.1002/1097-024X(200012)30:15<1661::AID-SPE353>3.0.CO;2-O
   PRIMI M, 2007, THESIS U LUGANO
NR 21
TC 9
Z9 10
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2010
VL 75
IS 4
BP 276
EP 287
DI 10.1016/j.scico.2009.07.005
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 580QR
UT WOS:000276464800007
DA 2024-07-18
ER

PT J
AU Fraikin, B
   Frappier, M
AF Fraikin, Benoit
   Frappier, Marc
TI Efficient symbolic computation of process expressions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'06)
CY AUG 31, 2006
CL Bonn, GERMANY
DE Trace-based specifications; Black-box specifications; Process algebra;
   Information systems; Symbolic computation; Interpreter
ID PROCESS ALGEBRA; SPECIFICATION
AB This paper describes three optimization techniques for the EB3 process algebra. The optimizations are expressed in a new deterministic operational semantics which is shown to be trace-equivalent to a traditional non-deterministic operational semantics. Internal action transitions are eliminated by an efficient preruntime analysis of the structure of a process expression. Execution environments are used to optimize variable instantiation using lazy evaluation. Non-determinism is eliminated by returning a choice between possible transitions. This new operational semantics is implemented in the EB3 PAI process algebra interpreter to support the EB3 method. The goal of this method is to automate the development of information systems using, among other mechanisms, efficient symbolic computation of process expressions. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Fraikin, Benoit; Frappier, Marc] Univ Sherbrooke, Dept Informat, GRIL, Sherbrooke, PQ J1K 2R1, Canada.
C3 University of Sherbrooke
RP Fraikin, B (corresponding author), Univ Sherbrooke, Dept Informat, GRIL, Sherbrooke, PQ J1K 2R1, Canada.
EM benoit.fraikin@USherbrooke.CA
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], 1997, Elements of the Theory of Computation
   [Anonymous], 1998, The theory and practice of concurrency
   [Anonymous], 1989, Modern structured analysis
   BAETEN JCM, 1994, 95 NASA STI REC, P340
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   BOLOGNESI T, 1987, COMPUT NETWORKS ISDN, V14, P25, DOI 10.1016/0169-7552(87)90085-7
   Butler M, 2005, LECT NOTES COMPUT SC, V3582, P221
   Butler M., 2000, Formal Aspects of Computing, V12, P182, DOI 10.1007/PL00003930
   CAMERON J, 1989, JSP JSD JACKSON APPR
   FISCHER C, 2000, THESIS U OLDENBURG O
   *FORM SYST EUR LTD, 2003, PROC BEH EXPL PROBE
   Formal Systems (Europe) Ltd, 2005, FAIL DIV REF FDR2 US
   Fraikin B., 2005, Software and Systems Modeling, V4, P236
   FRAIKIN B, 2006, THESIS U SHERBROOKE
   FRAIKIN B, 2007, 1 INT C RES CHALL IN, P12
   Fraikin B, 2007, LECT NOTES COMPUT SC, V4789, P327
   Frappier M, 2008, INNOV SYST SOFTW ENG, V4, P285, DOI 10.1007/s11334-008-0064-1
   FRAPPIER Marc., 2003, Software and Systems Modeling, V2, P134, DOI DOI 10.1007/S10270-003-0024-Z
   FREITAS A, 2005, THESIS U YORK
   Freitas A, 2006, LECT NOTES COMPUT SC, V4085, P115
   Freitas L, 2002, THESIS U FEDERAL PER
   FREITAS L, 2002, P 16 BRAZ S SOFTW EN
   Garavel H., 2002, EASST NEWSLETTER, V4, P13
   Gervais F, 2005, LECT NOTES COMPUT SC, V3771, P207
   Gervais F, 2005, SEFM 2005: Third IEEE International Conference on Software Engineering and Formal Methods, Proceedings, P117, DOI 10.1109/SEFM.2005.23
   Groote J.F., 1995, ALGEBRA COMMUNICATIN, P26, DOI DOI 10.1007/978-1-4471-2120-6_2
   Hoare CAR., 1985, Communicating Sequential Processes
   Jackson Michael., 1983, SYSTEM DEV
   Jones C., 2005, CROSSTALK J DEFENSE, P8
   Leffingwell D., 2003, Managing Software Requirements: A Use Case Approach
   LEUSCHEL M, 2004, LECT NOTES COMPUTER, V1990, P14
   Magee J., 2006, CONCURRENCY
   MILHAU J, 2009, LECT NOTES COMPUTER
   Milner Robin., 1989, INT SERIES COMPUTER
   MOLLER F, EDINBURGH CONCURRENC
   *OBJ MAN GROUP, UN MOD LANG
   OLIVEIRA M, 2005, THESIS U YORK UK
   SCHNEIDER S, 2002, LNCS, V2272, P416
   TERRILLON JG, 2005, THESIS U SHERBROOKE
   WELCH PH, 2002, P GLOB COLL COMP WOR
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   WOODCOCK J, 2002, LECT NOTES COMPUTER, V2272, P184, DOI DOI 10.1007/3-540-45648-1_
   WOOTERS AG, 2001, SENR0130 CWI
   [No title captured]
NR 45
TC 2
Z9 4
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2009
VL 74
IS 9
SI SI
BP 723
EP 753
DI 10.1016/j.scico.2009.02.002
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 462TT
UT WOS:000267380200005
DA 2024-07-18
ER

PT J
AU Abel, A
AF Abel, Andreas
TI Type-based termination of generic programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Mathematics of Program Construction
CY JUL 03-05, 2006
CL Kuressaare, ESTONIA
SP Estonian Minist Educ & Res, Natl Ctr Excellence Programme
DE Functional programming; Polytypic programming; Recursion; Sized type;
   Type-indexed type
ID HIGHER-ORDER; HASKELL
AB Instances of a polytypic or generic program for a concrete recursive type often exhibit a recursion scheme that is derived from the recursion scheme of the instantiation type. In practice, the programs obtained from a generic program are usually terminating, but the proof of termination cannot be carried out with traditional methods as term orderings alone. since termination often crucially relies on the program type. In this article, it is demonstrated that type-based termination using sized types handles such programs very well. A framework for sized polytypic programming is developed which ensures (type-based) termination of all instances. (C) 2009 Elsevier B.V. All rights reserved.
C1 Univ Munich, Inst Informat, D-80538 Munich, Germany.
C3 University of Munich
RP Abel, A (corresponding author), Univ Munich, Inst Informat, Oettingenstr 67, D-80538 Munich, Germany.
EM abel@informatik.uni-muenchen.de
CR Abel A, 2005, THEOR COMPUT SCI, V333, P3, DOI 10.1016/j.tcs.2004.10.017
   Abel A, 2006, LECT NOTES COMPUT SC, V4014, P10, DOI 10.1007/11783596_4
   Abel A, 2006, LECT NOTES COMPUT SC, V4207, P72
   Altenkirch T, 1999, LECT NOTES COMPUT SC, V1683, P453
   ALTENKIRCH T, 2003, IFIP C P, V273, P1
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   Barthe G, 2005, LECT NOTES COMPUT SC, V3461, P71
   Benke M., 2003, Nordic Journal of Computing, V10, P265
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   Blanqui F, 2005, LECT NOTES COMPUT SC, V3634, P135, DOI 10.1007/11538363_11
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P301, DOI 10.1145/291251.289459
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   Giesl R, 2004, LECT NOTES COMPUT SC, V3091, P210
   Giménez E, 1998, LECT NOTES COMPUT SC, V1443, P397, DOI 10.1007/BFb0055070
   HARPER R, 1995, 22 ACM S PRINC PROGR, P130
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P1
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P57
   Hinze R, 2004, SCI COMPUT PROGRAM, V51, P117, DOI 10.1016/j.scico.2003.07.001
   Hinze R, 2002, SCI COMPUT PROGRAM, V43, P129, DOI 10.1016/S0167-6423(02)00025-4
   HINZE R, 2000, J FUNCTIONAL PROGRAM, V10, P327
   Hinze Ralf., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, POPL '00, P119, DOI [DOI 10.1145/325694.325709, 10.1145/325694.325709]
   HUGHES J, 1996, 23 ANN ACM S PRINC P, P410
   INRIA, 2007, COQ PROOF ASS VERS 8
   JANSSON P, 1997, 24 ACM SIGPLAN SIGAC, P470
   Mendler N. P., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P30
   Norell U, 2004, LECT NOTES COMPUT SC, V3145, P168
   Norell U, 2004, LECT NOTES COMPUT SC, V3125, P314
   NORELL U, 2002, THESIS CHALMERS U TE
   Okasaki C, 1999, ACM SIGPLAN NOTICES, V34, P28, DOI 10.1145/317765.317781
   Pareto Lars, 2000, Ph. D. Dissertation
   Pfeifer H, 1999, LECT NOTES COMPUT SC, V1690, P55
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Saha B, 2003, ACM T PROGR LANG SYS, V25, P159, DOI 10.1145/641888.641889
   Sereni D, 2005, LECT NOTES COMPUT SC, V3780, P281
NR 34
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2009
VL 74
IS 8
SI SI
BP 550
EP 567
DI 10.1016/j.scico.2008.01.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 454GZ
UT WOS:000266671700004
DA 2024-07-18
ER

PT J
AU Cockett, JRB
   Pastro, C
AF Cockett, J. R. B.
   Pastro, Craig
TI The logic of message-passing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Mathematics of Program Construction
CY JUL 03-05, 2006
CL Kuressaare, ESTONIA
SP Estonian Minist Educ & Res, Natl Ctr Excellence Programme
DE Message passing; Concurrency; Process semantics; Linear logic; Term
   logic; Multicategory; Polycategory; Linear distributive category;
   Poly-actegory; Linear actegory
ID WEAKLY DISTRIBUTIVE CATEGORIES; LINEAR LOGIC; MOBILE PROCESSES; CALCULUS
AB Message-passing is a key ingredient of concurrent programming. The purpose of this paper is to describe the equivalence between the proof theory, the categorical semantics, and term calculus of message-passing. In order to achieve this we introduce the categorical notion of a linear actegory and the related polycategorical notion of a poly-actegory. Not surprisingly the notation used for the term calculus borrows heavily from the (synchronous) pi-calculus. The cut-elimination procedure for the system provides an operational semantics. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Cockett, J. R. B.] Univ Calgary, Dept Comp Sci, Calgary, AB T2N 1N4, Canada.
   [Pastro, Craig] Macquarie Univ, Dept Math, N Ryde, NSW 2109, Australia.
C3 University of Calgary; Macquarie University
RP Cockett, JRB (corresponding author), Univ Calgary, Dept Comp Sci, 2500 Univ Dr NW, Calgary, AB T2N 1N4, Canada.
EM robin@cpsc.ucalgary.ca; craig@maths.mq.edu.au
CR ABRAMSKY S, 1993, THEOR COMPUT SCI, V111, P3, DOI 10.1016/0304-3975(93)90181-R
   Abramsky S., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P431, DOI 10.1109/LICS.1999.782638
   ABRAMSKY S, 1996, LECT NOTES COMPUT SC, V1043, P5
   ABRAMSKY S, 1993, P 1 IMP COLL DEP COM, P57
   ABRAMSKY S, 1994, CLASSICAL MIND ESSAY, P1
   [Anonymous], 1984, Studies in Logic
   [Anonymous], 1969, CATEGORY THEORY HOMO, DOI DOI 10.1007/BFB0079385
   Barber A, 1998, LECT NOTES COMPUT SC, V1414, P78, DOI 10.1007/BFb0028008
   BELLIN G, 1994, THEOR COMPUT SCI, V135, P11, DOI 10.1016/0304-3975(94)00104-9
   Benton PN, 1995, LECT NOTES COMPUT SC, V933, P121, DOI 10.1007/BFb0022251
   Blute RF, 1996, J PURE APPL ALGEBRA, V113, P229, DOI 10.1016/0022-4049(95)00159-X
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Cockett JRB, 2005, ELECTRON NOTES THEOR, V122, P23, DOI 10.1016/j.entcs.2004.06.049
   Cockett J.R.B., 2003, THEOR APPL CATEG, V11, P15
   Cockett JRB, 1997, J PURE APPL ALGEBRA, V114, P133, DOI 10.1016/0022-4049(95)00160-3
   Hermida C, 2000, ADV MATH, V151, P164, DOI 10.1006/aima.1999.1877
   Hughes D. J. D., 2005, ACM Transactions on Computational Logic, V6, P784, DOI 10.1145/1094622.1094629
   JAY CB, 1989, J PURE APPL ALGEBRA, V59, P61, DOI 10.1016/0022-4049(89)90163-1
   Mackie I., 1993, Applied Categorical Structures, V1, P311, DOI 10.1007/BF00873993
   McCrudden P., 1999, Ph.D. thesis
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   MILNER R, 1992, INFORM COMPUT, V100, P41, DOI 10.1016/0890-5401(92)90009-5
   PASTRO C, 2004, THESIS U CALGARY
NR 23
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2009
VL 74
IS 8
SI SI
BP 498
EP 533
DI 10.1016/j.scico.2007.11.005
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 454GZ
UT WOS:000266671700002
DA 2024-07-18
ER

PT J
AU Chen, ZB
   Liu, ZM
   Ravn, AP
   Stolz, V
   Zhan, NJ
AF Chen, Zhenbang
   Liu, Zhiming
   Ravn, Anders P.
   Stolz, Volker
   Zhan, Naijun
TI Refinement and verification in component-based model-driven design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; Multi-view modelling; rCOS; Software design process;
   Tool design; UML
ID RCOS
AB Modern software development is complex as it has to deal with many different and yet related aspects of applications. In practical software engineering this is now handled by a UML-like modelling approach in which different aspects are modelled by different notations. Component-based and object-oriented design techniques are found effective in the support of separation of correctness concerns of different aspects. These techniques are practised in a model-driven development process in which models are constructed in each phase of the development. To ensure the correctness of the software system developed, all models constructed in each phase are verifiable. This requires that the modelling notations are formally defined and related in order to have tool support developed for the integration of sophisticated checkers, generators and transformations. This paper summarises our research on the method of Refinement of Component and Object Systems (rCOS) and illustrates it with experiences from the work on the Common Component Modelling Example (CoCoME). This gives evidence that the formal techniques developed in rCOS can be integrated into a model-driven development process and shows where it may be integrated in computer-aided software engineering (CASE) tools for adding formally supported checking, transformation and generation facilities. (C) 2009 Published by Elsevier B.V.
C1 [Chen, Zhenbang; Liu, Zhiming; Stolz, Volker] UNU, IIST, Macao, Peoples R China.
   [Ravn, Anders P.] Univ Aalborg, Dept Comp Sci, Aalborg, Denmark.
   [Zhan, Naijun] CAS, Inst Software, Comp Sci Lab, Beijing, Peoples R China.
   [Chen, Zhenbang] Natl Lab Parallel & Distributed Proc, Changsha, Hunan, Peoples R China.
C3 Aalborg University; Chinese Academy of Sciences; Institute of Software,
   CAS; National University of Defense Technology - China
RP Liu, ZM (corresponding author), UNU, IIST, POB 3058, Macao, Peoples R China.
EM z.liu@iist.unu.edu
FU Macau Science and Technology Fund [NFSC-90718014, NSFC-60673114,
   2006AA01Z165]; National Basic Research Program of China (973)
   [2005CB321802]; NSFC [90612009]
FX We would like to thank the anonymous referees for their very
   constructive and detailed comments that helped us a lot to bring this
   paper into this form. This work is Supported in part by the projects
   HighQSoftD and HTTS funded by the Macau Science and Technology Fund,
   NFSC-90718014, NSFC-60673114 and 863 of China 2006AA01Z165. The
   firstauthor is partially Supported by the National Basic Research
   Program of China (973) under Grant No. 2005CB321802 and NSFC under Grant
   No. 90612009. We would like to thank our colleagues who have made
   contributions in the development of rCOS and CoCoIVIE, lie Jifeng,
   Xiaoshan Li, Charles Morisset, E-Y Kang,jing Liu, Chen Xin, Zhact Liang,
   Liu Yang, and Joseph Okika.
CR [Anonymous], 2005, UN MOD LANG SUP VERS
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], 1980, Lecture Notes in Computer Science
   [Anonymous], MOF QVT FIN AD SPEC
   [Anonymous], 2000, RATIONAL UNIFIED PRO
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Back Ralph-Johan, 1998, GRADUATE TEXTS COMPU
   BACK RJ, 1999, TUCSTR279 TURK CTR C
   BACK RJ, 1994, LECT NOTES COMPUTER, V836
   BARNETT M, 2005, LECT NOTES COMPUTER, V3362
   Borba P, 2003, LECT NOTES COMPUT SC, V2743, P457
   Cavalcanti A., 2003, Formal Aspects of Computing, V15, P146, DOI 10.1007/s00165-003-0006-5
   Cavalcanti A, 1999, LECT NOTES COMPUT SC, V1709, P1439
   CHALIN P, 2005, LECT NOTES COMPUTER, V4111
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Chen X., 2007, LECT NOTES COMPUTER, V4362
   Chen X., 2007, LECT NOTES COMPUTER, V4767
   CHEN Z, 2007, COCOME, P116, DOI DOI 10.1007/978-3-540-85289-6_6
   Chen Z., 2008, MODELLING ANAL VDM
   Chen Z.B., 2007, 388 UNUIIST
   Chen ZB, 2007, LECT NOTES COMPUT SC, V4700, P83
   DURR E, 1993, LECT NOTES COMPUTER, V670
   Flanagan C., 2002, P ACM SIGPLAN 2002 C
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   GAMMA E, 1995, DESIGN PATTERNS
   Gosling James, 1996, The Java Language Specification
   HE J, 2005, LECT NOTES COMPUTER, V3722
   HE J, 2006, INT WORKSH FORM ASP, V160
   He JF, 2006, THEOR COMPUT SCI, V365, P109, DOI 10.1016/j.tcs.2006.07.034
   HOARE C, 2007, LECT NOTES COMPUTER, V4171, P21
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Hoare CAR., 1985, Communicating Sequential Processes
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Larman C., 2001, APPL UML PATTERNS
   LARSEN KG, 1997, SOFTWARE TOOLS TECHN, V1, P134
   Leavens Gary T., 2006, LECT NOTES COMPUTER, V4260, P2
   Li XS, 2008, ELECTRON NOTES THEOR, V207, P17, DOI 10.1016/j.entcs.2008.03.083
   Liu Z, 2006, P 2 INT S LEV APPL F, P371
   MAHONY B, 2002, FORM ASP COMPUT, V3, P146
   Meyer B., 1992, Eiffel: The Language
   Morgan Carroll, 1994, Programming from specifications
   *OBJ MAN GROUP, 2005, XML MET INT
   Olderog ER, 2005, SCI COMPUT PROGRAM, V55, P227, DOI 10.1016/j.scico.2004.05.017
   Plasil F, 2002, IEEE T SOFTWARE ENG, V28, P1056, DOI 10.1109/TSE.2002.1049404
   RAUSCH A, 2008, LECT NOTES COMPUTER, V5153
   Rumbaugh J., 1999, UNIFIED MODELLING LA, V1st
   SCHNEIDER A, 2001, B METHOD
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   *TOPC, TOPC OP SOURC ENG WO
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   WOODCOCK JCP, 1990, LECT NOTES COMPUTER, V428
   YANG L, 2006, P AS WORK C VER SOFT
   Yang L, 2008, ELECTRON NOTES THEOR, V207, P69, DOI 10.1016/j.entcs.2008.03.086
   ZHAO L, FORMAL ASPECTS COMPU
   CONCURRENCY WORKBENC
NR 56
TC 24
Z9 26
U1 0
U2 14
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2009
VL 74
IS 4
BP 168
EP 196
DI 10.1016/j.scico.2008.08.003
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 410ZK
UT WOS:000263616600002
DA 2024-07-18
ER

PT J
AU Schellekens, D
   Wyseur, B
   Preneel, B
AF Schellekens, Dries
   Wyseur, Brecht
   Preneel, Bart
TI Remote attestation on legacy operating systems with trusted platform
   modules
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Remote software authentication; Attestation; Trusted platform module;
   Timed execution
AB A lot of progress has been made to secure network communication, e.g., through the use of cryptographic algorithms. However, this offers only a partial solution as long as the communicating end points still suffer from security problems. A number or applications require remote verification of software executing on an untrusted platform. Trusted computing solutions propose to solve this problem through software and hardware changes, typically a secure operating system and the addition of a secure coprocessor, respectively. On the other hand, timed execution of code checksum Calculations aims for a solution on legacy platforms, but can not provide strong security assurance. We present a mixed solution by using the trusted computing hardware, namely the time stamping functionality of the Trusted Platform Module (TPM), in combination with a timing-based remote code integrity verification mechanism. In this way, the overall security of the timed execution scheme can be improved without requiring a secure operating system. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Schellekens, Dries] Katholieke Univ Leuven, Dept ESAT SCD COSIC, B-3001 Heverlee, Belgium.
C3 KU Leuven
RP Schellekens, D (corresponding author), Katholieke Univ Leuven, Dept ESAT SCD COSIC, Kasteelpk Arenberg 10, B-3001 Heverlee, Belgium.
EM dries.schellekens@esat.kuleuven.be
RI Preneel, Bart/O-3798-2016
FU Belgian State (Belgian Science Policy); FWO [G.0300.07]; European
   Commission [IST-027635 OPEN_TC, IST-021186 RE-TRUST]
FX This work was supported in part by the IAP Programme P6/26 BCRYPT of the
   Belgian State (Belgian Science Policy), by the FWO project G.0300.07
   (Security components for trusted computer systems), and in part by the
   European Commission through the IST Programme under Contract IST-027635
   OPEN_TC and IST-021186 RE-TRUST.
CR [Anonymous], 3 VIRT MACH RES TECH
   [Anonymous], NETW DISTR SYST SEC
   AUCSMITH D, 1996, LECT NOTES COMPUTER, V1174
   BALACHEFF B, 2002, TRUSTED COMPUTING PL
   BRICKELL EF, 2004, 11 ACM C COMP COMM S
   CECCATO M, 2007, 7 IEEE INT WORK C SO
   DVIR O, 2005, 25 INT C DISTR COMP
   England P, 2003, COMPUTER, V36, P55, DOI 10.1109/MC.2003.1212691
   GARAY JA, 2006, 2006 ACM S INF COMP
   GARFINKEL T, 2003, 19 S OP SYST PRINC O
   GIFFIN JT, 2005, 21 ANN COMP SEC APPL
   Grawrock D., 2006, INTEL SAFER COMPUTIN
   KAUER B, 2007, 16 USENIX SEC S AUG
   KENNELL R, 2003, 12 USENIX SEC S AUG
   KUHN U, 2007, 2007 ACM WORKSH SCAL
   MCCUNE JM, 2008, ACM EUR C COMP SYST
   PEINADO M, 2004, LECT NOTES COMPUTER, V3108
   SADEGHI AR, 2004, NEW SEC PAR WORKSH 2
   SADEGHI AR, 2006, 1 ACM WORKSH SCAL TR
   SAILER R, 2004, 13 USENIX SEC S AUG
   SESHADRI A, 2004, 2004 IEEE S SEC PRIV
   SESHADRI A, 2005, 20 ACM S OP SYST PRI
   Seshadri A, 2006, COMMUN ACM, V49, P45, DOI 10.1145/1151030.1151054
   SHANKAR U, 2004, 13 USENIX SEC S AUG
   SHI E, 2005, 2005 IEEE S SEC PRIV
   TAN G, 2006, LNCS, V4437
   van Oorschot PC, 2005, IEEE T DEPEND SECURE, V2, P82, DOI 10.1109/TDSC.2005.24
   WURSTER G, 2005, 2005 IEEE S SEC PRIV
   ZHANG X, 2003, 1 IEEE ACM INT S COD
NR 29
TC 35
Z9 48
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2008
VL 74
IS 1-2
SI SI
BP 13
EP 22
DI 10.1016/j.scico.2008.09.005
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 386PX
UT WOS:000261896200003
OA Green Published
DA 2024-07-18
ER

PT J
AU Christoph, A
   Müller, MM
AF Christoph, Alexander
   Mueller, Matthias M.
TI GREAT: UML transformation tool for porting middleware applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Model Driven Architecture - Foundations and Applications
CY JUN 26-27, 2003
CL Univ Twente, Enschede, NETHERLANDS
HO Univ Twente
DE Model driven architecture; Software process; Middleware
AB Design and maintenance of enterprize applications is complicated due to dependencies on technical requirements of the middleware framework. Especially, porting enterprise applications to another middleware layer or even new versions thereof requires a lot of handiwork and coding, since abstraction-, transformation-, and refinement steps have to be performed. Transformations should be assisted by a tool set which facilitates the migration process from one to another middleware platform. This paper presents GREAT, a rule-based transformation framework which facilitates transformations among models on the same or different abstraction levels. The feasibility of GREAT is shown by the transformation of a real world application conforming to EJB standard 1.1 into a version which complies to EJB standard 2.0. (C) 2008 Published by Elsevier B.V.
C1 [Christoph, Alexander] FZI, D-76131 Karlsruhe, Germany.
   [Mueller, Matthias M.] Univ Karlsruhe, Fak Informat, D-76128 Karlsruhe, Germany.
C3 Helmholtz Association; Karlsruhe Institute of Technology
RP Christoph, A (corresponding author), FZI, Haid & Neu St 10-14, D-76131 Karlsruhe, Germany.
EM christo@fzi.de; muellerm@ira.uka.de
RI Müller, Matthias M/A-1055-2017
CR *ALC SOFT THAL TNI, 2003, AD030325 OMG ALC SOF
   Assmann U, 2000, ACM T PROGR LANG SYS, V22, P583, DOI 10.1145/363911.363914
   ASSMANN U, 1994, LECT NOTES COMPUTER, V1073
   ASSMANN U, 2000, GENERATIVE COMPONENT
   Christoph A, 2003, LECT NOTES COMPUT SC, V2591, P76
   *COD TECHN CORP, 2003, AD030323 COD TECHN C
   *COMP CORP SUN MIC, 2003, AD030324 COMP CORP S
   *DSTC IBM, 2003, AD030203 DSTC IBM OM
   Frankel D.S., 2003, Model Driven Architecture: Applying MDA to Enterprise Computing
   *K CART LTD, 2003, AD030311 K CART LTD
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   LUNDBERG J, 2003, ELECT NOTES THEORETI, V82
   *MICR, 2002, DEF BAS EL NET
   *OBJ MAN GROUP, 2000, OMG XML MET INT XMI
   *OBJ MAN GROUP, 1997, UML VERS 1 1
   ORFALI R, 1998, INSTANT CORBA
   *SUN MICR, 2001, JAV 2 ENT ED J2EE PL
   Wai Ming Ho, 1999, 14th IEEE International Conference on Automated Software Engineering, P275, DOI 10.1109/ASE.1999.802320
   [No title captured]
NR 19
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2008
VL 73
IS 1
SI SI
BP 3
EP 12
DI 10.1016/j.scico.2008.05.002
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 357ZH
UT WOS:000259885400002
OA hybrid
DA 2024-07-18
ER

PT J
AU Flanagan, C
   Freund, SN
AF Flanagan, Cormac
   Freund, Stephen N.
TI Type inference against races
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Static Analysis Symposium (SAS 2004)
CY AUG 26-28, 2004
CL Verona, ITALY
DE type systems; type inference; race conditions
AB The race condition checker rccjava uses a formal type system to statically identify potential race conditions in concurrent Java programs, but it requires programmer-supplied type annotations. This paper describes a type inference algorithm for rccjava. Due to the interaction of parameterized classes and dependent types, this type inference problem is NP-complete. This complexity result motivates our new approach to type inference, which is via reduction to propositional satisfiability. This paper describes our type inference algorithm and its performance on programs of up to 30,000 lines of code. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
   Williams Coll, Dept Comp Sci, Williamstown, MA 01267 USA.
C3 University of California System; University of California Santa Cruz;
   Williams College
RP Flanagan, C (corresponding author), Univ Calif Santa Cruz, Dept Comp Sci, Santa Cruz, CA 95064 USA.
EM cormac@cs.ucsc.edu
CR ABADI M, 2006, ACM T PROGRAMMING LA, V28
   Agarwal R, 2004, LECT NOTES COMPUT SC, V2937, P149
   Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   ALDRICH J, 2002, P ACM C OBJ OR PROGR, P311
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], ACM SIGPLAN S PRINC
   [Anonymous], S THEOR APPL SATIS F
   Bogda J, 1999, ACM SIGPLAN NOTICES, V34, P35, DOI 10.1145/320385.320388
   BOYAPATI C, 2001, P ACM C OBJ OR PROGR, P56
   CARDELLI L, 1988, LECT NOTES COMPUT SC, V306, P45
   Chamillard A. T., 1996, 96084 U MASS AMH DEP
   Choi J.-D., 2002, PROGRAMMING LANGUAGE, P258
   Corbett JC, 1996, IEEE T SOFTWARE ENG, V22, P161, DOI 10.1109/32.489078
   Dwyer MB, 2004, FORM METHOD SYST DES, V25, P199, DOI 10.1023/B:FORM.0000040028.49845.67
   DWYER MB, 1994, 94045 U MASS AMH DEP
   ENGLER D, 2003, ACM S OP SYST PRINC, P237
   Fajstrup L, 1998, LECT NOTES COMPUT SC, V1466, P332, DOI 10.1007/BFb0055632
   FLANAGAN C, 2003, P 2003 ACM SIGPLAN I, P1
   FLANAGAN C, 2000, STAT AN S, P116
   FLANAGAN C, 2001, P WORKSH PROGR AN SO, P90, DOI DOI 10.1145/379605.379687
   Flanagan Cormac., 2004, POPL 04, P256
   Flanagan Cormac., 2003, Pro- ceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, PLDI '03, P338
   GROSSMAN D, 2003, P ACM SIGPLAN INT WO, P13
   Haack C, 2003, LECT NOTES COMPUT SC, V2618, P284
   HEINE D.L., 2003, A practical flow-sensitive and context-sensitive c and c++ memory leak detector, P168
   Kobayashi N, 1998, ACM T PROGR LANG SYS, V20, P436, DOI 10.1145/276393.278524
   LAMPORT L, 1979, IEEE T COMPUT, V28, P690, DOI 10.1109/TC.1979.1675439
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Stoller S. D., 2002, International Journal on Software Tools for Technology Transfer, V4, P71, DOI 10.1007/s10009-002-0077-2
   Stoller SD, 2003, LECT NOTES COMPUT SC, V2619, P489
   Talpin J.-P., 1992, Journal of Functional Programming, V2, P245, DOI 10.1017/S0956796800000393
   Tofte M., 1994, Conference Record of POPL '94: 21st ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P188, DOI 10.1145/174675.177855
   von Praun Christoph., 2003, Proceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation (PLDI '03), P115
   VONPRAUN C, 2001, P ACM C OBJ OR PROGR, P70
   Wand Mitchell, 1986, POPL, P38, DOI [DOI 10.1145/512644.512648, 10.1145/512644.512648]
   Yahav E, 2001, ACM SIGPLAN NOTICES, V36, P27, DOI 10.1145/373243.360206
   Yang Jun, 2000, P 12 INT WORKSH IMPL, P71
   [No title captured]
NR 40
TC 9
Z9 8
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2007
VL 64
IS 1
BP 140
EP 165
DI 10.1016/j.scico.2006.03.006
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 118ES
UT WOS:000242925700008
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Müller, P
   Poetzsch-Heffter, A
   Leavens, GT
AF Muller, Peter
   Poetzsch-Heffter, Arnd
   Leavens, Gary T.
TI Modular invariants for layered object structures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE invariant; object-oriented programming; modular verification; ownership;
   visibility; JML
ID VERIFICATION
AB Classical specification and verification techniques support invariants for individual objects whose fields are primitive values, but do not allow sound modular reasoning about invariants involving more complex object structures. Such non-trivial object structures are common, and occur in lists, hash tables, and whenever systems are built in layers. A sound and modular verification technique for layered object structures has to deal with the well-known problem of representation exposure and the problem that invariants of higher layers are potentially violated by methods in lower layers; such methods cannot be modularly shown to preserve these invariants. We generalize classical techniques to cover layered object structures using a refined semantics for invariants based on an ownership model for alias control. This semantics enables sound and modular reasoning. We further extend this ownership technique to even more expressive invariants that gain their modularity by imposing certain visibility requirements. (c) 2006 Elsevier B.V. All rights reserved.
C1 ETH, ETH Zentrum, CH-8092 Zurich, Switzerland.
   Tech Univ Kaiserslautern, Kaiserslautern, Germany.
   Iowa State Univ, Ames, IA USA.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   Kaiserslautern; Iowa State University
RP Müller, P (corresponding author), ETH, ETH Zentrum, RZ F2, CH-8092 Zurich, Switzerland.
EM peter.mueller@inf.ethz.ch; poetzsch@informatik.uni-kl.de;
   leavens@cs.iastate.edu
CR Abrial Jean-Raymond., 1996, B BOOK ASSIGNING MEA
   Ahmed A, 2003, IEEE S LOG, P33, DOI 10.1109/LICS.2003.1210043
   Ahrendt W., 2005, Softw. Syst. Model., V4, P32
   Aldrich J, 2004, LECT NOTES COMPUT SC, V3086, P1
   ALDRICH J, 2002, OOPSLA, P311
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], POPL 2001
   [Anonymous], 1986, Abstraction and Specification in Program Development
   Barnett M, 2004, LECT NOTES COMPUT SC, V3125, P54
   Barnett Mike., 2004, J OBJECT TECHNOLOGY, V3
   BIRKA A, 2004, OOPSLA, P35
   Bokowski B, 1999, ACM SIGPLAN NOTICES, V34, P82, DOI 10.1145/320385.320392
   Boyapati C., 2004, THESIS MIT
   Boyapati C., 2002, OOPSLA 02, P211
   BOYAPATI C, 2003, POPL, P213
   Bruegge B., 2009, OBJECT ORIENTED SOFT
   Clarke David, 2001, Ph.D. Dissertation
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   DeLine R, 2004, LECT NOTES COMPUT SC, V3086, P465
   DETLEFS DL, 1998, 156 DIG SYST RES CTR
   DIETL W, J OBECT TECHNOLOGY, V4
   DIETL W., 2004, P FORM TECHN JAV LIK, P49
   DIJKSTRA EW, COMMUNICATIONS ACM, V9
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   FAHNDRICH M, 2002, PLDI 02, P13
   Flanagan C, 2004, ACM SIGPLAN NOTICES, V39, P256, DOI 10.1145/982962.964023
   GOLDBERG A, 1983, LANGUAGE ITS IMPLEME
   Guttag JohnV., 1993, LARCH LANGUAGES TOOL
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   HOGG J, 1991, SIGPLAN NOTICES, V26, P271
   Huizing K, 2000, LECT NOTES COMPUT SC, V1783, P208
   JACOBS B, 2004, 0409 IOW STAT U DEP, P2
   Leavens Gary T., 1999, Behavioral Specifications of Businesses and Systems, P175
   LEAVENS GT, 2005, 9806REV28 IOW STAT U
   Leino KRM, 2006, LECT NOTES COMPUT SC, V3924, P115
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   Leino KRM, 2002, ACM T PROGR LANG SYS, V24, P491, DOI 10.1145/570886.570888
   LEINO KRM, 1995, THESIS CALTECH
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Meyer B., 1992, Eiffel: The Language
   MULLER P, 2001, 279 FERN HAG
   MULLER P, 2002, LECT NOTES COMPUTER, V2262
   Naumann DA, 2005, LECT NOTES COMPUT SC, V3442, P190, DOI 10.1007/978-3-540-31984-9_15
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   OHEARN PW, 2004, POPL, P268
   PARKINSON MJ, 2005, POPL, P247
   POETZSCHHEFFTER A, 1997, THESIS TU MUNICH
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rodríguez E, 2005, LECT NOTES COMPUT SC, V3586, P551
   Ruby C, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/354222.353186
   RUBY C, 2006, THESIS IOWA STATE U
   Skoglund M., 2002, Algebraic Methodology and Software Technology. 9th International Conference, AMAST 2002. Proceedings (Lecture Notes in Computer Science Vol.2422), P457
   WEIHL W, 1985, ACM T PROGR LANG SYS, V7, P244, DOI 10.1145/3318.3319
NR 53
TC 63
Z9 68
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2006
VL 62
IS 3
BP 253
EP 286
DI 10.1016/j.scico.2006.03.001
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 078HA
UT WOS:000240092100004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Wells, GC
AF Wells, GC
TI New and improved: Linda in Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY   21, 2005
CL New York, NY
DE Linda; Java; tuple space; associative matching; visual language parsing
AB This paper discusses the current resurgence of interest in the Linda coordination language for parallel and distributed programming. Particularly in the Java field, there have been a number of developments over the past few years. These developments are summarised together with the advantages of using Linda for programming concurrent systems. Some problems with the basic Linda approach are also discussed and a novel solution to these is presented. The power and flexibility of the proposed extensions to the Linda programming model are illustrated by considering a number of example applications, including a detailed case study of visual language parsing. (c) 2005 Elsevier B.V. All rights reserved.
C1 Rhodes Univ, Dept Comp Sci, ZA-6140 Grahamstown, South Africa.
C3 Rhodes University
RP Wells, GC (corresponding author), Rhodes Univ, Dept Comp Sci, ZA-6140 Grahamstown, South Africa.
EM G.Wells@ru.ac.za
RI Wells, George/A-3841-2008
OI Wells, George/0000-0001-9088-3449
CR AHUJA S, 1988, IEEE T COMPUT, V37, P921, DOI 10.1109/12.2244
   [Anonymous], 1999, JavaSpaces Principles, Patterns, and Practice
   CARRIERO N, 1991, 9113 EDINBURGH PAR C, P74
   CARRIERO N, 1985, OPERATING SYSTEMS RE, V19, P54
   Carriero Nicholas., 1990, WRITE PARALLEL PROGR
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GOLIN EA, 1991, THESIS BROWN U
   Marriott K, 1997, J VISUAL LANG COMPUT, V8, P375, DOI 10.1006/jvlc.1997.0053
   Raina S., 1992, CSTR9236 U BRIST DEP
   REKERS J, 1995, COURSE VISUAL LANGUA
   TOLKSDORF R, 2001, COORDINATING WEB BAS
   WELLS G, 2000, CONCURRENT SYSTEMS E, V58, P63
   Wells GC, 2004, CONCURR COMP-PRACT E, V16, P1005, DOI 10.1002/cpe.794
   WELLS GC, 2001, THESIS U BRISTOL UK
   Wyckoff P, 1998, IBM SYST J, V37, P454, DOI 10.1147/sj.373.0454
   ZENITH SE, 1992, LECT NOTES COMPUT SC, V574, P147
NR 16
TC 4
Z9 5
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 82
EP 96
DI 10.1016/j.scico.2005.07.005
PG 15
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 993HZ
UT WOS:000233946500006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Monniaux, D
AF Monniaux, D
TI Abstract interpretation of programs as Markov decision processes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE abstract interpretation; probabilistic semantics; program semantics;
   probabilities; measure theory
AB We propose a formal language for the specification of trace properties of probabilistic, nondeterministic transition systems, encompassing the properties expressible in Linear Time Logic. Those formulas are in general undecidable on infinite deterministic transition systems and thus on infinite Markov decision processes. This language has both a semantics in terms of sets of traces, as well as another semantics in terms of measurable functions; we give and prove theorems linking the two semantics. We then apply abstract interpretation-based techniques to give upper bounds on the worst-case probability of the studied property. We propose an enhancement of this technique when the state space is partitioned - for instance along the program points - allowing the use of faster iteration methods. (c) 2005 Elsevier B.V. All rights reserved.
C1 Ecole Normale Super, Lab Informat, F-75230 Paris, France.
C3 Universite PSL; Ecole Normale Superieure (ENS)
RP Ecole Normale Super, Lab Informat, 45 Rue Ulm, F-75230 Paris, France.
EM David.Monniaux@ens.fr
OI Monniaux, David/0000-0001-7671-6126
CR [Anonymous], 1995, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-60692-0
   [Anonymous], 1965, Holden-Day Series in Probability and Statistics
   [Anonymous], 1978, ANALYSE SEMANTIQUE P
   Baier C, 1997, LECT NOTES COMPUT SC, V1256, P430
   BAIER C, 1999, ELECT NOTES THEORETI, V21
   Clarke EM, 1999, MODEL CHECKING, P1
   CLEAVELAND R, 1992, LECT NOTES COMPUT SC, V623, P708
   COURCOUBETIS C, 1990, LECT NOTES COMPUT SC, V443, P336
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   DARGENIO PR, 2002, LECT NOTES COMPUTER, V2399, P57
   DELFARO L, 1998, CSTR981601 STANF U D
   DELFARO L, 2001, 33 ANN ACM S THEOR C, P675
   HANSSON H, 1990, R9013 SWED I COMP SC
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kozen D, 1979, 20 ANN S FDN COMP SC, P101
   Kwiatkowska M., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P123
   KWIATKOWSKA MZ, 2000, CSR006 U BIRM SCH CO
   Littman M, 1995, CS9519 BROWN U
   MCIVER A, 1998, P PROBMIV U BIRM SCH, P45
   Monniaux D, 2003, LECT NOTES COMPUT SC, V2575, P161
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2028, P367
   Monniaux D, 2001, LECT NOTES COMPUT SC, V2126, P111
   Monniaux D, 2000, LECT NOTES COMPUT SC, V1824, P322
   MONNIAUX D, 2001, 28 S PRINC PROGR LAN, P93
   MONNIAUX D, 2001, THESIS U PARIS 9 DAU
   MORGAN C, 1995, TR495 OXF U
   NEVEU J, 1970, BASES MATH CALCUL PR
   PUTTERMANML, 1994, WILEY SERIES PROBABI
   Rudin W., 1986, Real and Complex Analysis
   SEGALA R, MITLCSTR676
   VANLEEUWEN J, 1990, HDB THEORETICAL COMP, VB
NR 31
TC 27
Z9 28
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 179
EP 205
DI 10.1016/j.scico.2005.02.008
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700008
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Reps, T
   Schwoon, S
   Jha, S
   Melski, D
AF Reps, T
   Schwoon, S
   Jha, S
   Melski, D
TI Weighted pushdown systems and their application to interprocedural
   dataflow analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE interprocedural dataflow analysis; generalized pushdown reachability;
   meet-over-all-paths problem; weighted pushdown system
ID AUTOMATA
AB Recently, pushdown systems (PDSs) have been extended to weighted PDSs, in which each transition is labeled with a value, and the goal is to determine the meet-over-all-paths value (for paths that meet a certain criterion). This paper shows how weighted PDSs yield new algorithms for certain classes of interprocedural dataflow-analysis problems. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Wisconsin, Comp Sci Dept, Madison, WI 53706 USA.
   Univ Stuttgart, Inst Formale Methoden Informat, Stuttgart, Germany.
C3 University of Wisconsin System; University of Wisconsin Madison;
   University of Stuttgart
RP Univ Wisconsin, Comp Sci Dept, Madison, WI 53706 USA.
EM reps@cs.wisc.edu; schwoosn@informatik.uni-stuttgart.de; jha@cs.wisc.edu;
   melski@grammatech.com
CR AHN J, 2001, AS WORKSH PROG LANG
   [Anonymous], 2000, LNCS, DOI [10.1007/10722167_20, DOI 10.1007/1072216720]
   [Anonymous], 1985, Compilers principles, techniques, and tools
   BALAKRISHNAN G, 2004, INT C COMP CONSTRUCT
   BANCILHON F, 1986, P 5 ACM S PRINC DAT
   Bouajjani A, 1997, LECT NOTES COMPUT SC, V1243, P135
   Bouajjani A, 2003, ACM SIGPLAN NOTICES, V38, P62, DOI 10.1145/640128.604137
   BOURDONCLE F, 1993, LEC NOTES COMP SCI
   CAI J, 1989, SCI COMPUT PROGRAM, V11, P197, DOI 10.1016/0167-6423(88)90033-0
   CHEN H, 2002, C COMP COMM SEC
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   COUSOT P, 2000, S PRINC PROG LANG, P12
   DUESTERWALD E, 1995, S PRINC PROGR LANG, P37
   EO H, 2002, AS WORKSH PROG LANG
   Esparza J, 2003, INFORM COMPUT, V186, P355, DOI 10.1016/S0890-5401(03)00139-1
   Esparza J, 1999, LECT NOTES COMPUT SC, V1578, P14
   Fecht C., 1998, Nordic Journal of Computing, V5, P304
   FINKEL A, 1977, ELECT NOTES THEORETI, V9
   HORWITZ S, 1995, P 3 ACM SIGSOFT S FD, P104
   JENSEN T, 1999, 1999 IEEE S SEC PRIV
   JHA S, 2002, IEEE COMP SEC FDN WO
   KIDD N, 2004, WPDS A C LIB WEIGHTE
   Kildall G. A., 1973, Conference Record of ACM Symposium on Principles of Programming Languages, P194
   KNOOP J, 1992, INT C COMP CONSTR, P125
   LAL A, 2005, P COMP AID VER
   MONCKE U, 1991, LECT NOTES COMPUT SC, V545, P151
   MULLEROLM M, 2004, S PRINC PROG LANG
   Nielson F., 1999, Principles of Program Analysis
   RAMALINGAM G, 1996, LEC NOTES COMP SCI, V1089
   REPS T, 1991, SCI COMPUT PROGRAM, V17, P139, DOI 10.1016/0167-6423(91)90039-Z
   Reps T., 1995, S PRINC PROG LANG, P49
   REPS T, 9414 TR
   Reps ThomasW., 1994, Applications of Logic Databases
   Sagiv M, 1996, THEOR COMPUT SCI, V167, P131, DOI 10.1016/0304-3975(96)00072-2
   SCHMIDT D, 1998, S PRINC PROGR LANG N, P38
   SCHWOON S, MOPED MODEL CHECKER
   SCHWOON S, 2003, COMP SEC FDN WORKSH
   SCHWOON S, 2002, THESIS TU MUNICH MUN
   SCHWOON S, 2003, WPDS LIB WEIGHTED PU
   Sharir M., PROGRAM FLOW ANAL TH, P189
   STEFFEN B, 1991, LECT NOTES COMPUT SC, V526, P346
   STEFFEN B, 1993, SCI COMPUT PROGRAM, V21, P115, DOI 10.1016/0167-6423(93)90003-8
   WARREN DS, 1992, COMMUN ACM, V35, P93, DOI 10.1145/131295.131299
   [No title captured]
NR 44
TC 113
Z9 130
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 206
EP 263
DI 10.1016/j.scico.2005.02.009
PG 58
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700009
DA 2024-07-18
ER

PT J
AU Cabri, G
   Ferrari, L
   Leonardi, L
AF Cabri, G
   Ferrari, L
   Leonardi, L
TI Exploiting runtime bytecode manipulation to add roles to Java agents
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on the Principles and Practice of Programming in Java
CY JUN, 2003
CL Kilkenny City, IRELAND
DE Java agents; dynamic bytecode modification; roles; interactions
AB Thanks to their sociality, agents can interact with other agents in a cooperative or competitive way. Such interactions must be carefully taken into consideration in the development of agent-based applications. A good paradigm for modeling such interactions is the one based on the concept of roles, which is fully exploited in the BRAIN framework. The use of roles achieves several advantages, from separation of concerns between the algorithmic issues and the interaction ones, to the reuse of solutions and experiences in different applications. In this paper, we propose an interaction infrastructure for enabling Java agents to dynamically assume roles at runtime and then to use them. Our approach is based on the capability of modifying the bytecode of Java agents at runtime in order to add the members of role classes. An application example and a comparison with other approaches show the effectiveness of our approach. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Modena, Dipartimento Ingn Informaz, I-41100 Modena, Italy.
C3 Universita di Modena e Reggio Emilia
RP Cabri, G (corresponding author), Univ Modena, Dipartimento Ingn Informaz, Via Vignolese 905, I-41100 Modena, Italy.
EM cabri.giacomo@unimo.it; ferrari.luca@unimo.it; leonardi.letizia@unimo.it
RI Cabri, Giacomo/M-6723-2015; Leonardi, Letizia/L-9722-2015
OI Cabri, Giacomo/0000-0002-4942-2453; Leonardi,
   Letizia/0000-0003-4035-8560
CR ARIDOR Y, 1998, P INT C AUT AG MINN
   Baumer D., 1997, P 4 PATT LANG PROGR
   CABRI G, 2004, P 3 C AUT AG MULT AG
   CABRI G, 2002, 16 EUR M CYB SYST RE
   CABRI G, 2001, P 8 IEEE WORKSH FUT
   CABRI G, 2002, P 2 INT WORKSH ASP O
   CABRI G, 2003, P 2003 C COOP INF SY
   CABRI G, 2003, P IEEE 12 INT WORKSH
   DEMSKY B, 2002, P INT C SOFTW ENG 02
   FOWLER M, 1997, DEALING ROLES
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Jennings NR, 2001, COMMUN ACM, V44, P35, DOI 10.1145/367211.367250
   Kendall EA, 2000, IEEE CONCURR, V8, P34, DOI 10.1109/4434.846192
   Kiczales G., 1997, LNCS, V1241
   Kristensen B. B., 1996, Theory and Practice of Object Systems, V2, P143, DOI 10.1002/(SICI)1096-9942(1996)2:3<143::AID-TAPO2>3.0.CO;2-X
   Lange D. B., 1998, PROGRAMMING DEPLOYIN
   SAKAMOTO T, 2000, P 2 INT S AG SYST AP
   SANDHU RS, 1996, IEEE COMPUT, V20, P38
   TATSUBORI M, 2001, P ECOOP 2001 BUD JUN, V2072
   TRIPATHI A, 2002, P 22 INT C DISTR COM
   Truyen E., 2000, P 2 INT S AG SYST AP
   UBAYASHI N, 2000, P INT S PRINC SOFTW
   ZHU H, 2003, P 2003 INT C INF KNO
   2001, COMMUNICATIONS ACM, V33
NR 24
TC 2
Z9 3
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2005
VL 54
IS 1
BP 73
EP 98
DI 10.1016/j.scico.2004.05.007
PG 26
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 871MT
UT WOS:000225138500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Giambiagi, P
   Dam, M
AF Giambiagi, P
   Dam, M
TI On the secure implementation of security protocols
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE semantics-based security; confidentiality; information flow; protocol
   implementation; admissibility; security policy
ID INFORMATION-FLOW; LANGUAGE
AB We consider the problem of implementing a security protocol in such a manner that secrecy of sensitive data is not jeopardized. Implementation is assumed to take place in the context of an API that provides standard cryptography and communication services. Given a dependency specification, stating how API methods can produce and consume secret information, we propose an information flow property based on the idea of invariance under perturbation, relating observable changes in output to corresponding changes in input. Besides the information flow condition itself, the main contributions of the paper are results relating the admissibility property to a direct flow property in the special case of programs which branch on secrets only in cases permitted by the dependency rules. These results are used to derive an unwinding theorem, reducing a behavioural correctness check (strong bisimulation) to an invariant. (C) 2004 Elsevier B.V. All rights reserved.
C1 Swedish Inst Comp Sci, S-61449 Kista, Sweden.
RP Swedish Inst Comp Sci, Box 1263, S-61449 Kista, Sweden.
EM pablo@sics.se; mfd@sics.se
CR Abadi M., 1998, Nordic Journal of Computing, V5, P267
   Abadi Martin., 1999, POPL, P147, DOI [10.1145/292540.292555, DOI 10.1145/292540.292555]
   [Anonymous], 1995, J COMPUT SECUR, DOI [DOI 10.3233/JCS-1994/1995-3103, 10.3233/JCS-1994/1995-3103]
   Cohen E. S., 1978, Foundations of Secure Computation, P297
   Dam M, 2000, P IEEE CSFW, P233, DOI 10.1109/CSFW.2000.856940
   Laud P, 2003, LECT NOTES COMPUT SC, V2618, P159
   Mitchell John C., 1996, Foundation of computing series
   Naumann DA, 2002, THEOR COMPUT SCI, V278, P271, DOI 10.1016/S0304-3975(00)00339-X
   Roscoe AW, 1999, P IEEE CSFW, P228, DOI 10.1109/CSFW.1999.779776
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sabelfeld A., 2001, Higher-Order and Symbolic Computation, V14, P59, DOI 10.1023/A:1011553200337
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Volpano D, 2000, P IEEE CSFW, P246, DOI 10.1109/CSFW.2000.856941
   Zdancewic S, 2001, P IEEE CSFW, P15, DOI 10.1109/CSFW.2001.930133
NR 14
TC 6
Z9 6
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 73
EP 99
DI 10.1016/j.scico.2004.01.002
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 804AH
UT WOS:000220271100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Meadows, C
AF Meadows, C
TI Ordering from Satan's menu: a survey of requirements specification for
   formal analysis of cryptographic protocols
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE cryptographic protocols; formal methods; requirements engineering
ID SECURITY; AUTHENTICATION
AB The application of formal methods to cryptographic protocol analysis has been a growth area recently. Most of the attention has been paid to the design of languages for the specification of cryptographic protocols and algorithms for evaluating their security. However, the ability to specify their desired behavior correctly is also important; indeed many perceived protocol flaws arise out of a misunderstanding of the protocol's requirements. In this paper, we give a survey of research in requirements specification for formal analysis of cryptographic protocols. We start with a brief history of the use of requirements specification for cryptographic protocols. We then outline some of the main current trends and areas of research. We conclude with a discussion of some open problems. (C) 2003 Published by Elsevier B.V.
C1 USN, Res Lab, Ctr High Assurance Comp Syst, Washington, DC 20375 USA.
C3 United States Department of Defense; United States Navy; Naval Research
   Laboratory
RP USN, Res Lab, Ctr High Assurance Comp Syst, Washington, DC 20375 USA.
EM meadows@itd.nrl.navy.mil
CR Abadi M, 2002, J CRYPTOL, V15, P103, DOI 10.1007/s00145-001-0014-7
   Aiello W., 2002, JUST FAST KEYING JFK
   Anderson R, 1995, LECT NOTES COMPUT SC, V1000, P426
   [Anonymous], 1992, J COMPUT SECUR
   Backes Michael., 2003, CCS 03, P220, DOI [10.1145/948109.948140, DOI 10.1145/948109.948140]
   BELLARE M, 1993, ADV CRYPTOLOGY CRYPT
   BIRD R, 1991, ADV CRYPTOLOGY
   Boyd Colin., 2003, INF SECUR CRYTOGR
   BURROWS M, 1990, ACM T COMPUT SYST, V8, P18, DOI [10.1145/77648.77649, 10.1145/74851.74852]
   BUTTYAN L, 2001, 2 INT WORKSH EL COMM
   CANETTI R, 2000, P 32 S FDN COMP SCI
   CERVESATO I, 2003, 3 WORKSH ISS THEOR S, P1
   Chadha R., 2001, ACM C COMPUTER COMMU, P176
   CHAUM D, 1985, COMMUN ACM, V28, P1030, DOI 10.1145/4372.4373
   Diffie W., 1992, Designs, Codes and Cryptography, V2, P107, DOI 10.1007/BF00124891
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Durante A, 2000, ACM T SOFTW ENG METH, V9, P488, DOI 10.1145/363516.363532
   Fabrega F. J. T., 1998, P WORKSH FORM METH S
   Fabrega FJT, 1998, 1998 IEEE SYMPOSIUM ON SECURITY AND PRIVACY - PROCEEDINGS, P160, DOI 10.1109/SECPRI.1998.674832
   FOCARDI R, 2000, LECT NOTES COMPUTER, V1583
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   GONG L, 1998, DEPENDABLE COMPUTING, V5, P79
   Halpern J, 2002, P IEEE CSFW, P32, DOI 10.1109/CSFW.2002.1021805
   HOFFMAN P, 2002, FEATURES PROPOSED SU
   Hughes D., 2004, Journal of Computer Security, V12, P3
   KAUFMAN C, 2003, INTERNET KEY EXCHANG
   KREMER S, 2002, 15 IEEE COMP SEC FDN
   Lafrance S, 2003, J UNIVERS COMPUT SCI, V9, P1350
   Lowe G, 1996, P IEEE CSFW, P162, DOI 10.1109/CSFW.1996.503701
   Lowe G, 1997, P IEEE CSFW, P31, DOI 10.1109/CSFW.1997.596782
   Markowitch O, 2002, LECT NOTES COMPUT SC, V2587, P451
   MEADOWS C, 2001, P ACM C COMP COMM SE
   MEADOWS C, 1999, P 12 IEEE COMP SEC F
   MEADOWS C, 1998, LECT NOTES COMPUTER
   MERRITT M, 1983, THESIS GEORGIA I TEC
   MILLEN JK, 1987, IEEE T SOFTWARE ENG, V13, P274, DOI 10.1109/TSE.1987.233151
   MITCHELL JC, 2001, ELECT NOTES THEORETI, V45
   NEEDHAM RM, 1978, COMMUN ACM, V21, P993, DOI 10.1145/359657.359659
   NORMAN G, 2002, BCS FACS FORMAL ASPE
   Roscoe AW, 1996, P IEEE CSFW, P28, DOI 10.1109/CSFW.1996.503688
   SCHNEIDER S, 1996, IEEE COMP SOC S SEC
   SCHNEIDER S, 1996, P ESORICS 96 SPRING
   *SET SEC EL TRANS, SET SPEC
   Shmatikov V, 2002, THEOR COMPUT SCI, V283, P419, DOI 10.1016/S0304-3975(01)00141-4
   SHMATIKOV V, 2002, P 15 COMP SEC FDN WO
   Song D. X., 2001, Journal of Computer Security, V9, P47
   Syverson P., 1993, Proceedings 1993 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.93CH3290-4), P165, DOI 10.1109/RISP.1993.287634
   Syverson P., 1996, Designs, Codes and Cryptography, V7, P27, DOI 10.1007/BF00125075
   SYVERSON P, 1994, P EUR 94 SPRING BERL
   Syverson PF, 1999, LECT NOTES COMPUT SC, V1708, P814
NR 50
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 3
EP 22
DI 10.1016/j.scico.2003.12.001
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 804AH
UT WOS:000220271100002
DA 2024-07-18
ER

PT J
AU Wah, KSHT
AF Wah, KSHT
TI An analysis of the coupling effect I: single test data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE coupling effect; single-fault (multi-fault) alternate; proper test set;
   survival ratio; expected number of survivors; function degeneracy; fault
   size
AB The focus in mutation testing is on the elimination of first-order mutants. It is widely believed that there is a coupling effect between first-order and higher-order mutants such that a test set that kills the former would be expected to kill the latter too; it follows that, if the belief is correct, there is no need whatsoever to bother with higher-order mutants. It turns out, in practice, that most higher-order mutants do get killed by such a test set, though a few somehow manage to survive.
   This is the first of two papers dealing with the coupling effect from a theoretical standpoint. The overall results indicate that the hypothesis of a coupling effect is largely valid, provided the program is not too large; only a tiny proportion of higher-order mutants is expected to survive a test set that kills all first-order mutants. The basis of the approach is that programs can be modelled as compositions of finite functions, the domain of which is assumed to be large.
   The problem is a complex one, so the present paper only considers the case where there is just one test data,, the case where there are more than one test data is left to a second paper. The aim is not only to show that the coupling effect actually exists, but also to gain some understanding of the various factors underlying it. (C) 2003 Elsevier B.V. All rights reserved.
C1 S Bank Univ, CSSE, Sch Comp Informat Syst & Math, London SE1 0AA, England.
C3 London South Bank University
RP S Bank Univ, CSSE, Sch Comp Informat Syst & Math, London SE1 0AA, England.
EM howtair@sbu.ac.uk
CR [Anonymous], 1979, Infotech State of the Art Report, Software Testing
   Cohen D. I. A., 1978, Basic techniques of combinatorial theory
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   HORGAN JR, 1990, SERCTR83P PURD U SOF
   LIPTON RJ, 1978, DEC WORKSH SOFTW TES, P355
   MORELL LJ, 1990, IEEE T SOFTWARE ENG, V16, P844, DOI 10.1109/32.57623
   Offutt A. J., 1992, ACM Transactions on Software Engineering and Methodology, V1, P5, DOI 10.1145/125489.125473
   OFFUTT AJ, 1989, ACM SIGSOFT, V14, P131, DOI 10.1145/75309.75324
   Stoy Joseph E., 1977, DENOTATIONAL SEMANTI
   VOAS J, 1991, IEEE SOFTWARE, V8, P41, DOI 10.1109/52.73748
   VOAS J, 1992, P 5 INT C PUTT PRACT
   WAH KSH, 1995, VERIFICATION RELIABI, V5, P3
   WAH KSH, 2000, MUTATION TESTING NEW, P62
   Wah KSHT, 2000, SOFTW TEST VERIF REL, V10, P3, DOI 10.1002/(SICI)1099-1689(200003)10:1<3::AID-STVR196>3.0.CO;2-P
NR 14
TC 26
Z9 29
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG-SEP
PY 2003
VL 48
IS 2-3
BP 119
EP 161
DI 10.1016/S0167-6423(03)00022-4
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 719YB
UT WOS:000185231700003
DA 2024-07-18
ER

PT J
AU Cao, JN
   Chan, A
   Sun, YD
   Zhang, K
AF Cao, JN
   Chan, A
   Sun, YD
   Zhang, K
TI Dynamic configuration management in a graph-oriented Distributed
   Programming Environment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
ID SYSTEMS; RECONFIGURATION
AB Dynamic configuration is a desirable property of a distributed system where dynamic modification and extension to the system and the applications are required. It allows the system configuration to be specified and changed while the system is executing. This paper describes a software platform that facilitates a novel approach to the dynamically configurable programming of parallel and distributed applications and systems. This platform is based on a graph-oriented model and it provides support for constructing reconfigurable distributed programs. We describe the design and implementation of a dynamic configuration manager for the graph-oriented distributed programming environment. The requirements and services for dynamic reconfiguration are identified. The architectural design of a dynamic configuration manager is presented, and a parallel virtual machine-based prototypical implementation of the manager, on a local area network of workstations, is described. (C) 2003 Elsevier Science B.V. All rights reserved.
C1 Hong Kong Polytech Univ, Dept Comp, Software Dev & Management Lab, Kowloon, Hong Kong, Peoples R China.
   Univ Texas, Dept Comp Sci, Richardson, TX 75083 USA.
C3 Hong Kong Polytechnic University; University of Texas System; University
   of Texas Dallas
RP Hong Kong Polytech Univ, Dept Comp, Software Dev & Management Lab, Hung Hom, Kowloon, Hong Kong, Peoples R China.
EM csjcao@comp.polyu.edu.hk; cstschan@comp.polyu.edu.hk;
   csydsun@comp.polyu.edu.hk; kzhang@utdallas.edu
RI jiang, tao/GWC-7108-2022
OI Cao, Jiannong/0000-0002-2725-2529
CR *ADA, 1980, REF MAN AD PROGR LAN
   Al Geist AdamBeguelin., 1994, PVM: Parallel Virtual Machine - A Users' Guide and Tutorial for Networked Parallel Computing
   ANDREWS GR, 1988, ACM T PROGR LANG SYS, V10, P51, DOI 10.1145/42192.42324
   ANDREWS GR, 1982, PRACTICE EXPERIENCE, V12, P719
   [Anonymous], 1997, The Theory and Practice of Concurrency
   BARBACCI M, 1991, DURRA TASK LEVEL DES
   Batista T, 2000, INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR PARALLEL AND DISTRIBUTED SYSTEMS, PROCEEDINGS, P32, DOI 10.1109/PDSE.2000.847848
   BLOOM T, 1993, SOFTWARE ENG J, V8, P102, DOI 10.1049/sej.1993.0014
   Cao J, 2000, I-SPAN 2000: INTERNATIONAL SYMPOSIUM ON PARALLEL ARCHITECTURES ALGORITHMS AND NETWORKS, PROCEEDINGS, P72, DOI 10.1109/ISPAN.2000.900264
   CAO J, 1995, P 2 INT C HIGH PERF, P417
   CAO J, 1996, INTENSIONAL PROGRAMM, V1, P83
   Carriero Nicholas., 1986, Proceedings of the 13th ACM SIGACT-SIGPLAN symposium on Principles of programming languages, P236
   Coulson G, 2002, DISTRIB COMPUT, V15, P109, DOI 10.1007/s004460100064
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Hofmeister C., 1993, Proceedings the 13th International Conference on Distributed Computing Systems (Cat. No.93CH3282-1), P101, DOI 10.1109/ICDCS.1993.287718
   HOFMEISTER C, 1993, SOFTWARE ENG J, V8, P95, DOI 10.1049/sej.1993.0013
   JUSTO GRR, 1992, P INT WORKSH CONF DI, P118
   KRAMER J, 1989, COMPUTER, V22, P53, DOI 10.1109/2.42014
   KRAMER J, 1990, PROCEEDINGS OF THE 1990 IEEE INTERNATIONAL CONFERENCE ON COMPUTER SYSTEMS AND SOFTWARE ENGINEERING, P374
   KRAMER J, 1985, IEEE T SOFTWARE ENG, V11, P424, DOI 10.1109/TSE.1985.232231
   KRAMER J, 1993, SOFTWARE ENG J   MAR
   KUMAR V, 1994, INTRO PARALLEL COMPU, P299
   LEBLANC R, 1982, P 4 INT C DISTR COMP
   MAGEE J, 1993, SOFTWARE ENG J, V8, P73, DOI 10.1049/sej.1993.0011
   MAGEE J, 1989, IEEE T SOFTWARE ENG, V15, P663, DOI 10.1109/32.24720
   MAGEE J, 1994, NETWORK DISTRIBUTED, P483
   Moazami-Goudarzi K., 1999, THESIS IMPERIAL COLL
   Oreizy P., 1998, IEE Proceedings-Software, V145, P137, DOI 10.1049/ip-sen:19982296
   Papadopoulos GA, 2001, FUTURE GENER COMP SY, V17, P1023, DOI 10.1016/S0167-739X(01)00043-7
   PELEG D, 1991, LECT NOTES COMPUT SC, V486, P71
   Rodriguez N, 1998, FOURTH INTERNATIONAL CONFERENCE ON CONFIGURABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P27, DOI 10.1109/CDS.1998.675755
   TOTTY BK, 1992, THESIS U ILLINOIS UR
NR 32
TC 5
Z9 8
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2003
VL 48
IS 1
BP 43
EP 65
DI 10.1016/S0167-6423(02)00168-5
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 690VN
UT WOS:000183571300003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Kiselyov, O
AF Kiselyov, Oleg
TI Generating C: Heterogeneous metaprogramming system description
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Heterogeneous metaprogramming; Code generation; Tagless-final
ID CODE GENERATION; LANGUAGE; LIGHTWEIGHT; COMPILER
AB Heterogeneous metaprogramming systems use a higher-level host language to generate code in a lower-level object language. Their appeal is taking advantage of the module system, higher-order functions, data types, type system and verification tools of the host language to quicker produce high-performant lower-level code with some correctness guarantees.We present two heterogeneous metaprogramming systems whose host language is OCaml and object language is C. The first relies on offshoring: treating a subset of (MetaOCaml-generated) OCaml as a different notation for (a subset of) C. The second embeds C in OCaml in tagless-final style. The systems have been used in several projects, including the generation of C supersets OpenCL and OpenMP. Generating C with some correctness guarantees is far less trivial than it may appear, with pitfalls abound: e.g., local variables may only be introduced in statement context; mutable variables are not first-class. Maintenance has challenges of its own, e.g., extensibility. On many examples, we expound the pitfalls we have come across in our experience, and describe the design and implementation to address them.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Kiselyov, Oleg] Tohoku Univ, Sendai, Japan.
C3 Tohoku University
RP Kiselyov, O (corresponding author), Tohoku Univ, Sendai, Japan.
EM oleg@okmij.org
FU JSPS KAKENHI [17K12662, 18H03218, 21K11821, 22H03563]
FX I am very grateful to the anonymous reviewers of SCP, FLOPS 2022, OCaml
   2022 and ML 2022 for many, helpful comments and suggestions. This work
   was partially supported by JSPS KAKENHI Grants Numbers 17K12662,
   18H03218, 21K11821 and 22H03563.
CR Abrams P.S., 1970, SLAC-114 UC-32 (MISC)
   Bussone G., 2020, Internship report to ENS
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Ceresa M, 2020, LECT NOTES COMPUT SC, V12470, P25, DOI 10.1007/978-3-030-64437-6_2
   Chen CY, 2005, J FUNCT PROGRAM, V15, P797, DOI 10.1017/S0956796805005617
   Cohen A, 2006, SCI COMPUT PROGRAM, V62, P25, DOI 10.1016/j.scico.2005.10.013
   DeVito Z, 2013, ACM SIGPLAN NOTICES, V48, P105, DOI 10.1145/2499370.2462166
   Dybjer P, 2002, LECT NOTES COMPUT SC, V2395, P137
   Eckhardt J, 2007, NEW GENERAT COMPUT, V25, P305, DOI 10.1007/s00354-007-0020-x
   Engler D. R., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P131, DOI 10.1145/237721.237765
   Frigo M, 2005, P IEEE, V93, P216, DOI 10.1109/JPROC.2004.840301
   Gordon Michael J., 1978, P 5 ACM SIGACT SIGPL, P119, DOI DOI 10.1145/512760.512773
   Hirohara K., 2019, Master Thesis
   HOARE CAR, 1993, ACTA INFORM, V30, P701, DOI 10.1007/BF01191809
   Kameyama Y, 2015, SCI COMPUT PROGRAM, V112, P120, DOI 10.1016/j.scico.2015.08.007
   Kameyama Y, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P147, DOI 10.1145/1328408.1328430
   Kamin S, 2000, LECT NOTES COMPUT SC, V1799, P49
   Kiselyov Oleg, 2020, Functional and Logic Programming. 15th International Symposium, FLOPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12073), P66, DOI 10.1007/978-3-030-59025-3_5
   Kiselyov Oleg, 2012, Generic and Indexed Programming. International Spring School, SSGIP 2010. Revised Lectures, P130, DOI 10.1007/978-3-642-32202-0_3
   Kiselyov O., 2018, Reconciling Abstraction with High Performance: A MetaOCaml Approach, Foundations and Trends in Programming Languages
   Kiselyov O., 2022, Lecture Notes in Computer Science, V13215, P75
   Kiselyov O., 2022, ML FAM WORKSH, DOI [10.48550/arXiv.2211.04107, DOI 10.48550/ARXIV.2211.04107]
   Kiselyov O., 2023, BER MetaOCaml N114
   Kiselyov O., 2022, OCAML WORKSHOP 2022
   Kiselyov O, 2018, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.285.2
   Kiselyov O, 2017, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.241.1
   Kiselyov O, 2014, LECT NOTES COMPUT SC, V8475, P86, DOI 10.1007/978-3-319-07151-0_6
   Kobayashi T., 2022, arXiv, DOI [10.48550/arXiv.2208.08732, DOI 10.48550/ARXIV.2208.08732]
   LANDIN PJ, 1965, COMMUN ACM, V8, P89, DOI 10.1145/363744.363749
   Mainland Geoffrey, 2012, SIGPLAN Notices, V47, P311
   Masuda Masahiro, 2022, Functional and Logic Programming: 16th International Symposium, FLOPS 2022, Proceedings. Lecture Notes in Computer Science (13215), P133, DOI 10.1007/978-3-030-99461-7_8
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Ofenbeck G, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P21, DOI 10.1145/2998392.2998397
   Protzenko J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110261
   Püschel M, 2005, P IEEE, V93, P232, DOI 10.1109/JPROC.2004.840306
   Ragan-Kelley J, 2013, ACM SIGPLAN NOTICES, V48, P519, DOI 10.1145/2499370.2462176
   Rathgeber F, 2017, ACM T MATH SOFTWARE, V43, DOI 10.1145/2998441
   Rompf T, 2016, SCALA'16: PROCEEDINGS OF THE 2016 7TH ACM SIGPLAN SYMPOSIUM ON SCALA, P41, DOI 10.1145/2998392.2998399
   Rompf T, 2012, COMMUN ACM, V55, P121, DOI 10.1145/2184319.2184345
   Sabry A., 1993, LISP and Symbolic Computation, V6, P289, DOI 10.1007/BF01019462
   Sheard T., 2001, Semantics, Applications, and Implementation of Program Generation. Second International Workshop, SAIG 2001. Proceedings (Lecture Notes in Computer Science Vol.2196), P2
   strymonas, 2022, Strymonas streams: stream fusion, to completeness
   Taha W., 1999, THESIS OREGON GRADUA
   Takashima N., 2014, 31 ANN M
   Takashima N, 2015, FHPC'15 PROCEEDINGS OF THE 4TH ACM SIGPLAN WORKSHOP ON FUNCTIONAL HIGH-PERFORMANCE COMPUTING, P45, DOI 10.1145/2808091.2808096
   Westphal Oliver, 2020, Functional and Logic Programming. 15th International Symposium, FLOPS 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12073), P179, DOI 10.1007/978-3-030-59025-3_11
   Whaley RC, 2005, SOFTWARE PRACT EXPER, V35, P101, DOI 10.1002/spe.626
   Xi HW, 2003, ACM SIGPLAN NOTICES, V38, P224, DOI 10.1145/640128.604150
   Yallop J, 2018, SCI COMPUT PROGRAM, V164, P82, DOI 10.1016/j.scico.2017.04.002
   Zhu JJ, 2003, LECT NOTES COMPUT SC, V2624, P321, DOI 10.1007/3-540-35767-X_21
NR 51
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103015
DI 10.1016/j.scico.2023.103015
EA SEP 2023
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AL5A8
UT WOS:001118621500001
DA 2024-07-18
ER

PT J
AU Humeniuk, D
   Khomh, F
   Antoniol, G
AF Humeniuk, Dmytro
   Khomh, Foutse
   Antoniol, Giuliano
TI AmbieGen: A search-based framework for autonomous systems testing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Evolutionary search; Autonomous systems; Self driving cars; Autonomous
   robots; Neural network testing
AB Thorough testing of safety-critical autonomous systems, such as self-driving cars, au-tonomous robots, and drones, is essential for detecting potential failures before deploy-ment. One crucial testing stage is model-in-the-loop testing, where the system model is evaluated by executing various scenarios in a simulator. However, the search space of possible parameters defining these test scenarios is vast, and simulating all combi-nations is computationally infeasible. To address this challenge, we introduce AmbieGen, a search-based test case generation framework for autonomous systems. AmbieGen uses evolutionary search to identify the most critical scenarios for a given system, and has a modular architecture that allows for the addition of new systems under test, algorithms, and search operators. Currently, AmbieGen supports test case generation for autonomous robots and autonomous car lane keeping assist systems. In this paper, we provide a high-level overview of the framework's architecture and demonstrate its practical use cases.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Humeniuk, Dmytro; Khomh, Foutse; Antoniol, Giuliano] Polytech Montreal, 2500 Chemin Polytech, Montreal, PQ H3T 1J4, Canada.
C3 Universite de Montreal; Polytechnique Montreal
RP Humeniuk, D (corresponding author), Polytech Montreal, 2500 Chemin Polytech, Montreal, PQ H3T 1J4, Canada.
EM dmytro.humeniuk@polymtl.ca
OI Humeniuk, Dmytro/0000-0002-2983-8312
FU Natural Sciences and Engineering Research Council of Canada (NSERC)
   [RGPIN-2019-06956]
FX Acknowledgements This work is partly funded by the Natural Sciences and
   Engineering Research Council of Canada (NSERC) [Grant No:
   RGPIN-2019-06956] .
CR Annapureddy Y, 2011, LECT NOTES COMPUT SC, V6605, P254, DOI 10.1007/978-3-642-19835-9_21
   Arrieta A, 2023, ACM T SOFTW ENG METH, V32, DOI 10.1145/3532182
   BeamNG.tech, 2021, BEAMNG GMBH
   Ben Abdessalem R, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P1016, DOI 10.1145/3180155.3180160
   Blank J, 2020, IEEE ACCESS, V8, P89497, DOI 10.1109/ACCESS.2020.2990567
   Bruggner D, 2021, IEEE INT VEH SYM, P136, DOI 10.1109/IV48863.2021.9575530
   Castellano E, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P36, DOI 10.1109/SBST52555.2021.00016
   Ding WH, 2022, Arxiv, DOI arXiv:2202.02215
   Donzé A, 2010, LECT NOTES COMPUT SC, V6174, P167, DOI 10.1007/978-3-642-14295-6_17
   Dosovitskiy A., 2017, P 1 ANN C ROB LEARN, P1, DOI DOI 10.48550/ARXIV.1711.03938
   Fremont DJ, 2023, MACH LEARN, V112, P3805, DOI 10.1007/s10994-021-06120-5
   Gambi A, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P25, DOI 10.1145/3526072.3527538
   Gambi A, 2019, PROCEEDINGS OF THE 28TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS (ISSTA '19), P318, DOI 10.1145/3293882.3330566
   Humeniuk D, 2022, 15TH SEARCH-BASED SOFTWARE TESTING WORKSHOP (SBST 2022), P43, DOI 10.1145/3526072.3527531
   Humeniuk D, 2022, INFORM SOFTWARE TECH, V149, DOI 10.1016/j.infsof.2022.106936
   Kim J, 2019, PROC INT CONF SOFTW, P1039, DOI 10.1109/ICSE.2019.00108
   Klikovits S., 2022, ARXIV
   Kranz M., 2006, Proceedings of UbiSys, V6, P17
   Menghi C, 2020, PROC INT CONF SOFTW, P372, DOI 10.1145/3377811.3380370
   Minguez J, 2004, IEEE T ROBOTIC AUTOM, V20, P45, DOI 10.1109/TRA.2003.820849
   Panichella S, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P20, DOI 10.1109/SBST52555.2021.00011
   Pei KX, 2017, PROCEEDINGS OF THE TWENTY-SIXTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '17), P1, DOI 10.1145/3132747.3132785
   Pugh JK, 2016, FRONT ROBOT AI, V3, DOI 10.3389/frobt.2016.00040
   Ramakrishna S, 2022, 2022 IEEE INTERNATIONAL CONFERENCE ON ASSURED AUTONOMY (ICAA 2022), P107, DOI 10.1109/ICAA52185.2022.00022
   Riccio V, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P876, DOI 10.1145/3368089.3409730
   Rong GD, 2020, IEEE INT C INTELL TR, DOI 10.1109/itsc45102.2020.9294422
   Stocco A., 2022, IEEE Transactions on Software Engineering
   Stocco A, 2022, J SOFTW-EVOL PROC, V34, DOI 10.1002/smr.2386
   Zohdinasab T, 2021, ISSTA '21: PROCEEDINGS OF THE 30TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P79, DOI 10.1145/3460319.3464811
NR 29
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102990
DI 10.1016/j.scico.2023.102990
EA JUL 2023
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA O9KA4
UT WOS:001046923200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Castagna, G
   Lanvin, V
   Laurent, M
   Nguyen, K
AF Castagna, Giuseppe
   Lanvin, Victor
   Laurent, Mickael
   Nguyen, Kim
TI Revisiting occurrence typing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Union types; Intersection types; Type inference; Dynamic languages;
   Type-cases
ID SET-THEORETIC TYPES; POLYMORPHIC FUNCTIONS; INTERSECTION
AB We revisit occurrence typing, a technique to refine the type of variables occurring in type-cases and, thus, capture some programming patterns used in untyped languages. Although occurrence typing was tied from its inception to set-theoretic types-union types, in particular-it never fully exploited the capabilities of these types. Here we show how, by using set-theoretic types, it is possible to develop a general typing framework that encompasses and generalizes several aspects of current occurrence typing proposals and that can be applied to tackle other problems such as the reconstruction of intersection types for unannotated or partially annotated functions and the optimization of the compilation of gradually typed languages. (c) 2022 Elsevier B.V. All rights reserved.
C1 [Castagna, Giuseppe; Lanvin, Victor; Laurent, Mickael] Univ Paris, Inst Rech Informat Fondamentale IRIF, CNRS, Paris, France.
   [Nguyen, Kim] Univ Paris Saclay, Lab Methodes Formelles LMF, CNRS, Paris, France.
C3 Universite Paris Cite; Centre National de la Recherche Scientifique
   (CNRS); Universite Paris Cite; Universite Paris Saclay; Centre National
   de la Recherche Scientifique (CNRS)
RP Castagna, G (corresponding author), Univ Paris, Inst Rech Informat Fondamentale IRIF, CNRS, Paris, France.
RI Nguyen, Kim Truc K/G-6693-2011; Nguyen, Kim/JWP-3649-2024
OI Laurent, Mickael/0000-0003-1590-2392; Castagna,
   Giuseppe/0000-0003-0951-7535; Lanvin, Victor/0000-0001-8449-4172
FU ANR [ANR-11-LABEX-0045-DIGICOSME, ANR-11-IDEX-0003-02]; "Chaire Langages
   Dynamiques pour les Donnees" of the Paris-Saclay foundation; Google
FX A The authors thank Paul-Andre Mellies for his help on type ranking and
   Sam Tobin-Hochstadt and the other reviewers for their feedback and
   useful insight. This research was partially supported by Labex DigiCosme
   (project ANR-11-LABEX-0045-DIGICOSME) operated by ANR as part of the
   program "Investissement dAvenir'Idex Paris-Saclay (ANR-11-IDEX-0003-02)
   , by the "Chaire Langages Dynamiques pour les Donnees" of the
   Paris-Saclay foundation, and by a Google PhD fellowship for the second
   author.
CR [Anonymous], FACEBOOK
   [Anonymous], GOOGLE
   [Anonymous], 1984, Studies in Logic
   Backes M, 2014, J COMPUT SECUR, V22, P301, DOI 10.3233/JCS-130493
   Benzaken V, 2003, ACM SIGPLAN NOTICES, V38, P51, DOI 10.1145/944746.944711
   Bierman GM, 2010, ACM SIGPLAN NOTICES, V45, P105, DOI 10.1145/1932681.1863560
   Bonnaire-Sergeant A, 2016, LECT NOTES COMPUT SC, V9632, P68, DOI 10.1007/978-3-662-49498-1_4
   Castagna G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110285
   Castagna G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290329
   Castagna G, 2020, LOG METH COMPUT SCI, V16, DOI 10.23638/LMCS-16(1:15)2020
   Castagna G, 2016, ACM SIGPLAN NOTICES, V51, P378, DOI 10.1145/3022670.2951928
   Castagna G, 2015, ACM SIGPLAN NOTICES, V50, P289, DOI 10.1145/2775051.2676991
   Castagna G, 2014, ACM SIGPLAN NOTICES, V49, P5, DOI 10.1145/2535838.2535840
   Castagna G, 2011, ICFP 11 - PROCEEDINGS OF THE 2011 ACM SIGPLAN: INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P94
   Castagna Giuseppe, 2022, P ACM PROGR LANG 6 P, DOI [10 .1145 /349867431, DOI 10.1145/349867431]
   CDuce, CDUCE COMP
   Chaudhuri A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133872
   Chugh R, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P231
   Frisch A, 2008, J ACM, V55, DOI 10.1145/1391289.1391293
   Frisch Alain, 2004, THESIS U PARIS 7 DEN
   Greenberg Michael, 2019, SNAPL, V6, P1, DOI [DOI 10.4230/LIPICS.SNAPL.2019.6, 10]
   Hosoya H, 2000, ACM SIGPLAN NOTICES, V35, P11, DOI 10.1145/357766.351242
   JetBrains, 2018, KOTL DOC
   Kent AM, 2016, ACM SIGPLAN NOTICES, V51, P296, DOI [10.1145/2980983.2908091, 10.1145/2908080.2908091]
   Kent Andrew M., 2019, THESIS INDIANA U
   Knowles K., 2009, Proceedings of the 3rd workshop on Programming languages meets program veri cation, PLPV '09, P27, DOI [10.1145/1481848.1481853, DOI 10.1145/1481848.1481853]
   Komondoor R, 2005, LECT NOTES COMPUT SC, V3440, P157
   Lanvin Victor, 2021, THESIS U PARIS
   Lévy JJ, 2017, MATH STRUCT COMP SCI, V27, P738, DOI 10.1017/S0960129515000353
   MACQUEEN D, 1986, INFORM CONTROL, V71, P95, DOI 10.1016/S0019-9958(86)80019-5
   Microsoft, TYPESCRIPT MICR
   Ou XM, 2004, INT FED INFO PROC, V155, P437
   Pereira M, 2015, ELECTRON PROC THEOR, P24, DOI 10.4204/EPTCS.177.3
   Petrucciani Tommaso, 2019, Ph. D. Dissertation
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Sabry A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P288, DOI 10.1145/141471.141563
   Siek Jeremy G., 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P388, DOI 10.1007/978-3-319-30936-1_21
   Siek Jeremy, 2006, WORKSHOP SCHEME FUNC, P81
   Siek Jeremy G., 2015, LIPICS LEIBNIZ INT P, V32, P274, DOI 10.4230/LIPIcs.SNAPL.2015.274
   TAKAHASHI M, 1989, J SYMB COMPUT, V7, P113, DOI 10.1016/S0747-7171(89)80045-8
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Tobin-Hochstadt S, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P117
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 44
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2022
VL 217
AR 102781
DI 10.1016/j.scico.2022.102781
EA FEB 2022
PG 52
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0D6NG
UT WOS:000776109200004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Chen, W
AF Chen, Wei
TI Loop invariance with <i>break</i> and <i>continue</i>
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Break and continue statements; Loop invariance theorem; Weakest
   precondition; Miraculous statement; Formal method of program derivation
ID PROOF RULES; REFINEMENT
AB This paper presents a formal approach to program derivation using break and continue statements within a loop. We define the break and continue semantics under the framework of weakest precondition. The underpinning theory centers around a miraculous statement re-discovered to model those jump statements in a novel manner. Our focus is on introducing break and continue within a loop to derive a program hand in hand with its correctness. With break and continue so defined, we can naturally incorporate them into the well-known loop invariance theorem. Several program derivation case studies conducted in the paper show that non-trivial programs using those jump statements can be effectively and formally derived without knowing details of underlying formalism. Those case studies should provide convincing evidence that there is no distinction between deriving programs with or without the jump statements but using the jump statements to solve certain types of problems can make the work much simpler and the result more comprehensible. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Chen, Wei] VMware Inc, Palo Alto, CA 94304 USA.
C3 VMware, Inc.
RP Chen, W (corresponding author), VMware Inc, Palo Alto, CA 94304 USA.
EM chenwei@vmware.com
OI Chen, Wei/0000-0001-7436-0293
CR [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   ARBIB MA, 1979, ACTA INFORM, V11, P139, DOI 10.1007/BF00264021
   Back R.-J., 1998, REFINMENT CALCULUS A
   Barnett Mike, 2005, PASTE, V31, P82, DOI [DOI 10.1145/1108792, DOI 10.1145/1108792.1108813]
   Ben-Ari M., 1996, SIGCSE Bulletin, V28, P51, DOI 10.1145/234867.234878
   CHEN W, 1989, LECT NOTES COMPUT SC, V375, P197
   Chen W, 1991, WUCS9153, DOI [10.7936/K77M0694, DOI 10.7936/K77M0694]
   Clint M., 1972, Acta Informatica, V1, P214, DOI 10.1007/BF00288686
   CRISTIAN F, 1984, IEEE T SOFTWARE ENG, V10, P163, DOI 10.1109/TSE.1984.5010218
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dijkstra E.W., 1985, AVG 45A EWD 901A
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   Hoare C. A. R., 1973, Acta Informatica, V2, P335, DOI 10.1007/BF00289504
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Holt R.C., 1988, TURING PROGRAMMING L
   King S., 1995, Formal Aspects of Computing, V7, P54, DOI 10.1007/BF01214623
   Knuth D., 1974, COMPUT SURV, V6
   LONDON RL, 1978, ACTA INFORM, V10, P1, DOI 10.1007/BF00260921
   MORGAN C, 1988, ACM T PROGR LANG SYS, V10, P403, DOI 10.1145/44501.44503
   Morgan C.C., 1988, TECHNICAL MONOGRAPH
   MORGAN CC, 1988, INFORM PROCESS LETT, V26, P243, DOI 10.1016/0020-0190(88)90147-0
   Morris J.M, 1990, FORMAL DEV PROGRAMS, P81
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   Peratto P., 2006, CLEI ELECT J, V9, P7
   Pierce Benjamin C, SOFTWARE FOUNDATIONS
   Roberts E. S., 1995, SIGCSE Bulletin, V27, P268, DOI 10.1145/199691.199815
   Sorva J., 2016, ACM INROADS, V7, P36
   Steinhofel D., 2017, LECT NOTES COMPUTER, V10510
NR 29
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2021
VL 209
AR 102679
DI 10.1016/j.scico.2021.102679
EA MAY 2021
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SN6KV
UT WOS:000658397500003
DA 2024-07-18
ER

PT J
AU Bednarik, R
   Busjahn, T
   Gibaldi, A
   Ahadi, A
   Bielikova, M
   Crosby, M
   Essig, K
   Fagerholm, F
   Jbara, A
   Lister, R
   Orlov, P
   Paterson, J
   Sharif, B
   Sirkiä, T
   Stelovsky, J
   Tvarozek, J
   Vrzakova, H
   van der Linde, I
AF Bednarik, Roman
   Busjahn, Teresa
   Gibaldi, Agostino
   Ahadi, Alireza
   Bielikova, Maria
   Crosby, Martha
   Essig, Kai
   Fagerholm, Fabian
   Jbara, Ahmad
   Lister, Raymond
   Orlov, Pavel
   Paterson, James
   Sharif, Bonita
   Sirkia, Teemu
   Stelovsky, Jan
   Tvarozek, Jozef
   Vrzakova, Hana
   van der Linde, Ian
TI EMIP: The eye movements in programming dataset
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Eye-tracking; Program comprehension; Dataset
AB A large dataset that contains the eye movements of N=216 programmers of different experience levels captured during two code comprehension tasks is presented. Data are grouped in terms of programming expertise (from none to high) and other demographic descriptors. Data were collected through an international collaborative effort that involved eleven research teams across eight countries on four continents. The same eye tracking apparatus and software was used for the data collection. The Eye Movements in Program ming (EMIP) dataset is freely available for download. The varied metadata in the EMIP dataset provides fertile ground for the analysis of gaze behavior and may be used to make novel insights about code comprehension. Crown Copyright (C) 2020 Published by Elsevier B.V. All rights reserved.
C1 [Bednarik, Roman] Univ Eastern Finland, Kuopio, Finland.
   [Busjahn, Teresa] HTW Berlin, Berlin, Germany.
   [Gibaldi, Agostino] Univ Genoa, Genoa, Italy.
   [Ahadi, Alireza; Lister, Raymond] Univ Technol, Sydney, NSW, Australia.
   [Bielikova, Maria] Kempelen Inst Intelligent Technol, Bratislava, Slovakia.
   [Tvarozek, Jozef] Slovak Univ Technol Bratislava, Bratislava, Slovakia.
   [Crosby, Martha; Stelovsky, Jan] Univ Hawaii Manoa, Honolulu, HI 96822 USA.
   [Essig, Kai] Rhine Waal Univ Appl Sci, Kleve, Germany.
   [Fagerholm, Fabian] Univ Helsinki, Helsinki, Finland.
   [Jbara, Ahmad] Augusta Univ, Augusta, GA USA.
   [Orlov, Pavel] Imperial Coll London, London, England.
   [Paterson, James] Glasgow Caledonian Univ, Glasgow, Lanark, Scotland.
   [Sharif, Bonita] Univ Nebraska, Lincoln, NE USA.
   [Fagerholm, Fabian; Sirkia, Teemu] Aalto Univ, Espoo, Finland.
   [Vrzakova, Hana] Univ Colorado, Boulder, CO 80309 USA.
   [van der Linde, Ian] Anglia Ruskin Univ, Cambridge, England.
C3 University of Eastern Finland; University of Genoa; University of
   Technology Sydney; Slovak University of Technology Bratislava;
   University of Hawaii System; University of Hawaii Manoa; University of
   Helsinki; University System of Georgia; Augusta University; Imperial
   College London; Glasgow Caledonian University; University of Nebraska
   System; University of Nebraska Lincoln; Aalto University; University of
   Colorado System; University of Colorado Boulder; Anglia Ruskin
   University
RP Bednarik, R (corresponding author), Univ Eastern Finland, Kuopio, Finland.
EM roman.bednarik@uef.fi
RI Bielikova, Maria/E-5787-2013; Essig, Kai/AAR-6354-2021; Fagerholm,
   Fabian/B-1952-2015; van der Linde, Ian/S-3130-2019; Paterson,
   James/AAA-3591-2022; Sharif, Bonita/GXZ-5409-2022
OI Bielikova, Maria/0000-0003-4105-3494; Fagerholm,
   Fabian/0000-0002-7298-3021; van der Linde, Ian/0000-0002-8131-5906;
   Sharif, Bonita/0000-0002-5178-7160; Vrzakova, Hana/0000-0002-5624-8588;
   Crosby, Martha/0000-0002-1672-9037
CR [Anonymous], 2016, ARXIV161001563
   Bateson P, 2014, DOMESTIC CAT: THE BIOLOGY OF ITS BEHAVIOUR, 3RD EDITION, P231
   Bednarik R., 2006, Proceedings. ETRA 2006. Symposium on Eye Tracking Research and Applications, P125, DOI 10.1145/1117309.1117356
   Binkley D, 2013, EMPIR SOFTW ENG, V18, P219, DOI 10.1007/s10664-012-9201-4
   Busjahn T., 2014, ICER 2014 P 10 ANN I, P3, DOI DOI 10.1145/2632320.2632344
   Busjahn T, 2015, INT C PROGRAM COMPRE, P255, DOI 10.1109/ICPC.2015.36
   Canessa A., 2012, HUMAN CENTRIC MACHIN
   CROSBY ME, 1990, COMPUTER, V23, P24, DOI 10.1109/2.48797
   D'Angelo S, 2017, PROCEEDINGS OF THE 2017 ACM SIGCHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI'17), P6245, DOI 10.1145/3025453.3025573
   Fritz T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P402, DOI 10.1145/2568225.2568266
   Gibaldi A, 2021, BEHAV RES METHODS, V53, P167, DOI 10.3758/s13428-020-01388-2
   Gibaldi A, 2017, BEHAV RES METHODS, V49, P923, DOI 10.3758/s13428-016-0762-9
   Hanses M., 2015, THESIS
   Javadi Amir-Homayoun, 2015, Front Neuroeng, V8, P4, DOI 10.3389/fneng.2015.00004
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Obaidellah U, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3145904
   Ooms K, 2015, J EYE MOVEMENT RES, V8, DOI 10.16910/jemr.8.1.5
   Orlov PA, 2017, PERCEPTION, V46, P541, DOI 10.1177/0301006616675629
   Palmer C, 2016, 2016 ACM SYMPOSIUM ON EYE TRACKING RESEARCH & APPLICATIONS (ETRA 2016), P65, DOI 10.1145/2857491.2857544
   Rajashekar U, 2006, IEEE IMAGE PROC, P453, DOI 10.1109/ICIP.2006.312491
   Rayner K, 2005, BL HBK DEV PSYCHOL, P79, DOI 10.1002/9780470757642.ch5
   Sharafi Z, 2020, EMPIR SOFTW ENG, V25, P3128, DOI 10.1007/s10664-020-09829-4
   Sharafi Z, 2015, ASIA PAC SOFWR ENG, P96, DOI 10.1109/APSEC.2015.53
   Sharafi Z, 2015, INFORM SOFTWARE TECH, V67, P79, DOI 10.1016/j.infsof.2015.06.008
   Sharif Bonita, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P196, DOI 10.1109/ICPC.2010.41
   Uwano H., 2005, Eye Tracking Research and Applications Symposium (ETRA), V2005, P133
   van der Linde I, 2009, SPATIAL VISION, V22, P161, DOI 10.1163/156856809787465636
NR 27
TC 12
Z9 12
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2020
VL 198
AR 102520
DI 10.1016/j.scico.2020.102520
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NS6CK
UT WOS:000572346900002
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Lima, L
   Tavares, A
   Nogueira, SC
AF Lima, Lucas
   Tavares, Amaury
   Nogueira, Sidney C.
TI A framework for verifying deadlock and nondeterminism in UML activity
   diagrams based on CSP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Activity diagram; CSP; Deadlock; Nondeterminism
ID MODELS
AB Deadlock and nondeterminism may become increasingly hard to detect in concurrent and distributed systems. UML activity diagrams are flowcharts that model sequential and concurrent behavior. Although the UML community widely adopts such diagrams, there is no standard approach to verify the presence of deadlock and nondeterministic behavior in activity diagrams. Nondeterminism is usually neglected in the literature even though it may be considered a very relevant property. This work proposes a framework for the automatic verification of deadlock and nondeterminism in UML activity diagrams. It introduces a compositional CSP semantics for activity diagrams that is used to automatically generate CSP specifications from UML models. These specifications are the input for the automatic verification of deadlock and nondeterminism using the FDR refinement checker. We propose a plugin for the Astah modeling environment that mechanizes the translation process, and that calls FDR in the background to perform the verification of properties. The tool keeps the traceability between a diagram and its CSP specification. It parses the FDR results to highlight the diagram paths that lead to a deadlock or a nondeterministic behavior. This framework adds verification capabilities to the UML modeling tool and keeps the formal semantics transparent to the users. Therefore, the user does not need to understand or manipulate formal notations during modeling. We present the results of a case study that applies the proposed framework for the verification of models in the domain of cloud computing. We discuss future applications due to the potential of our approach. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Lima, Lucas; Tavares, Amaury; Nogueira, Sidney C.] Univ Fed Rural Pernambuco, Dept Comp, Rua Dom Manuel de Medeiros S-N, BR-52171900 Recife, PE, Brazil.
C3 Universidade Federal Rural de Pernambuco (UFRPE)
RP Lima, L (corresponding author), Univ Fed Rural Pernambuco, Dept Comp, Rua Dom Manuel de Medeiros S-N, BR-52171900 Recife, PE, Brazil.
EM lucas.albertins@ufrpe.br; amaury.tavares@ufrpe.br;
   sidney.nogueira@ufrpe.br
OI Nogueira, Sidney/0000-0002-8817-5029; Lima, Lucas/0000-0003-1859-8437
CR Abdelhalim I, 2010, LECT NOTES COMPUT SC, V6447, P371, DOI 10.1007/978-3-642-16901-4_25
   Alawneh L., 2006, 13th Annual IEEE International Symposium and Workshop on Engineering of Computer Based Systems
   [Anonymous], 2011, INT J COMPUTER SCI I
   [Anonymous], 1997, The Theory and Practice of Concurrency
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Baldan P, 2005, LECT NOTES COMPUT SC, V3267, P18
   Banti F, 2011, J SYMB COMPUT, V46, P119, DOI 10.1016/j.jsc.2010.08.005
   Beck Kent L., 2003, Test Driven Development By Example
   Boehm BW., 1981, Software Engineering Economics
   Cimatti A., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P495
   Eshuis R, 2006, ACM T SOFTW ENG METH, V15, P1, DOI 10.1145/1125808.1125809
   George R, 2012, INT CONF INTELL SYST, P303, DOI 10.1109/ISDA.2012.6416555
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Haskins B., 2004, INCOSE INT S, V14, P1723, DOI [DOI 10.1002/J.2334-5837.2004.TB00608.X, 10.1002/j.2334-5837.2004.tb00608.x]
   Hoare CAR., 1985, Communicating Sequential Processes
   Hoare T., 1998, UNIFYING THEORIES PR
   IBM, 2019, RAT RHAPS ARCH SOFTW
   Kerkouche E., 2015, ICIT 2015, P515
   Kwiatkowska M, 2002, LECT NOTES COMPUT SC, V2324, P200
   Lange M, 2007, LECT NOTES COMPUT SC, V4703, P90
   Lima Lucas, 2013, Formal Methods: Foundations and Applications. 16th Brazilian Symposium, SBMF 2013. Proceedings: LNCS 8195, P179, DOI 10.1007/978-3-642-41071-0_13
   Lima L., 2019, PROPERTY VERIFIER TO
   Lima L., 2016, THESIS
   Lima L., 2019, SUPPLEMENTARY MAT
   Lima L, 2017, SOFTW SYST MODEL, V16, P875, DOI 10.1007/s10270-015-0492-y
   Machida F, 2011, SYM REL DIST SYST, P209, DOI 10.1109/SRDS.2011.33
   Maggiani R., 2009, Proceedings of the IEEE International Professional Communication Conference, P1
   Marinescu ID, 2013, TRIBOLOGY OF ABRASIVE MACHINING PROCESSES, 2ND EDITION, P1
   Nguyen H.H.C., 2015, RECENT ADV INFORM CO, P285
   Object Management Group, 2013, TECH REP
   OMG, 2017, TECH REP
   OMG, 2017, TECH REP
   Ouchani S, 2014, EXPERT SYST APPL, V41, P2713, DOI 10.1016/j.eswa.2013.10.064
   PTC, 2019, PTC INT MOD
   Reggio G., 2013, EESSMOD MODELS, P3
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Shull F, 2002, EIGHTH IEEE SYMPOSIUM ON SOFTWARE METRICS, PROCEEDINGS, P249, DOI 10.1109/METRIC.2002.1011343
   Vision C., 2019, ASTAH
   Wood J., 2012, PHASE ONE PRELIMINAR, P1, DOI DOI 10.1109/SYSOSE.2012.6384144
NR 39
TC 7
Z9 7
U1 3
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102497
DI 10.1016/j.scico.2020.102497
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA NS6CO
UT WOS:000572347300001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Abd Alrahman, Y
   De Nicola, R
   Loreti, M
AF Abd Alrahman, Yehia
   De Nicola, Rocco
   Loreti, Michele
TI Programming interactions in collective adaptive systems byrelying on
   attribute-based communication
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Collective-adaptive systems; Attribute-based communication; Process
   calculus; Operational semantics; Computing methodologies
ID CALCULUS; SUPPORT
AB Collective adaptive systems are new emerging computational systems consisting of a large number of interacting components and featuring complex behaviour. These systems are usually distributed, heterogeneous, decentralised and interdependent, and are operating in dynamic and possibly unpredictable environments. Finding ways to understand and design these systems and, most of all, to model the interactions of their components, is a difficult but important endeavour. In this article we propose a language-based approach for programming the interactions of collective-adaptive systems by relying on attribute-based communication; a paradigm that permits a group of partners to communicate by considering their run-time properties and capabilities. We introduce AbC, a foundational calculus for attribute-based communication and show how its linguistic primitives can be used to program a sophisticated variant of the well-known problem of Stable Allocation in Content Delivery Networks. In our variant, content providers are assigned to clients based on collaboration and by taking into account the preferences of both parties in a fully anonymous and distributed settings. We also illustrate the expressive power of attribute-based communication by showing the natural encoding of group-based, publish/subscribe-based and channel-based communication paradigms into AbC. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Abd Alrahman, Yehia] Univ Gothenburg, Gothenburg, Sweden.
   [De Nicola, Rocco] IMT Sch Adv Studies, Lucca, Italy.
   [De Nicola, Rocco] CINI Roma, Natl Cybersecur Lab, Rome, Italy.
   [Loreti, Michele] Univ Camerino, Camerino, Italy.
C3 University of Gothenburg; IMT School for Advanced Studies Lucca;
   University of Camerino
RP Abd Alrahman, Y (corresponding author), Univ Gothenburg, Gothenburg, Sweden.
EM yehia.abd.alrahman@gu.se; rocco.denicola@imtlucca.it;
   michele.loreti@unicam.it
RI De Nicola, Rocco/B-8584-2012; ALrahman, Yehia Abd/AAF-4033-2019
OI ALrahman, Yehia Abd/0000-0002-4866-6931; De Nicola,
   Rocco/0000-0003-4691-7570
FU ERC consolidator grant D-SynMA under the European Union's Horizon 2020
   research and innovation programme [772459]; MIUR project MATTERS
   (Methods and Tools for Trustworthy Smart Systems) [PRIN 2017FTXR7S IT]
FX Y. Abd Alrahman is funded by the ERC consolidator grant D-SynMA under
   the European Union's Horizon 2020 research and innovation programme
   (grant agreement No. 772459). The work of R. De Nicola and M. Loreti is
   partially funded by MIUR project PRIN 2017FTXR7S IT MATTERS (Methods and
   Tools for Trustworthy Smart Systems).
CR Abd Alrahman Yehia, 2018, Leveraging Applications of Formal Methods, Verification and Validation Distributed Systems. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11246), P288, DOI 10.1007/978-3-030-03424-5_19
   Abd Alrahman Y., 2020, P 19 INT C AUT AG MU
   Abd Alrahman Y, 2019, INFORM COMPUT, V268, DOI 10.1016/j.ic.2019.104457
   Abd Alrahman Y, 2018, LECT NOTES COMPUT SC, V10854, P1, DOI 10.1007/978-3-319-92612-4_1
   Abd Alrahman Y, 2016, LECT NOTES COMPUT SC, V9952, P539, DOI 10.1007/978-3-319-47166-2_38
   Abd Alrahman Y, 2016, LECT NOTES COMPUT SC, V9688, P1, DOI 10.1007/978-3-319-39570-8_1
   AGHA G, 1993, SIGPLAN NOTICES, V28, P23, DOI 10.1145/173284.155335
   Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   AHUJA S, 1986, COMPUTER, V19, P26, DOI 10.1109/MC.1986.1663305
   Alrahman Y. A., CORR
   Anderson S., 2013, ADAPTIVE COLLECTIVE
   [Anonymous], 2000, Reasoning About Rational Agents
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 1989, C RECORD 16 ANN ACM, DOI DOI 10.1145/75277.75293
   Baeten J., 2006, 20060603 CS
   Bagheri Maryam., 2016, International Workshop on Formal Aspects of Component Software, P241
   Bass M. A., 2002, US Patent, Patent No. [6,405,266, 6405266]
   Behjati R, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2581376
   Bergenti F., 2003, DECLARATIVE AGENT LA, P37
   Broy M, 2006, COMPUTER, V39, P72, DOI 10.1109/MC.2006.358
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Bures T, 2016, COMPUTER, V49, P50, DOI 10.1109/MC.2016.377
   Buschmann F., 2007, PATTERN ORIENTED SOF, V5
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Cardelli L., 1997, ELECT NOTES THEOR CO, V10, P198, DOI [DOI 10.1016/S1571-0661(05)80699-1, 10.1016/S1571-0661(05)80699-1]
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Chockler GV, 2001, ACM COMPUT SURV, V33, P427, DOI 10.1145/503112.503113
   de Boer FS, 2005, APPL ALGEBR ENG COMM, V16, P113, DOI 10.1007/s00200-005-0173-0
   De Nicola R, 2018, SCI COMPUT PROGRAM, V168, P71, DOI 10.1016/j.scico.2018.08.006
   De Nicola R, 2014, ACM T AUTON ADAP SYS, V9, DOI 10.1145/2619998
   Ene C, 1999, LECT NOTES COMPUT SC, V1684, P258
   Ene C., 2001, P 15 INT PAR DISTR P, P149
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   Ferscha A., 2015, UBICOMPISWC ADJUNCT, P893, DOI DOI 10.1145/2800835.2809508
   Finkbeiner B, 2005, IEEE S LOG, P321
   Gale D, 2013, AM MATH MON, V120, P386, DOI 10.4169/amer.math.monthly.120.05.386
   Hennicker Rolf, 2014, Specification, Algebra, and Software. Essays Dedicated to Kokichi Futatsugi: LNCS 8373, P359, DOI 10.1007/978-3-642-54624-2_18
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Hlldobler Bert., 2008, The Superorganism: The Beauty, Elegance, and Strangeness of Insect Societies
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Holbrook HW, 1999, COMP COMM R, V29, P65, DOI 10.1145/316194.316207
   Iwama K, 2008, INTERNATIONAL CONFERENCE ON INFORMATICS EDUCATION AND RESEARCH FOR KNOWLEDGE-CIRCULATING SOCIETY, PROCEEDINGS, P131, DOI 10.1109/ICKS.2008.7
   Jackson DE, 2006, CURR BIOL, V16, pR570, DOI 10.1016/j.cub.2006.07.015
   Jensen TR, 2001, DISCRETE MATH, V229, P167, DOI 10.1016/S0012-365X(00)00206-5
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kinny D, 2005, APPL ALGEBR ENG COMM, V16, P77, DOI [10.1007/s00200-005-0172-1, 10.1007/s00200-005-0171-1]
   Klarl A., 2014, FORM ASP COMP SOFTW, P183, DOI DOI 10.1007/978-3-319-15317-9_11
   Kopetz, 2011, REAL-TIME SYST, DOI [10.1007/978-1-4419-8237-7_13, DOI 10.1007/978-1-4419-8237-7, DOI 10.1007/978-1-4419-8237-7_13]
   Lewko A, 2011, LECT NOTES COMPUT SC, V6632, P568, DOI 10.1007/978-3-642-20465-4_31
   Maggs BM, 2015, ACM SIGCOMM COMP COM, V45, P52, DOI 10.1145/2805789.2805800
   Margheri A, 2019, IEEE T SOFTWARE ENG, V45, P2, DOI 10.1109/TSE.2017.2765640
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Pike R., 2012, Proceedings of the 3rd annual conference on Systems, programming, and applications: software for humanity, P5
   Prasad KVS, 1995, SCI COMPUT PROGRAM, V25, P285, DOI 10.1016/0167-6423(95)00017-8
   PRASAD KVS, 1991, LECT NOTES COMPUT SC, V493, P338
   Sanderson D, 2015, 2015 IEEE NINTH INTERNATIONAL CONFERENCE ON SELF-ADAPTIVE AND SELF-ORGANIZING SYSTEMS WORKSHOPS (SASOW), P61, DOI 10.1109/SASOW.2015.15
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Sommerville I, 2012, COMMUN ACM, V55, P71, DOI 10.1145/2209249.2209268
   Viroli M, 2005, APPL ALGEBR ENG COMM, V16, P69, DOI 10.1007/s00200-005-0170-3
   Viroli M, 2018, ACM T MODEL COMPUT S, V28, DOI 10.1145/3177774
   Wirsing M., 2008, SOFTWARE INTENSIVE S
   Wirsing M., 2015, LECT NOTES COMPUTER, V8998
   Wyckoff P, 1998, IBM SYST J, V37, P454, DOI 10.1147/sj.373.0454
   Yousefi B, 2015, LECT NOTES COMPUT SC, V9392, P69, DOI 10.1007/978-3-319-24644-4_5
NR 65
TC 19
Z9 19
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2020
VL 192
AR 102428
DI 10.1016/j.scico.2020.102428
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LG6EM
UT WOS:000528191700003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Jeffery, A
   Berger, M
AF Jeffery, Alex
   Berger, Martin
TI Asynchronous sessions with implicit functions and messages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Implicits; Session types; Asynchronous session types; Multiparty session
   types; Type classes
AB Session types are a well-established approach to ensuring protocol conformance and the absence of communication errors such as deadlocks in message passing systems. Haskell introduced implicit parameters, Scala popularised this feature and recently gave implicit types first-class status, yielding an expressive tool for handling context dependencies in a type-safe yet terse way. We ask: can type-safe implicit functions be generalised from Scala's sequential setting to message passing computation? We answer this question in the affirmative by generalising the concept of an implicit function to an implicit message, its concurrent analogue. We present two calculi, each with implicit message passing. The first, IM, is a concurrent functional language that extends Gay and Vasconcelos's calculus of linear types for asynchronous sessions (LAST) with implicit functions and messages. The second, MPIM, is a pi-calculus with implicit messages that extends Coppo, Dezani-Ciancaglini, Padovani and Yoshida's calculus of multiparty asynchronous sessions (MPST). We argue, via examples, that these new language features provide utility to the programmer, and prove each system sound by translation into its respective base calculus. (C) 2019 Elsevier B.V. All tights reserved.
C1 [Jeffery, Alex; Berger, Martin] Univ Sussex, Brighton BN1 9RH, E Sussex, England.
C3 University of Sussex
RP Jeffery, A (corresponding author), Univ Sussex, Brighton BN1 9RH, E Sussex, England.
EM A.P.Jeffery@sussex.ac.uk; M.F.Berger@sussex.ac.uk
OI Jeffery, Alexander/0000-0002-5618-2048; Berger,
   Martin/0000-0003-3239-5812
FU Engineering and Physical Sciences Research Council of the United
   Kingdom; University of Sussex
FX This work was supported by the Engineering and Physical Sciences
   Research Council of the United Kingdom, and the University of Sussex. We
   thank D. Castro, S. Gay, A. Scalas, V. Vasconcelos and the anonymous
   reviewers of 191, for valuable feedback.
CR Amin Nada, 2016, A List of Successes that can Change the World. Essays Dedicated to Philip Wadler on the Occasion of his 60th Birthday. LNCS 9600, P249, DOI 10.1007/978-3-319-30936-1_14
   Amin Nada, 2012, 19 INT WORKSH FDN OB
   [Anonymous], 1992, Mathematical Structures in Computer Science, DOI DOI 10.1017/S0960129500001407
   Atkey R, 2009, J FUNCT PROGRAM, V19, P335, DOI 10.1017/S095679680900728X
   Berger M., 2005, ACTA INFORM
   Bernardy J.-P., 2017, P ACM PROGRAM LANG, V2
   Coppo M., 2015, MATH STRUCT COMPUT S
   Gay SJ, 2010, J FUNCT PROGRAM, V20, P19, DOI 10.1017/S0956796809990268
   Honda K., 1993, PROC CONCUR
   Jeffery A., 2018, INT S THEOR ASP SOFT
   KAES S, 1988, LECT NOTES COMPUT SC, V300, P131
   Kaijanaho Antti-Juhani, 2015, JYVASKYLA STUDIES CO, V222
   Lewis J. R., 2000, P POPL
   Odersky M., 2018, P POPL
   Oliveira BCD, 2012, ACM SIGPLAN NOTICES, V47, P35, DOI 10.1145/2345156.2254070
   Oliveira BCDS, 2010, ACM SIGPLAN NOTICES, V45, P341, DOI 10.1145/1932682.1869489
   Rompf T, 2016, ACM SIGPLAN NOTICES, V51, P624, DOI 10.1145/3022671.2984008
   Sobral D. C., 2011, DOES SCALA LOOK IMPL
   Takeuchi K., 1994, P PARLE
   Toninho B., 2017, CORR
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
NR 21
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2019
VL 180
BP 36
EP 70
DI 10.1016/j.scico.2019.05.004
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IR8XM
UT WOS:000481724800004
OA Green Accepted, Bronze, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Ferreira, BM
   Soares, BS
   Pereira, FMQ
AF Ferreira, Bruno Morais
   Soares-Filho, Britaldo Silveira
   Quintao Pereira, Fernando Magno
TI The Dinamica EGO virtual machine
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Programing Languages (SBLP)
CY SEP 22-23, 2016
CL Maringa, BRAZIL
DE Dataflow; Referential transparency; Geomodeling; Virtual machine
ID DEFORESTATION
AB This paper describes DinamicaVM, the virtual machine that runs applications developed in Dinamica EGO. Dinamica EGO is a framework used in the development of geomodeling applications. Behind its multitude of visual modes and graphic elements, Dinamica EGO runs on top of a virtual machine. This machine - DinamicaVM - offers developers a high-level instruction set architecture, featuring elements such as map and reduce, which are typical in the functional/parallel world. Ensuring that these very expressive components work together efficiently is a challenging endeavor. Dinamica's runtime addresses this challenge through a suite of optimizations, which borrows ideas from functional programming languages, and leverages specific behavior expected in geo-scientific programs. As we show in this paper some of these optimizations deliver speedups of almost 100x, and are key to the industrial-quality performance of one of the world's most widely used geomodeling tools. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Ferreira, Bruno Morais; Soares-Filho, Britaldo Silveira; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Ave Antonio Carlos 6627, BR-31270010 Belo Horizonte, MG, Brazil.
C3 Universidade Federal de Minas Gerais
RP Pereira, FMQ (corresponding author), Univ Fed Minas Gerais, Ave Antonio Carlos 6627, BR-31270010 Belo Horizonte, MG, Brazil.
EM pronesto@gmail.com
RI Pereira, Fernando/HNR-7786-2023
CR [Anonymous], 2013, PEMBUATAN BIODIESEL
   [Anonymous], 1992, Semantics with applications: a formal introduction
   BALLANCE RA, 1990, SIGPLAN NOTICES, V25, P257, DOI 10.1145/93548.93578
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   Carlson KM, 2012, P NATL ACAD SCI USA, V109, P7559, DOI 10.1073/pnas.1200452109
   Coutts D, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P315
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Costa IRD, 2014, COMPUT LANG SYST STR, V40, P37, DOI 10.1016/j.cl.2013.11.001
   de Vries E, 2008, LECT NOTES COMPUT SC, V5083, P201, DOI 10.1007/978-3-540-85373-2_12
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Eastman J.R., 1989, AUTOCARTO 9 9 INT S, V9, P288
   Ferreira BM, 2015, LECT NOTES COMPUT SC, V9325, P44, DOI 10.1007/978-3-319-24012-1_4
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GARDNER M, 1970, SCI AM, V223, P120, DOI 10.1038/scientificamerican1070-120
   Garey M. R., 1976, THEORETICAL COMPUTER, V1, P193
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Hajek F, 2011, ENVIRON SCI POLICY, V14, P201, DOI 10.1016/j.envsci.2010.12.007
   HARTEL PH, 1994, COMPUT LANG, V20, P177, DOI 10.1016/0096-0551(94)90003-5
   Hils D. D., 1992, Journal of Visual Languages and Computing, V3, P69, DOI 10.1016/1045-926X(92)90034-J
   Huong H. T. L., 2013, HYDROL EARTH SYST SC, V8, P10781, DOI [10.5194/hessd-8-10781-2011, DOI 10.5194/HESSD-8-10781-2011]
   Johnson G., 2001, LABVIEW GRAPHICAL PR, V3rd
   Johnston WM, 2004, ACM COMPUT SURV, V36, P1, DOI 10.1145/1013208.1013209
   Korfiatis G., 2011, 2011 Federated Conference on Computer Science and Information Systems (FedCSIS), P879
   Leshchinskiy R, 2009, LECT NOTES COMPUT SC, V5418, P209, DOI 10.1007/978-3-540-92995-6_15
   Levitt D., 1986, TECH REP
   Mas JF, 2014, ENVIRON MODELL SOFTW, V51, P94, DOI 10.1016/j.envsoft.2013.09.010
   Morais Ferreira Bruno, 2012, Programming Languages. Proceedings of the16th Brazilian Symposium, SBLP 2012, P87, DOI 10.1007/978-3-642-33182-4_8
   Nepstad D, 2009, SCIENCE, V326, P1350, DOI 10.1126/science.1182108
   Odersky M., 1991, P 18 ACM S PRINC PRO, P25, DOI DOI 10.1145/99583.99590
   Oliveira U, 2017, SCI REP-UK, V7, DOI 10.1038/s41598-017-08707-2
   da Mata LLP, 2013, SCI COMPUT PROGRAM, V78, P1193, DOI 10.1016/j.scico.2012.09.006
   Pereira FMQ, 2006, LECT NOTES COMPUT SC, V3921, P79
   Pérez-Vega A, 2012, ENVIRON MODELL SOFTW, V29, P11, DOI 10.1016/j.envsoft.2011.09.011
   Soares BS, 2002, ECOL MODEL, V154, P217, DOI 10.1016/S0304-3800(02)00059-5
   Soares BS, 2006, NATURE, V440, P520, DOI 10.1038/nature04389
   Soares-Filho B.S., 2009, Modeling Environmental Dynamics with Dinamica EGO
   Soares B, 2016, PLOS ONE, V11, DOI 10.1371/journal.pone.0152311
   Soares B, 2014, SCIENCE, V344, P363, DOI 10.1126/science.1246663
   Soares B, 2013, ENVIRON MODELL SOFTW, V43, P80, DOI 10.1016/j.envsoft.2013.01.010
   Soares B, 2010, P NATL ACAD SCI USA, V107, P10821, DOI 10.1073/pnas.0913048107
   Soares-Filho BS, 2012, CHALLENGES LOW CARBO
   SONDERGAARD H, 1990, ACTA INFORM, V27, P505, DOI 10.1007/BF00277387
   Tanimoto S. L., 1990, Journal of Visual Languages and Computing, V1, P127, DOI 10.1016/S1045-926X(05)80012-6
   Thapa RB, 2011, COMPUT ENVIRON URBAN, V35, P25, DOI 10.1016/j.compenvurbsys.2010.07.005
   Tomlin C.D, 1990, GEOGRAPHIC INFORM SY
   TU P, 1995, SIGPLAN NOTICES, V30, P47, DOI 10.1145/223428.207115
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
   Zadeck Frank Kenneth, 1984, THESIS
NR 49
TC 11
Z9 13
U1 1
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2019
VL 173
BP 3
EP 20
DI 10.1016/j.scico.2018.02.002
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA HO3WK
UT WOS:000460853500002
OA hybrid
DA 2024-07-18
ER

PT J
AU ter Beek, MH
   Damiani, F
   Gnesi, S
   Mazzanti, F
   Paolini, L
AF ter Beek, Maurice H.
   Damiani, Ferruccio
   Gnesi, Stefania
   Mazzanti, Franco
   Paolini, Luca
TI On the expressiveness of modal transition systems with variability
   constraints
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product lines; Formal specification; Behavioural specification;
   Modal transition systems; Featured transition systems
ID MODEL-CHECKING; VERIFICATION
AB We demonstrate that modal transition systems with variability constraints are equally expressive as featured transition systems, by defining a transformation of the latter into the former, a transformation of the former into the latter, and proving the soundness and completeness of both transformations. Modal transition systems and featured transition systems are widely recognised as fundamental behavioural models for software product lines and our results thus contribute to the expressiveness hierarchy of such basic models studied in other papers published in this journal. (C) 2018 Elsevier B.V. All rights reserved.
C1 [ter Beek, Maurice H.; Gnesi, Stefania; Mazzanti, Franco] CNR, ISTI, Via G Moruzzi 1, I-56124 Pisa, Italy.
   [Damiani, Ferruccio; Paolini, Luca] Univ Torino, Turin, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); University
   of Turin
RP ter Beek, MH (corresponding author), CNR, ISTI, Via G Moruzzi 1, I-56124 Pisa, Italy.
EM maurice.terbeek@isti.cnr.it; ferruccio.damiani@unito.it;
   stefania.gnesi@isti.cnr.it; franco.mazzanti@isti.cnr.it;
   luca.paolini@unito.it
RI Beek, Maurice H ter/N-5563-2015; Mazzanti, Franco/B-7324-2015;
   Ferruccio, Damiani/D-2383-2011; Paolini, Luca/M-8924-2019
OI Beek, Maurice H ter/0000-0002-2930-6367; Mazzanti,
   Franco/0000-0003-4562-8777; Ferruccio, Damiani/0000-0001-8109-1706;
   Paolini, Luca/0000-0002-4126-0170
CR Acher M, 2010, LECT NOTES COMPUT SC, V5969, P62
   [Anonymous], 1980, LNCS
   [Anonymous], 2010, ENCY MACHINE LEARNIN
   [Anonymous], 2016, Feature-Oriented Software Product Lines
   Asirelli Patrizia, 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P130, DOI 10.1109/SPLC.2011.34
   Asirelli P, 2010, LECT NOTES COMPUT SC, V6396, P43, DOI 10.1007/978-3-642-16265-7_5
   Benes N, 2011, LECT NOTES COMPUT SC, V6996, P275, DOI 10.1007/978-3-642-24372-1_20
   Beohar H, 2016, SCI COMPUT PROGRAM, V123, P42, DOI 10.1016/j.scico.2015.06.005
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Classen A, 2014, SCI COMPUT PROGRAM, V80, P416, DOI 10.1016/j.scico.2013.09.019
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Cordy M, 2013, PROCEEDINGS OF THE 17TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE CO-LOCATED WORKSHOPS (SPLC'13 WORKSHOPS), P141
   Damiani F, 2017, LECT NOTES COMPUT SC, V10522, P67, DOI 10.1007/978-3-319-68972-2_5
   DENICOLA R, 1990, LECT NOTES COMPUT SC, V469, P407
   DENICOLA R, 1987, ACTA INFORM, V24, P211, DOI 10.1007/BF00264365
   Dimovski AS, 2015, LECT NOTES COMPUT SC, V9232, P282, DOI 10.1007/978-3-319-23404-5_18
   Erwig M, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063245
   Fantechi A, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P193, DOI 10.1109/SPLC.2008.45
   Fantechi A., 2007, ESEC FSE 07, P521
   Fantechi A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2211616.2211619
   Fischbein D., 2006, ROSATEA 06, P39
   Gorla D, 2010, INFORM COMPUT, V208, P1031, DOI 10.1016/j.ic.2010.05.002
   Gorrieri R., 2015, TEXTS THEORETICAL CO
   Gorrieri R, 2017, MONOGRAPHS THEORETIC
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Kretínsky J, 2017, LECT NOTES COMPUT SC, V10460, P36, DOI 10.1007/978-3-319-63121-9_3
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Lauenroth K, 2009, IEEE INT CONF AUTOM, P269, DOI 10.1109/ASE.2009.16
   Lochau M, 2014, LECT NOTES COMPUT SC, V8802, P320, DOI 10.1007/978-3-662-45234-9_23
   Milner R., 1989, Communication and concurrency
   Muschevici R, 2016, SOFTW SYST MODEL, V15, P1181, DOI 10.1007/s10270-015-0475-z
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Pfahringer B., 2010, ENCY MACHINE LEARNIN, P371
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   ter Beek Maurice H., 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P450, DOI 10.1007/978-3-642-32759-9_36
   ter Beek M. H., 2014, SPLC 14, V2, P70, DOI DOI 10.1145/2647908.2655969
   ter Beek MH, 2020, IEEE T SOFTWARE ENG, V46, P321, DOI 10.1109/TSE.2018.2853726
   ter Beek MH, 2017, LECT NOTES COMPUT SC, V10202, P387, DOI 10.1007/978-3-662-54494-5_23
   ter Beek MH, 2016, J LOG ALGEBR METHODS, V85, P287, DOI 10.1016/j.jlamp.2015.11.006
   ter Beek MH, 2015, LECT NOTES COMPUT SC, V9276, P344, DOI 10.1007/978-3-319-22969-0_24
   ter Beek MH, 2011, SCI COMPUT PROGRAM, V76, P119, DOI 10.1016/j.scico.2010.07.002
   Tribastone M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P82, DOI 10.1145/2648511.2648520
   Varshosaz M., 2017, TEST MODELS ALGORITH
NR 44
TC 12
Z9 12
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2019
VL 169
BP 1
EP 17
DI 10.1016/j.scico.2018.09.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HB8RJ
UT WOS:000451358000001
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Corradini, F
   Fornari, F
   Polini, A
   Re, B
   Tiezzi, F
AF Corradini, Flavio
   Fornari, Fabrizio
   Polini, Andrea
   Re, Barbara
   Tiezzi, Francesco
TI A formal approach to modeling and verification of business process
   collaborations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Business process modeling; BPMN collaboration; Operational semantics;
   Maude; Verification
ID SEMANTICS; BPMN; SOUNDNESS; FRAMEWORK; CHECKING
AB In the last years we are observing a growing interest in verification of business process models that, despite their lack of formal characterization, are widely adopted in industry and academia. To this aim, a formalization of the execution semantics of business process modeling languages is essential. In this paper, we focus on the OMG standard BPMN 2.0. Specifically, we provide a direct formalization of its semantics in terms of Labeled Transition Systems. This approach permits to avoid possible miss-interpretations, due to the usage of the natural language in the standard specification, and to overcome issues due to the mapping of BPMN to other formal languages, which are equipped with their own semantics. Our operational semantics is given for a relevant subset of BPMN elements focusing on the capability to model collaborations among organizations via message exchange. One of its distinctive aspects is the suitability to model business processes with arbitrary topology. This allows designers to freely specify their processes according to the reality, without the limitation of defining well-structured models. The provided formalization is also implemented by exploiting the capabilities of Maude. This implementation takes a collaboration model as an input and, explores all the model executions. By relying on it, automatic verification of properties related to collaborations has been carried out via the Maude model checker. We illustrate the benefits of our approach by means of a simple, yet realistic, running example concerning a travel booking scenario. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Corradini, Flavio; Fornari, Fabrizio; Polini, Andrea; Re, Barbara; Tiezzi, Francesco] Univ Camerino, Sch Sci & Technol, Camerino, Italy.
C3 University of Camerino
RP Re, B (corresponding author), Univ Camerino, Sch Sci & Technol, Camerino, Italy.
EM barbara.re@unicam.it
RI Fornari, Fabrizio/AFS-5514-2022
OI Fornari, Fabrizio/0000-0002-3620-1723; Re, Barbara/0000-0001-5374-2364;
   Polini, Andrea/0000-0002-2840-7561
CR [Anonymous], 2007, P EMISA 2007
   [Anonymous], [No title captured]
   [Anonymous], 2013, Business process management, DOI DOI 10.1007/978-3-642-33143-5
   [Anonymous], 2013, SEMINAL CONTRIBUTION
   Arbab F, 2008, COMM COM INF SC, V17, P108
   Awad A, 2008, LECT NOTES COMPUT SC, V5240, P326, DOI 10.1007/978-3-540-85758-7_24
   Awad A, 2010, LECT NOTES BUS INF P, V43, P5
   Baresi L., 2006, ACM SIGSOFT SOFTWARE, V5, P187
   Börger E, 2008, LECT NOTES COMPUT SC, V5316, P59, DOI 10.1007/978-3-540-89762-0_3
   Breu R., 2013, LIV INT ORG PROC IEE, P363
   Caires Luis, 2012, Formal Aspects of Component Software. 7th International Workshop, FACS 2010. Revised Selected Papers, P6, DOI 10.1007/978-3-642-27269-1_2
   Christiansen DR, 2011, LECT NOTES COMPUT SC, V6551, P146, DOI 10.1007/978-3-642-19589-1_10
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Cognini R., 2016, DOMAIN SPECIFIC CONC, P171, DOI DOI 10.1007/978-3-319-39417-6_8
   Cognini R, 2015, LECT NOTES BUS INF P, V215, P245, DOI 10.1007/978-3-319-19243-7_24
   Corradini F., 2015, INT WORKSH FORM ASP, P161
   Corradini F, 2018, LECT NOTES COMPUT SC, V10706, P321, DOI 10.1007/978-3-319-73117-9_23
   Corradini F, 2018, DATA KNOWL ENG, V113, P129, DOI 10.1016/j.datak.2017.11.003
   Corradini F, 2017, IEEE INT CONF AUTOM, P217, DOI 10.1109/ASE.2017.8115635
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Decker G, 2008, LECT NOTES COMPUT SC, V5240, P386, DOI 10.1007/978-3-540-85758-7_30
   Dehnert J, 2005, LECT NOTES COMPUT SC, V3649, P386, DOI 10.1007/11538394_28
   Dijkman RM, 2008, INFORM SOFTWARE TECH, V50, P1281, DOI 10.1016/j.infsof.2008.02.006
   Dumas Marlon, 2012, Advanced Information Systems Engineering. Proceedings 24th International Conference, CAiSE 2012, P31, DOI 10.1007/978-3-642-31095-9_3
   Dumas M, 2007, LECT NOTES COMPUT SC, V4803, P41
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   El-Saber N., 2014, BM FA, P1
   Fantechi A, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2211616.2211619
   Fellman Michael, 2014, INFORM SYST
   Foster H, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P152, DOI 10.1109/ASE.2003.1240303
   Gfeller B, 2011, LECT NOTES BUS INF P, V95, P31
   Groefsema H., 2013, 3 INT S BUS MOD SOFT, V1, P198
   Halle S., 2010, Proceedings of the 25th IEEE/ACM Int. Conf. Automated Software Engineering (ASE 2010), P235
   Haydar M, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P410
   Haydar May, 2008, 2008 8th International Conference on Web Engineering (ICWE), P240, DOI 10.1109/ICWE.2008.38
   Huai W., 2010, TRUSTWORTHY COMPOSIT, P422
   JianHong Ye, 2010, Journal of Software, V5, P396, DOI 10.4304/jsw.5.4.396-404
   Kheldoun A, 2015, LECT NOTES COMPUT SC, V9253, P55, DOI 10.1007/978-3-319-23063-4_4
   Kiepuszewski B., 2000, STRUCTURED WORKFLOW, P431
   Kirchner F, 2007, ELECTRON NOTES THEOR, V174, P35, DOI 10.1016/j.entcs.2006.10.023
   Koniewski R, 2006, 20TH EUROPEAN CONFERENCE ON MODELLING AND SIMULATION ECMS 2006, P99, DOI 10.7148/2006-0099
   Kossak F., 2014, A Rigorous Semantics for BPMN 2.0 Process Diagrams, DOI DOI 10.1007/978-3-319-09931-6_4
   Kunze M., 2012, CEUR WORKSHOP P, P1
   Kunze M, 2011, LECT NOTES BUS INF P, V95, P44
   Kwantes PM, 2015, LECT NOTES COMPUT SC, V9151, P221, DOI 10.1007/978-3-319-21145-9_14
   Laue R, 2008, LECT NOTES BUS INF P, V5, P585
   Lauenroth K, 2009, IEEE INT CONF AUTOM, P269, DOI 10.1109/ASE.2009.16
   Lindsay A, 2003, INFORM SOFTWARE TECH, V45, P1015, DOI 10.1016/S0950-5849(03)00129-0
   Maggi A, 2017, J LOG ALGEBR METHODS, V87, P67, DOI 10.1016/j.jlamp.2016.11.003
   Masalagiu C, 2009, FORM ASP COMPUT, V21, P495, DOI 10.1007/s00165-009-0106-y
   Mendling J, 2010, INFORM SOFTWARE TECH, V52, P127, DOI 10.1016/j.infsof.2009.08.004
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Milner R., 1989, Communication and concurrency
   Morimoto S, 2008, LECT NOTES COMPUT SC, V5102, P514, DOI 10.1007/978-3-540-69387-1_58
   OMG, 2011, BUS PROC MOD NOT
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Polyvyanyy A, 2014, COMPUT J, V57, P12, DOI 10.1093/comjnl/bxs126
   Polyvyanyy A, 2012, INFORM SYST, V37, P518, DOI 10.1016/j.is.2011.10.005
   Prandi D, 2008, LECT NOTES COMPUT SC, V5052, P249, DOI 10.1007/978-3-540-68265-3_16
   Prinz T., 2013, LNCS, V1029, P31
   Pugliese R, 2012, J APPL LOGIC, V10, P2, DOI 10.1016/j.jal.2011.11.002
   Puhlmann F, 2006, LECT NOTES COMPUT SC, V4102, P145
   Puhlmann F, 2007, LECT NOTES COMPUT SC, V4803, P6
   Roa J, 2012, LECT NOTES BUS INF P, V99, P293
   Sinot FR, 2005, LECT NOTES COMPUT SC, V3461, P386
   Tarasyuk Anton, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P237, DOI 10.1007/978-3-642-30729-4_17
   ter Beek MH, 2017, J LOG ALGEBR METHODS, V87, P51, DOI 10.1016/j.jlamp.2016.11.004
   ter Beek MH, 2016, LECT NOTES COMPUT SC, V9952, P114, DOI 10.1007/978-3-319-47166-2_8
   van der Aalst WMP, 2000, LECT NOTES COMPUT SC, V1806, P161
   van der Aalst WMP, 2005, LECT NOTES COMPUT SC, V3760, P130
   Van Gorp P, 2013, INFORM SOFTWARE TECH, V55, P365, DOI 10.1016/j.infsof.2012.08.014
   Verdejo Alberto., 2002, P FORTH INT WORKSHOP, V71, DOI DOI 10.1016/S1571-0661(05)82540-X
   Wong PYH, 2008, INT CONF QUAL SOFTW, P126, DOI 10.1109/QSIC.2008.6
   Wong PYH, 2011, SCI COMPUT PROGRAM, V76, P633, DOI 10.1016/j.scico.2009.09.010
   Wong PYH, 2008, LECT NOTES COMPUT SC, V5256, P355, DOI 10.1007/978-3-540-88194-0_22
   Wynn MT, 2009, BUS PROCESS MANAG J, V15, P74, DOI 10.1108/14637150910931479
   ZACHMAN JA, 1987, IBM SYST J, V26, P276, DOI 10.1147/sj.263.0276
   zur Muehlen M, 2008, LECT NOTES COMPUT SC, V5074, P465
NR 81
TC 32
Z9 32
U1 1
U2 14
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 35
EP 70
DI 10.1016/j.scico.2018.05.008
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000003
OA Bronze
DA 2024-07-18
ER

PT J
AU He, JF
   Li, Q
AF He, Jifeng
   Li, Qin
TI A new roadmap for linking theories of programming and its applications
   on GCL and CSP
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Linking theories of programming; Formal semantics; Program algebra;
   Guarded Command Language; Communicating Sequential Processes
ID LAWS
AB Formal methods advocate the crucial role played by the algebraic approach in specification and implementation of programs. Traditionally, a top-down approach (with denotational model as its origin) links the algebra of programs with the denotational representation by establishment of the soundness and completeness of the algebra against the given model, while a bottom-up approach (a journey started from operational model) introduces a variety of bisimulations to establish the equivalence relation among programs, and then presents a set of algebraic laws in support of program analysis and verification. This paper proposes a new roadmap for linking theories of programming. Our approach takes an algebra of programs as its foundation, and generates both denotational and operational representations from the algebraic refinement relation. This new approach is applied in this paper to GCL (Guarded Command Language) and CSP (Communicating Sequential Processes) to link their various semantical representations based on their algebraic semantics. (C) 2017 Elsevier B.V. All rights reserved.
C1 [He, Jifeng; Li, Qin] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Int Res Ctr Trustworthy Software, Shanghai, Peoples R China.
C3 East China Normal University
RP Li, Q (corresponding author), East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Int Res Ctr Trustworthy Software, Shanghai, Peoples R China.
EM qli@sei.ecnu.edu.cn
OI Li, Qin/0000-0001-7476-4079
FU National Natural Science Foundation of China [61321064, 61402176,
   61602177]; Shanghai Knowledge Service Platform Project [ZF1213];
   NSFC-Zhejiang Joint Fund for the Integration of Industrialization and
   Informatization [U1509219]
FX This work is supported by National Natural Science Foundation of China
   (Grant Nos. 61321064, 61402176, 61602177), Shanghai Knowledge Service
   Platform Project (No. ZF1213), and the NSFC-Zhejiang Joint Fund for the
   Integration of Industrialization and Informatization (No. U1509219).
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J.-R., 2010, MODELLING EVENT B SY
   [Anonymous], 1992, The Z Notation
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   He JF, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P2, DOI 10.1109/TASE.2016.12
   He Jifeng, 2016, LECT NOTES COMPUT SC, P26
   HEHNER ECR, 1984, COMMUN ACM, V27, P134, DOI 10.1145/69610.357988
   Hennessy M., 1988, An algebraic theory of processes
   Hoare C. A. R., 1998, Unifying Theories of Programming
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare CAR., 1985, Communicating Sequential Processes
   Jones C. B., 1986, SYSTEMATIC SOFTWARE
   Plotkin GD, 1981, DAIMIFN19 AARH U
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   ROSCOE AW, 1988, THEOR COMPUT SCI, V60, P177, DOI 10.1016/0304-3975(88)90049-7
NR 17
TC 4
Z9 4
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2018
VL 162
SI SI
BP 3
EP 34
DI 10.1016/j.scico.2017.10.009
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GJ1UM
UT WOS:000435053400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Bouragadi, N
   Mason, D
AF Bouragadi, Noury
   Mason, Dave
TI Test-driven development for generated portable Javascript apps
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Test-driven development; Javascript transpilation; IDE; Crossplatform;
   Web development
AB With the advent of HTML 5, we can now develop rich web apps in Javascript that rival classical standalone apps. Nevertheless, developing in Javascript is still challenging and error prone because of the language's ambiguous semantics and quirks. In this paper, we advocate that the popular solution of using another language with better semantics and constructs is not enough. Developers should be provided with an IDE that eases the integration of Javascript libraries and enables testing an application across the many available Javascript interpreters. We introduce PharoJS,(1) an infrastructure that allows Test Driven Development (TDD) in Pharo Smalltalk of applications that ultimately run on a Javascript interpreter. PharoJS makes it possible to run interactive tests within the Pharo IDE, so as to fully exploit the debugging and development environment, while UI and libraries reside on the Javascript side. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Bouragadi, Noury] IMT Lille Douai, Douai, France.
   [Mason, Dave] Ryerson Univ, Toronto, ON, Canada.
C3 IMT - Institut Mines-Telecom; Universite de Lille; IMT Nord Europe;
   Toronto Metropolitan University
RP Mason, D (corresponding author), Ryerson Univ, Toronto, ON, Canada.
EM noury.bouraqadi@mines-douai.fr; dmason@ryerson.ca
OI Mason, Dave/0000-0002-2688-7856
CR Adobe Brackets, BRACK MOD OP SOURC T
   [Anonymous], 2015, DATA PROGRAMMING LAN
   Beck Kent L., 2003, Test Driven Development By Example
   Black Andrew., 2009, Pharo by example. square bracket associates
   Bouraqadi N, 2016, PROCEEDINGS OF THE 11TH EDITION OF THE INTERNATIONAL WORKSHOP ON SMALLTALK TECHNOLOGIES, (IWST 2016), DOI 10.1145/2991041.2991051
   Community, NOD WEBK DESKT APPL
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Freudenberg B., 2014, SIGPLAN NOTICES, P57, DOI DOI 10.1145/2775052.2661100
   GitHub, EL BUILD CROSS PLATF
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Kodowa Inc. Light table, NEXT GEN COD ED
   Milani M., APPJS BUILD DESKTOP
   Ocariza Frolin S., 2013, 2013 ACM IEEE INT S
   Petton N., AMBER SMALLTALK
   Rivard F., 1996, P REFLECTION 96, P21
   Scharli Nathanael, 2003, P EUR C OBJ OR PROGR
   SUSSMAN GJ, 1975, AIM349 MIT AI LAB
   Wang G, 2004, NIME 2004 P 2004 C N, DOI [10.1017/S1092852916000900, DOI 10.1017/S1092852916000900]
   Wolczko M., 1996, EC 96 WORKSH PROT BA
NR 19
TC 1
Z9 1
U1 1
U2 19
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2018
VL 161
SI SI
BP 2
EP 17
DI 10.1016/j.scico.2018.02.003
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI7ZZ
UT WOS:000434742900002
DA 2024-07-18
ER

PT J
AU Stulova, N
   Morales, JF
   Hermenegildo, MV
AF Stulova, Nataliia
   Morales, Jose F.
   Hermenegildo, Manuel V.
TI Some trade-offs in reducing the overhead of assertion run-time checks
   via static analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Abstract interpretation; Run-time checking; Verification; Logic
   programming; Hom clauses
ID ABSTRACT INTERPRETATION; VERIFICATION; SPECIFICATION; LANGUAGE; CIAO
AB A number of approaches for helping programmers detect incorrect program behaviors are based on combining language-level constructs (such as procedure-level assertions/contracts, program-point assertions, or gradual types) with a number of associated tools (such as code analyzers and run-time verification frameworks) that automatically check the validity of such constructs. However, these constructs and tools are often not used to their full extent in practice due to excessive run-time overhead, limited expressiveness, and/or limitations in the effectiveness of the tools. Verification frameworks that combine static and dynamic verification techniques and are based on abstraction offer the potential to bridge this gap. In this paper we explore the effectiveness of abstract interpretation in detecting parts of program specifications that can be statically simplified to true or false, as well as in reducing the cost of the run-time checks required for the remaining parts of these specifications. Starting with a semantics for programs with assertion checking, and for assertion simplification based on static analysis information obtained via abstract interpretation, we propose and study a number of practical assertion checking "modes," each of which represents a trade-off between code annotation depth, execution time slowdown, and program safety. We then explore these modes in two typical, library oriented scenarios. We also propose program transformation-based methods for taking advantage of the run-time checking semantics to improve the precision of the analysis. Finally, we study experimentally the performance of these techniques. Our experiments illustrate the benefits and costs of each of the assertion checking modes proposed, as well as the benefits obtained from analysis and the proposed transformations in these scenarios. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Stulova, Nataliia; Morales, Jose F.; Hermenegildo, Manuel V.] IMDEA Software Inst, Madrid, Spain.
   [Stulova, Nataliia; Hermenegildo, Manuel V.] UPM, Madrid, Spain.
C3 IMDEA Software Institute; Universidad Politecnica de Madrid
RP Stulova, N (corresponding author), IMDEA Software Inst, Madrid, Spain.
EM nataliia.stulova@imdea.org; josef.morales@imdea.org;
   manuel.hermenegildo@upm.es
RI Morales Caballero, Jose Francisco/JXY-5044-2024
OI Morales Caballero, Jose Francisco/0000-0001-9782-8135; Stulova,
   Nataliia/0000-0002-6804-2253
FU EU [318337]; Spanish MINECO project [TIN2015-67522-C3-1-R]; Madrid
   Region program [M141047003]
FX This paper is an extended version of [1], presented at PPDP 2016. This
   research has been partially funded by EU FP7 agreement 318337 ENTRA,
   Spanish MINECO project TIN2015-67522-C3-1-R TRACES, and Madrid Region
   program M141047003 N-GREENS.
CR Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Bjerner N., 2014, WORKSH HORN CLAUS VE
   Bodden E, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220366
   Boye J., 1997, P 3 INT WORKSH AUT D, P123
   Bruynooghe M., 2004, INT S LOG BAS PROGR
   Bueno F, 1999, ACM T PROGR LANG SYS, V21, P189, DOI 10.1145/316686.316688
   Bueno F., 1997, PROC 3 INT WS AUTOMA, P155
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Correasi J, 2006, LECT NOTES COMPUT SC, V3901, P163, DOI 10.1007/11680093_11
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   De Angelis E., 2017, SCI COMPUT PROGRA SC, V147, P78
   Dimoulas C, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039348
   Drabent W., 1988, P INT C 5 GEN COMP S, P573
   Fähndrich M, 2011, LECT NOTES COMPUT SC, V6528, P10
   Findler R. B., 2002, P 7 ACM SIGPLAN INT, P48
   GALLAGHER JP, 1994, MIT PS LOG, P599
   Gange G, 2015, THEOR PRACT LOG PROG, V15, P526, DOI 10.1017/S1471068415000204
   Giesl R, 2004, LECT NOTES COMPUT SC, V3091, P210
   Grebenshchikov S, 2012, LECT NOTES COMPUT SC, V7214, P549, DOI 10.1007/978-3-642-28756-5_46
   Gurfinkel A, 2015, LECT NOTES COMPUT SC, V9206, P343, DOI 10.1007/978-3-319-21690-4_20
   Hermenegildo MV, 2012, THEOR PRACT LOG PROG, V12, P219, DOI 10.1017/S1471068411000457
   Hermenegildo M. V., 2011, P INT WORKSH SCRIPT
   Hermenegildo MV, 2005, SCI COMPUT PROGRAM, V58, P115, DOI 10.1016/j.scico.2005.02.006
   Hermenegildo MV, 1999, LOGIC PROGRAMM, P54
   Koukoutos E, 2014, LECT NOTES COMPUT SC, V8734, P263, DOI 10.1007/978-3-319-11164-3_22
   Laï C, 2000, LECT NOTES COMPUT SC, V1870, P109
   Lamport L, 1999, ACM T PROGR LANG SYS, V21, P502, DOI 10.1145/319301.319317
   Leavens GT, 2007, FORM ASP COMPUT, V19, P159, DOI 10.1007/s00165-007-0026-7
   Liqat U., 2016, LECT NOTES COMPUTER, V9964, P81
   Liqat U, 2014, LECT NOTES COMPUT SC, V8901, P72, DOI 10.1007/978-3-319-14125-1_5
   Madsen M, 2016, ACM SIGPLAN NOTICES, V51, P194, DOI [10.1145/2908080.2908096, 10.1145/2980983.2908096]
   Mendez-Lojo M., 2008, LNCS, V5335, P94
   Méndez-Lojo M, 2008, LECT NOTES COMPUT SC, V4915, P154, DOI 10.1007/978-3-540-78769-3_11
   Mera E, 2011, LECT NOTES COMPUT SC, V6539, P38, DOI 10.1007/978-3-642-18378-2_6
   Mera E, 2009, LECT NOTES COMPUT SC, V5649, P281, DOI 10.1007/978-3-642-02846-5_25
   MUTHUKUMAR K, 1992, J LOGIC PROGRAM, V13, P315, DOI 10.1016/0743-1066(92)90035-2
   MUTHUKUMAR K, 1991, LOGIC PROGRAMM, P49
   Muthukumar K., 1989, 1989 N AM C LOG PROG, P166
   Muthukumar K., 1990, Technical Report ACT-DC-153-90
   Navas J, 2006, LECT NOTES COMPUT SC, V3819, P183
   Navas J., 2008, 6 NASA LANGLEY FORMA, P29
   Navas J, 2009, ELECTRON NOTES THEOR, V253, P65, DOI 10.1016/j.entcs.2009.11.015
   Nguyên PC, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796816000216
   Nguyen PC, 2014, ACM SIGPLAN NOTICES, V49, P139, DOI 10.1145/2692915.2628156
   Pietrzak P, 2006, LECT NOTES ARTIF INT, V4246, P392, DOI 10.1007/11916277_27
   Puebla G, 1999, J LOGIC PROGRAM, V41, P279, DOI 10.1016/S0743-1066(99)00031-X
   Puebla G, 2000, LECT NOTES COMPUT SC, V1870, P23
   Puebla G, 2000, LECT NOTES COMPUT SC, V1817, P273, DOI 10.1007/10720327_16
   Puebla G., 2004, LNCS, V3049, P234
   Puebla G., 2000, ELECT NOTES THEOR CO, V30
   Puebla G., 1997, P ILPS 97 WORKSH TOO
   Rastogi A, 2015, ACM SIGPLAN NOTICES, V50, P167, DOI [10.1145/2775051.2676971, 10.1145/2676726.2676971]
   Schiller TW, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P596, DOI 10.1145/2568225.2568285
   Secci S, 2005, LECT NOTES COMPUT SC, V3672, P320
   Sendergaard H., 1986, LNCS, V123, P327
   Serrano A., 2013, THEOR PRACT LOG PROG, V13, P1
   Stulova N, 2018, LECT NOTES COMPUT SC, V10702, P99, DOI 10.1007/978-3-319-73305-0_7
   Stulova N, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P225, DOI 10.1145/2643135.2643148
   Stulova N, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P90, DOI 10.1145/2967973.2968597
   Stulova N, 2015, THEOR PRACT LOG PROG, V15, P726, DOI 10.1017/S1471068415000344
   Takikawa A, 2016, ACM SIGPLAN NOTICES, V51, P456, DOI 10.1145/2914770.2837630
   Takikawa Asumu, 2015, ECOOP, P4
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Vaucheret C, 2002, LECT NOTES COMPUT SC, V2477, P102
NR 64
TC 6
Z9 6
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2018
VL 155
BP 3
EP 26
DI 10.1016/j.scico.2017.12.006
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ1JJ
UT WOS:000427332600002
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Durelli, VHS
   Delamaro, ME
   Offutt, J
AF Durelli, Vinicius H. S.
   Delamaro, Marcio E.
   Offutt, Jeff
TI An experimental comparison of edge, edge-pair, and prime path criteria
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Structural testing; Prime path coverage; Edge pair coverage; Mutation
   testing
ID MUTATION ANALYSIS; DATA-FLOW; COVERAGE
AB Background: Many criteria have been proposed to generate test inputs. Criteria are usually compared in terms of subsumption: if a criterion Cl subsumes C2, it is guaranteed that every test set that satisfies C1 will also satisfy C2. An implication of this notion of subsumption is that Cl-adequate tests tend to find more faults than C2-adequate tests, but C1-adequate tests tend to be larger. Thus, while useful, the idea of subsumption does not elaborate on some practical properties of expensive criteria as, for instance, how many more faults a C1-adequate test set will find? More generally, what is the return on investment for choosing more expensive criteria?
   Method: To provide a more accurate idea of the fault finding ability and cost of several criteria, we set out to compare three structural graph coverage criteria: edge coverage (EC), edge-pair coverage (EPC), and prime path coverage (PPC). PPC and EPC subsume EC. To compare these criteria we examined 189 functions from 39 C programs, used mutants as a proxy for faults, and performed a statistical analysis of the results.
   Result: The three criteria are very similar in terms of effectiveness when all mutants are taken into account: PPC killed 98% of the mutants, EPC 97%, and EC 94%. However, the difference between the criteria is emphasized with minimal mutant sets: PPC killed 75% of the mutants, EPC killed 67%, and EC killed only 57%. As for the cost of these criteria, we found that there is not much difference in terms of the number of TRs. We expected PPC to have the most TRs, so we were surprised to find that, on average, the number of TRs for EPC was highest.
   Conclusion: PPC can detect more faults, specially in programs that have complicated control flows, but at higher cost. Thus, a practical tester can make an informed cost versus benefit decision. A better understanding of which structures in the programs contribute to the expense might help to choose when to use PPC. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Durelli, Vinicius H. S.] Univ Fed Sao Joao del Rei, Dept Comp Sci, Sao Joao Del Rei, MG, Brazil.
   [Delamaro, Marcio E.] Univ Sao Paulo, Inst Ciencias Matemat & Computacao, Sao Carlos, SP, Brazil.
   [Offutt, Jeff] George Mason Univ, Software Engn, Fairfax, VA 22030 USA.
C3 Universidade Federal de Sao Joao del-Rei; Universidade de Sao Paulo;
   George Mason University
RP Durelli, VHS (corresponding author), Univ Fed Sao Joao del Rei, Dept Comp Sci, Sao Joao Del Rei, MG, Brazil.
EM durelli@ufsj.edu.br; delamaro@icmc.usp.br; offutt@gmu.edu
RI Delamaro, Marcio/D-5180-2011
OI Delamaro, Marcio/0000-0001-7535-5891
CR Ammann P., 2017, INTRO SOFTWARE TESTI
   Andrews JH, 2006, IEEE T SOFTWARE ENG, V32, P608, DOI 10.1109/TSE.2006.83
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], 7 IEEE INT C SOFTW T
   Ball T, 2005, LECT NOTES COMPUT SC, V3657, P1
   Briand LC, 2000, IEEE T RELIAB, V49, P60, DOI 10.1109/24.855537
   Cai X., 2005, Proceedings of the 1st International Workshop on Advances in Model-based Testing, P1, DOI DOI 10.1145/1083274.1083288
   Chekam TT, 2017, PROC INT CONF SOFTW, P597, DOI 10.1109/ICSE.2017.61
   Delamaro M.E., 1996, PCS, V96, P79
   Edwards SH, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P354, DOI 10.1145/2591062.2591164
   Frankl P. G., 2000, Software Engineering Notes, V25, P124, DOI 10.1145/347636.348926
   Frankl P. G., 1998, Software Engineering Notes, V23, P153, DOI 10.1145/291252.288298
   Frankl PG, 1997, J SYST SOFTWARE, V38, P235, DOI 10.1016/S0164-1212(96)00154-9
   FRANKL PG, 1993, IEEE T SOFTWARE ENG, V19, P774, DOI 10.1109/32.238581
   Gligoric M., 2013, P 2013 INT S SOFTW T, P302, DOI DOI 10.1145/2483760.2483769
   Gligoric M, 2015, ACM T SOFTW ENG METH, V24, DOI 10.1145/2660767
   Goldwasser M. H., 2002, SIGCSE Bulletin, V34, P271, DOI 10.1145/563517.563446
   Gopinath R, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P72, DOI 10.1145/2568225.2568278
   Gopinath R, 2016, IEEE ICST WORKSHOP, P132, DOI 10.1109/ICSTW.2016.45
   Gupta Atul, 2008, International Journal on Software Tools for Technology Transfer, V10, P145, DOI 10.1007/s10009-007-0059-5
   Hassan MM, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P172, DOI 10.1109/ICSE.2013.6606563
   Hemmati H, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON SOFTWARE SECURITY AND RELIABILITY (QRS 2015), P151, DOI 10.1109/QRS.2015.30
   Hutchins M., 1994, ICSE-16. 16th International Conference on Software Engineering (Cat. No.94CH3409-0), P191, DOI 10.1109/ICSE.1994.296778
   Inozemtseva L, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P435, DOI 10.1145/2568225.2568271
   Jia Yue, 2016, P 25 INT S SOFTWARE, P354
   Just R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P654, DOI 10.1145/2635868.2635929
   Just R, 2015, SOFTW TEST VERIF REL, V25, P490, DOI 10.1002/stvr.1561
   Kochhar PS, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P560, DOI 10.1109/SANER.2015.7081877
   Kurtz B., 2016, 12 IEEE WORKSH MUT A
   Kurtz B., 2016, 24 ACM SIGSOFT INT S
   Kurtz B., 2015, 11 IEEE WORKSH MUT A
   Kurtz Bob, 2014, 10 IEEE WORKSH MUT A
   Li N., 2009, 5 WORKSH MUT AN IEEE
   Meyer B., 1991, EIFFEL LANGUAGE
   Miller J, 2004, J SYST SOFTWARE, V73, P183, DOI 10.1016/j.jss.2003.12.019
   Namin AS, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P57
   Offutt AJ, 1996, SOFTWARE PRACT EXPER, V26, P165, DOI 10.1002/(SICI)1097-024X(199602)26:2<165::AID-SPE5>3.0.CO;2-K
   Schwartz A, 2016, 2016 IEEE/ACM 11TH INTERNATIONAL WORKSHOP IN AUTOMATION OF SOFTWARE TEST (AST), P29, DOI [10.1145/2896921.2896926, 10.1109/AST.2016.013]
   Tengeri D, 2016, IEEE ICST WORKSHOP, P174, DOI 10.1109/ICSTW.2016.25
   Triola M.F., 2014, ESSENTIALS STAT
   WALSH PJ, 1985, THESIS
   Wei Y, 2012, LECT NOTES COMPUT SC, V7007, P194
NR 42
TC 5
Z9 6
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2018
VL 152
BP 99
EP 115
DI 10.1016/j.scico.2017.10.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FR3OJ
UT WOS:000418975700005
OA Bronze
DA 2024-07-18
ER

PT J
AU Greenyer, J
   Gritzner, D
   Gutjahr, T
   König, F
   Glade, N
   Marron, A
   Katz, G
AF Greenyer, Joel
   Gritzner, Daniel
   Gutjahr, Timo
   Koenig, Florian
   Glade, Nils
   Marron, Assaf
   Katz, Guy
TI SCENARIOTOOLS - A tool suite for the scenario-based modeling and
   analysis of reactive systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reactive systems; Dynamic system structure; Scenarios; Realizability;
   Controller synthesis
AB SCENARioTOOLS is an Eclipse-based tool suite for the scenario-based modeling and analysis of reactive systems. SCENARIOTOOLS especially targets the modeling and analysis of systems where the behavior of the components is sensitive to changes in the component structure that can occur at run-time. For example, in a system of communicating cars, the cars relationships can change due to their movement and influence how cars must interact. The modeling in SCENARIOToOLs is based on the Scenario Modeling Language (SML), an extended variant of Live Sequence Charts (LSCs). For modeling structural changes and conditions, graph transformation rules can be combined with SML. The specifications are executable and can be analyzed by simulation. SCENARIOTOOLS further supports a formal synthesis procedure that can find specification inconsistencies or prove the specification's realizability. In this article, we illustrate the features of SCENARIOTOOLS by an example and describe its architecture. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Greenyer, Joel; Gritzner, Daniel; Gutjahr, Timo; Koenig, Florian; Glade, Nils] Leibniz Univ Hannover, Hannover, Germany.
   [Marron, Assaf] Weizmann Inst Sci, Rehovot, Israel.
   [Katz, Guy] Stanford Univ, Stanford, CA 94305 USA.
C3 Leibniz University Hannover; Weizmann Institute of Science; Stanford
   University
RP Greenyer, J (corresponding author), Leibniz Univ Hannover, Hannover, Germany.
EM greenyer@inf.uni-hannover.de
RI MARRON, ASSAF/GWQ-4567-2022; Greenyer, Joel/Q-8476-2017
OI Greenyer, Joel/0000-0003-0347-0158; Gritzner, Daniel/0000-0001-6486-0008
FU German-Israeli Foundation for Scientific Research and Development (GIF)
   [1258]
FX This work is funded by grant no. 1258 of the German-Israeli Foundation
   for Scientific Research and Development (GIF).
CR Arendt T, 2010, LECT NOTES COMPUT SC, V6394, P121
   Bontemps Y, 2005, IEEE T SOFTWARE ENG, V31, P999, DOI 10.1109/TSE.2005.137
   BRENNER C, 2013, P 12 INT WORKSH GRAP, V58
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   Gordon M, 2009, LECT NOTES COMPUT SC, V5449, P456, DOI 10.1007/978-3-642-00382-0_37
   Greenyer J., 2016, PROC 19 ACMIEEE INT, P16
   Greenyer J., 2015, P 10 JOINT M EUR SOF
   GREENYER J, 2013, P 9 JOINT M EUR SOFT
   Harel D., 2002, International Journal of Foundations of Computer Science, V13, P5, DOI 10.1142/S0129054102000935
   Harel D., 1985, Logics and Models of Concurrent Systems, VF-13, P477, DOI [DOI 10.1007/978-3-642-82453-1_17, 10.1007/978-3-642-82453-1_17]
   Harel D., 2003, COME LETS PLAY SCENA, DOI 10.1007/978-3-642-19029-2
   Harel D, 2010, P IEEE ACM INT C AUT, P359
   Harel D, 2003, SOFTWARE SYSTEM MODE, V2, P82, DOI [10.1007/s10270-002-0015-5, DOI 10.1007/S10270-002-0015-5]
   Harel D, 2012, J COMPUT SYST SCI, V78, P970, DOI 10.1016/j.jcss.2011.08.008
   LARSEN KG, 2010, P 13 C DES AUT TEST
   Liang Hu, 2006, Proceedings 2006 10th International Conference on Computer Supported Cooperative Work in Design (IEEE Cat. No. 06EX1292), DOI 10.1145/1138953.1138956
   Maoz S, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P242, DOI 10.1109/ICSE.2013.6606570
   Maoz S, 2012, SOFTW SYST MODEL, V11, P327, DOI 10.1007/s10270-010-0168-6
   Uchitel S, 2009, IEEE T SOFTWARE ENG, V35, P384, DOI 10.1109/TSE.2008.107
   Winetzhammer S, 2014, LECT NOTES COMPUT SC, V8769, P126, DOI 10.1007/978-3-319-11743-0_9
NR 20
TC 16
Z9 16
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2017
VL 149
SI SI
BP 15
EP 27
DI 10.1016/j.scico.2017.07.004
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FL0GP
UT WOS:000413889900004
OA Bronze
DA 2024-07-18
ER

PT J
AU De Angelis, E
   Fioravanti, F
   Pettorossi, A
   Proietti, M
AF De Angelis, E.
   Fioravanti, F.
   Pettorossi, A.
   Proietti, M.
TI Semantics-based generation of verification conditions via program
   specialization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Horn clauses; Program verification; Program specialization; Semantics of
   programming languages; Software model checking
ID IMPERATIVE PROGRAMS; LOGIC
AB We present a method for automatically generating verification conditions for a class of imperative programs and safety properties. Our method is parametric with respect to the semantics of the imperative programming language, as it generates the verification conditions by specializing, using unfold/fold transformation rules, a Horn clause interpreter that encodes that semantics.
   We define a multi-step operational semantics for a fragment of the C language and compare the verification conditions obtained by using this semantics with those obtained by using a more traditional small-step semantics. The flexibility of the approach is further demonstrated by showing that it is possible to easily take into account alternative operational semantics definitions for modeling additional language features. We have proved that the verification condition generation takes a number of transformation steps that is linear with respect to the size of the imperative program to be verified. Also the size of the verification conditions is linear with respect to the size of the imperative program. Besides the theoretical computational complexity analysis, we also provide an experimental evaluation of the method by generating verification conditions using the multi-step and the small-step semantics for a few hundreds of programs taken from various publicly available benchmarks, and by checking the satisfiability of these verification conditions by using state-of-the-art Horn clause solvers. These experiments show that automated verification of programs from a formal definition of the operational semantics is indeed feasible in practice. (C) 2016 Elsevier B.V. All rights reserved.
C1 [De Angelis, E.; Fioravanti, F.] Univ G dAnnunzio, DEC, Viale Pindaro 42, I-65127 Pescara, Italy.
   [Pettorossi, A.] Univ Roma Tor Vergata, DICII, Via Politecn 1, I-00133 Rome, Italy.
   [De Angelis, E.; Fioravanti, F.; Pettorossi, A.; Proietti, M.] CNR, IASI, Via Taurini 19, I-00185 Rome, Italy.
C3 G d'Annunzio University of Chieti-Pescara; University of Rome Tor
   Vergata; Consiglio Nazionale delle Ricerche (CNR); Istituto di Analisi
   dei Sistemi ed Informatica "Antonio Ruberti" (IASI-CNR)
RP De Angelis, E; Fioravanti, F (corresponding author), Univ G dAnnunzio, DEC, Viale Pindaro 42, I-65127 Pescara, Italy.; Pettorossi, A (corresponding author), Univ Roma Tor Vergata, DICII, Via Politecn 1, I-00133 Rome, Italy.; De Angelis, E; Fioravanti, F; Pettorossi, A; Proietti, M (corresponding author), CNR, IASI, Via Taurini 19, I-00185 Rome, Italy.
EM emanuele.deangelis@unich.it; fabio.fioravanti@unich.it; adp@iasi.cnr.it;
   proietti@iasi.cnr.it
RI Proietti, Maurizio/AAW-7487-2020; Pettorossi, Alberto/D-8503-2016
OI Pettorossi, Alberto/0000-0001-7858-4032; FIORAVANTI,
   Fabio/0000-0002-1268-7829; De Angelis, Emanuele/0000-0002-7319-8439
FU INdAM-GNCS (Italy) [2015/000143, 2016/000080]
FX We thank to the anonymous referees of the conferences PPDP 2015 and CILC
   2015, and we also thank John Gallagher for stimulating discussions on
   the subject. We acknowledge the financial support of INdAM-GNCS (Italy),
   grants 2015/000143 and 2016/000080.
CR Albert E, 2007, LECT NOTES COMPUT SC, V4354, P124
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Bjorner Nikolaj S., 2012, EPiC Series in Computing, V20, P3, DOI DOI 10.29007/1L7F
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   Cok DR, 2005, LECT NOTES COMPUT SC, V3362, P108
   Cousot P., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P388, DOI 10.1007/BFb0032759
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   De Angelis E, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P91, DOI 10.1145/2790449.2790529
   De Angelis E, 2014, SCI COMPUT PROGRAM, V95, P149, DOI 10.1016/j.scico.2014.05.017
   De Angelis E., 2014, Lecture Notes in Computer Science, V8413, P568, DOI [DOI 10.1007/978-3-642-54862-8_47, 10.1007/978-3-642-54862-8_47]
   De Angelis E, 2014, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.169.3
   De Angelis E, 2016, LECT NOTES COMPUT SC, V9837, P147, DOI 10.1007/978-3-662-53413-7_8
   De Angelis E, 2015, THEOR PRACT LOG PROG, V15, P635, DOI 10.1017/S1471068415000289
   De Angelis E, 2015, FUND INFORM, V140, P329, DOI 10.3233/FI-2015-1257
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Etalle S, 1996, THEOR COMPUT SCI, V166, P101, DOI 10.1016/0304-3975(95)00148-4
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Fioravanti F, 2001, LECT NOTES COMPUT SC, V2042, P125, DOI 10.1007/3-540-45142-0_8
   Fioravanti F, 2013, THEOR PRACT LOG PROG, V13, P175, DOI 10.1017/S1471068411000627
   Fioravanti F, 2012, FUND INFORM, V119, P281, DOI 10.3233/FI-2012-738
   Flanagan C, 2004, SCI COMPUT PROGRAM, V50, P253, DOI 10.1016/j.scico.2004.01.006
   Flanagan C, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/373243.360220
   Gallagher J. P., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P88, DOI 10.1145/154630.154640
   Gallagher J.P., 2014, TPLP, V14, P90
   Gange G, 2015, THEOR PRACT LOG PROG, V15, P526, DOI 10.1017/S1471068415000204
   Gómez-Zamalloa M, 2009, INFORM SOFTWARE TECH, V51, P1409, DOI 10.1016/j.infsof.2009.04.010
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Grebenshchikov S, 2012, LECT NOTES COMPUT SC, V7214, P549, DOI 10.1007/978-3-642-28756-5_46
   Henriksen KS, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P184
   Henzinger TA, 2008, LECT NOTES ARTIF INT, V5330, P333, DOI 10.1007/978-3-540-89439-1_24
   Hojjat Hossein, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P247, DOI 10.1007/978-3-642-32759-9_21
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jaffar J, 2012, LNCS, P396, DOI DOI 10.1007/978-3-642-29860-8_
   Kafle B, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P85, DOI 10.1145/2678015.2682544
   Leuschel M, 2004, LECT NOTES COMPUT SC, V3049, P340
   Leuschel M, 2002, THEOR PRACT LOG PROG, V2, P461, DOI 10.1017/S147106840200145X
   Leuschel M, 1997, LECT NOTES COMPUT SC, V1207, P83
   Leuschela M, 2014, INFORM COMPUT, V235, P70, DOI 10.1016/j.ic.2014.01.005
   Lev-Ami T, 2004, INT FED INFO PROC, V156, P367
   Lloyd J. W., 2012, Foundations of Logic Programming
   LLOYD JW, 1991, J LOGIC PROGRAM, V11, P217, DOI 10.1016/0743-1066(91)90027-M
   Matthews J, 2006, LECT NOTES ARTIF INT, V4246, P362, DOI 10.1007/11916277_25
   McMillan, 2013, 20136 MSR
   Moore JS, 2003, LECT NOTES COMPUT SC, V2860, P289
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Peralta JC, 2000, LECT NOTES COMPUT SC, V1817, P102, DOI 10.1007/10720327_7
   Peralta JC, 1998, LECT NOTES COMPUT SC, V1503, P246
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PROIETTI M, 1995, THEOR COMPUT SCI, V142, P89, DOI 10.1016/0304-3975(94)00227-A
   Reynolds C. J., 1998, THEORIES PROGRAMMING
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Tange O, 2011, TUSENIX Mag., V36, P42
   van Leeuwen AJ, 2007, ELECTRON NOTES THEOR, V191, P73, DOI 10.1016/j.entcs.2006.08.052
NR 55
TC 18
Z9 18
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2017
VL 147
BP 78
EP 108
DI 10.1016/j.scico.2016.11.002
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FG3CK
UT WOS:000410014200005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Pape, T
   Bolz, CF
   Hirschfeld, R
AF Pape, Tobias
   Bolz, Carl Friedrich
   Hirschfeld, Robert
TI Adaptive just-in-time value class optimization for lowering memory
   consumption and improving execution time performance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Meta-tracing; JIT; Data structure optimization; Value classes
AB The performance of value classes is highly dependent on how they are represented in the virtual machine. Value class instances are immutable, have no identity, and can only refer to other value objects or primitive values and since they should be very lightweight and fast, it is important to optimize them carefully. In this paper we present a technique to detect and compress common patterns of value class usage to improve memory usage and performance. The technique identifies patterns of frequent value object references and introduces abbreviated forms for them. This allows to store multiple inter-referenced value objects in an inlined memory representation, reducing the overhead stemming from meta data and object references. Applied to a small prototype and an implementation of the Racket language, we found improvements in memory usage and execution time for several micro-benchmarks. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Pape, Tobias; Hirschfeld, Robert] Univ Potsdam, Hasso Plattner Inst, Software Architecture Grp, Potsdam, Germany.
   [Bolz, Carl Friedrich] Kings Coll London, Software Dev Team, London, England.
C3 University of Potsdam; University of London; King's College London
RP Pape, T (corresponding author), Univ Potsdam, Hasso Plattner Inst, Software Architecture Grp, Potsdam, Germany.
EM tobias.pape@hpi.uni-potsdam.de; cfbolz@gmx.de;
   hirschfeld@hpi.uni-potsdam.de
RI Pape, Tobias/Z-3278-2019
OI Pape, Tobias/0000-0003-0110-6918
FU HPI's Research School; Hasso Plattner Design Thinking Research Program
   (HPDTRP); EPSRC Cooler grant [EP/K01790X/1]; EPSRC [EP/K01790X/1]
   Funding Source: UKRI
FX We gratefully acknowledge the financial support of HPI's Research School
   and the Hasso Plattner Design Thinking Research Program (HPDTRP). Carl
   Friedrich Bolz is supported by the EPSRC Cooler grant EP/K01790X/1. We
   thank Alan Borning for comments on a draft version of this paper. We
   thank the anonymous reviewers for their detailed feedback.
CR [Anonymous], 2010, PLTTR20101 INC
   [Anonymous], 2001, DESIGN CONTRACT EXAM
   [Anonymous], 1997, The Definition of Standard ML
   Aycock J, 2003, ACM COMPUT SURV, V35, P97, DOI 10.1145/857076.857077
   Bacon DF, 2003, CONCURR COMP-PRACT E, V15, P185, DOI 10.1002/cpe.653
   Bala V, 2000, ACM SIGPLAN NOTICES, V35, P1, DOI 10.1145/358438.349303
   Bauman S., 2015, P ICFP 2015 ICFP 15
   Bebenita M, 2010, ACM SIGPLAN NOTICES, V45, P708, DOI 10.1145/1932682.1869517
   Bolz C.F., 2013, SCI COMPUT PROGRAM
   Bolz C.F., 2011, P PEPM, P43
   Bolz C.F., 2011, P 20 ACM SIGPLAN WOR, P43, DOI DOI 10.1145/1929501.1929508
   Bolz C. F., 2012, THESIS
   Bolz CF, 2008, LECT NOTES COMPUT SC, V5146, P123
   Bolz Carl Friedrich, 2011, P 6 WORKSH IMPL COMP, P1, DOI [10.1145/2069172.2069181, DOI 10.1145/2069172.2069181]
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   CHAMBERS C, 1989, SIGPLAN NOTICES, V24, P49, DOI 10.1145/74878.74884
   Chevalier-Boisvert M., 2015, ARXIV150702437CSPL
   Cleveland W. S., 1992, Chapter 8 of Statistical Models in S
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Deutsch PeterL., 1984, Proceedings of the 11th ACM SIGACT-SIGPLAN symposium on Principles of Programming Languages, POPL '84, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   ERSHOV AP, 1958, COMMUN ACM, V1, P3, DOI 10.1145/368892.368907
   Felleisen Matthias, 1987, FORMAL DESCRIPTION P, P193
   Filliatre Jean-Christophe, 2006, ML, P12, DOI DOI 10.1145/1159876.1159880
   Gal A., 2006, VEE 2006. Proceedings of the Second International Conference on Virtual Execution Environments, P144
   Gal A, 2009, ACM SIGPLAN NOTICES, V44, P465, DOI 10.1145/1543135.1542528
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Goto E., 1974, TR7403 U TOKY
   Holtta M., 2013, TECH REP
   Lee P, 1996, ACM SIGPLAN NOTICES, V31, P137, DOI 10.1145/249069.231407
   Leroy X., 1990, 117 INRIA
   Mitchell J. G., 1970, THESIS
   Odersky M., 2006, LAPREPORT20060001 EF
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   Pape T., 2016, P 31 ANN ACM S APPL, P1798
   Rigo Armin, 2006, COMP 21 ACM SIGPLAN, P944, DOI DOI 10.1145/1176617.1176753
   Rose J., 2014, 169 JEP
   Sullivan GregoryT., 2003, IVME 03, P50
   Takano A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P306, DOI 10.1145/224164.224221
   Thomassen E. W., 2013, THESIS
   WADLER P, 1990, THEOR COMPUT SCI, V73, P231, DOI 10.1016/0304-3975(90)90147-A
   Wimmer C., 2008, THESIS
   Zhong Shao, 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P185, DOI 10.1145/182409.182453
NR 42
TC 4
Z9 4
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2017
VL 140
BP 17
EP 29
DI 10.1016/j.scico.2016.08.003
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ET4EM
UT WOS:000400232100003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Caltais, G
   Meyer, B
AF Caltais, Georgiana
   Meyer, Bertrand
TI On the verification of SCOOP programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE SCOOP; Operational semantics; Alias analysis; Deadlock detection;
   Rewriting logic
ID REDUCTION SEMANTICS; LANGUAGE
AB In this paper we focus on the development of a unifying framework for the formal modeling of an object oriented-programming language, its underlying concurrency model and their associated analysis tools. More precisely, we target SCOOP - an elegant concurrency model, recently formalized based on Rewriting Logic (RL) and Maude. SCOOP is implemented in Eiffel and its applicability is demonstrated also from a practical perspective, in the area of robotics programming. Our contribution consists of devising and integrating an alias analyzer and a Coffman deadlock detector under the roof of the same RL-based semantic framework of SCOOP. This enables using the Maude rewriting engine and its LTL model-checker "for free," in order to perform the analyses of interest. We discuss the limitations of our approach for model-checking deadlocks and provide possible workarounds for the state space explosion problem. On the aliasing side, we propose an extension of a previously introduced alias calculus based on program expressions, to the setting of unbounded program executions. Moreover, we devise a corresponding executable specification easily implementable on top of the SCOOP formalization. An important property of our extension is that, in non-concurrent settings, the corresponding alias expressions can be over-approximated in terms of, a notion of regular expressions. This further enables us to derive an algorithm for computing a sound over-approximation of the "may aliasing" information, where soundness stands for the lack of false negatives. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Caltais, Georgiana; Meyer, Bertrand] Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.
   [Caltais, Georgiana] Univ Konstanz, Dept Comp & Informat Sci, Constance, Germany.
   [Meyer, Bertrand] Innopolis Univ, Software Engn Lab, Innopolis, Respubl Tatarst, Russia.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; University of
   Konstanz; Innopolis University
RP Caltais, G; Meyer, B (corresponding author), Swiss Fed Inst Technol, Dept Comp Sci, Zurich, Switzerland.; Caltais, G (corresponding author), Univ Konstanz, Dept Comp & Informat Sci, Constance, Germany.; Meyer, B (corresponding author), Innopolis Univ, Software Engn Lab, Innopolis, Respubl Tatarst, Russia.
EM gcaltais@gmail.com; bertrand.meyer@infethz.ch
FU European Research Council under European Union's Seventh Framework
   Programme / ERC [291389]; European Research Council (ERC) [291389]
   Funding Source: European Research Council (ERC)
FX The research leading to these results has received funding from the
   European Research Council under the European Union's Seventh Framework
   Programme (FP7/2007-2013) / ERC Grant agreement no. 291389.
CR Albert E, 2009, LECT NOTES COMPUT SC, V5850, P370, DOI 10.1007/978-3-642-05089-3_24
   AlTurki M, 2008, ELECTRON NOTES THEOR, V200, P25, DOI 10.1016/j.entcs.2008.04.091
   Andrews G.R., 1982, P 1 ACM SIGACT SIGOP, P165
   [Anonymous], 1992, ACM LETT PROGRAM LAN
   [Anonymous], 1991, Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages
   Asavoae IM, 2014, ELECTRON NOTES THEOR, V304, P97, DOI 10.1016/j.entcs.2014.05.005
   Badal D. Z., 1983, Proceedings of IEEE INFOCOM 83, P36
   Burke M., 1995, Languages and Compilers for Parallel Computing. 7th International Workshop Proceedings, P234, DOI 10.1007/BFb0025882
   Caltais G, 2015, COMM COM INF SC, V476, P47, DOI 10.1007/978-3-319-17581-2_4
   CHANDY KM, 1983, ACM T COMPUT SYST, V1, P144, DOI 10.1145/357360.357365
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Choi J.-D., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P232, DOI 10.1145/158511.158639
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Coffman E. G.  Jr., 1971, Computing Surveys, V3, P67, DOI 10.1145/356586.356588
   COUSOT P, 1992, J LOGIC PROGRAM, V13, P103, DOI 10.1016/0743-1066(92)90030-7
   Diwan A, 1998, ACM SIGPLAN NOTICES, V33, P106, DOI 10.1145/277652.277670
   Eker Steven., 2004, ELECTRON NOTES THEOR, V71, P162, DOI [DOI 10.1016/S1571-0661(05)82534-4, 10.1016/S1571-0661(05)82534-4]
   Ellison C., 2012, THESIS
   Ellison C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P533
   EMAMI M, 1994, SIGPLAN NOTICES, V29, P242, DOI 10.1145/773473.178264
   FELLEISEN M, 1987, LECT NOTES COMPUT SC, V259, P206
   Ghamarian Amir Hossein, 2012, International Journal on Software Tools for Technology Transfer, V14, P15, DOI 10.1007/s10009-011-0186-x
   Giachino E., 2013, LNCS, V7940, P394
   Heussner A, 2015, ELECTRON P THEOR COM, P32, DOI 10.4204/EPTCS.181.3
   Hills Mark, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P10, DOI 10.1007/978-3-642-34005-5_2
   Hind M, 1999, ACM T PROGR LANG SYS, V21, P848, DOI 10.1145/325478.325519
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Hoare CART, 2009, LECT NOTES COMPUT SC, V5710, P399, DOI 10.1007/978-3-642-04081-8_27
   Kogtenkov A, 2015, SCI COMPUT PROGRAM, V97, P163, DOI 10.1016/j.scico.2013.11.006
   LARUS JR, 1988, SIGPLAN NOTICES, V23, P21, DOI 10.1145/960116.53993
   Martí-Oliet N, 2005, ELECTRON NOTES THEOR, V117, P417, DOI 10.1016/j.entcs.2004.06.020
   Meseguer J, 2013, INFORM COMPUT, V231, P38, DOI 10.1016/j.ic.2013.08.004
   Meyer B., 1991, EIFFEL LANGUAGE
   Miné A, 2006, ACM SIGPLAN NOTICES, V41, P54, DOI 10.1145/1134650.1134659
   MINOURA T, 1982, J ACM, V29, P1023, DOI 10.1145/322344.322351
   Misra J, 2007, SOFTW SYST MODEL, V6, P83, DOI 10.1007/s10270-006-0012-1
   Morandi B, 2013, INT CONF APPL CONCUR, P170, DOI 10.1109/ACSD.2013.21
   Myers EugeneM., 1981, P 8 ACM SIGPLAN SIGA, P219, DOI 10.1145/567532.567556
   Nienaltowski P., 2007, PRACTICAL FRAMEWORK
   RABIN MO, 1959, IBM J RES DEV, V3, P114, DOI 10.1147/rd.32.0114
   Rosu G, 2014, ELECTRON NOTES THEOR, V304, P3, DOI 10.1016/j.entcs.2014.05.002
   Rusakov A, 2014, IEEE INT C INT ROBOT, P1563, DOI 10.1109/IROS.2014.6942763
   Rusu V, 2016, J LOG ALGEBR METHODS, V85, P98, DOI 10.1016/j.jlamp.2015.09.001
   Shih C., 1990, TECH REP
   Torshizi F.A., 2009, CONCURR SYST ENG SER, V67, P1
   WILSON RP, 1995, SIGPLAN NOTICES, V30, P1, DOI 10.1145/223428.207111
NR 46
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
SI SI
BP 194
EP 215
DI 10.1016/j.scico.2016.08.005
PN 2
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EF1GC
UT WOS:000390072300006
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Groote, JF
   van der Hofstad, R
   Raffelsieper, M
AF Groote, Jan Friso
   van der Hofstad, Remco
   Raffelsieper, Matthias
TI On the random structure of behavioural transition systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Random graph; P-parallel random transition system; State space size
AB Numerous properties of random graphs are highly predictable. Even by exploring a small part reliable observations are possible regarding their structure and size. An unfortunate observation is that standard models for random graphs, such as the Erdos-Renyi model, do not reflect the structure of the graphs that describe distributed systems and protocols.
   In this paper we propose to use the parallel composition of such random graphs to model 'real' state spaces. We show how we can use this structure to predict the size of state spaces, and we can use it to explain that software bugs are in practice far easier to find than predicted by the standard random graph models. By practical experiments we show that our new probabilistic model is an improvement over the standard model in predicting properties of transition systems representing realistic systems. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Groote, Jan Friso; van der Hofstad, Remco] Eindhoven Univ Technol, Dept Math & Comp Sci, POB 513, NL-5600 MB Eindhoven, Netherlands.
   [Raffelsieper, Matthias] ETH, D MTEC, Weinbergstr 56-58, CH-8092 Zurich, Switzerland.
C3 Eindhoven University of Technology; Swiss Federal Institutes of
   Technology Domain; ETH Zurich
RP Groote, JF (corresponding author), Eindhoven Univ Technol, Dept Math & Comp Sci, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM J.F.Groote@tue.nl; R.W.v.d.Hofstad@tue.nl; raffelsm@ethz.ch
RI van der Harst, Pim/HOH-5622-2023
OI van der Harst, Pim/0000-0002-2713-686X; van der Hofstad,
   Remco/0000-0003-1331-9697; Groote, Jan Friso/0000-0003-2196-6587
FU NWO; Agentschap NL; Netherlands Organisation for Scientific Research
   (NWO) through VICI grant [639.033.806]; Netherlands Organisation for
   Scientific Research (NWO) through Gravitation Networks grant
   [024.002.003]
FX Thanks go to Jesse Goodman, Wil Kortsmit and the referees for remarks,
   support and discussion. This research was in part supported by NWO and
   Agentschap NL, with the work of Remco van der Hofstad being supported by
   the Netherlands Organisation for Scientific Research (NWO) through VICI
   grant 639.033.806 and the Gravitation Networks grant 024.002.003.
CR [Anonymous], 2001, RANDOM GRAPHS
   Attaway S., 2013, A Practical Introduction to Programming and Problem Solving
   Dingle N.J., 2008, P 24 UK PERF ENG WOR, P347
   Engels TAN, 2009, J LOGIC ALGEBR PROGR, V78, P274, DOI 10.1016/j.jlap.2008.11.003
   Groote J. F., 2006, International Journal on Software Tools for Technology Transfer, V8, P77, DOI 10.1007/s10009-005-0198-5
   Groote JF, 2014, MODELING AND ANALYSIS OF COMMUNICATING SYSTEMS, P1
   Groote J.F., 2008, P INT WORKSH ADV SOF, p5/1
   Groote J.F., 2014, CSR1401 EINDH U DEP
   Lincoln F. C., 1930, CALCULATING WATERFOW, V118, P1
   Luttik S.P., 1997, P 2 INT WORKSH APPL, P43
   MAUW S, 1993, CAMBRIDGE TRACTS THE, V36
   Pelanek R., 2008, FIMURS200801
   Remenska D, 2013, FUTURE GENER COMP SY, V29, P2239, DOI 10.1016/j.future.2013.06.004
   Steffen B., SPIN 2013, P341
   WATSON JF, 1994, IEEE T ROBOTIC AUTOM, V10, P555, DOI 10.1109/70.313106
NR 15
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2016
VL 128
SI SI
BP 51
EP 67
DI 10.1016/j.scico.2016.02.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DS2JI
UT WOS:000380595400004
OA Green Submitted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Perovsek, M
   Kranjc, J
   Erjavec, T
   Cestnik, B
   Lavrac, N
AF Perovsek, Matic
   Kranjc, Janez
   Erjavec, Tomaz
   Cestnik, Bojan
   Lavrac, Nada
TI TextFlows: A visual programming platform for text mining and natural
   language processing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Text mining; Natural language processing; Web platform; Workflows;
   Human-computer interaction
ID U-COMPARE
AB Text mining and natural language processing are fast growing areas of research, with numerous applications in business, science and creative industries. This paper presents TextFlows, a web-based text mining and natural language processing platform supporting workflow construction, sharing and execution. The platform enables visual construction of text mining workflows through a web browser, and the execution of the constructed workflows on a processing cloud. This makes TextFlows an adaptable infrastructure for the construction and sharing of text processing workflows, which can be reused in various applications. The paper presents the implemented text mining and language processing modules, and describes some precomposed workflows. Their features are demonstrated on three use cases: comparison of document classifiers and of different part-of-speech taggers on a text categorization problem, and outlier detection in document corpora. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Perovsek, Matic; Kranjc, Janez; Erjavec, Tomaz; Cestnik, Bojan; Lavrac, Nada] Jozef Stefan Inst, Ljubljana, Slovenia.
   [Perovsek, Matic; Kranjc, Janez; Erjavec, Tomaz; Lavrac, Nada] Jozef Stefan Int Postgrad Sch, Ljubljana, Slovenia.
   [Cestnik, Bojan] Temida Doo, Ljubljana, Slovenia.
   [Lavrac, Nada] Univ Nova Gorica, Nova Gorica, Slovenia.
C3 Slovenian Academy of Sciences & Arts (SASA); Jozef Stefan Institute;
   Slovenian Academy of Sciences & Arts (SASA); Jozef Stefan Institute;
   University of Nova Gorica
RP Perovsek, M (corresponding author), Jozef Stefan Inst, Ljubljana, Slovenia.; Perovsek, M (corresponding author), Jozef Stefan Int Postgrad Sch, Ljubljana, Slovenia.
EM matic.perovsek@ijs.si; janez.kranjc@ijs.si; tomaz.erjavec@ijs.si;
   bojan.cestnik@temida.si; nada.lavrac@ijs.si
OI Erjavec, Tomaz/0000-0002-1560-4099
FU Slovenian Research Agency; FP7 European Commission FET project MUSE
   [296703]; FP7 European Commission FET project ConCreTe [611733]
FX We are grateful to Borut Sluban and Senja Pollak for their previous work
   on the Kenyan elections document corpus. This work was supported by the
   Slovenian Research Agency and the FP7 European Commission FET projects
   MUSE (grant no. 296703) and ConCreTe (grant no. 611733).
CR [Anonymous], THESIS J STEFAN INT
   [Anonymous], 2006, ACM SIGKDD INT C KNO, DOI DOI 10.1145/1150402.1150531
   [Anonymous], 2003, Bioinformatics, DOI DOI 10.1093/BIOINFORMATICS/BTG1023
   [Anonymous], 2012, P 3 INT C COMP CREAT
   Arranz V, 2012, LREC 2012 - EIGHTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P2965
   Bhagat J, 2010, NUCLEIC ACIDS RES, V38, pW689, DOI 10.1093/nar/gkq394
   Bird S., 2004, P ACL INTERACTIVE PO, P214
   Bosca A, 2012, LREC 2012 - EIGHTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P3304
   BRILL E, 1992, SPEECH AND NATURAL LANGUAGE, P112
   Brodley CE, 1999, J ARTIF INTELL RES, V11, P131, DOI 10.1613/jair.606
   Chapman P., 2000, SPSS INC, V9, P13
   De Roure D, 2009, FUTURE GENER COMP SY, V25, P561, DOI 10.1016/j.future.2008.06.010
   Demsar J, 2004, LECT NOTES ARTIF INT, V3202, P537
   Feldman R., 2007, TEXT MINING HDB ADV, DOI DOI 10.1017/CBO9780511546914
   Ferrucci D, 2010, AI MAG, V31, P59, DOI 10.1609/aimag.v31i3.2303
   Han J., 2006, DATA MINING CONCEPTS, DOI 10.1016/C2009-0-61819-5
   Heid U., 2010, P 7 INT C LANG RES E, P494
   Hiemstra D., 2000, International Journal on Digital Libraries, V3, P131, DOI 10.1007/s007999900025
   Hinrichs M, 2010, LREC 2010 - SEVENTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION
   Hull D, 2006, NUCLEIC ACIDS RES, V34, pW729, DOI 10.1093/nar/gkl320
   Ide N, 2000, P 2 INT C LANG RES E, P825
   Ide N., 2007, Proceedings of the Linguistic Annotation Workshop, P1
   Ide N, 2014, LREC 2014 - NINTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION
   Ishida T, 2011, COGN TECHNOL, P1, DOI 10.1007/978-3-642-21178-2
   Jursic Matjaz, 2013, Human-Computer Interaction and Knowledge Discovery in Complex, Unstructured, Big Data. Third International Workshop, HCI-KDD 2013. Held at SouthCHI 2013. Proceedings: LNCS 7947, P124, DOI 10.1007/978-3-642-39146-0_12
   Jursic M, 2010, J UNIVERS COMPUT SCI, V16, P1190
   Kano Y, 2010, BIOINFORMATICS, V26, P2486, DOI 10.1093/bioinformatics/btq464
   Kano Y, 2009, BIOINFORMATICS, V25, P1997, DOI 10.1093/bioinformatics/btp289
   Kohlschutter Christian, 2010, P 3 ACM INT C WEB SE, P441, DOI DOI 10.1145/1718487.1718542
   Kranjc Janez, 2012, Machine Learning and Knowledge Discovery in Databases. Proceedings of the European Conference (ECML PKDD 2012), P816, DOI 10.1007/978-3-642-33486-3_54
   Ng A.Y., 2004, P 21 INT C MACH LEAR, P78, DOI DOI 10.1145/1015330.1015435
   Paltoglou G, 2010, ACL 2010: 48TH ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, P1386
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Poch M., 2011, P WORKSH LANG RES TE, P32
   Poch M, 2012, LREC 2012 - EIGHTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P1156
   Pollak S, 2009, P 4 LANG TECHN C HUM, P229
   Pollak S., 2013, PRAGMATICS, V21, P674
   Rak R., 2013, P 51 ANN M ASS COMP, P115
   Rak R., 2012, J BIOL DATABASES CUR
   Rak R, 2014, LREC 2014 - NINTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P3837
   Refaeilzadeh P., 2009, ENCYCL DATABASE SYST, V5, P532, DOI DOI 10.1007/978-0-387-39940-9565
   SALTON G, 1988, INFORM PROCESS MANAG, V24, P513, DOI 10.1016/0306-4573(88)90021-0
   Scott S, 1999, MACHINE LEARNING, PROCEEDINGS, P379
   Senger Martin., 2003, UK E SCI ALL HANDS M, P509
   Sluban Borut, 2013, Machine Learning and Knowledge Discovery in Databases. European Conference, ECML PKDD 2013. Proceedings: LNCS 8190, P650, DOI 10.1007/978-3-642-40994-3_47
   Sluban B, 2014, DATA MIN KNOWL DISC, V28, P265, DOI 10.1007/s10618-012-0299-1
   Sluban B, 2012, LREC 2012 - EIGHTH INTERNATIONAL CONFERENCE ON LANGUAGE RESOURCES AND EVALUATION, P1598
   Smalheiser NR, 1998, COMPUT METH PROG BIO, V57, P149, DOI 10.1016/S0169-2607(98)00033-9
   Witten IH, 2011, MOR KAUF D, P1
NR 49
TC 24
Z9 27
U1 1
U2 64
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2016
VL 121
SI SI
BP 128
EP 152
DI 10.1016/j.scico.2016.01.001
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH6YU
UT WOS:000372938800008
OA hybrid
DA 2024-07-18
ER

PT J
AU Hatefi, H
   Hermanns, H
AF Hatefi, Hassan
   Hermanns, Holger
TI Improving time bounded reachability computations in interactive Markov
   chains
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 24-26, 2013
CL Tehran, IRAN
SP IFIP WG 2 2, Inst Res Fundamental Sci, Sch Comp Sci, ACM SIGSOFT
DE Interactive Markov chains; Time bounded reachability; Discretisation;
   Root finding
ID DEPENDABILITY EVALUATION
AB Interactive Markov Chains (IMCs) are compositional behaviour models extending both Continuous Time Markov Chain (CTMC) and Labelled Transition System (LTS). They are used as semantic models in different engineering contexts ranging from ultramodern satellite designs to industrial system-on-chip manufacturing. Different approximation algorithms have been proposed for model checking of IMCs, with. time bounded reachability probabilities playing a pivotal role. This paper addresses the accuracy and efficiency of approximating time bounded reachability probabilities in IMCs, improving over the state-of-the-art in both efficiency of computation and tightness of approximation. Moreover, a stable numerical approach, which provides an effective framework for implementation of the theory, is proposed. Experimental evidence demonstrates the efficiency of the new approach. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Hatefi, Hassan; Hermanns, Holger] Univ Saarland, Dept Comp Sci, D-66123 Saarbrucken, Germany.
C3 Saarland University
RP Hatefi, H (corresponding author), Univ Saarland, Dept Comp Sci, Campus Saarbrucken, D-66123 Saarbrucken, Germany.
EM hhatefi@cs.uni-saarland.de; hermanns@cs.uni-saarland.de
OI Hermanns, Holger/0000-0002-2766-9615
FU DFG [SFB/TR 14 AVACS]; EU Seventh Framework Programme [295261, 318490];
   CAS-SAFEA International Partnership Program for Creative Research Teams
FX We thank Lijun Zhang for helpful discussions and comments, and Dennis
   Guck for developing and sharing the original implementation of the
   algorithm and the case study as a part of IMCA. This work is partly
   supported by the DFG as part of SFB/TR 14 AVACS, by the EU Seventh
   Framework Programme under grant agreement Nos. 295261 (MEALS) and 318490
   (SENSATION), and by the CAS-SAFEA International Partnership Program for
   Creative Research Teams.
CR [Anonymous], 2012, ECEASST
   [Anonymous], 2002, LECT NOTES COMPUTER
   Aziz K., 1996, Computer Aided Verification. 8th International Conference, CAV '96. Proceedings, P269
   Baier C, 2005, THEOR COMPUT SCI, V345, P2, DOI 10.1016/j.tcs.2005.07.022
   Baier C, 2003, IEEE T SOFTWARE ENG, V29, P524, DOI 10.1109/TSE.2003.1205180
   Bianco A., 1995, Foundations of Software Technology and Theoretical Computer Science. 15th Conference. Proceedings, P499
   Böde E, 2009, IEEE T SOFTWARE ENG, V35, P274, DOI 10.1109/TSE.2008.102
   Boudali H, 2008, I C DEPEND SYS NETWO, P512, DOI 10.1109/DSN.2008.4630122
   Bravetti M, 2006, ELECTRON NOTES THEOR, V162, P107, DOI 10.1016/j.entcs.2005.12.108
   Brazdil Tomas, 2012, FSTTCS LIPICS, V18, P474
   Buchholz Peter, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P225, DOI 10.1007/978-3-642-22110-1_19
   Buchholz P, 2011, COMPUT OPER RES, V38, P651, DOI 10.1016/j.cor.2010.08.011
   Cloth L, 2005, INT CONF QUANT EVAL, P145, DOI 10.1109/QEST.2005.21
   Coste N., 2008, DATE, P88
   Coste N, 2009, LECT NOTES COMPUT SC, V5643, P204, DOI 10.1007/978-3-642-02658-4_18
   Deng YX, 2013, INFORM COMPUT, V222, P139, DOI 10.1016/j.ic.2012.10.010
   Eisentraut C, 2010, IEEE S LOG, P342, DOI 10.1109/LICS.2010.41
   Esteve MA, 2012, PROC INT CONF SOFTW, P1022, DOI 10.1109/ICSE.2012.6227118
   Fearnley J, 2011, LEIBNIZ INT PR INFOR, V13, P399, DOI 10.4230/LIPIcs.FSTTCS.2011.399
   Garavel H, 2011, LECT NOTES COMPUT SC, V6605, P372, DOI 10.1007/978-3-642-19835-9_33
   Guck Dennis, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P55, DOI 10.1007/978-3-642-40196-1_5
   Guck Dennis, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P8, DOI 10.1007/978-3-642-28891-3_4
   Hatefi H, 2013, LECT NOTES COMPUT SC, V8161, P250, DOI 10.1007/978-3-642-40213-5_16
   Hermanns Holger, 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P364, DOI 10.1007/978-3-642-40184-8_26
   Hermanns H, 2002, THEOR COMPUT SCI, V274, P43, DOI 10.1016/S0304-3975(00)00305-4
   Hermanns H, 2000, SCI COMPUT PROGRAM, V36, P97, DOI 10.1016/S0167-6423(99)00019-2
   Hillston J., 2005, THESIS
   Johr S., 2008, THESIS
   Macià H, 2008, FUND INFORM, V87, P367
   Neuhausser Martin R., 2010, THESIS
   Pulungan R., 2009, THESIS
   Skiena S. S, 1998, The Algorithm Design Manual
   Williams VV, 2012, STOC'12: PROCEEDINGS OF THE 2012 ACM SYMPOSIUM ON THEORY OF COMPUTING, P887
   Zhang LJ, 2011, LECT NOTES COMPUT SC, V6756, P271, DOI 10.1007/978-3-642-22012-8_21
   Zhang L, 2010, LECT NOTES COMPUT SC, V6015, P53, DOI 10.1007/978-3-642-12002-2_5
NR 35
TC 1
Z9 1
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 58
EP 74
DI 10.1016/j.scico.2015.05.003
PN 1
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CW3HB
UT WOS:000364881500004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Mandel, L
   Pasteur, C
   Pouzet, M
AF Mandel, Louis
   Pasteur, Cedric
   Pouzet, Marc
TI Time refinement in a functional synchronous language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Synchronous languages; Functional languages; Semantics; Type systems
ID INFERENCE
AB Concurrent and reactive systems often exhibit multiple time scales. This situation occurs, for instance, in the discrete simulation of a sensor network where the time scale at which agents communicate is very different from the time scale used to model the internals of an agent.
   The paper presents reactive domains to simplify the programming of such systems. Reactive domains allow for several time scales to be defined and they enable time refinement, that is, the replacement of a system with a more detailed version, without changing its observed behavior.
   Our work applies to the REACTIVEEML language, which extends an ML language with synchronous programming constructs a to Esterel. We present an operational semantics for the extended language, a type system that ensures the soundness of programs, and a sequential implementation. We discuss how reactive domains can be used in a parallel implementation. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Mandel, Louis] IBM Res, Yorktown Hts, NY USA.
   [Pasteur, Cedric; Pouzet, Marc] Ecole Normale Super, DI, F-75231 Paris, France.
   [Pouzet, Marc] INRIA Paris Rocquencourt, Paris, France.
   [Pouzet, Marc] Univ Paris 06, F-75252 Paris 05, France.
C3 International Business Machines (IBM); Universite PSL; Ecole Normale
   Superieure (ENS); Sorbonne Universite
RP Mandel, L (corresponding author), IBM Res, Yorktown Hts, NY USA.
EM lmandel@us.ibm.com; cedric.pasteur@ansys.com; marc.pouzet@ens.fr
CR [Anonymous], INTERSENSE 06
   [Anonymous], 2005, P 7 INT ACM SIGPLAN, DOI DOI 10.1145/1069774.1069782
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Berry Gerard., 1996, The Constructive Semantics of Pure Esterel
   BOUSSINOT F, 1991, SOFTWARE PRACT EXPER, V21, P401, DOI 10.1002/spe.4380210406
   Boussinot F, 1998, SOFTWARE PRACT EXPER, V28, P1531, DOI 10.1002/(SICI)1097-024X(19981210)28:14<1531::AID-SPE218>3.0.CO;2-U
   BRANDT K, 2013, EURASIP J EMBED SYST, V3, P1
   Calcagno C, 2002, INFORM COMPUT, V173, P199, DOI 10.1006/inco.2001.3112
   Colaço JL, 2003, LECT NOTES COMPUT SC, V2855, P134
   Gamatié A, 2010, IEEE T PARALL DISTR, V21, P641, DOI 10.1109/TPDS.2009.125
   Germunde M., 2013, THESIS U KAISERSLAUT
   Herlihy M., 2008, ART MULTIPROCESSOR P
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Laufer K., 1992, ACM SIGPLAN WORKSH M, P78
   Le Guernic P, 2003, J CIRCUIT SYST COMP, V12, P261, DOI 10.1142/S0218126603000763
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Mandel L., 2015, P 17 ACM SIGPLAN INT
   Mandel L, 2014, P 21 INT STAT AN S S
   Mandel L, 2013, P 15 ACM SIGPLAN INT
   Mikac J., 2005, INT WORKSH SYNCHR LA
   Nilsson H, 2002, P 2002 ACM SIGPLAN W, P51, DOI DOI 10.1145/581690.581695
   Pasteur C., 2013, THESIS U PARIS 6, V6
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Rémy D, 2005, ACM SIGPLAN NOTICES, V40, P130, DOI 10.1145/1090189.1086383
   Schneider Klaus., 2009, SYNCHRONOUS PROGRAMM
   TALPIN JP, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P162, DOI 10.1109/LICS.1992.185530
   TOFTE M, 1990, INFORM COMPUT, V89, P1, DOI 10.1016/0890-5401(90)90018-D
NR 27
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
BP 190
EP 211
DI 10.1016/j.scico.2015.07.002
PN 1
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5MA
UT WOS:000368557000009
OA hybrid, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Patcas, LM
   Lawford, M
   Maibaum, T
AF Patcas, Lucian M.
   Lawford, Mark
   Maibaum, Tom
TI Implementability of requirements in the four-variable model
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Safety-critical; Four-variable model; Implementability of requirements;
   Tolerances on requirements; Demonic calculus of relations
ID SPECIFICATION; VERIFICATION; REFINEMENT; SEMANTICS; DESIGN
AB Many safety-critical computer systems are required to monitor and control physical processes. The four-variable model, which has been used successfully in industry for almost four decades, helps to clarify the behaviors of, and the boundaries between the physical processes, input/output devices, and software. In this model, the acceptable behaviors of the software are constrained by the physical environment, system requirements, and input/output devices. If acceptable software behaviors are possible, then the system requirements are said to be implementable with respect to these constraints. The only acceptability condition proposed in the literature deems as acceptable software behaviors that can lead to undesirable system behaviors, in particular, nondeterministic system behaviors that for the same input sometimes do not produce any results and some other times produce expected results. In this sense, the acceptability condition can be seen as angelic. In this paper we strengthen the acceptability condition using the demonic calculus of relations such that no undesirable system or software behaviors are allowed and prove a necessary and sufficient implementability condition for the system requirements. As a byproduct, we also obtain a mathematical characterization of the least restrictive software specification, which, for all intents and purposes, can play the role of the software requirements. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Patcas, Lucian M.; Lawford, Mark; Maibaum, Tom] McMaster Univ, Dept Comp & Software, 1280 Main St W, Hamilton, ON L8S 4K1, Canada.
C3 McMaster University
RP Patcas, LM (corresponding author), McMaster Univ, Dept Comp & Software, 1280 Main St W, Hamilton, ON L8S 4K1, Canada.
EM patcaslm@mcmaster.ca; lawford@mcmaster.ca; maibaum@mcmaster.ca
CR BACK RJR, 1981, J COMPUT SYST SCI, V23, P49, DOI 10.1016/0022-0000(81)90005-2
   BACK RJR, 1992, THEOR COMPUT SCI, V100, P365, DOI 10.1016/0304-3975(92)90309-4
   Backhouse R.C., 1993, Math. Struct. Comput. Sci., V3, P417
   Banach R, 2007, SCI COMPUT PROGRAM, V67, P301, DOI 10.1016/j.scico.2007.04.002
   BERGHAMMER R, 1986, THEOR COMPUT SCI, V43, P123, DOI 10.1016/0304-3975(86)90172-6
   Boudriga N., 1992, Formal Aspects of Computing, V4, P544, DOI 10.1007/BF01211474
   Brink C., 1997, ADV COMPUTING
   Demri S, 1996, THEOR COMPUT SCI, V166, P173, DOI 10.1016/0304-3975(95)00190-5
   DESHARNAIS J, 1995, THEOR COMPUT SCI, V149, P333, DOI 10.1016/0304-3975(94)00271-J
   DESHARNAIS J, 1993, THEOR COMPUT SCI, V114, P247, DOI 10.1016/0304-3975(93)90074-4
   Desharnais J., REFINEMENT DEMONIC S, P166
   Faulk S., 1994, 9 ANN C COMP ASS GAI
   Frappier M, 1996, SCI COMPUT PROGRAM, V26, P237, DOI 10.1016/0167-6423(95)00028-3
   FRAPPIER M, 1995, THESIS U OTTAWA
   Gunter CA, 2000, IEEE SOFTWARE, V17, P37, DOI 10.1109/52.896248
   Heimdahl M., 2000, P 19 IEEE DIG AV SYS
   Hoare C. A. R., 1986, Fundamenta Informaticae, V9, P217
   Hoare C. A. R., 1986, Fundamenta Informaticae, V9, P51
   HOARE CAR, 1987, INFORM PROCESS LETT, V24, P127, DOI 10.1016/0020-0190(87)90106-2
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   Hu XY, 2009, LECT NOTES COMPUT SC, V5596, P119
   Janicki R, 2001, SCI COMPUT PROGRAM, V39, P189, DOI 10.1016/S0167-6423(00)00004-6
   JANICKI R, 1995, PROC INT CONF SOFTW, P231, DOI 10.1145/225014.225036
   Janicki R., TABULAR REPRESENTATI, P184
   KAHL W, 2003, ELECT NOTES THEORETI, V44, P51
   Kahl W., 2003, COMPOSITIONAL SYNTAX
   Kester W., 2005, DATA CONVERSION HDB
   Knight J., 2012, INNOVATIONS SOFTWARE
   Lawford M, 2000, LECT NOTES COMPUT SC, V1816, P73
   Lempia D. L., 2009, DOTFAAAR0832
   Maddux RD, 1996, THEOR COMPUT SCI, V160, P1, DOI 10.1016/0304-3975(95)00082-8
   MILI A, 1987, ACTA INFORM, V24, P239, DOI 10.1007/BF00265990
   MILI A, 1983, ACTA INFORM, V20, P315, DOI 10.1007/BF00264277
   Miller S.P., 2001, P 20 IEEE DIG AV SYS
   MORGAN C, 1987, IBM J RES DEV, V31, P546, DOI 10.1147/rd.315.0546
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   Parnas D.L., 1992, 260 CRL MCMASTER U C
   PARNAS DL, 1995, SCI COMPUT PROGRAM, V25, P41, DOI 10.1016/0167-6423(95)96871-J
   PARNAS DL, 1994, IEEE T SOFTWARE ENG, V20, P948, DOI 10.1109/32.368133
   PARNAS DL, 2003, ELECT NOTES THEORETI, V44, P1
   Patcas L.M., 2014, ELECT COMMUNICATIONS, V66
   Patcas LM, 2014, LECT NOTES COMPUT SC, V8739, P373, DOI 10.1007/978-3-319-10181-1_23
   PETERS D, 2000, THESIS MCMASTER U
   Santina M. S., 1996, CONTROL HDB, P301
   Schmidt G., 1993, EATCS monographs on theoretical computer science
   Schmidt G., 2011, ENCY MATH ITS APPL
   Shen H, 1996, COMPASS '96 - PROCEEDINGS OF THE ELEVENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P3, DOI 10.1109/CMPASS.1996.507870
   Thompson JM, 1999, LECT NOTES COMPUT SC, V1687, P163, DOI 10.1145/318774.318940
   THOMPSON JM, 2000, J UNIVERS COMPUT SCI, V6, P731
   Van Schouwen A., 1990, 90276 QUEENS U
   Walden RH, 1999, IEEE J SEL AREA COMM, V17, P539, DOI 10.1109/49.761034
   Wassyng A., 2006, International Journal on Software Tools for Technology Transfer, V8, P337, DOI 10.1007/s10009-005-0209-6
   Wassyng A, 2003, LECT NOTES COMPUT SC, V2805, P133
   Zucker J. I., 1996, Formal Aspects of Computing, V8, P679, DOI 10.1007/BF01213494
NR 54
TC 1
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 339
EP 362
DI 10.1016/j.scico.2015.05.007
PN 2
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5LX
UT WOS:000368556700007
DA 2024-07-18
ER

PT J
AU Pino, LF
   Bonchi, F
   Valencia, F
AF Pino, Luis F.
   Bonchi, Filippo
   Valencia, Frank
TI Efficient algorithms for program equivalence for confluent concurrent
   constraint programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrent constraint programming; Bisimulation; Partition refinement;
   Observational equivalence
ID SEMANTICS; BISIMULATION; CALCULI
AB Concurrent Constraint Programming (CCP) is a well-established declarative framework from concurrency theory. Its foundations and principles e.g., semantics, proof systems, axiomatizations, have been thoroughly studied for over the last two decades. In contrast, the development of algorithms and automatic verification procedures for CCP have hitherto been far too little considered. To the best of our knowledge there is only one existing verification algorithm for the standard notion of CCP program (observational) equivalence. In this paper we first show that this verification algorithm has an exponential-time complexity even for programs from a representative sub-language of CCP; the summation-free fragment (CCP\+). We then significantly improve on the complexity of this algorithm by providing two alternative polynomial-time decision procedures for CCP\+ program equivalence. Each of these two procedures has an advantage over the other. One has a better time complexity. The other can be easily adapted for the full language of CCP to produce significant state space reductions. The relevance of both procedures derives from the importance of CCP\+. This fragment, which has been the subject of many theoretical studies, has strong ties to first-order logic and an elegant denotational semantics, and it can be used to model real-world situations. Its most distinctive feature is that of confluence, a property we exploit to obtain our polynomial procedures. Finally, we also study the congruence issues regarding CCP's program equivalence. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Pino, Luis F.] INRIA, DGA, F-91128 Palaiseau, France.
   [Pino, Luis F.; Valencia, Frank] Ecole Polytech, CNRS, LIX, UMR X 7161, F-91128 Palaiseau, France.
   [Bonchi, Filippo] Univ Lyon, ENS Lyon, LIP, UMR 5668,CNRS,ENS Lyon,UCBL,INRIA, F-69364 Lyon, France.
   [Valencia, Frank] Ecole Polytech, CNRS, F-91128 Palaiseau, France.
C3 Inria; Centre National de la Recherche Scientifique (CNRS); Institut
   Polytechnique de Paris; Ecole Polytechnique; Ecole Normale Superieure de
   Lyon (ENS de LYON); Centre National de la Recherche Scientifique (CNRS);
   Inria; Centre National de la Recherche Scientifique (CNRS); Institut
   Polytechnique de Paris; Ecole Polytechnique
RP Pino, LF (corresponding author), INRIA, DGA, F-91128 Palaiseau, France.
EM luis.pino@lix.polytechnique.fr; filippo.bonchi@ens-lyon.fr;
   frank.valencia@lix.polytechnique.fr
RI Bonchi, Filippo/E-7955-2018
OI Bonchi, Filippo/0000-0002-3433-723X; Pino, Luis/0000-0003-4475-7470
FU project PACE [ANR-12-IS02-0001]; project PANDA [ANR-09-BLAN-0169-01];
   French Defense procurement agency (DGA); Agence Nationale de la
   Recherche (ANR) [ANR-12-IS02-0001, ANR-09-BLAN-0169] Funding Source:
   Agence Nationale de la Recherche (ANR)
FX This work has been partially supported by the project ANR-12-IS02-0001 -
   PACE, ANR-09-BLAN-0169-01 PANDA, and by the French Defense procurement
   agency (DGA) with a PhD grant.
CR Aceto L., 2011, ADV TOPICS BISIMULAT, P100
   Amadio R., 1996, LNCS, V1119, P147
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 1983, PROCS 2 ANN ACM S PR, DOI [10.1145/800221.806724, DOI 10.1145/800221.806724]
   Aristizabal A., 2012, THESIS ECOLE POLYTEC
   Aristizabal A., 2012, SAC, P88, DOI DOI 10.1145/2245276.2245296
   Aristizábal A, 2011, LECT NOTES COMPUT SC, V6604, P138, DOI 10.1007/978-3-642-19805-2_10
   Bartoletti M, 2010, IEEE S LOG, P332, DOI 10.1109/LICS.2010.25
   Bengtson J, 2009, IEEE S LOG, P39, DOI 10.1109/LICS.2009.20
   Bonchi F, 2008, LECT NOTES COMPUT SC, V4962, P395, DOI 10.1007/978-3-540-78499-9_28
   Bonchi F, 2006, IEEE S LOG, P69, DOI 10.1109/LICS.2006.46
   Bonchi F, 2009, LECT NOTES COMPUT SC, V5504, P272
   Bonchi F, 2009, LECT NOTES COMPUT SC, V5502, P267, DOI 10.1007/978-3-642-00590-9_20
   Bouali A., 1992, LECT NOTES COMPUTER, V663, P96, DOI [10.1007/3-540-56496-9_9, DOI 10.1007/3-540-56496-9_9]
   Buscemi MG, 2008, LECT NOTES COMPUT SC, V4960, P254
   DEBOER FS, 1995, THEOR COMPUT SCI, V151, P37, DOI 10.1016/0304-3975(95)00047-Z
   Dovier A, 2004, THEOR COMPUT SCI, V311, P221, DOI 10.1016/S0304-3975(03)00361-X
   Fernandez J.C., 1990, FORTE, V90, P95
   Garavel H, 2008, ELECTRON NOTES THEOR, V209, P149, DOI 10.1016/j.entcs.2008.04.009
   HENNESSY M, 1995, THEOR COMPUT SCI, V138, P353, DOI 10.1016/0304-3975(94)00172-F
   Knight S, 2012, LECT NOTES COMPUT SC, V7454, P317, DOI 10.1007/978-3-642-32940-1_23
   Mendler N. P., 1995, Nordic Journal of Computing, V2, P181
   MILNER R, 1992, LECT NOTES COMPUT SC, V623, P685
   Olarte C, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P145
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   Palamidessi C, 2006, IEEE S LOG, P59, DOI 10.1109/LICS.2006.39
   Pino LF., 2013, 15 INT S PRINC PRACT, P263
   Pino LF, 2015, SCI COMPUT PROGRAM, V100, P84, DOI 10.1016/j.scico.2014.09.007
   Pistore M, 2001, INFORM COMPUT, V164, P264, DOI 10.1006/inco.2000.2895
   SARASWAT VA, 1994, IEEE S LOG, P71, DOI 10.1109/LICS.1994.316085
   Saraswat Vijay A., 1991, P 18 ACM SIGPLANSIGA, P333, DOI DOI 10.1145/99583.99627
NR 32
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
BP 135
EP 155
DI 10.1016/j.scico.2014.12.003
PN 1
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5MA
UT WOS:000368557000007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Caballero, R
   Martin-Martin, E
   Riesco, A
   Tamarit, S
AF Caballero, Rafael
   Martin-Martin, Enrique
   Riesco, Adrian
   Tamarit, Salvador
TI A zoom-declarative debugger for sequential Erlang programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 28th ACM Symposium on Applied Computing (SAC) on Programming Languages
   Track
CY MAR 18-22, 2013
CL Coimbra, PORTUGAL
SP ACM, ACM Special Interest Grp Appl Comp
DE Erlang; Zoom debugging; Declarative debugging
AB We present a declarative debugger for sequential Erlang programs. The tool is started when a program produces some unexpected result, and proceeds asking questions to the user about the correctness of some subcomputations until an erroneous program function is found. Then, the user can refine the granularity by zooming in the function, checking the values bound to variables and the if/case/try-catch branches taken during the execution. We show by means of an extensive benchmark that the result is a usable, scalable tool that complements already existing debugging tools such as the Erlang tracer and Dialyzer. Since the technique is based on a formal calculus, we are able to prove the soundness and completeness of the approach. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Caballero, Rafael; Martin-Martin, Enrique; Riesco, Adrian] Univ Complutense Madrid, Fac Informat, Dept Sistemas Informat & Computac, E-28040 Madrid, Spain.
   [Tamarit, Salvador] Univ Politecn Madrid, Fac Informat, Babel Res Grp, Boadilla Del Monte 28660, Spain.
C3 Complutense University of Madrid; Universidad Politecnica de Madrid
RP Caballero, R (corresponding author), Univ Complutense Madrid, Fac Informat, Dept Sistemas Informat & Computac, C Prof Jose Garcia Santesmases 9, E-28040 Madrid, Spain.
EM rafacr@ucm.es; emartinm@ucm.es; ariesco@fdi.ucm.es;
   stamarit@babel.ls.fi.upm.es
RI Tamarit, Salvador/F-7098-2016; Caballero, Rafael/T-2232-2017; Riesco,
   Adrian/I-5959-2016
OI Tamarit, Salvador/0000-0001-5103-4153; MARTIN-MARTIN,
   ENRIQUE/0000-0002-1664-018X; Caballero, Rafael/0000-0001-8181-5532;
   Riesco, Adrian/0000-0002-9716-4612
FU European Union project POLCA [STREP FP7-ICT-2013.3.4 610686]; MICINN
   Spanish projects [TIN2013-44742-C4-1-R, TIN2013-44742-C4-2-R,
   TIN2013-44742-C4-3-R]; StrongSoft [TIN2012-39391-C04-04]; VIVAC
   [TIN2012-38137-C02-02]; Madrid regional projects N-GREENS Software-CM
   [S2013/ICE-2731]; SICOMORo-CM [S2013/ICE-3006]; UCM grant
   [GR3/14-910502]
FX Research partially supported by European Union project POLCA (STREP
   FP7-ICT-2013.3.4 610686); MICINN Spanish projects TIN2013-44742-C4-1-R,
   TIN2013-44742-C4-2-R, TIN2013-44742-C4-3-R, StrongSoft
   (TIN2012-39391-C04-04) and VIVAC (TIN2012-38137-C02-02); Madrid regional
   projects N-GREENS Software-CM (S2013/ICE-2731), SICOMORo-CM
   (S2013/ICE-3006) and UCM grant GR3/14-910502.
CR Alpuente M, 2010, THEOR COMPUT SCI, V411, P4055, DOI 10.1016/j.tcs.2010.07.009
   [Anonymous], THESIS U MELBOURNE A
   [Anonymous], 1983, THESIS
   [Anonymous], 2010, 2010 IEEE INT C SOFT
   Armstrong Joe, 1996, Concurrent Programming in Erlang
   Arts T, 2004, FOURTH INTERNATIONAL CONFERENCE ON APPLICATION OF CONCURRENCY TO SYSTEM DESIGN, PROCEEDINGS, P135, DOI 10.1109/CSD.2004.1309124
   Beutelspacher A., 1994, CRYPTOLOGY MAA SPECT
   Caballero Rafael, 2013, Tests and Proofs. 7th International Conference, TAP 2013. Proceedings: LNCS 7942, P96, DOI 10.1007/978-3-642-38916-0_6
   Caballero R, 2007, ELECTRON NOTES THEOR, V177, P75, DOI 10.1016/j.entcs.2007.01.005
   Caballero R., 2005, P 2005 ACM SIGPLAN W, P8
   Caballero R., 2014, 0214 DEP SIST INF CO
   Caballero Rafael, 2014, TACAS, P581
   Carlson R., 2006, International Conference on Renewable Energies and Power Quality, V1, P1, DOI 10.1145/1159789.1159791
   Cesarini Francesco, 2009, Erlang Programming: A Concurrent Approach to Software Development
   Christakis M, 2010, LECT NOTES COMPUT SC, V5937, P119, DOI 10.1007/978-3-642-11503-5_11
   Christensen N.H., 2003, THESIS U COPENHAGEN
   Claessen K., 2005, P 2005 ACM SIGPLAN W, P78
   David R, 2005, J FUNCT PROGRAM, V15, P33, DOI 10.1017/S0956796804005362
   de Groote P., 1995, Typed Lambda Calculi and Applications. Second International Conference on Typed Lambda Calculi and Applications, TLCA '95. Proceedings, P201, DOI 10.1007/BFb0014054
   EARLE CB, 2009, P 8 ACM SIGPLAN WORK, P93
   FREDLUND L, 2001, THESIS ROYAL I TECHN
   Hahnle R., 2010, Proceedings of the IEEE/ACM international conference on Automated software engineering, ASE '10, P143, DOI DOI 10.1145/1858996.1859022
   Huch F, 1999, ACM SIGPLAN NOTICES, V34, P261, DOI 10.1145/317765.317908
   Hughes J, 2007, LECT NOTES COMPUT SC, V4354, P1
   Lindahl T, 2004, LECT NOTES COMPUT SC, V3302, P91
   MACLARTY I, 2005, THESIS U MELBOURNE
   NAISH L, 1992, NEW GENERAT COMPUT, V10, P255, DOI 10.1007/BF03037939
   Nilsson H, 2001, J FUNCT PROGRAM, V11, P629, DOI 10.1017/S095679680100418X
   Papadakis M, 2011, ERLANG 11: PROCEEDINGS OF THE 2011 ACM SIGPLAN ERLANG WORKSHOP, P39
   Pope B, 2004, LECT NOTES COMPUT SC, V3622, P273
   Riesco A, 2012, J LOGIC ALGEBR PROGR, V81, P851, DOI 10.1016/j.jlap.2011.06.004
   RTI, 2002, 7007011 RTI NAT I ST
   Sagonas K., P ACM SIGPLAN 2013 W, DOI [DOI 10.1145/2426890.2426897, 10.1145/2426890.2426897.]
   Silva J, 2007, LECT NOTES COMPUT SC, V4407, P143, DOI 10.1007/978-3-540-71410-1_11
   Silva J, 2011, ADV ENG SOFTW, V42, P976, DOI 10.1016/j.advengsoft.2011.05.024
   Svensson H, 2007, ERLANG'07: PROCEEDINGS OF THE 2007 SIGPLAN ERLANG WORKSHOP, P43
   Tessier A, 2000, LECT NOTES COMPUT SC, V1870, P151
NR 37
TC 5
Z9 5
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2015
VL 110
BP 104
EP 118
DI 10.1016/j.scico.2015.06.011
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CR3VX
UT WOS:000361262300006
DA 2024-07-18
ER

PT J
AU Bozzano, M
   Cimatti, A
   Lisagor, O
   Mattarei, C
   Mover, S
   Roveri, M
   Tonetta, S
AF Bozzano, Marco
   Cimatti, Alessandro
   Lisagor, Oleg
   Mattarei, Cristian
   Mover, Sergio
   Roveri, Marco
   Tonetta, Stefano
TI Safety assessment of AltaRica models via symbolic model checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model checking; Safety assessment; Fault tree analysis; AltaRica
ID FAULT-TREE ANALYSIS
AB AltaRica is a language used to describe safety critical systems that has become a de-facto European industrial standard for Model-Based Safety Assessment (MBSA). However, even the most mature tool for the support for MBSA of AltaRica models, i.e. Dassault's OCAS, has several limitations. The most important ones are its inability to perform many analyses exhaustively, severe scalability issues, and the lack of model checking techniques for temporal properties.
   In this paper we present a novel approach for the analysis of AltaRica models, based on a translation into an extended version of the model checker NuSMV. The translation relies on a novel formal characterization of the Dataflow dialect of AltaRica used in OCAS. The translation is formally defined, and its correctness is proved. Based on this formal characterization, a toolset has been developed and integrated within OCAS, thus enabling functional verification and safety assessment with the state of the art techniques of NuSMV. The whole approach is validated by an experimental evaluation on a set of industrial case studies, which demonstrates the advantages of the proposed technique over the currently available tools. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Bozzano, Marco; Cimatti, Alessandro; Mattarei, Cristian; Mover, Sergio; Roveri, Marco; Tonetta, Stefano] Fdn Bruno Kessler, Trento, Italy.
   [Lisagor, Oleg] Univ York, York YO10 5DD, N Yorkshire, England.
C3 Fondazione Bruno Kessler; University of York - UK
RP Bozzano, M (corresponding author), Fdn Bruno Kessler, Trento, Italy.
RI Roveri, Marco/U-7164-2019; Bozzano, Marco/ABD-3241-2020; Tonetta,
   Stefano/AAP-3546-2020
OI Roveri, Marco/0000-0001-9483-3940; Bozzano, Marco/0000-0002-4135-103X;
   Mattarei, Cristian/0000-0001-5050-896X; Cimatti,
   Alessandro/0000-0002-1315-6990
CR Akerlund O., 2006, P ERTS 2006, P1
   [Anonymous], 2010, Design and Safety Assessment of Critical Systems
   [Anonymous], 2007, OCAS MOD SYST DES AN
   Arnold A., 1999, Fundamenta Informaticae, V40, P109
   Bieber P, 2004, INT FED INFO PROC, V156, P505
   Bieber P, 2002, LECT NOTES COMPUT SC, V2485, P19
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Boiteau M, 2006, RELIAB ENG SYST SAFE, V91, P747, DOI 10.1016/j.ress.2004.12.004
   Bozzano M., 2007, International Journal on Software Tools for Technology Transfer, V9, P5, DOI 10.1007/s10009-006-0001-2
   Bozzano M, 2003, SAFETY AND RELIABILITY, VOLS 1 AND 2, P237
   Bozzano M., COMPUT J
   Bozzano M, 2007, LECT NOTES COMPUT SC, V4762, P162
   BRYANT RE, 1992, COMPUT SURV, V24, P293, DOI 10.1145/136035.136043
   Cassez F, 2004, FUND INFORM, V62, P291
   Cimatti A, 2013, FORM METHOD SYST DES, V42, P46, DOI 10.1007/s10703-012-0158-0
   Cimatti A, 2011, EUROMICRO CONF PROC, P275, DOI 10.1109/SEAA.2011.49
   Feiler P., 2006, COMPUTER AIDED CONTR, P1206
   FENELON P, 1993, J SYST SOFTWARE, V21, P279, DOI 10.1016/0164-1212(93)90029-W
   Griffault A., 2011, ALTARICA STUDIO EASI
   Johnson Leslie A., DO 178B SOFTWARE CON
   Lisagor O., 2011, Proceedings of 2011 9th International Conference on Reliability, Maintainability and Safety (ICRMS 2011), P625, DOI 10.1109/ICRMS.2011.5979344
   Mattarei C., 2011, THESIS U STUDI TRENT
   McMillan K. L., 1993, Symbolic model checking
   Papadopoulos Y, 2001, RELIAB ENG SYST SAFE, V71, P229, DOI 10.1016/S0951-8320(00)00076-4
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Rauzy A, 2002, RELIAB ENG SYST SAFE, V78, P1, DOI 10.1016/S0951-8320(02)00042-X
   Rauzy A, 2001, IEEE T RELIAB, V50, P389, DOI 10.1109/24.983400
   Rintanen J, 2006, ARTIF INTELL, V170, P1031, DOI 10.1016/j.artint.2006.08.002
   Vesely W.E., 1981, Fault tree handbook
   Vesely William, 2002, Fault Tree Handbook with Aerospace Applications
   Wallace M, 2005, ELECTRON NOTES THEOR, V141, P53, DOI 10.1016/j.entcs.2005.02.051
   Yu Andy, 2009, International Journal on Software Tools for Technology Transfer, V11, P117, DOI 10.1007/s10009-009-0099-0
NR 33
TC 22
Z9 28
U1 1
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 464
EP 483
DI 10.1016/j.scico.2014.06.003
PN 4
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400002
DA 2024-07-18
ER

PT J
AU Jiménez, A
   Vara, JM
   Bollati, VA
   Marcos, E
AF Jimenez, Alvaro
   Vara, Juan M.
   Bollati, Veronica A.
   Marcos, Esperanza
TI MeTAGeM-Trace: Improving trace generation in model transformation by
   leveraging the role of transformation models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven engineering; Traceability; Model transformation
ID TRACEABILITY; MANAGEMENT; LANDSCAPE
AB In the context of Model-Driven Engineering (MDE), generation of traces can be automated using the implicit traceability relationships contained in any model transformation. Besides, if transformations are developed adopting a Model-Driven Engineering (MDE) approach, i.e. promoting the role of models and the level of automation, model transformation will benefit from the promised advantages of MDE in terms of less costly software development while reducing the inherent complexity of coding model transformations. To put these ideas into practice, this work introduces MeTAGeM-Trace, the first prototype of an EMF-based toolkit for the MDD of model-to-model transformations which supports trace generation, i.e. it allows developing model transformations that produce not only the corresponding target models, but also a trace model between the elements of the source and target models involved in the transformation. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Jimenez, Alvaro; Vara, Juan M.; Bollati, Veronica A.; Marcos, Esperanza] Univ Rey Juan Carlos, Kybele Res Grp, E-28933 Madrid, Spain.
C3 Universidad Rey Juan Carlos
RP Vara, JM (corresponding author), Univ Rey Juan Carlos, Kybele Res Grp, E-28933 Madrid, Spain.
RI Martinez, Esperanza Marcos/JCE-5935-2023; Vara, Juan Manuel/K-6774-2014;
   Martinez, Esperanza Marcos/AAS-8564-2021
OI Vara, Juan Manuel/0000-0002-8637-6580; Marcos,
   Esperanza/0000-0003-2666-9995
FU Spanish Ministry of Science and Innovation [TIN-2011-22617]; University
   Rey Juan Carlos [PRIN13-IYA15/2013/00190/001]
FX This research was carried out in the framework of the MASAI
   (TIN-2011-22617) project, financed by the Spanish Ministry of Science
   and Innovation and the iTrace project (PRIN13-IYA15/2013/00190/001),
   financed by the University Rey Juan Carlos.
CR Bollati VA, 2013, INFORM SOFTWARE TECH, V55, P699, DOI 10.1016/j.infsof.2012.11.004
   [Anonymous], 1995, GRAPHTHEORETIC CONCE
   [Anonymous], P 2 EUR C MOD DRIV A
   [Anonymous], P EUR C MOD DRIV ARC
   [Anonymous], THESIS RJ CARLOS U M
   [Anonymous], 2010, P 6 ECMFA TRAC WORKS
   [Anonymous], 2003, TECHNICAL REPORT
   [Anonymous], P DOCT S MODELS
   [Anonymous], INT WORKSH MOD TRANS
   Aranega V, 2011, COMM COM INF SC, V50, P137
   Atzeni P, 2008, VLDB J, V17, P1347, DOI 10.1007/s00778-008-0105-2
   Bernstein P.A., 2007, SIGMOD 07, P1, DOI DOI 10.1145/1247480.1247482
   Bezivin J., 2004, UPGRADE: The European Journal for the Informatics Professional, V5
   Bézivin J, 2006, LECT NOTES COMPUT SC, V4199, P440
   Bondé L, 2006, APPLICATIONS OF SPECIFICATION AND DESIGN LANGUAGES FOR SOCS, P263, DOI 10.1007/978-1-4020-4998-9_15
   Boronat A, 2005, LECT NOTES COMPUT SC, V3748, P316
   Cicchetti A., 2010, P 3 INT C SOFTW LANG
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Czarnecki K., 2009, LECT NOTES COMPUT SC
   Davies J, 2014, SCI COMPUT PROGRAM, V89, P88, DOI 10.1016/j.scico.2013.02.002
   Del Fabro MD, 2009, SOFTW SYST MODEL, V8, P305, DOI 10.1007/s10270-008-0094-z
   Eramo R, 2012, SOFTW SYST MODEL, V11, P29, DOI 10.1007/s10270-010-0170-z
   Falleri JR, 2008, LECT NOTES COMPUT SC, V5301, P326, DOI 10.1007/978-3-540-87875-9_24
   Garces K., 2012, SOFTW SYST MODEL, P1
   Grammel Birgit, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P609, DOI 10.1007/978-3-642-33666-9_39
   Gronback R. C., 2009, ECLIPSE MODELING PRO
   Guerra Esther, 2013, Software and Systems Modeling, V12, P555, DOI 10.1007/s10270-011-0211-2
   Guerra E, 2010, LECT NOTES COMPUT SC, V6394, P376
   Iovino L, 2012, J OBJECT TECHNOL, V11, DOI 10.5381/jot.2012.11.3.a3
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Jouault F, 2007, SCI COMPUT PROGRAM, V68, P114, DOI 10.1016/j.scico.2007.05.005
   Kappel Gerti, 2012, Conceptual Modelling and Its Theoretical Foundations. Essays Dedicated to Bernhard Thalheim on the Occasion of his 60th Birthday, P197, DOI 10.1007/978-3-642-28279-9_15
   Kolovos D., 2006, P ECL SUMM EUR ECL M
   Kolovos DS, 2008, LECT NOTES COMPUT SC, V5063, P46, DOI 10.1007/978-3-540-69927-9_4
   Kurtev I, 2008, LECT NOTES COMPUT SC, V5088, P377
   Mäder P, 2009, LECT NOTES COMPUT SC, V5562, P174, DOI 10.1007/978-3-642-02674-4_13
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Oldevik J., 2011, MOFSCRIPT USER GUIDE
   OMG, 2011, MET FAC MOF 2 0 QUER
   Pérez-Castillo R, 2011, INFORM SOFTWARE TECH, V53, P1023, DOI 10.1016/j.infsof.2011.05.006
   Sánchez Cuadrado J, 2006, LECT NOTES COMPUT SC, V4066, P158
   Santiago I, 2013, LECT NOTES COMPUT SC, V8217, P429, DOI 10.1007/978-3-642-41924-9_35
   Santiago I, 2012, INFORM SOFTWARE TECH, V54, P1340, DOI 10.1016/j.infsof.2012.07.008
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Selic B., 2012, SOFTWARE SYSTEMS MOD, P1
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Steinberg D, 2009, EMF ECLIPSE MODELING, V2nd
   Stevens P, 2008, LECT NOTES COMPUT SC, V5235, P408, DOI 10.1007/978-3-540-88643-3_10
   Tisi M, 2009, LECT NOTES COMPUT SC, V5562, P18, DOI 10.1007/978-3-642-02674-4_3
   van Amstel M.F., 2011, Proceedings of the Third International Workshop on Model Transformation with ATL (MtATL 2011), P20
   van Amstel MF, 2009, LECT NOTES COMPUT SC, V5563, P239, DOI 10.1007/978-3-642-02408-5_17
   Vara JM, 2012, J SYST SOFTWARE, V85, P2368, DOI 10.1016/j.jss.2012.04.080
   Vignaga A., 2007, MODELS DOCT S CIT
   Völter M, 2011, IEEE SOFTWARE, V28, P20, DOI 10.1109/MS.2011.139
   von Knethen A, 2003, PROC IEEE INT CONF S, P246, DOI 10.1109/ICSM.2003.1235427
   Willink Edward, 2013, Theory and Practice of Model Transformations. 6th International Conference, ICMT 2013. Proceedings: LNCS 7909, P58, DOI 10.1007/978-3-642-38883-5_8
   Xiong YF, 2009, LECT NOTES COMPUT SC, V5563, P213, DOI 10.1007/978-3-642-02408-5_15
NR 58
TC 7
Z9 7
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 3
EP 27
DI 10.1016/j.scico.2014.09.003
PN 1
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LA
UT WOS:000347740500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Shahbaz, M
   McMinn, P
   Stevenson, M
AF Shahbaz, Muzammil
   McMinn, Phil
   Stevenson, Mark
TI Automatic generation of valid and invalid test data for string
   validation routines using web searches and regular expressions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Test data generation; Web searches; Regular expressions
AB Classic approaches to automatic input data generation are usually driven by the goal of obtaining program coverage and the need to solve or find solutions to path constraints to achieve this. As inputs are generated with respect to the structure of the code, they can be ineffective, difficult for humans to read, and unsuitable for testing missing implementation. Furthermore, these approaches have known limitations when handling constraints that involve operations with string data types.
   This paper presents a novel approach for generating string test data for string validation routines, by harnessing the Internet. The technique uses program identifiers to construct web search queries for regular expressions that validate the format of a string type (such as an email address). It then performs further web searches for strings that match the regular expressions, producing examples of test cases that are both valid and realistic. Following this, our technique mutates the regular expressions to drive the search for invalid strings, and the production of test inputs that should be rejected by the validation routine.
   The paper presents the results of an empirical study evaluating our approach. The study was conducted on 24 string input validation routines collected from 10 open source projects. While dynamic symbolic execution and search-based testing approaches were only able to generate a very low number of values successfully, our approach generated values with an accuracy of 34% on average for the case of valid strings, and 99% on average for the case of invalid strings. Furthermore, whereas dynamic symbolic execution and search-based testing approaches were only capable of detecting faults in 8 routines, our approach detected faults in 17 out of the 19 validation routines known to contain implementation errors. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Shahbaz, Muzammil; McMinn, Phil; Stevenson, Mark] Univ Sheffield, Sheffield S10 2TN, S Yorkshire, England.
C3 University of Sheffield
RP Shahbaz, M (corresponding author), Univ Sheffield, Sheffield S10 2TN, S Yorkshire, England.
EM muzammil.shahbaz@gmail.com; p.mcminn@sheffield.ac.uk;
   m.stevenson@dcs.shef.ac.uk
RI stevenson, mark/AAE-9706-2019
OI stevenson, mark/0000-0003-3166-5876; Stevenson,
   Mark/0000-0002-9483-6006; Shahbaz, Muzammil/0000-0002-2183-662X
FU EPSRC project RE-COST (REducing the Cost of Oracles for Software
   Testing) [EP/I010386/1]; EPSRC [EP/I010386/1] Funding Source: UKRI
FX This work was funded by the EPSRC project RE-COST (REducing the Cost of
   Oracles for Software Testing, grant no. EP/I010386/1).
CR Afshan S, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P352, DOI 10.1109/ICST.2013.11
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], 2012, ACM QUEUE, DOI DOI 10.1145/2090147.2094081
   [Anonymous], 1990, Software testing techniques {
   [Anonymous], 2001, CAB OFF UK DAT STAND
   Atkinson Kevin., 2015, SPELL CHECKING ORIEN
   Bozkurt M., 2011, Proceedings of the 2011 IEEE 6th International Symposium on Service Oriented System Engineering (SOSE 2011), P13, DOI 10.1109/SOSE.2011.6139088
   Butler S, 2011, LECT NOTES COMPUT SC, V6813, P130, DOI 10.1007/978-3-642-22655-7_7
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   Elbaum S, 2003, PROC INT CONF SOFTW, P49, DOI 10.1109/ICSE.2003.1201187
   Ghosh I, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P992, DOI 10.1109/ICSE.2013.6606649
   Glass RL, 2001, IEEE SOFTWARE, V18, P112, DOI 10.1109/MS.2001.922739
   Goldberg David E, 1989, GENETIC ALGORITHMS S
   Harman M, 2010, IEEE T SOFTWARE ENG, V36, P226, DOI 10.1109/TSE.2009.71
   Hayes JH, 2006, EMPIR SOFTW ENG, V11, P493, DOI 10.1007/s10664-006-9025-1
   Hooimeijer P, 2012, AUTOMAT SOFTW ENG, V19, P531, DOI 10.1007/s10515-012-0111-x
   Jurafsky D., 2021, SPEECH LANGUAGE PROC
   Jussien Narendra., 2008, Open-Source Software for Integer and Contraint Programming, OSSICP'08, P1
   Kiezun A, 2009, ISSTA 2009: INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P105
   LaLiberte D., 1995, PATH URN SPECIFICATI
   Li N, 2009, IEEE INT CONF AUTOM, P515, DOI 10.1109/ASE.2009.67
   Majumdar Rupak, 2007, 22 IEEE ACM INT C AU, P134
   MATHUR AP, 2008, FDN SOFTWARE TESTING
   McMinn P., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P141, DOI 10.1109/ICST.2012.94
   Pasareanu Corina S., 2009, International Journal on Software Tools for Technology Transfer, V11, P339, DOI 10.1007/s10009-009-0118-1
   Pasareanu Corina S., 2008, P 2008 INT S SOFTW T, P15, DOI [DOI 10.1145/1390630.1390635, DOI 10.1145/1390630]
   Shahbaz M, 2012, INT CONF QUAL SOFTW, P79, DOI 10.1109/QSIC.2012.15
   Shen Libin., 2007, P 45 ANN M ASS COMPU, V45, P760
   Tonella P., 2004, Software Engineering Notes, V29, P119, DOI 10.1145/1013886.1007528
   Toutanova K, 2003, HLT-NAACL 2003: HUMAN LANGUAGE TECHNOLOGY CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE MAIN CONFERENCE, P252, DOI 10.3115/1073445.1073478
   Tracey N, 2000, SOFTWARE PRACT EXPER, V30, P61, DOI 10.1002/(SICI)1097-024X(200001)30:1<61::AID-SPE292>3.0.CO;2-9
NR 31
TC 14
Z9 17
U1 1
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 405
EP 425
DI 10.1016/j.scico.2014.04.008
PN 4
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AW8YO
UT WOS:000346545400003
OA Bronze
DA 2024-07-18
ER

PT J
AU Kuhn, T
   Bergel, A
AF Kuhn, Tobias
   Bergel, Alexandre
TI Verifiable source code documentation in controlled natural language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Controlled natural language; Metamodelling; Moose; Pharo
ID SOFTWARE ARCHITECTURES; CONTROLLED ENGLISH; DESIGN
AB Writing documentation about software internals is rarely considered a rewarding activity. It is highly time-consuming and the resulting documentation is fragile when the software is continuously evolving in a multi-developer setting. Unfortunately, traditional programming environments poorly support the writing and maintenance of documentation. Consequences are severe as the lack of documentation on software structure negatively impacts the overall quality of the software product. We show that using a controlled natural language with a reasoner and a query engine is a viable technique for verifying the consistency and accuracy of documentation and source code. Using ACE, a state-of-the-art controlled natural language, we present positive results on the comprehensibility and the general feasibility of creating and verifying documentation. As a case study, we used automatic documentation verification to identify and fix severe flaws in the architecture of a non-trivial piece of software. Moreover, a user experiment shows that our language is faster and easier to learn and understand than other formal languages for software documentation. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Kuhn, Tobias] Swiss Fed Inst Technol, Chair Sociol Particular Modeling & Simulat, Zurich, Switzerland.
   [Bergel, Alexandre] Univ Chile, Dept Comp Sci DCC, Pleiad Lab, Santiago, Chile.
C3 Swiss Federal Institutes of Technology Domain; ETH Zurich; Universidad
   de Chile
RP Bergel, A (corresponding author), Univ Chile, Dept Comp Sci DCC, Pleiad Lab, Santiago, Chile.
EM kuhntobias@gmail.com
RI Bergel, Alexandre/I-1397-2013; Kuhn, Tobias/B-6810-2013
OI Bergel, Alexandre/0000-0001-8087-1903; Kuhn, Tobias/0000-0002-1267-0234
FU Program U-INICIA [11/06 VID, U-INICIA 11/06]; FONDECYT [1120094];
   University of Chile
FX This work has been partially funded by Program U-INICIA 11/06 VID 2011,
   grant U-INICIA 11/06, University of Chile, and FONDECYT project 1120094.
CR Aldrich J, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P187, DOI 10.1109/ICSE.2002.1007967
   [Anonymous], 2010, P IEEE ACM INT C AUT
   [Anonymous], 1998, 1016 IEEE
   [Anonymous], 1992, Literate Programming
   Bacchelli A, 2010, LECT NOTES COMPUT SC, V6013, P59
   Badger M., 2007, ENTERPRISE OPEN SOUR, V4
   Bergel A, 2005, COMPUT LANG SYST STR, V31, P107, DOI 10.1016/j.cl.2004.11.002
   Bock C., 2000, OWL 2 WEB ONTOLOGY L
   Buse R.P., 2008, Proceedings of the 2008 International Symposium on Software Testing and Analysis, ISSTA '08, P273
   Clements P, 2003, PROC INT CONF SOFTW, P740, DOI 10.1109/ICSE.2003.1201264
   de Alwis B, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P21, DOI 10.1145/1368088.1368092
   De Coi JL, 2009, LECT NOTES COMPUT SC, V5500, P276, DOI 10.1007/978-3-642-04581-3_6
   de Souza S.C.B., 2005, P 23 ANN INT C DES C, P68, DOI [10.1145/1085313, 10.1145/1085313.1085331]
   Demeyer S., 2001, FAMIX 2 1 FAMOOS INF
   Fabry J, 2004, COMPUT LANG SYST STR, V30, P21, DOI 10.1016/j.cl.2003.09.002
   Fuchs NE, 2008, LECT NOTES COMPUT SC, V5224, P104
   Ghezzi G., 2010, Proc. 32nd ACM/IEEE Int'l Conf. Software Eng. - Vol. 1, V1, P165, DOI DOI 10.1145/1806799.1806827
   Jakobac V, 2005, LECT NOTES COMPUT SC, V3442, P253, DOI 10.1007/978-3-540-31984-9_19
   Kaljurand Kaarel, 2013, Semantic Web: Semantics and Big Data. Proceedings of 10th International Conference (ESWC 2013): LNCS 7882, P427
   Kaplanski P., 2010, CEUR WORKSHOP P, V622
   Kimmig M., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P376, DOI 10.1109/ASE.2011.6100076
   Kramer C, 1996, PROCEEDINGS OF THE THIRD WORKING CONFERENCE ON REVERSE ENGINEERING, P208, DOI 10.1109/WCRE.1996.558905
   Krötzsch M, 2007, J WEB SEMANT, V5, P251, DOI 10.1016/j.websem.2007.09.001
   Kuhn T., 2009, CEUR WORKSHOP P, V543
   Kuhn T., 2009, CEUR WORKSHOP P, V464
   Kuhn T, 2012, CORPORA, V7, P187, DOI 10.3366/cor.2012.0026
   Kuhn T, 2013, SEMANT WEB, V4, P101, DOI 10.3233/SW-2012-0063
   Kuhn T, 2014, COMPUT LINGUIST, V40, P121, DOI 10.1162/COLI_a_00168
   Kuhn T, 2010, LECT NOTES ARTIF INT, V5972, P1, DOI 10.1007/978-3-642-14418-9_1
   Lienhard A, 2007, 4TH IEEE INTERNATIONAL WORKSHOP ON VISUALIZING SOFTWARE FOR UNDERSTANDING AND ANALYSIS, PROCEEDINGS, P67, DOI 10.1109/VISSOF.2007.4290702
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Mens K, 2006, COMPUT LANG SYST STR, V32, P140, DOI 10.1016/j.cl.2005.09.002
   Mens K, 1999, TOOLS, V29, P33, DOI 10.1109/TOOLS.1999.778997
   Meyer M., 2006, Proceedings of the 2006 ACM symposium on Software visualization, P135, DOI DOI 10.1145/1148493.1148513
   Murphy G. C., 1995, SIGSOFT Software Engineering Notes, V20, P18, DOI 10.1145/222132.222136
   Pierce R., 2002, P 20 ANN INT C COMP, P157
   Rigby PC, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P832, DOI 10.1109/ICSE.2013.6606629
   Royce W.W., 1970, P IEEE WESCON IEEE, P1
   Sangal N, 2005, ACM SIGPLAN NOTICES, V40, P167, DOI 10.1145/1103845.1094824
   Schaffert S., 2009, CEUR WORKSHOP P, V464
   Shi L, 2011, LECT NOTES COMPUT SC, V6603, P416, DOI 10.1007/978-3-642-19811-3_29
   Sillito J., 2006, Proc. of the ACM SIGSOFT Int'l Symp. on Foundations of Software Engineering, P23, DOI DOI 10.1145/1181775.1181779
   Sridhara G, 2011, CONF PROC INT SYMP C, P71, DOI 10.1109/ICPC.2011.28
   Stettina Christoph Johann, 2011, P 29 ACM INT C DES C, P159, DOI DOI 10.1145/2038476.2038509
   Storey MAD, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P12, DOI 10.1109/WCRE.1997.624572
   Tsarkov D, 2006, LECT NOTES ARTIF INT, V4130, P292
   Wuyts R, 1998, TOOLS 26 - TECHNOLOGY OF OBJECT-ORIENTED LANGUAGES - PROCEEDINGS, P112, DOI 10.1109/TOOLS.1998.711007
   WUYTS R, 2001, ECOOP 2001 INT WORKS
   Wuyts R., 2001, Ph.D. thesis
   Wyner A, 2010, LECT NOTES ARTIF INT, V5972, P281, DOI 10.1007/978-3-642-14418-9_17
   Zhong H, 2013, ACM SIGPLAN NOTICES, V48, P803, DOI [10.1145/2509136.2509523, 10.1145/2544173.2509523]
NR 51
TC 3
Z9 3
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 121
EP 140
DI 10.1016/j.scico.2014.01.002
PN 1
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800009
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Tofan, B
   Travkin, O
   Schellhorn, G
   Wehrheim, H
AF Tofan, Bogdan
   Travkin, Oleg
   Schellhorn, Gerhard
   Wehrheim, Heike
TI Two approaches for proving linearizability of multiset
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Linearizability; Concurrent data types; Interactive verification
ID VERIFICATION; PROOFS
AB Linearizability is a key correctness criterion for concurrent software. In our previous work, we have introduced local proof obligations, which, by showing a refinement between an abstract specification and its implementation, imply linearizability of the implementation. The refinement is shown via a process local simulation. We have incorporated the approach of verifying linearizability based on refinement in two rather different proof systems: a predicate logic based approach performing a simulation for two processes and second, an approach based on temporal logic that shows a refinement for an individual process using rely-guarantee reasoning and symbolic execution. To compare both proof techniques, we use an implementation of a multiset as running example. Moreover, we show how ownership annotations have helped us to reduce the proof effort. All proofs are mechanized in the theorem prover KIV. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Tofan, Bogdan; Schellhorn, Gerhard] Univ Augsburg, Inst Informat, D-86135 Augsburg, Germany.
   [Travkin, Oleg; Wehrheim, Heike] Univ Paderborn, Inst Informat, D-33098 Paderborn, Germany.
C3 University of Augsburg; University of Paderborn
RP Tofan, B (corresponding author), Univ Augsburg, Inst Informat, D-86135 Augsburg, Germany.
EM tofan@informatik.uni-augsburg.de; oleg82@upb.de;
   schellhorn@informatik.uni-augsburg.de; wehrheim@upb.de
CR Amit D, 2007, LECT NOTES COMPUT SC, V4590, P477
   [Anonymous], 2001, Cambridge Tracts in Theoretical Computer Science
   Bäumler S, 2011, FORM ASP COMPUT, V23, P91, DOI 10.1007/s00165-009-0130-y
   Bjorner NS, 2001, THEOR COMPUT SCI, V253, P27, DOI 10.1016/S0304-3975(00)00088-8
   Colvin R, 2005, ELECTRON NOTES THEOR, V137, P93, DOI 10.1016/j.entcs.2005.04.026
   Cousineau D., 2012, LECT NOTES COMPUTER, V7436, P147, DOI 10.1007/978-3-642-32759-914
   Derrick John, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P323, DOI 10.1007/978-3-642-21437-0_25
   Derrick J, 2008, LECT NOTES COMPUT SC, V5051, P78, DOI 10.1007/978-3-540-68863-1_6
   Derrick J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1889997.1890001
   Doherty S, 2004, LECT NOTES COMPUT SC, V3235, P97
   Elmas T, 2010, LECT NOTES COMPUT SC, V6015, P296, DOI 10.1007/978-3-642-12002-2_25
   Elmas T, 2009, ACM SIGPLAN NOTICES, V44, P2, DOI 10.1145/1594834.1480885
   HAREL D, 2000, FOUNDAT COMPUT, P3
   Henzinger Thomas A., 2013, CONCUR 2013 - Concurrency Theory. 24th International Conference, CONCUR 2013. Proceedings: LNCS 8052, P242, DOI 10.1007/978-3-642-40184-8_18
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Liang HJ, 2013, ACM SIGPLAN NOTICES, V48, P459, DOI 10.1145/2499370.2462189
   Moszkowski BC, 2000, LECT NOTES COMPUT SC, V1853, P223
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Qiwen Xu, 1997, Formal Aspects of Computing, V9, P149, DOI 10.1007/BF01211617
   Reif W, 1998, APPL LOG SER, V9, P13
   Schellhorn Gerhard, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P243, DOI 10.1007/978-3-642-31424-7_21
   Schellhorn G., 2011, 18 INT S TEMPORAL RE, P99
   Schellhorn G, 2014, ANN MATH ARTIF INTEL, V71, P131, DOI 10.1007/s10472-013-9389-z
   Tofan Bogdan, 2011, Theoretical Aspects of Computing - ICTAC 2011. Proceedings 8th International Colloquium, P239, DOI 10.1007/978-3-642-23283-1_16
   Tofan B., 2013, P INT WORKSH AUT VER, V66
   Tofan B, 2010, LECT NOTES COMPUT SC, V6120, P377, DOI 10.1007/978-3-642-13321-3_21
   Travkin O., 2012, P INT WORKSH AUT VER, V53
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V6174, P450, DOI 10.1007/978-3-642-14295-6_40
   Vafeiadis V, 2010, LECT NOTES COMPUT SC, V5944, P345, DOI 10.1007/978-3-642-11319-2_25
NR 31
TC 0
Z9 0
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 297
EP 314
DI 10.1016/j.scico.2014.04.001
PN 3
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KA
UT WOS:000345181100003
DA 2024-07-18
ER

PT J
AU Hamdaqa, M
   Tahvildari, L
   LaChapelle, N
   Campbell, B
AF Hamdaqa, Mohammad
   Tahvildari, Ladan
   LaChapelle, Neil
   Campbell, Brian
TI Cultural scene detection using reverse Louvain optimization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Scene ontology; Scene graph; Social analytics; Community detection;
   Cultural web
ID NETWORKS
AB This paper proposes a novel approach for discovering cultural scenes in social network data. "Cultural scenes" are aggregations of people with overlapping interests, whose loosely interacting activities from virtuous cycles amplify cultural-output (e.g., New York art scene, Silicon Valley startup scene, Seattle indie music scene). They are defined by time, place, topics, people and values. The positive socioeconomic impact of scenes draws public and private sector support to them. They could also become the focus for new digital services that fit their dynamics; but their loose, multidimensional nature makes it hard to determine their boundaries and community structure using standard social network analysis procedures. In this paper, we: (1) propose an ontology for representing cultural scenes, (2) map a dataset to the ontology, and (3) compare two methods for detecting scenes in the dataset. The first method takes a hard clustering approach. We derive three weighted, undirected graphs from three similarity analyses; linking people by topics, topics by people, and places by people. We partition each graph using Louvain optimization, overlap them, and let their inner joint represent core scene elements. The second method introduces a novel soft clustering approach. We create a "scene graph": a single, unweighted, directed graph including all three node classes (people, places, topics). We devise a new way to apply Louvain optimization to such a graph, and use filtering and fan-in/out analysis to identify the core. Both methods detect core clusters with precision, but Method One misses some peripherals. Method Two evinces better recall, advancing our knowledge about how to represent and analyze scenes. We use Louvain optimization recursively to successfully find small clusters. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Hamdaqa, Mohammad; Tahvildari, Ladan] Univ Waterloo, Software Technol Appl Res STAR Grp, Waterloo, ON N2L 3G1, Canada.
   [LaChapelle, Neil; Campbell, Brian] Sceneverse Inc, Kitchener, ON, Canada.
C3 University of Waterloo
RP Hamdaqa, M (corresponding author), Univ Waterloo, Software Technol Appl Res STAR Grp, Waterloo, ON N2L 3G1, Canada.
EM mhamdaqa@uwaterloo.ca; ladan.tahvildari@uwaterloo.ca;
   neil@sceneverse.com; brian@sceneverse.com
RI ; Hamdaqa, Mohammad/AAE-5007-2020
OI LaChapelle, Neil/0000-0002-9224-9836; Hamdaqa,
   Mohammad/0000-0003-4927-2755
CR Aldecoa R, 2011, PLOS ONE, V6, DOI 10.1371/journal.pone.0024195
   [Anonymous], THEORY SCENES UNPUB
   [Anonymous], 2007, American Association for Artificial Intelligence
   [Anonymous], 2010, Synthesis Lectures Data Mining Knowl. Discovery, DOI DOI 10.2200/S00298ED1V01Y201009DMK003
   Arenas A, 2007, NEW J PHYS, V9, DOI 10.1088/1367-2630/9/6/176
   Barber MJ, 2007, PHYS REV E, V76, DOI 10.1103/PhysRevE.76.066102
   Bastian M., 2009, P INT AAAI C WEBL SO, V3, P361
   Beyers W.B., 2004, TECH REP
   Blondel VD, 2008, J STAT MECH-THEORY E, DOI 10.1088/1742-5468/2008/10/P10008
   Bullmore ET, 2011, ANNU REV CLIN PSYCHO, V7, P113, DOI 10.1146/annurev-clinpsy-040510-143934
   Císar O, 2012, POETICS, V40, P1, DOI 10.1016/j.poetic.2011.12.002
   Clauset A, 2004, PHYS REV E, V70, DOI 10.1103/PhysRevE.70.066111
   Cova Bernard., 1997, EUR J MARKETING, V31, P297, DOI [https://doi.org/10.1108/03090569710162380, DOI 10.1108/03090569710162380]
   Dellschaft Klaas., 2008, Proceedings of the nineteenth ACM conference on Hypertext and hypermedia, HT'08, P71
   DU N., 2007, P 9 WEBKDD 1 SNA KDD, P16, DOI [DOI 10.1145/1348549.1348552, 10.1145/1348549.1348552]
   Evans T. S., 2010, J STAT MECH-THEORY E, V2010, P1
   Fatemi M., 2012, P 1 WORKSHOP MEASURE, P1
   Ferrara Emilio, 2012, International Journal of Social Network Mining, V1, P67, DOI 10.1504/IJSNM.2012.045106
   Fortunato S, 2007, P NATL ACAD SCI USA, V104, P36, DOI 10.1073/pnas.0605965104
   Fortunato S, 2010, PHYS REP, V486, P75, DOI 10.1016/j.physrep.2009.11.002
   Freeman L., 2004, DEV SOCIAL NETWORK A
   Friedman J, 2001, SPRINGER SER STAT, V1
   García-Crespo A, 2010, J INF TECHNOL-UK, V25, P178, DOI 10.1057/jit.2010.1
   Girvan M, 2002, P NATL ACAD SCI USA, V99, P7821, DOI 10.1073/pnas.122653799
   Haarslev V., 2001, Automated Reasoning. First International Joint Conference, IJCAR 2001. Proceedings (Lecture Notes in Artificial Intelligence Vol.2083), P701
   Hebdige D., 2007, Critical Quarterly, V37, P120
   HERRING SUSANC., 2007, Language@Internet, V4
   Hume Christopher, 2001, TORONTO STAR, pB01
   Jang Hyukjae, 2011, INT C HUM COMP INT M, P513
   Knublauch H, 2004, LECT NOTES COMPUT SC, V3298, P229
   Kottak ConradP., 2011, Cultural Anthropology: Appreciating Cultural Diversity
   Kozinets RV, 2008, J CONSUM RES, V34, P865, DOI 10.1086/523289
   Kozinets RV, 2010, CONSUMP MARK CULT, V13, P225, DOI 10.1080/10253861003786918
   Kozinets RV, 2001, J CONSUM RES, V28, P67, DOI 10.1086/321948
   Liu XM, 2005, INFORM PROCESS MANAG, V41, P1462, DOI 10.1016/j.ipm.2005.03.012
   LU SY, 1978, IEEE T SYST MAN CYB, V8, P381, DOI 10.1109/TSMC.1978.4309979
   Ma Hong., 2012, Technical Services Quarterly, V29, P242
   Maffesoli M., 1996, THEORY CULT SOC, V41
   Mislove A, 2007, IMC'07: PROCEEDINGS OF THE 2007 ACM SIGCOMM INTERNET MEASUREMENT CONFERENCE, P29
   Monge P.R., 2003, Theories of Communication Networks
   Newman MEJ, 2006, PHYS REV E, V74, DOI 10.1103/PhysRevE.74.036104
   Nordicity, 2013, NGL130215 CAN IND MU
   Papadopoulos S, 2012, DATA MIN KNOWL DISC, V24, P515, DOI 10.1007/s10618-011-0224-z
   Papadopoulos S, 2010, LECT NOTES COMPUT SC, V6263, P65, DOI 10.1007/978-3-642-15105-7_6
   Pham MC, 2011, J UNIVERS COMPUT SCI, V17, P583
   Philips L., 1990, COMPUT LANG, V7, P9
   Pons P, 2005, LECT NOTES COMPUT SC, V3733, P284
   Porter M. A., 2009, NOT AM MATH SOC, V56, P1082
   Quilitz B, 2008, LECT NOTES COMPUT SC, V5021, P524
   Raghavan UN, 2007, PHYS REV E, V76, DOI 10.1103/PhysRevE.76.036106
   Regelman G., 2006, COLL WEB TAGG WORKSH, P15
   Rosvall M, 2008, P NATL ACAD SCI USA, V105, P1118, DOI 10.1073/pnas.0706851105
   Rothfield L., 2006, TECH REP
   Samwald M., 2008, EXPERIENCES CONVERSI
   Schaeffer SE, 2007, COMPUT SCI REV, V1, P27, DOI 10.1016/j.cosrev.2007.05.001
   Schein A. I., 2002, Proceedings of SIGIR 2002. Twenty-Fifth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P253, DOI 10.1145/564376.564421
   Shank Barry., 2011, Dissonant identities: the Rock'n'Roll Scene in Austin, Texas
   Shi JB, 2000, IEEE T PATTERN ANAL, V22, P888, DOI 10.1109/34.868688
   Silver D., 2012, J URBAN AFF, V2012
   Silver D, 2012, CAMB J REG ECON SOC, V5, P97, DOI 10.1093/cjres/rsr028
   Silver D, 2010, SOC FORCES, V88, P2293, DOI 10.1353/sof.2010.0041
   Simpson E., 2008, TECHNICAL REPORT, P222
   SIORPAES K., 2007, Bridging the Gap between Semantic Web and Web 2.0 (SemNet 2007), P127
   Sirin E, 2007, J WEB SEMANT, V5, P51, DOI 10.1016/j.websem.2007.03.004
   Straw W., 2002, PUBLIC, V22/23, P245
   Traud A., 2009, AM PHYS SOC, V88, P1
   Traud AL, 2012, PHYSICA A, V391, P4165, DOI 10.1016/j.physa.2011.12.021
   Tsarkov D, 2006, LECT NOTES ARTIF INT, V4130, P292
   Tsatsou D., 2011, ONLINE MULTIMEDIA AD, P233
   Tunkelang Daniel, 2009, Synthesis Lectures on Information Concepts, Retrieval, and Services, V1, P1, DOI DOI 10.2200/S00190ED1V01Y200904ICR005
   Villegas N., 2013, PERSONAL WEB LECT NO, V7855, P151
NR 71
TC 11
Z9 14
U1 3
U2 28
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
SI SI
BP 44
EP 72
DI 10.1016/j.scico.2014.01.006
PN 1
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA AS9RF
UT WOS:000344578600004
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Déharbe, D
   Fontaine, P
   Guyot, Y
   Voisin, L
AF Deharbe, David
   Fontaine, Pascal
   Guyot, Yoann
   Voisin, Laurent
TI Integrating SMT solvers in Rodin
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; Event-B; SMT solving
AB Formal development in Event-B generally requires the validation of a large number of proof obligations. Some tools automatically discharge a significant part of them, thus augmenting the efficiency of the formal development. We here investigate the use of SMT (Satisfiability Modulo Theories) solvers in addition to the traditional tools, and detail the techniques used for the cooperation between the Rodin platform and SMT solvers.
   Our contribution is the definition of a translation of Event-B proof obligations to the language of SMT solvers, its implementation in a Rodin plug-in, and an experimental evaluation on a large sample of industrial and academic projects. On this domain, adding SMT solvers to Atelier B provers reduces significantly the number of sequents that need to be proved interactively. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Deharbe, David] Univ Fed Rio Grande do Norte, BR-59072970 Natal, RN, Brazil.
   [Fontaine, Pascal] Univ Lorraine, Inria, Loria, Nancy, France.
   [Guyot, Yoann] Cetic, Charleroi, Belgium.
   [Voisin, Laurent] Systerel, Rene Descartes, France.
C3 Universidade Federal do Rio Grande do Norte; Inria; Universite de
   Lorraine
RP Déharbe, D (corresponding author), Univ Fed Rio Grande do Norte, BR-59072970 Natal, RN, Brazil.
EM david@dimap.ufrn.br; Pascal.Fontaine@inria.fr; yoann.guyot@cetic.be;
   laurent.voisin@systerel.fr
RI Deharbe, David/C-8531-2009
OI Deharbe, David/0000-0001-7589-3323; Voisin, Laurent/0000-0002-2426-0101
FU STIC AmSud MISMT; CAPES [BEX 2347/13-0]; CNPq (National Institute of
   Science and Technology for Software Engineering-INES) [308008/2012-0,
   573964/2008-4]; EU [FP7-ICT-287563];  [ANR-13-IS02-0001]
FX This work is partly supported by the project ANR-13-IS02-0001, the STIC
   AmSud MISMT, CAPES grant BEX 2347/13-0, CNPq grants 308008/2012-0 and
   573964/2008-4 (National Institute of Science and Technology for Software
   Engineering-INES, www.ines.org.br), and EU funded project ADVANCE
   (FP7-ICT-287563).
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 2010, SMT LIB STANDARD VER
   Armand Michael, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P135
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   BOBOT F., The Alt-Ergo Automated Theorem Prover
   Bouton T, 2009, LECT NOTES ARTIF INT, V5663, P151, DOI 10.1007/978-3-642-02959-2_12
   Coleman J., 2005, 5 EUR DEP COMP C EDC, P23
   Couchot J.-F., 2003, J BRAZILIAN COMPUTER, V9, P17
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deharbe David, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P194, DOI 10.1007/978-3-642-30885-7_14
   Déharbe D, 2013, SCI COMPUT PROGRAM, V78, P310, DOI 10.1016/j.scico.2011.03.007
   Déharbe D, 2010, LECT NOTES COMPUT SC, V5977, P217, DOI 10.1007/978-3-642-11811-1_17
   Jones C.B., 1991, INT SERIES COMPUTER
   Konrad M., 2011, TECHNICAL REPORT
   Kroning D., 2009, INF P 7 INT WORKSH S, V22
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Merz S, 2003, COMPUT INFORM, V22, P351
   Metayer C., 2009, EVENT B MATH LANGUAG
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Schmalz M., 2011, 698 ETH ZUR
   Schulz S, 2002, AI COMMUN, V15, P111
   Tinelli C, 1996, APPL LOG SER, V3, P103
   Woodcock J., 1996, SPECIFICATION REFINE
NR 26
TC 19
Z9 19
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 130
EP 143
DI 10.1016/j.scico.2014.04.012
PN 2
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500005
DA 2024-07-18
ER

PT J
AU Rocha, C
   Muñoz, C
AF Rocha, Camilo
   Munoz, Cesar
TI Synchronous set relations in rewriting logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Formal Methods (SBMF)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
SP CNPq, Brazilian Sci & Technol Res Council, CAPES, Brazilian Higher Educ Fund Council, FAPESP, Sao Paulo Res Fdn, Google Inc, Univ Sao Paulo, Univ Presbiteriana Mackenzie
DE Synchronous set relations; Synchronous semantics; Rewriting logic;
   Formal simulation and verification; PLEXIL
ID P SYSTEMS; SEMANTICS
AB This paper presents a mathematical foundation and a rewriting logic infrastructure for the execution and property verification of synchronous set relations. The mathematical foundation is given in the language of abstract set relations. The infrastructure, which is written in the Maude system, enables the synchronous execution of a set relation provided by the user. By using the infrastructure, algorithm verification techniques such as reachability analysis and model checking, already available in Maude for traditional asynchronous rewriting, are automatically available to synchronous set rewriting. In this way, set-based synchronous languages and systems such as those built from agents, components, or objects can be naturally specified and simulated, and are also amenable to formal verification in the Maude system. The use of the infrastructure and some of its Maude-based verification capabilities are illustrated with an executable operational semantics of the Plan Execution Interchange Language (PLEXIL), a synchronous language developed by NASA to support autonomous spacecraft operations. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Rocha, Camilo] Escuela Colombiana Ingn, Bogota, DC, Colombia.
   [Munoz, Cesar] NASA, Langley Res Ctr, Hampton, VA 23665 USA.
C3 National Aeronautics & Space Administration (NASA); NASA Langley
   Research Center
RP Rocha, C (corresponding author), Escuela Colombiana Ingn, Bogota, DC, Colombia.
EM camilo.rocha@escuelaing.edu.co; cesar.a.munoz@nasa.gov
OI Rocha, Camilo/0000-0003-4356-7704
CR AlTurki M, 2008, ELECTRON NOTES THEOR, V200, P25, DOI 10.1016/j.entcs.2008.04.091
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Chira C, 2010, J LOGIC ALGEBR PROGR, V79, P326, DOI 10.1016/j.jlap.2010.03.006
   Clavel M., 2007, LECT NOTES COMPUT SC, V4350
   Clavel M, 2007, THEOR COMPUT SCI, V373, P70, DOI 10.1016/j.tcs.2006.12.009
   Dowek G., 2008, 200811 NAT I AER
   Dowek G, 2010, ELECTRON P THEOR COM, P77, DOI 10.4204/EPTCS.18.6
   Estlin T., 2006, TM2006213483 NASA
   Lucanu D, 2009, ELECTRON NOTES THEOR, V237, P107, DOI 10.1016/j.entcs.2009.03.038
   Martí-Oliet N, 2009, ELECTRON NOTES THEOR, V238, P227, DOI 10.1016/j.entcs.2009.05.022
   Meseguer J., 1997, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J, 2010, LECT NOTES COMPUT SC, V6447, P303, DOI 10.1007/978-3-642-16901-4_21
   Rocha Camilo, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P343, DOI 10.1007/978-3-642-30729-4_24
   Rocha Camilo, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P314, DOI 10.1007/978-3-642-22944-2_22
   Rocha C., 2012, THESIS U ILLINOIS UR
   Rocha C, 2011, THEOR COMPUT SCI, V412, P4853, DOI 10.1016/j.tcs.2011.01.027
   Serbanuta T.F., 2010, THESIS U ILLINOIS UR
   Serbanuta T, 2009, LECT NOTES COMPUT SC, V5391, P374
   Universities Space Research Association, 2006, PLAN EX INT LANG
   Viry P, 2002, THEOR COMPUT SCI, V285, P487, DOI 10.1016/S0304-3975(01)00366-8
NR 20
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
BP 211
EP 228
DI 10.1016/j.scico.2013.07.008
PN B
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK7HA
UT WOS:000338598100007
OA Bronze
DA 2024-07-18
ER

PT J
AU Krebs, R
   Momm, C
   Kounev, S
AF Krebs, Rouven
   Momm, Christof
   Kounev, Samuel
TI Metrics and techniques for quantifying performance isolation in cloud
   environments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Performance; Isolation; Metric; SaaS; Cloud; Multi-tenancy
ID PATTERNS
AB The cloud computing paradigm enables the provision of cost efficient IT-services by leveraging economies of scale and sharing data center resources efficiently among multiple independent applications and customers. However, the sharing of resources leads to possible interference between users and performance problems are one of the major obstacles for potential cloud customers. Consequently, it is one of the primary goals of cloud service providers to have different customers and their hosted applications isolated as much as possible in terms of the performance they observe. To make different offerings, comparable with regards to their performance isolation capabilities, a representative metric is needed to quantify the level of performance isolation in cloud environments. Such a metric should allow to measure externally by running benchmarks from the outside treating the cloud as a black box. In this article, we propose three different types of novel metrics for quantifying the performance isolation of cloud-based systems.
   We consider four new approaches to achieve performance isolation in Software-as-a-Service (SaaS) offerings and evaluate them based on the proposed metrics as part of a simulation-based case study. To demonstrate the effectiveness and practical applicability of the proposed metrics for quantifying the performance isolation in various scenarios, we present a second case study evaluating performance isolation of the hypervisor Xen. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Krebs, Rouven; Momm, Christof] SAP AG, D-69190 Walldorf, Germany.
   [Kounev, Samuel] Karlsruhe Inst Technol, D-76131 Karlsruhe, Germany.
C3 SAP; Helmholtz Association; Karlsruhe Institute of Technology
RP Krebs, R (corresponding author), SAP AG, D-69190 Walldorf, Germany.
EM Rouven.Krebs@sap.com; Christof.Momm@sap.com; Kounev@kit.edu
FU European Union [258862]
FX The research leading to these results has received funding from the
   European Union's Seventh Framework Programme (FP7/2007-2013) under grant
   agreement No. 258862.
CR [Anonymous], P 2 ACM SPEC INT C P
   [Anonymous], 2011, NIST DEFINITION CLOU
   [Anonymous], 2009, DEP ELECT ENG COMPUT
   Bezemer C.-P., 2010, Proceedings of the Joint ERCIM Workshop on Software Evolution (EVOL) and International Workshop on Principles of Software Evolution (IWPSE), P88
   bitcurrent, 2011, BITC CLOUD COMP SURV
   Chang ZW, 2010, 2010 INTERNATIONAL CONFERENCE ON EDUCATION AND SPORTS EDUCATION, VOL 1, P425
   Cooper Brian F., 2010, P 1 ACM S CLOUD COMP, P143, DOI [DOI 10.1145/1807128.1807152, 10.1145/1807128.1807152]
   Emeakaroha Vincent C., 2010, 2010 International Conference on High Performance Computing & Simulation (HPCS 2010), P48, DOI 10.1109/HPCS.2010.5547150
   Fehling Christoph, 2010, 2010 IEEE 3rd International Conference on Cloud Computing (CLOUD 2010), P252, DOI 10.1109/CLOUD.2010.33
   Georges Andy, 2010, PERFORMANCE METRICS
   Guo CJ, 2007, 9TH IEEE INTERNATIONAL CONFERENCE ON E-COMMERCE TECHNOLOGY/4TH IEEE INTERNATIONAL CONFERENCE ON ENTERPRISE COMPUTING, E-COMMERCE AND E-SERVICES, P551, DOI 10.1109/CEC-EEE.2007.4
   Gupta D, 2006, LECT NOTES COMPUT SC, V4290, P342
   Hailue Lin, 2009, Proceedings of the 2009 IEEE 15th International Conference on Parallel and Distributed Systems (ICPADS 2009), P134, DOI 10.1109/ICPADS.2009.22
   Hauck Michael, 2010, KARLSRUHE REPORTS IN, V19
   Herndon Bruce, 2006, VMMARK SCALABLE BENC
   Huber Nikolaus, 2011, Proceedings of the 1st International Conference on Cloud Computing and Services Science. CLOSER 2011, P563
   IBM, 2010, DISP VAP CLOUD COMP
   Koh Y, 2007, INT SYM PERFORM ANAL, P200, DOI 10.1109/ISPASS.2007.363750
   Koziolek H, 2011, 2011 9TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P320, DOI 10.1109/WICSA.2011.50
   Koziolek Heiko, 2010, SOFTWARE ENG 2010, V159, P81
   Krebs Rouven, 2010, THESIS U APPL SCI KA
   Kupperberg Michael, 2011, DEFINING QUANTIFYING
   L'Ecuyer P, 2005, Proceedings of the 2005 Winter Simulation Conference, Vols 1-4, P611, DOI 10.1109/WSC.2005.1574301
   Mietzner R, 2009, IEEE INT ENTERP DIST, P131, DOI 10.1109/EDOC.2009.13
   Momm Christof, 2011, P SOFTW ENG 2011 SE2
   Schroeter Julia, 2012, P 6 INT WORKSH VAR M
   Wang ZH, 2008, INT CONF E BUS ENG, P94, DOI 10.1109/ICEBE.2008.60
   Wei Wang, 2012, 2012 IEEE 5th International Conference on Cloud Computing (CLOUD), P439, DOI 10.1109/CLOUD.2012.81
   Westermann D, 2010, EUROMICRO CONF PROC, P31, DOI 10.1109/SEAA.2010.24
   Westermann Dennis, 2011, LECT NOTES COMPUT SC, V6977
NR 30
TC 31
Z9 32
U1 0
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
BP 116
EP 134
DI 10.1016/j.scico.2013.08.003
PN B
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4IK
UT WOS:000338387900004
OA hybrid
DA 2024-07-18
ER

PT J
AU Dumas, B
   Signer, B
   Lalanne, D
AF Dumas, Bruno
   Signer, Beat
   Lalanne, Denis
TI A graphical editor for the SMUIML multimodal user interaction
   description language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multimodal interaction; UIDL; Graphical editor; SMUIML; HephaisTK
AB We present the results of an investigation on software support for the SMUIML multimodal user interaction description language (UIDL). In particular, we introduce a graphical VIOL editor for the creation of SMUIML scripts. The data management as well as the dialogue modelling in our graphical editor is based on the SMUIML language. Due to the eventcentred nature of SMUIML, the multimodal dialogue modelling is represented by a state machine in the graphical SMUIML dialogue editor. Our editor further offers a real-time graphical debugging tool. Compared to existing multimodal dialogue editing solutions, the SMUIML graphical editor offers synchronised dual editing in graphical and textual forms as well as a number of operators for the temporal combination of modalities. The presented graphical editor represents the third component of a triad of tools for the development of multimodal user interfaces, consisting of an XML-based modelling language, a framework for the authoring of multimodal interfaces and a graphical editor. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Dumas, Bruno; Signer, Beat] Vrije Univ Brussel, Dept Comp Sci, Web & Informat Syst Engn Lab, B-1050 Brussels, Belgium.
   [Lalanne, Denis] Univ Fribourg, Dept Comp Sci, DIVA Res Grp, CH-1700 Fribourg, Switzerland.
C3 Vrije Universiteit Brussel; University of Fribourg
RP Dumas, B (corresponding author), Vrije Univ Brussel, Dept Comp Sci, Web & Informat Syst Engn Lab, Pleinlaan 2, B-1050 Brussels, Belgium.
EM bruno.dumas@vub.ac.be; bsigner@vub.ac.be; denis.lalanne@unifr.ch
RI Signer, Beat/A-8079-2008
OI Signer, Beat/0000-0001-9916-0837; Lalanne, Denis/0000-0001-7834-0417
FU Hasler Foundation in the context of the MeModules project; Swiss
   National Center of Competence in Research on Interactive Multimodal
   Information Management via the NCCR IM2 project; MobiCraNT, project
   forming part of the Strategic Platforms programme; Brussels Institute
   for Research and Innovation (Innoviris)
FX The authors would like to thank Said Mechkour for his work on the
   graphical SMUIML editor. The work on HephaisTK and SMUIML has been
   funded by the Hasler Foundation in the context of the MeModules project
   and by the Swiss National Center of Competence in Research on
   Interactive Multimodal Information Management via the NCCR IM2 project.
   Bruno Dumas is supported by MobiCraNT, a project forming part of the
   Strategic Platforms programme by the Brussels Institute for Research and
   Innovation (Innoviris).
CR [Anonymous], THESIS U FRIBOURG
   Araki M., 2006, COLING* ACL, P109
   Avouac PA, 2011, P INT C MULT INT ICM, P369
   Bellifemine F., 1999, PAAM99. Proceedings of the Fourth International Conference on the Practical Applications of Intelligent Agents and Multi-agent Technology, P97
   Blanch Renaud., 2006, P WORKING C ADV VISU, p51. isbn
   Boeck J., 2007, J VIRTUAL REALITY BR, V4
   Bolt R. A., 1980, Computer Graphics, V14, P262, DOI 10.1145/965105.807503
   Bourguet M.-L., 2002, ADJ P 15 ANN S US IN
   Cheyer A, 2001, AUTON AGENT MULTI-AG, V4, P143, DOI 10.1023/A:1010091302035
   Cohen P. R., 1997, P 5 C APPL NAT LANG
   Coutaz J., 1995, P 5 INT C HUM COMP I
   Dumas B, 2010, J MULTIMODAL USER IN, V3, P237, DOI 10.1007/s12193-010-0043-3
   Dumas Bruno., 2012, Proceedings of the 4th ACM SIGCHI symposium on Engineering interactive computing systems - EICS'12, P15
   Flippo F., 2003, P 5 INT C MULT INT I
   Hoste L., 2011, Proceedings of the 13th international conference on multimodal interfaces - ICMI'11, P97
   Jacob R., 1986, ACM T GRAPHICS TOG, V5
   KATSURADA K, 2003, P 5 INT C MULT INT I, P281
   Konig W.A., 2009, P 27 INT C HUM FACT
   Ladry J.-F., 2008, P 26 ACM INT C HUM F
   Lawson JYL, 2009, EICS'09: PROCEEDINGS OF THE ACM SIGCHI SYMPOSIUM ON ENGINEERING INTERACTIVE COMPUTING SYSTEMS, P245
   Limbourg Q., 2005, Engineering Human Computer Interaction and Interactive Systems, P200, DOI DOI 10.1007/11431879_12
   Navarre D, 2009, ACM T COMPUT-HUM INT, V16, DOI 10.1145/1614390.1614393
   Oviatt S., 2006, Proc. 14th Annu. ACM Int. Conf. Multimed.-Multimed. '06, P871, DOI [10.1145/1180639.1180831, DOI 10.1145/1180639.1180831]
   Paterno Fabio, 2008, International Journal of Web Engineering and Technology, V4, P235, DOI 10.1504/IJWET.2008.018099
   Schaefer R., 2006, Task Models and Diagrams for Users Interface Design. 5th International Workshop, TAMODIA 2006. Revised Papers (Lecture Notes in Computer Science Vol. 4385), P39
   Serrano M., 2008, P 26 SIGCHI C HUM FA, P3501
   Signer B, 2010, LECT NOTES COMPUT SC, V6412, P391, DOI 10.1007/978-3-642-16373-9_28
   Sottet JS, 2007, J MULTIMODAL USER IN, V1, P1, DOI 10.1007/BF02910054
   Stanciulescu A, 2005, P 7 INT C MULT INT I
   Vanderdonckt J, 2008, SIGNALS COMMUN TECHN, P61, DOI 10.1007/978-3-540-78345-9_4
NR 30
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2014
VL 86
SI SI
BP 30
EP 42
DI 10.1016/j.scico.2013.04.003
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AG7OW
UT WOS:000335608500003
OA hybrid, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Jakumeit', E
   Buchwald, S
   Wagelaar, D
   Dan, L
   Hegedüs, A
   Herrmannsdörfer, M
   Horn, T
   Kalnina, E
   Krause, C
   Lano, K
   Lepper, M
   Rensink, A
   Rose, L
   Wätzoldt, S
   Mazanek, S
AF Jakumeit', Edgar
   Buchwald, Sebastian
   Wagelaar, Dennis
   Dan, Li
   Hegedues, Abel
   Herrmannsdoerfer, Markus
   Horn, Tassilo
   Kalnina, Elina
   Krause, Christian
   Lano, Kevin
   Lepper, Markus
   Rensink, Arend
   Rose, Louis
   Waetzoldt, Sebastian
   Mazanek, Steffen
TI A survey and comparison of transformation tools based on the
   transformation tool contest
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Graph rewriting; Model transformation; Tool survey; Transformation tool
   contest
AB Model transformation is one of the key tasks in model-driven engineering and relies on the efficient matching and modification of graph-based data structures; its sibling graph rewriting has been used to successfully model problems in a variety of domains. Over the last years, a wide range of graph and model transformation tools have been developed all of them with their own particular strengths and typical application domains. In this paper, we give a survey and a comparison of the model and graph transformation tools that participated at the Transformation Tool Contest 2011. The reader gains an overview of the field and its tools, based on the illustrative solutions submitted to a Hello World task, and a comparison alongside a detailed taxonomy. The article is of interest to researchers in the field of model and graph transformation, as well as to software engineers with a transformation task at hand who have to choose a tool fitting to their needs. All solutions referenced in this article provide a SHARE demo. It supported the peer-review process for the contest, and now allows the reader to test the tools online.
C1 [Buchwald, Sebastian] Karlsruhe Inst Technol, D-76021 Karlsruhe, Germany.
   [Wagelaar, Dennis] Vrije Univ Brussel, Brussels, Belgium.
   [Dan, Li] Univ Macau, Fac Sci & Technol, Macau, Peoples R China.
   [Hegedues, Abel] Budapest Univ Technol & Econ, Budapest, Hungary.
   [Herrmannsdoerfer, Markus] Tech Univ Munich, Inst Informat, D-80290 Munich, Germany.
   [Horn, Tassilo] Univ Koblenz Landau, Inst Software Technol, Landau In Der Pfalz, Germany.
   [Kalnina, Elina] Univ Latvia, Inst Math & Comp Sci, Riga, Latvia.
   [Krause, Christian; Waetzoldt, Sebastian] Univ Potsdam, Hasso Plattner Inst, Potsdam, Germany.
   [Lano, Kevin] Kings Coll London, London WC2R 2LS, England.
   [Rensink, Arend] Univ Twente, Dept Comp Sci, NL-7500 AE Enschede, Netherlands.
   [Rose, Louis] Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
C3 Helmholtz Association; Karlsruhe Institute of Technology; Vrije
   Universiteit Brussel; University of Macau; Budapest University of
   Technology & Economics; Technical University of Munich; University of
   Koblenz & Landau; University of Latvia; University of Potsdam;
   University of London; King's College London; University of Twente;
   University of York - UK
RI Kalnina, Elina/A-7111-2010; Rose, Louis M/L-8892-2014; Hegedus,
   Abel/A-8494-2012
OI Kalnina, Elina/0009-0004-2680-3220; Lano, Kevin
   Charles/0000-0002-9706-1410; Hegedus, Abel/0000-0002-8940-4348
NR 0
TC 32
Z9 32
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2014
VL 85
SI SI
BP 41
EP 99
DI 10.1016/j.scico.2013.10.009
PN A
PG 59
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KW
UT WOS:000350618600003
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Hwong, YL
   Keiren, JJA
   Kusters, VJJ
   Leemans, S
   Willemse, TAC
AF Hwong, Yi Ling
   Keiren, Jeroen J. A.
   Kusters, Vincent J. J.
   Leemans, Sander
   Willemse, Tim A. C.
TI Formalising and analysing the control software of the Compact Muon
   Solenoid Experiment at the Large Hadron Collider
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 20-22, 2011
CL Tehran, IRAN
SP Inst Studies Fundamental Sci, Sch Comp Sci, ACM SIGSOFT, IFIP WG 2 2, Inst Studies Fundamental Sci
DE Case study; Process algebra; SML; Bounded model checking; Model
   transformations
ID OBJECT-ORIENTED FRAMEWORK; MODEL-CHECKING; SYSTEMS; VERIFICATION;
   SYMMETRY
AB The control software of the CERN Compact Muon Solenoid experiment contains over 27 500 finite state machines. These state machines are organised hierarchically: commands are sent down the hierarchy and state changes are sent upwards. The sheer size of the system makes it virtually impossible to fully understand the details of its behaviour at the macro level. This is fuelled by unclarities that already exist at the micro level. We have solved the latter problem by formally describing the finite state machines in the mCRL2 process algebra. The translation has been implemented using the ASF+SDF meta-environment, and its correctness was assessed by means of simulations and visualisations of individual finite state machines and through formal verification of subsystems of the control software. Based on the formalised semantics of the finite state machines, we have developed dedicated tooling for checking properties that can be verified on finite state machines in isolation. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Hwong, Yi Ling; Kusters, Vincent J. J.; Leemans, Sander] CERN, European Org Nucl Res, CH-1211 Geneva 23, Switzerland.
   [Keiren, Jeroen J. A.; Leemans, Sander; Willemse, Tim A. C.] Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
   [Kusters, Vincent J. J.] ETH, Inst Theoret Comp Sci, CH-8092 Zurich, Switzerland.
C3 European Organization for Nuclear Research (CERN); Eindhoven University
   of Technology; Swiss Federal Institutes of Technology Domain; ETH Zurich
RP Kusters, VJJ (corresponding author), CERN, European Org Nucl Res, CH-1211 Geneva 23, Switzerland.
EM vincent.kusters@inf.ethz.ch
OI Keiren, Jeroen/0000-0002-5772-9527; Leemans, Sander/0000-0002-5201-7125;
   Willemse, Tim/0000-0003-3049-7962
CR ABADI M, 1995, ACM T PROGR LANG SYS, V17, P507, DOI 10.1145/203095.201069
   [Anonymous], FDR2 US MAN
   [Anonymous], THESIS
   [Anonymous], ECEASST
   [Anonymous], CCGRID
   [Anonymous], CERNCMSNOTE2008036
   [Anonymous], 1990, LICS, DOI DOI 10.1109/LICS.1990.113767
   [Anonymous], ELECT COMMU IN PRESS
   [Anonymous], WASDETT
   [Anonymous], P 10 ANN IEEE S LOG
   [Anonymous], P ISOLA 06
   [Anonymous], P 2 IASTED INT C COM
   [Anonymous], THESIS EINDHOVEN U T
   [Anonymous], THESIS I NATL POLYTE
   [Anonymous], 2010, CAMBRIDGE TRACTS THE
   [Anonymous], P AVOCS 2004 ENTCS
   [Anonymous], 2001, Handbook of Process Algebra, DOI [DOI 10.1016/B978-044482830-9/50022-9, 10.1016/B978-044482830-9/50022-9]
   [Anonymous], 2005, CERNOPEN2005027
   [Anonymous], 2003, P 17 INT PAR DISTR P, DOI DOI 10.1109/IPDPS.2003.1213434
   Biere A, 2003, ADV COMPUT, V58, P117
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Blom S, 2010, LECT NOTES COMPUT SC, V6174, P354
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke EM, 1996, FORM METHOD SYST DES, V9, P77, DOI 10.1007/BF00625969
   Cranen S, 2011, THEOR COMPUT SCI, V412, P3129, DOI 10.1016/j.tcs.2011.02.034
   Devillers M, 2000, FORM METHOD SYST DES, V16, P307, DOI 10.1023/A:1008764923992
   Dutertre B, 2006, LECT NOTES COMPUT SC, V4144, P81, DOI 10.1007/11817963_11
   Emerson EA, 1996, FORM METHOD SYST DES, V9, P105, DOI 10.1007/BF00625970
   Franek B, 2005, IEEE T NUCL SCI, V52, P891, DOI 10.1109/TNS.2005.852645
   Gaspar C, 1998, COMPUT PHYS COMMUN, V110, P87, DOI 10.1016/S0010-4655(97)00158-6
   Gaspar C, 1996, CONTROL ENG PRACT, V4, P257, DOI 10.1016/0967-0661(95)00233-2
   Groote JF, 2009, CH CRC COMP SCI SER, P99
   Groote JF, 2005, SCI COMPUT PROGRAM, V56, P251, DOI 10.1016/j.scico.2004.08.002
   Groote JF, 2003, J LOGIC ALGEBR PROGR, V55, P21, DOI 10.1016/S1567-8326(02)00038-3
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Mathijssen A, 2007, LECT NOTES COMPUT SC, V4346, P165
   Mooij AJ, 2005, LECT NOTES COMPUT SC, V3319, P257
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   van den Brand M. G. J., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P365
NR 42
TC 12
Z9 12
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2435
EP 2452
DI 10.1016/j.scico.2012.11.009
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 234SL
UT WOS:000325664500011
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Laguna, MA
   Crespo, Y
AF Laguna, Miguel A.
   Crespo, Yania
TI A systematic mapping study on software product line evolution: From
   legacy system reengineering to product line refactoring
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product line; Evolution; Reengineering; Legacy system;
   Refactoring
ID DESIGN
AB Software product lines (SPLs) are used in industry to develop families of similar software systems. Legacy systems, either highly configurable or with a story of versions and local variations, are potential candidates for reconfiguration as SPLs using reengineering techniques. Existing SPLs can also be restructured using specific refactorings to improve their internal quality. Although many contributions (including industrial experiences) can be found in the literature, we lack a global vision covering the whole life cycle of an evolving product line. This study aims to survey existing research on the reengineering of legacy systems into SPLs and the refactoring of existing SPLs in order to identify proven approaches and pending challenges for future research in both subfields. We launched a systematic mapping study to find as much literature as possible, covering the diverse terms involved in the search string (restructuring, refactoring, reengineering, etc. always connected with SPLs) and filtering the papers using relevance criteria. The 74 papers selected were classified with respect to several dimensions: main focus, research and contribution type, academic or industrial validation if included, etc. We classified the research approaches and analyzed their feasibility for use in industry. The results of the study indicate that the initial works focused on the adaptation of generic reengineering processes to SPL extraction. Starting from that foundation, several trends have been detected in recent research: the integrated or guided reengineering of (typically object-oriented) legacy code and requirements; specific aspect-oriented or feature-oriented refactoring into SPLs, and more recently, refactoring for the evolution of existing product lines. A majority of papers include academic or industrial case studies, though only a few are based on quantitative data. The degree of maturity of both subfields is different: Industry examples for the reengineering of the legacy system subfield are abundant, although more evaluation research is needed to provide better evidence for adoption in industry. Product line evolution through refactoring is an emerging topic with some pending challenges. Although it has recently received some attention, the theoretical foundation is rather limited in this subfield and should be addressed in the near future. To sum up, the main contributions of this work are the classification of research approaches as well as the analysis of remaining challenges, open issues, and research opportunities. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Laguna, Miguel A.; Crespo, Yania] Univ Valladolid, GIRO Res Grp, E-47002 Valladolid, Spain.
C3 Universidad de Valladolid
RP Laguna, MA (corresponding author), Univ Valladolid, GIRO Res Grp, E-47002 Valladolid, Spain.
EM mlaguna@infor.uva.es; yania@infor.uva.es
RI Laguna, Miguel A/M-3822-2019; Crespo, Yania/AAC-7691-2020
OI Laguna, Miguel A/0000-0001-9107-749X; Crespo, Yania/0000-0003-0639-0540
FU Spanish MICIINN [TIN2008-05675]
FX This work has been funded by the Spanish MICIINN through the
   TIN2008-05675 project.
CR AMMA, 2010, ATL DEV TOOLS
   [Anonymous], 1980, LNCS
   [Anonymous], 2006, SOFTWARE EVOLUTION F
   [Anonymous], 2008, EMPIRICAL SOFTWARE E
   ARNOLD RS, 1989, P IEEE, V77, P607, DOI 10.1109/5.24146
   Basili Victor R, 1994, ENCY SOFTWARE ENG, V1
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Bayer J, 1999, LECT NOTES COMPUT SC, V1687, P446, DOI 10.1145/318774.319262
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Breivold HP, 2012, INFORM SOFTWARE TECH, V54, P16, DOI 10.1016/j.infsof.2011.06.002
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   Dyba Tore, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P225
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Glinz M, 2002, INFORM SYST, V27, P425, DOI 10.1016/S0306-4379(02)00015-7
   Kazman R., 1999, Automated Software Engineering, V6, P107, DOI 10.1023/A:1008781513258
   Kerievsky J., 2004, REFACTORING PATTERNS
   Kitchenham B., 2007, 23 EBSE, DOI DOI 10.1145/1134285.1134500
   Kitchenham B. A., P 26 INT C SOFTW ENG, P273
   Kitchenham BA, 2011, INFORM SOFTWARE TECH, V53, P638, DOI 10.1016/j.infsof.2010.12.011
   Laguna M.A., 2007, P 6 INT C GEN PROGR, P85
   Laguna MA, 2010, J UNIVERS COMPUT SCI, V16, P2313
   Marticorena R., 2010, 14 EUR C SOFTW MAINT, V2010, P217
   Marticorena R, 2011, ICSOFT 2011: PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON SOFTWARE AND DATABASE TECHNOLOGIES, VOL 2, P232
   Murphy GC, 2001, IEEE T SOFTWARE ENG, V27, P364, DOI 10.1109/32.917525
   Nehaniv C.L., 2007, INT WORKSH PRINC SOF
   O'Brien L., 2002, SOFTW TECHN ENG PRAC, P82
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Perez J., 2011, A classification frameworkand survey for design smell management
   Petersen K., 2008, C EVALUATION ASSESSM, P71
   Robillard MP, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P406, DOI 10.1109/ICSE.2002.1007986
   Runeson P., 2009, 13 INT C EMP ASS EV
   *SEI, FRAM SOFTW PROD LIN
   Shaw M., 2002, INT J SOFTWARE TOOLS, V4
   Stoermer C, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P35, DOI 10.1109/WICSA.2001.948405
   Stoiber R, 2010, VAMOS 10, V37, P77
   van der Linden F., 2007, SOFTWARE PRODUCT LIN, P333
   Wieringa R, 2006, REQUIR ENG, V11, P102, DOI 10.1007/s00766-005-0021-6
   Wilde N, 2003, J SYST SOFTWARE, V65, P105, DOI [10.1016/S0164-1212(02)00052-3, 10.1016/s0164-1212(02)00052-3]
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Yevtushenko S., 2000, P 7 NATL C ARTIFICIA, P127
NR 40
TC 68
Z9 72
U1 0
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1010
EP 1034
DI 10.1016/j.scico.2012.05.003
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 168XV
UT WOS:000320742200004
OA hybrid
DA 2024-07-18
ER

PT J
AU Pirzadeh, H
   Shanian, S
   Hamou-Lhadj, A
   Alawneh, L
   Shafiee, A
AF Pirzadeh, Heidar
   Shanian, Sara
   Hamou-Lhadj, Abdelwahab
   Alawneh, Luay
   Shafiee, Arya
TI Stratified sampling of execution traces: Execution phases serving as
   strata
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Trace analysis; Program comprehension; Sampling techniques; Stratified
   sampling; Execution phases
ID TRACEABILITY LINKS; FEATURES; CODE
AB The understanding of the behavioral aspects of a software system is an important enabler for many reverse engineering activities. The behavior of software is typically represented in the form of execution traces. Traces, however, can be overwhelmingly large. To reduce their size, sampling techniques, especially the ones based on random sampling, have been extensively used. Random sampling, however, may result in samples that are not representative of the original trace. In this paper, we propose a trace sampling technique that not only reduces the size of a trace but also results in a sample that is representative of the original trace by ensuring that the desired characteristics of an execution are distributed similarly in both the sampled and the original trace. Hence, the insights gained from analyzing the sample trace could be extrapolated to the original execution trace. Our approach is based on stratified sampling instead of random sampling and uses the concept of execution phases as strata. We define an execution phase as a part of a trace that represents a specific task of the traced system. We also present an approach for the automatic detection of execution phases from a trace. Finally, we show the effectiveness of our sampling technique through two case studies. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Pirzadeh, Heidar; Hamou-Lhadj, Abdelwahab; Alawneh, Luay; Shafiee, Arya] Concordia Univ, Dept Elect & Comp Engn, Montreal, PQ H3G 1M8, Canada.
   [Shanian, Sara] Univ Laval, Dept Comp Sci, Quebec City, PQ, Canada.
C3 Concordia University - Canada; Laval University
RP Pirzadeh, H (corresponding author), Concordia Univ, Dept Elect & Comp Engn, Montreal, PQ H3G 1M8, Canada.
EM pirzadeh@ieee.org; Sara.Shanian@ift.ulaval.ca; abdelw@ece.concordia.ca;
   l_alawne@ece.concordia.ca; ar_s@ece.concordia.ca
RI Alawneh, Luay/GPC-8269-2022
OI Alawneh, Luay/0000-0002-5152-8636; Hamou-Lhadj,
   Abdelwahab/0000-0002-3319-5006
FU Natural Science and Engineering Council of Canada (NSERC)
FX This work is supported partially by the Natural Science and Engineering
   Council of Canada (NSERC).
CR Abeel T, 2009, J MACH LEARN RES, V10, P931
   Andy Zaidman, 2006, THESIS U ANTWERPEN
   Antoniol G, 2005, PROC IEEE INT CONF S, P357
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   BIGGERSTAFF TJ, 1994, COMMUN ACM, V37, P72, DOI 10.1145/175290.175300
   Brunk H. D., 1960, INTRO MATH STAT
   Chan A, 2003, PROG COMPREHEN, P237
   Chen KR, 2000, PROG COMPREHEN, P241, DOI 10.1109/WPC.2000.852498
   Cochran W.G., 1977, SAMPLING TECHNIQUES
   Conover W. J., 1998, PRACTICAL NONPARAMET, V3rd
   Cornelissen B, 2007, INT C PROGRAM COMPRE, P49
   diaeresis>tze Hinrich Schu<spacing, 2008, INTRO INFORM RETRIEV, V39
   Dugerdil P., 2007, PROC 2007 C CTR ADV, P306, DOI DOI 10.1145/1321211.1321254
   Eclipse TPTP, ECL TEST PERF TOOLS
   Eisenbarth T, 2003, IEEE T SOFTWARE ENG, V29, P210, DOI 10.1109/TSE.2003.1183929
   Eisenberg AD, 2005, PROC IEEE INT CONF S, P337
   Geisler WS, 2001, VISION RES, V41, P711, DOI 10.1016/S0042-6989(00)00277-7
   Ghosh AK, 2000, LECT NOTES COMPUT SC, V1907, P93
   Hamou-Lhadj A, 2006, INT C PROGRAM COMPRE, P181, DOI 10.1109/ICPC.2006.45
   HAMOULHADJ A, 2004, C CTR ADV STUD COLL, P42
   Jerding DF, 1997, PROC INT CONF SOFTW, P360, DOI 10.1145/253228.253356
   Koffka K., 1935, Principles of gestalt psychology
   Kothari J., 2007, PROGR COMPR 2007 ICP
   Kuhn A, 2006, PROC IEEE INT CONF S, P320
   Liblit B, 2003, ACM SIGPLAN NOTICES, V38, P141, DOI 10.1145/780822.781148
   MacQueen J., 1967, P 5 BERK S MATH STAT, P281
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Oracle Corporation Inc., 2011, JAV PLANTF STAND ED
   Pelleg D., 2000, P 17 INT C MACH LEAR, DOI DOI 10.1007/3-540-44491-2_3
   Pirzadeh Heidar, 2010, Proceedings 8th ACIS International Conference on Software Engineering Research, Management and Applications (SERA 2010), P207, DOI 10.1109/SERA.2010.34
   Pirzadeh H., 2011, P 19 INT C PROGR COM
   Pirzadeh H, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P221, DOI 10.1109/ICECCS.2011.29
   Pirzadeh H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P948, DOI 10.1145/1985793.1985955
   Quinn PC, 2009, OPTOMETRY VISION SCI, V86, P589, DOI 10.1097/OPX.0b013e3181a5238a
   Reiss S. P., 2007, J VISUAL LANGUAGES C, V18
   Reiss S.P., 2005, P 3 INT WORKSHOP DYN, P1, DOI DOI 10.1145/1082983.1083254
   Reiss SP, 2003, SPRING INT SER ENG C, P311
   Roberts J., 2005, MOD BENCHM SIM MOBS, P5
   Rohatgi A, 2008, INT C PROGRAM COMPRE, P234, DOI 10.1109/ICPC.2008.35
   SCHWARZ G, 1978, ANN STAT, V6, P461, DOI 10.1214/aos/1176344136
   Smith-Gratto K., 1999, Journal of Educational Technology Systems, V27, P361, DOI DOI 10.2190/KVVE-B0EL-B0CJ-92KM
   Systä T, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P214, DOI 10.1109/WCRE.2000.891472
   Tzerpos V, 1998, NINTH INTERNATIONAL WORKSHOP ON DATABASE AND EXPERT SYSTEMS APPLICATIONS, PROCEEDINGS, P811, DOI 10.1109/DEXA.1998.707499
   Vassilvitskii S., 2007, THESIS STANFORD U ST
   Wang W, 2004, PROCEEDINGS OF THE 2004 INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND CYBERNETICS, VOLS 1-7, P2830, DOI 10.1109/ICMLC.2004.1378514
   Watanabe Y., 2008, P 2008 INT WORKSHOP, P8, DOI [10.1145/1401827.1401830, DOI 10.1145/1401827.1401830]
   WILDE N, 1995, J SOFTW MAINT-RES PR, V7, P49, DOI 10.1002/smr.4360070105
   Wong WE, 2000, J SYST SOFTWARE, V54, P87, DOI 10.1016/S0164-1212(00)00029-7
   Zikmund W., 2000, APPL SOCIAL RES METH, V5
NR 49
TC 15
Z9 16
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1099
EP 1118
DI 10.1016/j.scico.2012.11.002
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 168XV
UT WOS:000320742200008
OA hybrid
DA 2024-07-18
ER

PT J
AU Ferrari, A
   Fantechi, A
   Magnani, G
   Grasso, D
   Tempestini, M
AF Ferrari, Alessio
   Fantechi, Alessandro
   Magnani, Gianluca
   Grasso, Daniele
   Tempestini, Matteo
TI The Metro Rio case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; Model-based development; Code generation; Railway
ID MODEL CHECKING
AB This paper reports on the Simulink/Stateflow based development of the on-board equipment of the Metrei Rio Automatic Train Protection system. Particular focus is given to the strategies followed to address formal weaknesses and certification issues of the adopted tool-suite. On the development side, constraints on the Simulink/Stateflow semantics have been introduced and design practices have been adopted to gradually achieve a formal model of the system. On the verification side, a two-phase approach based on model-based testing and abstract interpretation has been followed to enforce functional correctness and runtime error freedom. Formal verification has been experimented as a side activity of the project.
   Quantitative results are presented to assess the overall strategy: the effort required by the design activities is balanced by the effectiveness of the verification tasks enabled by model-based development and automatic code generation. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Ferrari, Alessio; Fantechi, Alessandro] Univ Florence, DSI, I-50139 Florence, Italy.
   [Magnani, Gianluca; Grasso, Daniele; Tempestini, Matteo] Gen Elect Transportat Syst, I-50127 Florence, Italy.
C3 University of Florence; General Electric
RP Ferrari, A (corresponding author), Univ Florence, DSI, Via Santa Marta 3, I-50139 Florence, Italy.
EM alessiofer@gmail.com
RI Ferrari, Alessio/J-1155-2019; Magnani, Giuseppe/AAN-2242-2020
OI Ferrari, Alessio/0000-0002-0636-5663; Magnani,
   Giuseppe/0000-0001-8436-2903
CR Abdulla P. A., 2004, Leveraging Applications of Formal Methods. First International Symposium, ISoLA 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 4313), P115
   [Anonymous], 2005, EMSOFT 2005
   Bacherini S, 2006, LECT NOTES COMPUT SC, V4085, P179
   Baresel A, 2003, P 11 EUR INT C SOFTW
   Bochot T, 2009, PROC INT CONF SOFTW, P18, DOI 10.1109/ICSE-COMPANION.2009.5070960
   Chang Chin-Liang., 1997, SYMBOLIC LOGIC MECH
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Conrad M, 2009, FORM METHOD SYST DES, V35, P389, DOI 10.1007/s10703-009-0082-0
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Deutsch A., 2004, STAT VERIFICATION DY
   European Committee for Electrotechnical Standardization, 1997, EN50128 CENELEC
   FAIVRE A, 1999, P WCRR 99, P84
   Ferrari Alessio, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P24, DOI 10.1007/978-3-642-28891-3_5
   Ferrari Alessio, 2011, International Journal of Embedded and Real-Time Communication Systems, V2, P42, DOI 10.4018/jertcs.2011040103
   Ferrari A., 2009, P 8 FORMS FORMAT S
   Ferrari A., 2010, P 2 INT WORKSH SOFTW
   Ferrari A., 2009, NASA C P, VCP-2009-215407, P166
   Ferrari A, 2010, LECT NOTES COMPUT SC, V6371, P1, DOI 10.1007/978-3-642-15898-8_1
   GUIHO G, 1990, 12TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P186, DOI 10.1109/ICSE.1990.63621
   Hamon G., 2007, International Journal on Software Tools for Technology Transfer, V9, P447, DOI 10.1007/s10009-007-0049-7
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Leuschel M, 2009, LECT NOTES COMPUT SC, V5850, P708, DOI 10.1007/978-3-642-05089-3_45
   MathWorks Automotive Advisory Board (MAAB), 2007, CONTR ALG MOD GUID U
   Miller SP, 2010, COMMUN ACM, V53, P58, DOI 10.1145/1646353.1646372
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Scaife N., 2004, Proceedings of the 4th ACM International Conference on Embedded Software, EMSOFT '04, P259
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
NR 28
TC 22
Z9 22
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 828
EP 842
DI 10.1016/j.scico.2012.04.003
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700005
DA 2024-07-18
ER

PT J
AU Mateo, PR
   Usaola, MP
   Offutt, J
AF Reales Mateo, Pedro
   Polo Usaola, Macario
   Offutt, Jeff
TI Mutation at the multi-class and system levels
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mutation; Testing; System testing; Flexible weak mutation; Mutation
   process
ID OPERATORS
AB Mutation analysis has been applied to many testing problems, including numerous programming languages, specifications, network protocols, web services, and security policies. Program mutation, where mutation analysis is applied to programs, has been applied to the unit level (functions and methods), integration of pairs of functions, and individual classes. However, program mutation has not been applied to the problem of integration testing of multiple classes or entire software programs; thus, there is no system level mutation. This paper introduces a project on the problem of integration testing of multiple classes (multi-class) and system level mutation testing. The technical differences between using mutation to test single classes and multiple classes are explored, and new system level mutation operators are defined. A new execution style for detecting killed mutants, flexible weak mutation, is introduced. A mutation tool, Bacterio, still under construction, is also described. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Reales Mateo, Pedro; Polo Usaola, Macario] Univ Castilla La Mancha, Dept Tecnol & Sistemas Informac, E-13071 Ciudad Real, Spain.
   [Offutt, Jeff] George Mason Univ, Fairfax, VA 22030 USA.
C3 Universidad de Castilla-La Mancha; George Mason University
RP Mateo, PR (corresponding author), Univ Castilla La Mancha, Dept Tecnol & Sistemas Informac, E-13071 Ciudad Real, Spain.
EM pedro.reales@uclm.es; macario.polo@uclm.es; offutt@gmu.edu
RI Polo Usaola, Macario/N-3104-2014
OI Polo Usaola, Macario/0000-0001-6519-6196
CR Agrawal H., REPORT 1989
   Ammann P., 2008, INTRODUCTION TO SOFT
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], 1991, P S TEST AN VER TAV
   Barbosa EF, 2001, SOFTW TEST VERIF REL, V11, P113, DOI 10.1002/stvr.226
   Bowser J., 1988, REPORT TECHNIQUE REP
   Delamaro M.E., 2000, P MUT 2000 S SAN JOS, P91
   Delamaro ME, 2001, IEEE T SOFTWARE ENG, V27, P228, DOI 10.1109/32.910859
   DeMillo R. A., 1991, Proceedings of the Fifteenth Annual International Computer Software and Applications Conference (Cat. No.91CH3023-9), P351, DOI 10.1109/CMPSAC.1991.170202
   DeMillo R. A., 1988, Proceedings of the Second Workshop on Software Testing, Verification, and Analysis (Cat. No.88TH0225-3), P142, DOI 10.1109/WST.1988.5369
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   Derezinska A, 2006, INT FED INFO PROC, V227, P283
   Ghosh S, 2001, SOFTW TEST VERIF REL, V11, P227, DOI 10.1002/stvr.239
   Girgis M. R., 1985, Proceedings of the 8th International Conference on Software Engineering (Cat. No.85CH2139-4), P313
   Grün BJM, 2009, IEEE ICST WORKSHOP, P192, DOI 10.1109/ICSTW.2009.37
   Hierons R.M., 1999, J SOFTW TEST VERIFIC, V9, P233, DOI 10.1002/(SICI)1099-1689(199912)9:43.0.CO;2-3
   HOWDEN WE, 1982, IEEE T SOFTWARE ENG, V8, P371, DOI 10.1109/TSE.1982.235571
   Hu J., 2011, WORKSHOP ON MUTATION
   Irvine SA, 2007, TAIC PART 2007 - TESTING: ACADEMIC AND INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P169, DOI 10.1109/TAIC.PART.2007.38
   JEFFERSON A, 1994, INTERNATIONAL TEST CONFERENCE 1994, PROCEEDINGS, P824, DOI 10.1109/TEST.1994.528535
   Jia Y., 2009, REPORT TR 09 06
   Kanstrén T, 2008, J SOFTW MAINT EVOL-R, V20, P59, DOI 10.1002/smr.362
   KING KN, 1991, SOFTWARE PRACT EXPER, V21, P685, DOI 10.1002/spe.4380210704
   Ma Y., 2005, DESCRIPTION OF METHO
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Mathur A. P., 1991, Proceedings of the Fifteenth Annual International Computer Software and Applications Conference (Cat. No.91CH3023-9), P604, DOI 10.1109/CMPSAC.1991.170248
   Mresa E. S., 1999, Software Testing, Verification and Reliability, V9, P205, DOI 10.1002/(SICI)1099-1689(199912)9:4<205::AID-STVR186>3.0.CO;2-X
   Offut J., 2006, SECOND WORKSHOP ON M, P93
   Offutt A., 1997, WILEYS SOFTWARE TEST, V7, P165
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   OFFUTT AJ, 1994, IEEE T SOFTWARE ENG, V20, P337, DOI 10.1109/32.286422
   Polo M, 2009, SOFTW TEST VERIF REL, V19, P111, DOI 10.1002/stvr.392
   Usaola MP, 2010, IEEE SOFTWARE, V27, P80, DOI 10.1109/MS.2010.79
   Schuler D, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P297, DOI 10.1145/1595696.1595750
   SpringSoft, CERTITUDE FUNCTIONAL
   Sung A., 2003, 14TH IEEE INTERNATIO, P301
   Tuya J, 2007, INFORM SOFTWARE TECH, V49, P398, DOI 10.1016/j.infsof.2006.06.009
   UNTCH R, 1993, P 1993 INT S SOFTW T, P139, DOI DOI 10.1145/154183.154265
   Woodward M. R., 1988, Proceedings of the Second Workshop on Software Testing, Verification, and Analysis (Cat. No.88TH0225-3), P152, DOI 10.1109/WST.1988.5370
NR 40
TC 5
Z9 5
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2013
VL 78
IS 4
BP 364
EP 387
DI 10.1016/j.scico.2012.02.005
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 104GA
UT WOS:000315978700003
OA Bronze
DA 2024-07-18
ER

PT J
AU Fok, CL
   Roman, GC
   Lu, CY
AF Fok, Chien-Liang
   Roman, Gruia-Catalin
   Lu, Chenyang
TI Servilla: A flexible service provisioning middleware for heterogeneous
   sensor networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Wireless sensor networks; Service-oriented computing; Middleware;
   Coordination model
ID COORDINATION MODEL
AB Device heterogeneity in wireless sensor networks is rendering such networks increasingly difficult to program. To address this problem, we present Servilla, a novel middleware that enables applications to be both platform-independent and efficient despite executing over a diverse and dynamic set of devices. It achieves this by using service-oriented computing and requiring all platform-specific functionality be encapsulated behind services, which are dynamically discovered by applications. Novel forms of service bindings and invocation semantics enable flexible yet energy-efficient in-network collaboration among heterogeneous devices. To support a wide range of devices, Servilla introduces the concept of middleware asymmetry, enabling resource-constrained devices to only provide services that can be leveraged by more powerful devices running applications. Servilla has been implemented and evaluated on two disparate hardware platforms, the Imote2 and TelosB. Microbenchmarks demonstrate Servilla's feasibility while a structural health monitoring application case study demonstrates its efficacy. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Fok, Chien-Liang; Roman, Gruia-Catalin; Lu, Chenyang] Washington Univ, St Louis, MO 63130 USA.
C3 Washington University (WUSTL)
RP Fok, CL (corresponding author), Washington Univ, St Louis, MO 63130 USA.
EM liangfok@wustl.edu; roman@wustl.edu; lu@cse.wustl.edu
FU National Science Foundation [CNS-0520220, CNS-0627126, CNS-0708460]
FX This work is funded by the National Science Foundation under grants
   CNS-0520220, CNS-0627126, and CNS-0708460. Special thanks to the many
   reviewers who provided invaluable feedback.
CR Abreu J, 2008, LECT NOTES COMPUT SC, V5052, P1, DOI 10.1007/978-3-540-68265-3_1
   Alonso G., 2003, Web Services, V2004
   Ankolekar A, 2002, LECT NOTES COMPUT SC, V2315, P14
   [Anonymous], 2006, P 4 INT C EMBEDDED N, DOI [DOI 10.1145/1182807.1182822, 10.1145/1182807.1182822]
   ARBAB F, 2002, LECT NOTES COMPUTER, V2315
   Arbab F, 2007, LECT NOTES COMPUT SC, V4467, P286
   Arch Rock, ARCH ROCK PHYNET
   Balani R., 2006, P 6 ACM IEEE INT C E, P112
   BERK E, JLEX LEXICAL ANAL GE
   Bettini L, 2008, LECT NOTES COMPUT SC, V5052, P17, DOI 10.1007/978-3-540-68265-3_2
   Bocchi L, 2005, LECT NOTES COMPUT SC, V3454, P283
   Bocchi L, 2006, LECT NOTES COMPUT SC, V4038, P16
   Boulis A, 2003, PROCEEDINGS OF MOBISYS 2003, P187, DOI 10.1145/1066116.1066121
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4467, P96
   Bruni R, 2008, LECT NOTES COMPUT SC, V5052, P67, DOI 10.1007/978-3-540-68265-3_5
   Chakraborty D., 2000, CROSSROADS, V7, P18
   Chintalapudi K, 2006, IEEE INTERNET COMPUT, V10, P26, DOI 10.1109/MIC.2006.38
   Ciancarini P., 2006, LECT NOTES COMPUTER, V4038
   Cubo J, 2007, LECT NOTES COMPUT SC, V4467, P305
   Culler D, 2004, COMPUTER, V37, P41, DOI 10.1109/MC.2004.93
   Davis A, 2005, J SYST SOFTWARE, V76, P157, DOI 10.1016/j.jss.2004.05.002
   Dunkels A., 2006, T200615 SWED I COMP
   Fok CL, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1552297.1552299
   Frey D, 2007, LECT NOTES COMPUT SC, V4467, P37
   Gay D, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/780822.781133
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Gnawali O., 2006, Proceedings of the 4th international conference on Embedded networked sensor systems, P153
   Greenstein B., 2004, Proceedings of the 2Nd International Conference on Embedded Networked Sensor Systems, P69, DOI DOI 10.1145/1031495.1031505
   Hackmann G, 2008, REAL TIM SYST SYMP P, P35, DOI 10.1109/RTSS.2008.40
   Handorean R, 2002, LECT NOTES COMPUT SC, V2315, P207
   Hill J, 2000, ACM SIGPLAN NOTICES, V35, P93, DOI 10.1145/384264.379006
   Hudson Scott., CUP LALR PARSER GENE
   Intanagonwiwat C., 2000, MobiCom 2000. Proceedings of the Sixth Annual International Conference on Mobile Computing and Networking, P56, DOI 10.1145/345910.345920
   JACQUET JM, 2005, LECT NOTES COMPUTER, V3454
   Kempf James., 1999, SERVICE LOCATION PRO
   KUMARAN I, 2001, JINI TECHNOLOGY OVER
   Lea D., 2008, LECT NOTES COMPUTER, V5052
   Levis P, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND SYMPOSIUM ON NETWORKED SYSTEMS DESIGN & IMPLEMENTATION (NSDI '05), P343
   Levis P, 2002, ACM SIGPLAN NOTICES, V37, P85, DOI 10.1145/605432.605407
   Levis P., 2004, TINYSCRIPT MANU
   Liu J, 2005, 2ND INTERNATIONAL CONFERENCE ON BROADBAND NETWORKS (BROADNETS 2005), P44
   Lopez-Nores M, 2006, LECT NOTES COMPUT SC, V4038, P164
   Lymberopoulos D, 2007, PROCEEDINGS OF THE SIXTH INTERNATIONAL SYMPOSIUM ON INFORMATION PROCESSING IN SENSOR NETWORKS, P128, DOI 10.1109/IPSN.2007.4379672
   Madden S, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FIFTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P131, DOI 10.1145/1060289.1060303
   Marshall D.D., 1999, REMOTE PROCEDURE CAL
   Mazzara M, 2005, LECT NOTES COMPUT SC, V3454, P1
   Mezzina LG, 2008, LECT NOTES COMPUT SC, V5052, P216, DOI 10.1007/978-3-540-68265-3_14
   Microsoft, WIND COMM FDN
   Muller R., 2007, Operating Systems Review, V41, P145, DOI 10.1145/1272998.1273013
   Murphy A.L., 2007, LECT NOTES COMPUTER, V4467
   Núñez A, 2008, LECT NOTES COMPUT SC, V5052, P232, DOI 10.1007/978-3-540-68265-3_15
   Object Management Group, CORB BAS
   Papazoglou MP, 2007, COMPUTER, V40, P38, DOI 10.1109/MC.2007.400
   Polastre J, 2005, 2005 Fourth International Symposium on Information Processing in Sensor Networks, P364
   Prete L.D., 2008, ENT DISTR OBJ COMP C, P171
   Priyantha NB, 2008, SENSYS'08: PROCEEDINGS OF THE 6TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P253
   Tian H., 2006, ACM Trans. Sensor Networks, V2, P1, DOI DOI 10.1145/1138127.1138128
   W3C, WEB SERV DESCR LANG
   Yao Y, 2002, SIGMOD REC, V31, P9, DOI 10.1145/601858.601861
NR 59
TC 25
Z9 26
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2012
VL 77
IS 6
SI SI
BP 663
EP 684
DI 10.1016/j.scico.2010.11.006
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 931AO
UT WOS:000303186500002
OA Bronze
DA 2024-07-18
ER

PT J
AU Fradet, P
   Ha, SHT
AF Fradet, Pascal
   Ha, Stephane Hong Tuan
TI Aspects of availability Enforcing timed properties to prevent denial of
   service
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Generative Programming and Component
   Engineering
CY OCT 01-03, 2007
CL Salzburg, AUSTRIA
SP ACM SIGPLAN, ACM SIGSOFT
DE Aspect-oriented programming; Availability; Resource management; Timed
   automata; Weaving; Denial of service
AB We propose a domain-specific aspect language to prevent denial of service caused by resource management. Our aspects specify availability policies by enforcing time limits in the allocation of resources. In our language, aspects can be seen as formal timed properties on execution traces. Programs and aspects are specified as timed automata and the weaving process as an automata product. The benefit of this formal approach is two-fold: the user keeps the semantic impact of weaving under control and (s)he can use a model-checker to optimize the woven program and verify availability properties. This article presents the main approach (programs, aspects, weaving) formally using timed safety automata. The specification of resources, optimizations and verification are sketched in a more intuitive fashion. Even if a concrete implementation remains as future work, we address some high-level implementation issues and illustrate the approach by small examples and a case study. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Fradet, Pascal] INRIA Grenoble Rhone Alpes, F-38330 Montbonnot St Martin, France.
   [Ha, Stephane Hong Tuan] CEA Saclay, DRT LIST DTSI LSL, F-91191 Gif Sur Yvette, France.
   [Ha, Stephane Hong Tuan] INRIA Rennes Bretagne Atlantique, F-35042 Rennes, France.
C3 Universite Paris Saclay; CEA; Universite de Rennes
RP Fradet, P (corresponding author), INRIA Grenoble Rhone Alpes, 655 Av Europe, F-38330 Montbonnot St Martin, France.
EM Pascal.Fradet@inria.fr; Stephane.Hong-Tuan-Ha@cea.fr
CR Altisen K, 2006, SCI COMPUT PROGRAM, V63, P297, DOI 10.1016/j.scico.2005.12.001
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P8
   [Anonymous], 1992, Dependability: Basic Concepts and Terminology
   Bengtsson J, 2004, LECT NOTES COMPUT SC, V3098, P87, DOI 10.1007/978-3-540-27755-2_3
   Binder W., 2001, OOPSLA, P139
   COLCOMBET T, 2000, S PRINC PROGR LANG P, P54
   CUPPENS F, 1999, INF SYST TECH PAN S
   Douence R, 2002, LECT NOTES COMPUT SC, V2487, P173
   DOUENCE R, 2004, ASPECT ORIENTED SOFT, P201
   Fradet P, 2004, LECT NOTES COMPUT SC, V3302, P21
   FRADET P, 2006, BASES DONNEES RESEAU, V12, P183
   FRADET P, 2007, P 6 INT C GEN PROGR, P165
   FRADET P, 2005, 2 JOURN DEV LOG ASP
   HA SHT, 2007, THESIS RENNES U
   HORN DV, 2007, ICFP 07, P85
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   LEIWO J, 1997, ACISP 97, P90
   Li XF, 2005, REAL-TIME SYST, V29, P27, DOI 10.1023/B:TIME.0000048933.15922.f9
   Ligatti J., 2005, J. Inf. Secur., V4, P2, DOI [10.1007/s10207-004-0046-8, DOI 10.1007/S10207-004-0046-8]
   Millen J. K., 1993, Journal of Computer Security, V2, P89
   NANDIVADA VK, 2005, IEEE REAL TIM EMB TE, P541
   PUSCHNER P, 1989, J REAL TIME SYSTEMS, V1, P159
   REGNELL B, 1995, IEEE 2 INT S REQ ENG, P40
   RUSHBY J, 1994, RELIAB ENG SYST SAFE, V43, P189, DOI 10.1016/0951-8320(94)90065-5
   Schneider H P, 2000, Climacteric, V3, P50, DOI 10.3109/13697130009167599
   SIPMA H, 2003, WORKSH FDN ASP OR LA
   Some S., 1995, Proceedings 1995 Asia Pacific Software Engineering Conference, P48, DOI 10.1109/APSEC.1995.496953
   YU CF, 1990, IEEE T SOFTWARE ENG, V16, P581, DOI 10.1109/32.55087
NR 30
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2010
VL 75
IS 7
SI SI
BP 516
EP 542
DI 10.1016/j.scico.2009.10.002
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 603YE
UT WOS:000278243200004
DA 2024-07-18
ER

PT J
AU Lungu, M
   Lanza, M
   Gîrba, T
   Robbes, R
AF Lungu, Mircea
   Lanza, Michele
   Girba, Tudor
   Robbes, Romain
TI The Small Project Observatory: Visualizing software ecosystems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software evolution; Software visualization; Software ecosystems; Reverse
   engineering; Maintenance
AB Software evolution research has focused mostly on analyzing the evolution of single software systems. However, it is rarely the case that a project exists as standalone, independent of others. Rather, projects exist in parallel within larger contexts in companies, research groups or even the open-source communities. We call these contexts software ecosystems. In this paper, we present the Small Project Observatory, a prototype tool which aims to support the analysis of software ecosystems through interactive visualization and exploration. We present a case study of exploring an ecosystem using our tool, we describe the architecture of the tool, and we distill lessons learned during the tool-building experience. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Lungu, Mircea; Lanza, Michele; Robbes, Romain] Univ Lugano, REVEAL, Fac Informat, CH-6900 Lugano, Switzerland.
   [Girba, Tudor] Univ Bern, Software Composit Grp, CH-3012 Bern, Switzerland.
C3 Universita della Svizzera Italiana; University of Bern
RP Lungu, M (corresponding author), Univ Lugano, REVEAL, Fac Informat, Via Giuseppe Buffi 13, CH-6900 Lugano, Switzerland.
EM mircea.lungu@usi.ch; michele.lanza@usi.ch; girba@iam.unibe.ch;
   romain.robbes@usi.ch
RI Lanza, Michele/JNQ-9470-2023; Robbes, Romain/H-3771-2013
OI Lanza, Michele/0000-0003-4391-0197; Robbes, Romain/0000-0003-4569-6868
CR AMOR JJ, MEASURING LIBRE SOFT
   [Anonymous], 2000, SOFTWARE ARCHITECTUR
   *CINC, 2000, TEAM DEV VISUALWORKS
   CLEMENTS P, 2001, NORTHROP SOFTWARE PR
   CONKLIN M, 2005, SIGSOFT SOFTW ENG NO, V30, P1
   Cubranic D, 2005, IEEE T SOFTWARE ENG, V31, P446, DOI 10.1109/TSE.2005.71
   D'Ambros M, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P3
   DUCASSE NS, 2005, SIGSOFT SOFTWARE ENG, V30, P1
   Ducasse S, 2007, IEEE SOFTWARE, V24, P56, DOI 10.1109/MS.2007.144
   EICK SG, 1992, IEEE T SOFTWARE ENG, V18, P957, DOI 10.1109/32.177365
   Finnigan PJ, 1997, IBM SYST J, V36, P564, DOI 10.1147/sj.364.0564
   FRUCHTERMAN TMJ, 1991, SOFTWARE PRACT EXPER, V21, P1129, DOI 10.1002/spe.4380211102
   Gansner ER, 2000, SOFTWARE PRACT EXPER, V30, P1203, DOI 10.1002/1097-024X(200009)30:11<1203::AID-SPE338>3.0.CO;2-N
   HOLT R, 1996, WCRE 96, P163
   LEHMAN M, 1997, METRICS 97
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Likert R., 1932, Arch. Psychol., V22, P44, DOI DOI 10.4135/9781412961288.N454
   López-Fernández L, 2006, INT J INF TECHNOL WE, V1, P27, DOI 10.4018/jitwe.2006070103
   LUNGU M, 2007, IWPSE 07, P106
   LUNGU M, 2007, WCRE 07, P120
   LUNGU M, 2005, VISSOFF 05, P95
   MANCORIDIS S, 2001, WCRE 01, P221
   Marcus Andrian, 2003, ACM S SOFTWARE VISUA, P27
   Meyer M., 2006, Proceedings of the 2006 ACM symposium on Software visualization, P135, DOI DOI 10.1145/1148493.1148513
   Muller H. A., 1988, Proceedings of the 10th International Conference on Software Engineering (Cat. No.88CH2554-4), P80, DOI 10.1109/ICSE.1988.93690
   Robles G, 2006, INT FED INFO PROC, V203, P273
   Storey MAD, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P275, DOI 10.1109/ICSM.1995.526549
   Weiss D., 2005, RA00105 POZN U TECHN
NR 28
TC 55
Z9 60
U1 4
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2010
VL 75
IS 4
BP 264
EP 275
DI 10.1016/j.scico.2009.09.004
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 580QR
UT WOS:000276464800006
OA Green Published
DA 2024-07-18
ER

PT J
AU Åkesson, J
   Ekman, T
   Hedin, G
AF Akesson, Johan
   Ekman, Torbjoern
   Hedin, Gorel
TI Implementation of a Modelica compiler using JastAdd attribute grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th Workshop on Language Descriptions, Tools and Application
CY MAR 25, 2007
CL Braga, PORTUGAL
SP ACM SIGPLAN
DE Compiler construction; JastAdd; Modelica; Reference attributed grammars
AB We have implemented a compiler for key parts of Modelica, an object-oriented language supporting equation-based modeling and simulation of complex physical systems. The compiler is extensible, to support experiments with emerging tools for physical models. To achieve extensibility, the implementation is done declaratively in JastAdd, a metacompilation system supporting modern attribute grammar mechanisms such as reference attributes and nonterminal attributes.
   This paper reports on experiences from this implementation. For name and type analyses, we illustrate how declarative design strategies, originally developed for a Java compiler, could be reused to support Modelica's advanced features of multiple inheritance and structural subtyping. Furthermore, we present new general design strategies for declarative generation of target ASTs from source ASTs. We illustrate how these strategies are used to resolve a generics-like feature of Modelica called modifications, and to support flattening, a fundamental part of Modelica compilation. To validate that the approach is practical, we have compared the execution speed of our compiler to two existing Modelica compilers. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Akesson, Johan] Lund Univ, Dept Automat Control, SE-22100 Lund, Sweden.
   [Ekman, Torbjoern] Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
   [Hedin, Gorel] Lund Univ, Dept Comp Sci, SE-22100 Lund, Sweden.
C3 Lund University; University of Oxford; Lund University
RP Åkesson, J (corresponding author), Lund Univ, Dept Automat Control, Box 118, SE-22100 Lund, Sweden.
EM jakesson@control.lth.se; torbjorn@comlab.ox.ac.uk; gorel@cs.lth.se
CR AKESSON J, 2009, P MATHMOD 2009 6 VIE
   AKESSON J, 2007, THESIS LUND U SWEDEN
   Andersson M., 1994, Proceedings IEEE/IFAC Joint Symposium on Computer-Aided Control System Design (Cat. No.94TH0619-7), P285, DOI 10.1109/CACSD.1994.288917
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   Åström KJ, 1998, SIMULATION: PAST, PRESENT AND FUTURE, P9
   DANIELSSON H, 2007, LUTFD2TFRT5797SE ISR
   EKMAN T, 2006, THESIS LUND U SWEDEN
   EKMAN T, 2006, LNCS, V4143
   EKMAN T, 2007, P OOPSLA 2007
   FARROW R, 1982, SIGPLAN 82, P160
   Fritzson P., 2004, PRINCIPLES OBJECT OR
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Haugwitz S, 2009, J PROCESS CONTR, V19, P686, DOI 10.1016/j.jprocont.2008.07.005
   Hedin G., 2000, Informatica, V24, P301
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   HEDIN G, 2009, IEEE SOFTWARE UNPUB
   HULTGREN H, 2007, LUTFD2TFRT5794SE ISR
   INGALLS DHH, 1986, OOPSLA, P347
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Modelica Association, 2009, MOD UN OBJ OR LANG P
   *PELAB, 2009, OPENMODELICA PROJ
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   [No title captured]
NR 23
TC 12
Z9 13
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2010
VL 75
IS 1-2
SI SI
BP 21
EP 38
DI 10.1016/j.scico.2009.07.003
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 539CK
UT WOS:000273230800003
OA Bronze
DA 2024-07-18
ER

PT J
AU Kulk, GP
   Peters, RJ
   Verhoef, C
AF Kulk, G. P.
   Peters, R. J.
   Verhoef, C.
TI Quantifying IT estimation risks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Quantifying IT risks; IT-enabled business investment; Logistic
   regression; Cost overrun; Cost underrun; Risk drivers; Risk factors;
   Lift chart; Forecasting errors; Data plausibility; Data quality; Cost
   estimation; Misestimation; EQF; Maturity mismatch
ID SOFTWARE; PREDICTION
AB A statistical method is proposed for quantifying the impact of factors that influence the quality of the estimation of costs for IT-enabled business projects. We call these factors risk drivers as they influence the risk of the misestimation of project costs. The method can effortlessly be transposed for usage on other important IT key performance indicators (KPIs), such as schedule misestimation or functionality underdelivery. We used logistic regression as a modeling technique to estimate the quantitative impact of risk factors. We did so because logistic regression has been applied successfully in fields including medical science, e.g. in perinatal epidemiology, to answer questions that show a striking resemblance to the questions regarding project risk management. in our study we used data from a large organization in the financial services industry to assess the applicability of logistic modeling in quantifying IT risks. With this real-world example we illustrated how to scrutinize the quality and plausibility of the available data. We explained how to deal with factors that cannot be influenced, also called risk factors, by project management before or in the early stage of a project, but can have an influence on the outcome of the estimation process. We demonstrated how to select the risk drivers using logistic regression. Our research has shown that it is possible to properly quantify these risks, even with the help of crude data. We discussed the interpretation of the models found and showed that the findings are helpful in decision making on measures to be taken to identify potential misestimates and thus mitigate IT risks for individual projects. We proposed increasing the auditing process efficiency by using the found cost misestimation models to classify all projects as either risky projects or non-risky projects. We discovered through our analyses that projects must not be overstaffed and the ratio of external developers must be kept small to obtain better cost estimates. Our research showed that business units that report on financial information tend to be risk mitigating, because they have more cost underruns in comparison with business units without reporting; the latter have more cost overruns. We also discovered a maturity mismatch: an increase from CMM level I to 2 did not influence the disparity between a cost estimate and its actual if the maturity of the business is not also increased. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Kulk, G. P.; Peters, R. J.; Verhoef, C.] Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Kulk, GP (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM erald@few.vu.nl; rjpeters@cs.vu.nl; x@cs.vu.nl
FU Dutch joint Academic and Commercial Quality Research & Development
   (Jacquard) [638.004.405]; Equity: Exploring Quantifiable Information
   Technology Yields [638.003.611]; Symbiosis: Synergy of managing
   business-IT-alignment
FX This research received partial support from the Dutch joint Academic and
   Commercial Quality Research & Development (Jacquard) program on Software
   Engineering Research via contract 638.004.405 Equity: Exploring
   Quantifiable Information Technology Yields and via contract 638.003.611
   Symbiosis: Synergy of managing business-IT-alignment, IT-sourcing and
   offshoring success in society. We would like to express our gratitude
   tojoeri van Hoeve who laid the foundation for the studies presented in
   this paper. Furthermore, we would like to thank the anonymous reviewers
   for their valuable comments.
CR Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   ALLENBY GM, 1994, J AM STAT ASS, V89
   [Anonymous], 1985, Elementary numerical analysis
   [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], 1999, CHAOS REC SUCC
   [Anonymous], 2001, EXTREME CHAOS
   [Anonymous], 1995, Chaos
   [Anonymous], 2003, Project management methodologies: Selecting, implementing, and supporting methodologies and processes for projects
   [Anonymous], 2000, Data Mining: Practical Machine Learning Tools and Techniques with Java Implementations
   Bellman S, 1999, COMMUN ACM, V42, P32, DOI 10.1145/322796.322805
   BERINATO S, 2001, CIO MAGAZINE     OCT
   Braha D, 2007, MANAGE SCI, V53, P1127, DOI 10.1287/mnsc.1060.0617
   Brand R, 1990, Paediatr Perinat Epidemiol, V4, P22, DOI 10.1111/j.1365-3016.1990.tb00615.x
   BRAND R, 1990, PEDIAT PERINATAL EPI, V4, P234
   Brooks Frederick P., 1995, The mythical man-month
   CHICK TA, 2006, DEFENSE AT L     NOV
   COCHRAN WG, 1954, BIOMETRICS, V10, P417, DOI 10.2307/3001616
   COCHRAN WG, 1952, ANN MATH STAT, V23, P315, DOI 10.1214/aoms/1177729380
   Dalcher D, 2003, TECHNOL ANAL STRATEG, V15, P403, DOI 10.1080/095373203000136006
   DANBRAHA, 2004, PHYS REV E, V69
   Denaro G, 2003, INT J SOFTW ENG KNOW, V13, P395, DOI 10.1142/S0218194003001366
   EVELEENS JL, QUANTIFYING IN PRESS
   Garmus David., 2001, AW INFORMAT
   Hosmer DW, 1997, STAT MED, V16, P965
   Hosmer W., 2000, Applied Logistic Regression, VSecond
   JACKSON J, 2002, ASS INFORM SYSTEMS, V8
   Jones C., 1996, Patterns of software system failure and success
   Jones C., 2000, Software Assessments, Benchmarks, and Best Practices
   Khoshgoftaar TM, 2000, ANN SOFTW ENG, V9, P103, DOI 10.1023/A:1018972607783
   Kulk GP, 2008, SCI COMPUT PROGRAM, V72, P136, DOI 10.1016/j.scico.2008.04.003
   LECESSIE S, 1995, THESIS U LEIDEN
   Likert R., 1932, Arch. Psychol., V22, P44, DOI DOI 10.4135/9781412961288.N454
   MCFARLAN FW, 1981, HARVARD BUS REV, V59, P142
   NEWTON I., 1736, METHODUS FLUXIONUM S
   Paliwal M, 2009, EXPERT SYST APPL, V36, P2, DOI 10.1016/j.eswa.2007.10.005
   PAULK MC, 1993, IEEE SOFTWARE, V10, P18, DOI 10.1109/52.219617
   Peduzzi P, 1996, J CLIN EPIDEMIOL, V49, P1373, DOI 10.1016/S0895-4356(96)00236-3
   Peters RJ, 2008, SCI COMPUT PROGRAM, V71, P17, DOI 10.1016/j.scico.2007.11.001
   Procaccino JD, 2002, INFORM SOFTWARE TECH, V44, P53, DOI 10.1016/S0950-5849(01)00217-8
   *R DEV COR TEAM, R PROGR ENV DAT AN G
   Raphson J., 1690, ANAL AEQUATIONUM UNI
   Schmidt R, 2001, J MANAGE INFORM SYST, V17, P5, DOI 10.1080/07421222.2001.11045662
   Schneidewind NF, 2000, SEVENTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM - METRICS 2001, PROCEEDINGS, P328, DOI 10.1109/METRIC.2001.915540
   SMITH A, 2007, METALIBRI DIGITAL LI, V1776
   VANHOUWELINGEN JC, 1990, STAT MED, V9, P1303, DOI 10.1002/sim.4780091109
   Verhoef C, 2007, SCI COMPUT PROGRAM, V67, P247, DOI 10.1016/j.scico.2007.01.010
   Verhoef C, 2005, SCI COMPUT PROGRAM, V56, P315, DOI 10.1016/j.scico.2004.08.004
   Verhoef C, 2005, SCI COMPUT PROGRAM, V56, P275, DOI 10.1016/j.scico.2004.08.003
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VERHOEF C, 2004, QUANTIFYING SOFTWARE
   Verner JM, 2007, INFORM SOFTWARE TECH, V49, P181, DOI 10.1016/j.infsof.2006.05.001
   Weill P., 1998, Leveraging the New Infrastructure. How Market Leaders Capitalize on Information Technology
   Weisstein E. W., NEWTONS METHOD
   ZHANG GP, 2003, COMPUTING ARTIFICIAL, V146, P115
NR 55
TC 5
Z9 8
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2009
VL 74
IS 11-12
BP 900
EP 933
DI 10.1016/j.scico.2009.09.001
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 533IX
UT WOS:000272818200002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Audebaud, P
   Paulin-Mohring, C
AF Audebaud, Philippe
   Paulin-Mohring, Christine
TI Proofs of randomized algorithms in COQ
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Mathematics of Program Construction
CY JUL 03-05, 2006
CL Kuressaare, ESTONIA
SP Estonian Minist Educ & Res, Natl Ctr Excellence Programme
DE Randomized algorithms; Proof of partial and total correctness;
   Functional language; Axiomatic semantics; Probability framing;
   Call-by-value; Monadic interpretation
AB Randomized algorithms are widely used for finding efficiently approximated solutions to complex problems, for instance primality testing and for obtaining good average behavior. Proving properties of such algorithms requires subtle reasoning both on algorithmic and probabilistic aspects of programs. Thus, providing tools for the mechanization of reasoning is an important issue. This paper presents a new method for proving properties of randomized algorithms in a proof assistant based on higher-order logic. It is based on the monadic interpretation of randomized programs as probabilistic distributions (Giry, Ramsey and Pfeffer). It does not require the definition of an operational semantics for the language nor the development of a complex formalization of measure theory. Instead it uses functional and algebraic properties of unit interval. Using this model, we show the validity of general rules for estimating the probability for a randomized algorithm to satisfy specified properties. This approach addresses only discrete distributions and gives rules for analyzing general recursive functions.
   We apply this theory to the formal proof of a program implementing a Bernoulli distribution from a coin flip and to the (partial) termination of several programs. All the theories and results presented in this paper have been fully formalized and proved in the CoQ proof assistant. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Paulin-Mohring, Christine] INRIA Saclay Ile France, F-91893 Orsay, France.
   [Audebaud, Philippe] Ecole Normale Super Lyon, LIP, F-69437 Lyon, France.
   [Paulin-Mohring, Christine] CNRS, F-91405 Orsay, France.
   [Paulin-Mohring, Christine] Univ Paris Sud, LRI, F-91405 Orsay, France.
C3 Ecole Normale Superieure de Lyon (ENS de LYON); Centre National de la
   Recherche Scientifique (CNRS); Universite Paris Cite; Universite Paris
   Saclay
RP Paulin-Mohring, C (corresponding author), INRIA Saclay Ile France, Parc Orsay Univ,Zac Vignes,4 Rue Jacques Monod, F-91893 Orsay, France.
EM Philippe.Audebaud@ens-lyon.pr; Christine.Paulin@lri.fr
CR Audebaud P, 2006, LECT NOTES COMPUT SC, V4014, P49, DOI 10.1007/11783596_6
   Escardó MH, 2001, IEEE S LOG, P115, DOI 10.1109/LICS.2001.932488
   Filliâtre JC, 2003, J FUNCT PROGRAM, V13, P709, DOI 10.1017/S095679680200446X
   FILLIATRE JC, 2002, WHY VERIFICATION TOO
   GEUVERS H, 2002, LECT NOTES COMPUT SC, V2277, P79
   Geuvers H, 2007, MATH STRUCT COMP SCI, V17, P3, DOI 10.1017/S0960129506005834
   GIRY M, 1982, LECT NOTES MATH, V915, P69
   Hasan O, 2007, LECT NOTES ARTIF INT, V4603, P3
   Hurd J, 2003, J LOGIC ALGEBR PROGR, V56, P3, DOI 10.1016/S1567-8326(02)00065-6
   Hurd J, 2002, THESIS U CAMBRIDGE
   HURD J, 2002, LNCS, V2410, P230
   Hurd J, 2005, ELECTRON NOTES THEOR, V112, P95, DOI 10.1016/j.entcs.2004.01.021
   Jones C., 1989, Proceedings. Fourth Annual Symposium on Logic in Computer Science (Cat. No.89CH2753-2), P186, DOI 10.1109/LICS.1989.39173
   Jones C., 1989, THESIS U EDINBURGH
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   Kozen Dexter, 1983, P ACM S THEORY COMPU, P291, DOI [10.1145/800061.808758, DOI 10.1145/800061.808758]
   Lawvere F William, 1962, The category of probabilistic mappings
   McIver A., 2005, TECHNICAL MONOGRAPHS
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Morgan C., 1999, South African Computer Journal, P14
   Park SH, 2005, AVSS 2005: ADVANCED VIDEO AND SIGNAL BASED SURVEILLANCE, PROCEEDINGS, P171
   PAULINMOHRING C, 2007, DESCRIPTION COQ CONT
   Pfenning F., 2001, Mathematical Structures in Computer Science, V11, P511, DOI 10.1017/S0960129501003322
   RAMSEY N, 2002, 29 S PRINC PROGR LAN, P154
   Scott D.S., 1972, FORMAL SEMANTICS PRO, V21, P65
   YCART B, 2002, COLLECTION SMAI MATH, V39
NR 26
TC 55
Z9 61
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2009
VL 74
IS 8
SI SI
BP 568
EP 589
DI 10.1016/j.scico.2007.09.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 454GZ
UT WOS:000266671700005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hinze, R
   Löh, A
AF Hinze, Ralf
   Loh, Andres
TI Generic programming in 3D
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 8th International Conference on Mathematics of Program Construction
CY JUL 03-05, 2006
CL Kuressaare, ESTONIA
SP Estonian Minist Educ & Res, Natl Ctr Excellence Programme
DE Generic programming; Type classes; Haskell 98; Language design
ID BOILERPLATE; SCRAP; HASKELL
AB Support for generic programming consists of three essential ingredients: support for overloaded functions, a run-time type representation, and a generic view on data. Different approaches to datatype-generic programming occupy different points in this design space. In this article, we revisit the "Scrap your boilerplate" approach and identify its location within the three-dimensional design space. The characteristic features of "Scrap your boilerplate" are its two generic views, the 'spine' view for consuming and transforming data, and the 'type-spine' view for producing data. We show how to combine these views with different overloading mechanisms and type representations. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Hinze, Ralf] Univ Bonn, Inst Informat 3, D-53117 Bonn, Germany.
   [Loh, Andres] Univ Utrecht, Dept Informat & Comp Sci, NL-3508 TB Utrecht, Netherlands.
C3 University of Bonn; Utrecht University
RP Hinze, R (corresponding author), Univ Oxford, Comp Lab, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM ralf.hinze@comlab.ox.ac.uk; andres@cs.uu.nl
OI Loh, Andres/0000-0002-7492-7293
CR Alimarine A, 2002, LECT NOTES COMPUT SC, V2312, P168
   ALTENKIRCH T, 2003, IFIP C P, V243, P10
   Altenkirch T, 2007, LECT NOTES COMPUT SC, V4719, P209
   [Anonymous], 2003, The Fun of Programming
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   Benke M., 2003, Nordic Journal of Computing, V10, P265
   BIRD R, 1998, LECT NOTES COMPUTER, V1422, P52, DOI DOI 10.1007/BFB0054285
   BRAUN W, 1983, MR834 EINDH U TECHN
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   Claessen K, 2004, J FUNCT PROGRAM, V14, P741, DOI 10.1017/S0956796804005192
   CLARKE D, 2003, IFIP, V243, P21
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P301, DOI 10.1145/291251.289459
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   FEGARAS L, 1996, 23 ACM SIGPLAN SIGAC, P284
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   HARPER R, 1995, 22 ACM S PRINC PROGR, P130
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P1
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P57
   Hinze R, 2004, SCI COMPUT PROGRAM, V51, P117, DOI 10.1016/j.scico.2003.07.001
   Hinze R, 2002, SCI COMPUT PROGRAM, V43, P129, DOI 10.1016/S0167-6423(02)00025-4
   Hinze R., 2000, Journal of Functional Programming, V10, P305, DOI 10.1017/S0956796800003701
   HINZE R, 2006, IAITR20062 U BONN I
   HINZE R, 2001, P 2000 ACM SIGPLAN H, V41, P5
   HINZE R, 1999, P 1999 HASK WKSH OCT
   HINZE R, IHS2TEX
   Hinze R, 2007, LECT NOTES COMPUT SC, V4719, P150
   Hinze R, 2006, LECT NOTES COMPUT SC, V4014, P180, DOI 10.1007/11783596_13
   Hinze R, 2006, J FUNCT PROGRAM, V16, P451, DOI 10.1017/S0956796806006022
   Hinze R, 2006, LECT NOTES COMPUT SC, V3945, P13
   Hinze Ralf., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, POPL '00, P119, DOI [DOI 10.1145/325694.325709, 10.1145/325694.325709]
   HUGHES J, 1999, P 1999 HASK WKSH OCT
   JANSSON P, 1997, 24 ACM SIGPLAN SIGAC, P470
   Jones M. P., 1995, Journal of Functional Programming, V5, P1, DOI 10.1017/S0956796800001210
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   Lämmel R, 2005, ACM SIGPLAN NOTICES, V40, P204, DOI 10.1145/1090189.1086391
   Lämmel R, 2004, ACM SIGPLAN NOTICES, V39, P244, DOI 10.1145/1016848.1016883
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   Loh A., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P133, DOI 10.1145/1140335.1140352
   LOH A, 2004, THESIS UTRECHT U
   Norell U, 2004, LECT NOTES COMPUT SC, V3145, P168
   Oliveira BrunoC. d. S., 2005, HASKELL 05, P98, DOI DOI 10.1145/1088348.1088358
   Pil M, 1999, LECT NOTES COMPUT SC, V1595, P169
   Plasmeijer R, 2006, LECT NOTES COMPUT SC, V4164, P1
   Reig F., 2006, TRENDS FUNCTIONAL PR, V5, P17
   Sulzmann Martin, 2006, P 2006 ACM SIGPLAN W, P55, DOI [10.1145/1159861.1159869, DOI 10.1145/1159861.1159869]
   Trifonov V, 2000, ACM SIGPLAN NOTICES, V35, P82, DOI 10.1145/357766.351248
   *U UTR, 2005, UUCS2005004 U UTR
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
   Weirich S, 2004, J FUNCT PROGRAM, V14, P681, DOI 10.1017/S0956796804005179
   Weirich S, 2001, LECT NOTES COMPUT SC, V2028, P92
   Weirich Stephanie., 2006, Proceedings o fthe 2006 ACM SIGPLAN workshop on Haskell, P1, DOI DOI 10.1145/1159842.1159844
   Zenger C, 1997, THEOR COMPUT SCI, V187, P147, DOI 10.1016/S0304-3975(97)00062-5
NR 54
TC 9
Z9 9
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2009
VL 74
IS 8
SI SI
BP 590
EP 628
DI 10.1016/j.scico.2007.10.006
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 454GZ
UT WOS:000266671700006
DA 2024-07-18
ER

PT J
AU Bianchi, G
   Bonola, M
   Falletta, V
   Proto, FS
   Teofili, S
AF Bianchi, G.
   Bonola, M.
   Falletta, V.
   Proto, F. S.
   Teofili, S.
TI The SPARTA pseudonym and authorization system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Privacy; Trust management; Pseudonym system; Blind signature
ID IDENTIFICATION
AB This paper deals with privacy-preserving (pseudonymized) access to a service resource. In such a scenario, two opposite needs seem to emerge. On one side, the service provider may want to control, in first place, the user accessing its resources, i.e., without being forced to delegate the issuing of access permissions to third parties to meet privacy requirements. On the other side, it should be technically possible to trace back the real identity of a user upon dishonest behavior, and of course, this must be necessary accomplished by an external authority distinct from the provider itself. The framework described in this paper aims at coping with these two opposite needs. This is accomplished through (i) a distributed third-party-based infrastructure devised to assign and manage pseudonym certificates, decoupled from (ii) a two-party procedure, devised to bind an authorization permission to a pseudonym certificate with no third-party involvement. The latter procedure is based on a novel blind signature approach which allows the provider to blindly verify, at service subscription time, that the user possesses the private key of the still undisclosed pseudonym certificate, thus avoiding transferability of the authorization permission. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Bianchi, G.; Bonola, M.; Falletta, V.; Proto, F. S.; Teofili, S.] Univ Roma Tor Vergata, Dipartimento Ingn Elettr, I-00133 Rome, Italy.
C3 University of Rome Tor Vergata
RP Bianchi, G (corresponding author), Univ Roma Tor Vergata, Dipartimento Ingn Elettr, Via Politecn 1, I-00133 Rome, Italy.
EM giuseppe.bianchi@uniroma2.it; marco.bonola@unirorma2.it;
   vincenzo.falletta@uniroma2.it; proto@ing.uniroma2.it;
   simone.teofili@uniroma2.it
OI Bonola, Marco/0000-0002-0434-5538; Bianchi, Giuseppe/0000-0001-7277-7423
CR Andersson C., 2005, 5 IEEE INT S SIGN PR
   [Anonymous], 1995, International Conference on the Theory and Applications of Cryptographic Techniques
   [Anonymous], LNCS
   [Anonymous], 2003, 3588 IETF RFC
   [Anonymous], 2004, P USENIX SEC S
   [Anonymous], 2000, Rethinking public key infrastructures and digital certificates: building in privacy
   AU M, 2005, CRYPTOLOGY EPRINT AR
   Bender A, 2006, LECT NOTES COMPUT SC, V3876, P60
   Benjumea V, 2004, LECT NOTES COMPUT SC, V2947, P402
   Benjumea V, 2006, INTERNET RES, V16, P120, DOI 10.1108/10662240610656474
   BRANDS S, 2002, DIGITAL IDENTITY MAN
   BUSSARD L, 2004, LECT NOTES COMPUTER, V3957, P199
   Camenisch J., 2001, ADV CRYPTOLOGY EUROC
   Camenisch J., 2002, 3 C SEC COMM NETW
   Camenisch Jan., 2002, ACM Computer and Communication Security 2002
   CHAUM D, 1991, LECT NOTES COMPUT SC, V547, P257
   Chaum D., 1983, Advances in Cryptology, Proceedings of Crypto 82, P199
   CHAUM D, 1985, COMMUN ACM, V28, P1030, DOI 10.1145/4372.4373
   CVRCEK D, 2004, LECT NOTES COMPUTER, V3957, P267
   Dodis Y, 2004, LECT NOTES COMPUT SC, V3027, P609
   FEIGE U, 1987, P 19 ACM S THEOR COM, P210
   GIBSON JK, 1991, IEE PROC-E, V138, P407, DOI 10.1049/ip-e.1991.0056
   GOLLMANN D, 2004, LECT NOTES COMPUTER, V3957, P246
   Kilian J, 1998, LECT NOTES COMPUT SC, V1462, P169, DOI 10.1007/BFb0055727
   Lysyanskaya A, 2000, LECT NOTES COMPUT SC, V1758, P184
   NABETH T, 2005, HILDEBRANDT D 2 1 IN
   RIGNEY C, 2000, 2865 RADIUS IETF RFC
   Rivest R.L., 2001, INT C THEOR APPL CRY, P552, DOI DOI 10.1007/3-540-45682-1_32
NR 28
TC 8
Z9 9
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2008
VL 74
IS 1-2
SI SI
BP 23
EP 33
DI 10.1016/j.scico.2008.09.010
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 386PX
UT WOS:000261896200004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Kredel, H
AF Kredel, Heinz
TI On a Java computer algebra system, its performance and applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Conference on Principles and Practices of Programming in
   Java
CY 2006
CL Mannheim, GERMANY
DE computer algebra library; multivariate polynomials
AB This paper considers Java as an implementation language for a starting part of a computer algebra library. It describes a design of basic arithmetic and multivariate polynomial interfaces and classes which are then employed in advanced parallel and distributed Groebner base algorithms and applications. The library is type-safe due to its design with Java's generic type parameters and thread-safe using Java's concurrent programming facilities. We report on the performance of the polynomial arithmetic and on applications built upon the core library. (C) 2007 Elsevier B.V. All rights reserved.
C1 Univ Mannheim, IT Ctr, Mannheim, Germany.
C3 University of Mannheim
RP Kredel, H (corresponding author), Univ Mannheim, IT Ctr, Mannheim, Germany.
EM kredel@rz.uni-mannheim.de
CR ABDALI SK, 1986, P 1986 S SYMB ALG CO, P24
   [Anonymous], 1993, COMPUTATIONAL APPROA
   [Anonymous], THESIS U CAMBRIDGE
   *AP SOFTW FDN, 2003, COMM MATH
   BAUMGARTNER G, 1995, SOFTWARE PRACT EXPER, V25, P863, DOI 10.1002/spe.4380250803
   Bernardin L, 1999, ISSAC 99: PROCEEDINGS OF THE 1999 INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND ALGEBRAIC COMPUTATION, P237, DOI 10.1145/309831.309946
   BOEGE W, 1986, J SYMB COMPUT, V2, P83, DOI 10.1016/S0747-7171(86)80014-1
   BUCHMANN J, 2003, COMPUTER ALGEBRA HDB, P403
   CALMET J, 1996, LECT NOTES COMPUTER, V1128
   COLLINS GE, 1982, ACM SIGSAM B, V12, P19
   CONRAD M, 2002, JAVA CLASS PACKAGE C
   Cox D., 1992, Undergrad. Texts Math
   DAUTELLE JM, 2005, JSCIENCE JAVA TOOLS
   Dragan L, 2005, SEVENTH INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND NUMERIC ALGORITHMS FOR SCIENTIFIC COMPUTING, PROCEEDINGS, P93
   FATEMAN RJ, 2002, DRAFT COMPARING SPEE
   FATEMAN RJ, 1990, P ISSAC 1990, P60
   GREUEL GM, 2003, COMPUTER ALGEBRA HDB, P445
   GRUNTZ D, 1994, GENORIC COMPUTER ALG
   JENKS R.D., 1992, AXIOM SCI COMPUTATIO
   KALTOFEN GE, 2003, COMPUTER ALGEBRA HDB
   KREDEL H, 2005, P A3L ALGR ALG LOG 2, P141
   Kredel H., 2000, JAVA ALGEBRA SYSTEM
   KREDEL H, 2006, ACM INT C P SERIES, P143
   KREDEL H, 2002, THREAD NETZWERK PROG, P2
   KREDEL H, 2003, COMPUTER ALGEBRA HDB, P421
   KUECHLIN W, 1991, LECT NOTES COMPUT SC, V508, P341
   Meyer B., 1986, OOPSLA (First ACM conference on object-oriented programming systems, languages and applications), P391
   Musser D, 2000, LECT NOTES COMPUT SC, V1766, P12
   NICULESCU V, 2003, DESIGN PROPOSAL OBJE
   POLL E, 1999, TYPE SYSTEM ALDOR
   SANTAS PS, 1995, J SYMB COMPUT, V19, P79, DOI 10.1006/jsco.1995.1006
   SCHREINER W, 1993, 6 SIAM C PAR PROC SC, V2, P776
   Schupp S, 2000, LECT NOTES COMPUT SC, V1766, P133
   STANSIFER R, 1990, 9007 J KEPL U
   *SUN MICR INC, 2004, IMPR PROGR EX SPEED
   *SUN MICR INC, 1994, JAV DEV KIT
   VIISSIDES JM, 2004, 19 ANN ACM SIGPLAN C
   Watt StephenM., 2003, HDB COMPUTER ALGEBRA, P265
   WHELAN C, 2003, P PPPJ 2003, P139
   ZIPPEL R, 2001, SPRINGER VERLAG LECT, V722, P303
NR 40
TC 7
Z9 7
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2008
VL 70
IS 2-3
BP 185
EP 207
DI 10.1016/j.scico.2007.07.010
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 278EJ
UT WOS:000254266600007
DA 2024-07-18
ER

PT J
AU Nieuwenhuisen, D
   Kamphuis, A
   Overmars, MH
AF Nieuwenhuisen, D.
   Kamphuis, A.
   Overmars, M. H.
TI High quality navigation in computer games
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE navigation; roadmap; camera movement; groups; computer games
AB Navigation plays an important role in many modern computer games. Currently the motion of entities is often planned using a combination of scripting, grid-search methods, local reactive methods and flocking. In this paper we describe a novel approach, based on a technique originating from robotics, that computes a roadmap of smooth, collision-free navigation paths. Because the vast amount of computation time is spent in the pre-processing phase, navigation during the execution of an application is almost instantaneous. The created roadmap can be queried to obtain high quality paths. Furthermore, the applications of the roadmap are not limited to navigating an entity. Therefore, besides navigation for an entity, two other applications are presented; one for planning the motion of groups of entities and one for creating smooth camera movements through an environment. All applications are based on the same underlying techniques. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Utrecht, Ctr Geometry Imaging & Virtual Environm, Inst Comp & Informat Sci, NL-3584 CH Utrecht, Netherlands.
C3 Utrecht University
RP Nieuwenhuisen, D (corresponding author), Univ Utrecht, Ctr Geometry Imaging & Virtual Environm, Inst Comp & Informat Sci, Padualaan 14, NL-3584 CH Utrecht, Netherlands.
EM dennis@cs.uu.nl; amok@cs.uu.nl; markov@cs.uu.nl
CR [Anonymous], P IEEE INT C ROB AUT
   [Anonymous], GAME DEV C
   BAERT S, MOTION PLANNING USIN
   Bayazit OB, 2003, SPRINGER TRAC ADV RO, V7, P95
   BENTLEY JL, 1975, COMMUN ACM, V18, P509, DOI 10.1145/361002.361007
   Bohlin R., 2000, Proceedings 2000 ICRA. Millennium Conference. IEEE International Conference on Robotics and Automation. Symposia Proceedings (Cat. No.00CH37065), P521, DOI 10.1109/ROBOT.2000.844107
   Boor V, 1999, ICRA '99: IEEE INTERNATIONAL CONFERENCE ON ROBOTICS AND AUTOMATION, VOLS 1-4, PROCEEDINGS, P1018, DOI 10.1109/ROBOT.1999.772447
   Branicky MS, 2001, P IEEE INT C ROB AUT
   Deloura M., 2000, Game Programming Gems
   Geraerts R, 2003, SPRINGER TRAC ADV RO, V7, P43
   Holleman C., 2000, Proceedings 2000 ICRA. Millennium Conference. IEEE International Conference on Robotics and Automation. Symposia Proceedings (Cat. No.00CH37065), P1408, DOI 10.1109/ROBOT.2000.844795
   Isto P, 2002, 2002 IEEE/RSJ INTERNATIONAL CONFERENCE ON INTELLIGENT ROBOTS AND SYSTEMS, VOLS 1-3, PROCEEDINGS, P2323, DOI 10.1109/IRDS.2002.1041614
   KAMPHUIS A, 2004, IN PRESS EUROGRAPHIC
   KAVRAKI L, 1994, IEEE INT CONF ROBOT, P2138, DOI 10.1109/ROBOT.1994.350966
   Kavraki LE, 1996, IEEE T ROBOTIC AUTOM, V12, P566, DOI 10.1109/70.508439
   LAMIRAUX F, 2004, IN PRESS IEEE T ROBO
   Millerson G., 1973, TV Camera Operation
   Nieuwenhuisen D, 2004, IEEE INT CONF ROBOT, P3870, DOI 10.1109/ROBOT.2004.1308871
   Nieuwenhuisen D, 2004, IEEE INT CONF ROBOT, P446, DOI 10.1109/ROBOT.2004.1307190
   Nissoux C., 1999, Proceedings 1999 IEEE/RSJ International Conference on Intelligent Robots and Systems. Human and Environment Friendly Robots with High Intelligence and Emotional Quotients (Cat. No.99CH36289), P1316, DOI 10.1109/IROS.1999.811662
   PINTER M, MORE REALISITIC PATH
   Reynolds CW., 1987, SIGGRAPH Comput. Graph., V21, P25, DOI [10.1145/37402.37406, DOI 10.1145/37402.37406]
   Russell S., 2020, ARTIF INTELL
   STOUT W, SMART MOVES INTELLIG
   Svestka P, 1998, ROBOT AUTON SYST, V23, P125, DOI 10.1016/S0921-8890(97)00033-X
   van den Berg J. P., 2004, 2004 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS) (IEEE Cat. No.04CH37566), P1598
   VANDENBERG JP, 2004, UUCS2004069
   Wayne Mike., 1997, THEORISING VIDEO PRA
   Wilmarth SA, 1999, ICRA '99: IEEE INTERNATIONAL CONFERENCE ON ROBOTICS AND AUTOMATION, VOLS 1-4, PROCEEDINGS, P1024, DOI 10.1109/ROBOT.1999.772448
NR 29
TC 24
Z9 34
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2007
VL 67
IS 1
BP 91
EP 104
DI 10.1016/j.scico.2006.06.008
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 187HK
UT WOS:000247838100006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Cordy, JR
AF Cordy, James R.
TI The TXL source transformation language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th Workshop on Language Descriptions,Tools and Applications (LDTA 04)
CY 2004
CL Barcelona, SPAIN
DE source transformation; functional programming; term rewriting; grammars
ID PROGRAMMING LANGUAGE; GRAMMARS; SYSTEM
AB TXL is a special-purpose programming language designed for creating, manipulating and rapidly prototyping language descriptions, tools and applications. TXL is designed to allow explicit programmer control over the interpretation, application, order and backtracking of both parsing and rewriting rules. Using first order functional programming at the higher level and term rewriting at the lower level, TXL provides for flexible programming of traversals, guards, scope of application and parameterized context. This flexibility has allowed TXL users to express and experiment with both new ideas in parsing, such as robust, island and agile parsing, and new paradigms in rewriting, such as XML mark-up, rewriting strategies and contextualized rules, without any change to TXL itself. This paper outlines the history, evolution and concepts of TXL with emphasis on its distinctive style and philosophy, and gives examples of its use in expressing and applying recent new paradigms in language processing. (c) 2006 Elsevier B.V. All rights reserved.
C1 Queens Univ, Sch Comp, Kingston, ON, Canada.
C3 Queens University - Canada
RP Cordy, JR (corresponding author), Queens Univ, Sch Comp, Kingston, ON, Canada.
EM cordy@cs.queensu.ca
RI Cordy, James R/G-9736-2011
CR [Anonymous], FUNDAM INF
   [Anonymous], 1962, SOV MATH DOKL
   AUGUSTON M, 1991, LECT NOTES COMPUT SC, V502, P529
   BARNARD DT, 1982, INT J COMPUT INF SCI, V11, P231, DOI 10.1007/BF00999442
   BARNARD DT, 1975, CSRG52 U TOR
   Baxter ID, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P3, DOI 10.1109/SCAM.2002.1134100
   Bergstra J. A., 1989, ALGEBRAIC SPECIFICAT
   Biggerstaff T J, 1989, IEEE COMPUT, V22, P36
   BLOSTEIN D, 2002, P 16 IAPR INT C PATT, V3, P127
   Borovansky P., 1998, Electronic Notes in Theoretical Computer Science, V15, DOI 10.1016/S1571-0661(05)82552-6
   Bray T., Extensible markup language (xml) 1.0
   CAI J, 1993, ACM SOFTWARE ENG NOT, V18, P71
   CARMICHAEL I, 1990, THESIS QUJEENS U KIN
   Clark James, 1999, Xsl transformations (xslt)
   CORDY JR, 1991, COMPUT LANG, V16, P97, DOI 10.1016/0096-0551(91)90019-6
   Cordy JR, 2003, PROG COMPREHEN, P144
   Cordy JR, 2002, INFORM SOFTWARE TECH, V44, P827, DOI 10.1016/S0950-5849(02)00104-0
   CORDY JR, 1995, P CASE 95 WORKSH SOF
   CORDY JR, 1988, TXL PROGRAMMING LANG
   CORDY JR, 1990, P 1990 IEEE INT C CO, P145
   Dean TR, 2001, PROC IEEE INT CONF S, P622, DOI 10.1109/ICSM.2001.972779
   DEAN TR, 2003, J AUTOMATED SOFTWARE, V10, P311
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   HALPERN C, 1986, THESIS U TORONTO
   Holt R., 1987, The Turing programming language: design and definition
   HOLT RC, 1988, COMMUN ACM, V31, P1410, DOI 10.1145/53580.53581
   JENKINS MA, 1989, NIAL SOFTWARE PRACTI, V19, P111
   KOHLBECKER E, 1984, 157 IND U
   Kort J, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P161, DOI 10.1109/SCAM.2003.1238042
   MALTON A, 1993, COMPUT LANG, V19, P157, DOI 10.1016/0096-0551(93)90031-U
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   PEREIRA FCN, 1980, ARTIF INTELL, V13, P231, DOI 10.1016/0004-3702(80)90003-X
   PURTILO JJ, 1989, COMMUN ACM, V32, P1467, DOI 10.1145/76380.76387
   RAMESH R, 1992, J ACM, V39, P295, DOI 10.1145/128749.128752
   Tomita M., 1987, Computational Linguistics, V13, P31
   Van den Brand MGJ, 2003, ACM T SOFTW ENG METH, V12, P152, DOI 10.1145/941566.941568
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Van Deursen A., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P40, DOI 10.1109/ICSM.1999.792497
   VANDENBRAND M, 2002, P 11 INT C COMP CONS, P143
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser Eelco., 2001, REWRITING TECHNIQUES, V2051, P357, DOI DOI 10.1007/3-540-45127-7_27.URL
   Zanibbi R, 2002, IEEE T PATTERN ANAL, V24, P1455, DOI 10.1109/TPAMI.2002.1046157
NR 42
TC 184
Z9 227
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2006
VL 61
IS 3
BP 190
EP 210
DI 10.1016/j.scico.2006.04.002
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 055UC
UT WOS:000238475000002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Dai, LR
   Cooper, K
AF Dai, Lirong
   Cooper, Kendra
TI Modeling and performance analysis for security aspects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Systems/Software Architectures
CY JUN, 2005
CL Las Vegas, NV
AB The problem of effectively designing and analyzing software to realize non-functional requirements is an important research topic. The significant benefits of such work include detecting and removing defects earlier, reducing development time and cost while improving the system's quality. The Formal Design Analysis Framework (FDAF) is an aspect-oriented approach that supports the design and analysis of multiple non-functional properties for distributed, real-time systems. In this paper, a security attribute, data origin authentication, is defined as a reusable aspect based on its security pattern definition. The FDAF provides a UML extension to weave the security aspect into a UML architecture design. This is accomplished by abstracting Aspect-Oriented Programming concepts join point and advice up to the design level. The FDAF supports the automated translation of a UML architecture design into Rapide [D.C. Luckham, J.J. Kenney, L.M. Augustin, J. Vera, D. Bryan, W. Mann, Specification and analysis of system architecture using Rapide, IEEE Transactions on Software Engineering 21 (4) (1995) 336-354], a formal architecture description language, allowing the simulation of a system's response time. Thus, the response time of a design with and without the security aspect can be respectively analyzed, and the performance cost of this aspect can be predicted. One of the translation algorithms, which have been implemented in the FDAF tool support, and its proof are presented. The FDAF approach is illustrated using a Domain Name System example. (c) 2006 Elsevier B.V. All rights reserved.
C1 Seattle Univ, Dept Comp Sci & Software Engn, Seattle, WA 98122 USA.
   Univ Texas, Dept Comp Sci, Richardson, TX 75083 USA.
C3 Seattle University; University of Texas System; University of Texas
   Dallas
RP Dai, LR (corresponding author), Seattle Univ, Dept Comp Sci & Software Engn, 901 12th Ave,POB 222000, Seattle, WA 98122 USA.
EM daia@seattleu.edu; kcooper@utdallas.edu
CR [Anonymous], 1989, 74982 ISO
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   BALSAMO S, 2002, P 3 INT WORKSH SOFTW, P190
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Chung L., 2000, Non-functional Requirements in Software Engineering
   CLARK T, 1998, P 2 NO FORM METH WOR
   Clarke Siobhan., 2005, ASPECT ORIENTED SOFT, P425
   COOPER K, 2004, UTDCS3104
   FILMAN R, 2005, ASPECT ORIENTED SOFT
   GOBEL S, 2004, P 3 INT C ASP OR SOF, P74
   KELLER S, 1990, TUTORIAL SYSTEM SOFT, P145
   KYAS M, P SEM FDN ENG DES LA
   Laddad R., 2003, ASPECTJ ACTION PRACT
   LANO K, 2000, P RIG OBJ OR METH RO
   LUCKHAM DC, 1995, IEEE T SOFTWARE ENG, V21, P336, DOI 10.1109/32.385971
   MASSONI R, 2005, P 3 INT WORKSH CRIT
   McUmber WE, 2001, PROC INT CONF SOFTW, P433, DOI 10.1109/ICSE.2001.919116
   Meyer B., 1990, INTRO THEORY PROGRAM
   MOCKAPETRIS PV, 1987, STD0013 IETF
   MONROE RT, 1998, CMUCS98163 SCH COMP
   OBER I, 2003, P 10 INT WORKSH ABST, P356
   *OBJ MAN GROUP, 2003, PTC20030302 OMG
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   *SOFTW DES GROUP, 2002, ALL AN ARCH
   ter Hofstede AHM, 1998, INFORM SOFTWARE TECH, V40, P519, DOI 10.1016/S0950-5849(98)00078-0
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   Win B., 2005, Aspect-Oriented Software Development, P633
NR 27
TC 8
Z9 10
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2006
VL 61
IS 1
BP 58
EP 71
DI 10.1016/j.scico.2005.11.006
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 043QP
UT WOS:000237616700007
DA 2024-07-18
ER

PT J
AU Gössler, G
   Sifakis, J
AF Gössler, G
   Sifakis, J
TI Composition for component-based modeling
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
ID PROGRAMMING LANGUAGE
AB We propose a framework for component-based modeling using an abstract layered model for components. A component is the superposition of two models: a behavior model and an interaction model. Interaction models describe architectural constraints induced by connectors between components.
   We propose and analyze general requirements for component composition that motivated and guided the development of the framework. We define an associative and commutative composition operator on components encompassing heterogeneous interaction. As a particular instance of the proposed framework, we consider components where behavior models are transition systems and interaction models are described by priority relations on interactions. This leads to a concept of "flexible" composition different from usual composition in that it preserves deadlock-freedom and is appropriate for correctness by construction. Nevertheless, flexible composition is a partial operation. Product systems should be interaction safe in the sense that they do not violate constraints of the interaction model.
   We propose results ensuring correctness by construction of a system from properties of its interaction model and of its components. The properties considered include global deadlock-freedom, individual deadlock-freedom of components, and interaction safety. (C) 2004 Elsevier B.V. All rights reserved.
C1 INRIA, Rhone Alpes, France.
C3 Inria
EM goessler@inrialpes.fr; sifakis@imag.fr
CR Altisen K, 2002, REAL-TIME SYST, V23, P55, DOI 10.1023/A:1015346419267
   BALARIN F, 2002, LNCS, V2549
   BENVENISTE A, 1991, SCI COMPUT PROGRAM, V16, P103, DOI 10.1016/0167-6423(91)90001-E
   BERGSTRA JA, 1985, THEOR COMPUT SCI, V37, P77, DOI 10.1016/0304-3975(85)90088-X
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Bornot S, 2000, INFORM COMPUT, V163, P172, DOI 10.1006/inco.2000.2999
   Bornot S, 2000, LECT NOTES COMPUT SC, V1785, P109
   de Alfaro L., 2001, LECT NOTES COMPUTER, V2211, P148
   de Roever Willem-Paul, 2001, Concurrency Verification: Introduction to Compositional and Noncompositional Proof Methods
   DEROEVER WP, 1997, LNCS, V1536
   GOSSLER G, 2003, LNCS, V2852
   GRAF S, 2004, LNCS, V2989
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hoare CAR., 1985, Communicating Sequential Processes
   Kloukinas C, 2003, LECT NOTES COMPUT SC, V2855, P274
   LAMPORT L, 1983, ACM T PROGR LANG SYS, V5, P190, DOI 10.1145/69624.357207
   LEE EA, 2001, MO111 UCBERL
   Maler O., 1995, STACS 95. 12th Annual Symposium on Theoretical Aspects of Computer Science. Proceedings, P229
   MARANINCHI F, 1992, LNCS, V630
   Milner R., 1989, Communication and concurrency
   MILNER R, 1983, THEOR COMPUT SCI, V25, P267, DOI 10.1016/0304-3975(83)90114-7
   *OMG WORK GROUP, 2001, AD20010614 OMG
NR 23
TC 112
Z9 120
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 161
EP 183
DI 10.1016/j.scico.2004.05.014
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Kortenkamp, U
   Materlik, D
AF Kortenkamp, U
   Materlik, D
TI Geometry teaching in wireless classroom environments using Java and J2ME
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; J2ME; wireless classroom; geometry; rendezvous; Cinderella;
   zaurus; collaborative environments
AB Interactive geometry software is established as an important tool in geometry and math education. We present our research on possible ways to use such software in wireless classroom environments. In particular, we address user interface issues on portable devices and describe how we maintain a common code base for both desktop and mobile environments, thus increasing the stability of the application. We also report on our empirical data comparing different Java virtual machines that are available for portable devices using a prototype implementation of the Interactive Geometry Software Cinderella for J2ME. (C) 2003 Published by Elsevier B.V.
C1 TU Berlin, Inst Math, D-10623 Berlin, Germany.
   FU Berlin, Inst Informat, D-14195 Berlin, Germany.
C3 Technical University of Berlin; Free University of Berlin
RP Kortenkamp, U (corresponding author), TU Berlin, Inst Math, Str 17 Juni 136, D-10623 Berlin, Germany.
EM kortenkamp@math.tu-berlin.de; materlik@inf.fu-berlin.de
RI Kortenkamp, Ulrich/O-6749-2019
OI Kortenkamp, Ulrich/0000-0002-5577-8819
CR [Anonymous], FDN COMPUTATIONAL MA
   Beck Kent, 1999, Extreme Programming Explained: Embrace Change
   DYE B, 2003, MATHSNET
   GUIMBRETIERE F, 2000, CSTR200001
   Hatcher E., 2002, JAVA DEV ANT
   *INS SOL, 2003, JEOD VM INF
   Jackiw N., 1991, The Geometer's Sketchpad
   *JETBR INC, 2003, INTELLIJ IDEA VERS 3
   KORTENKAMP U, 2003, BETA PACKAGE CINDERE
   KORTENKAMP U, 1999, ERFAHRUNGEN JAVA, P381
   KORTENKAMP U, 1998, P ED MEDIA ED TELECO, P790
   KORTENKAMP U, 1999, THESIS ETH ZURICH
   Laborde J.-M., 1993, CABRI GEOMETRY
   MATERLIK D, 2003, THESIS FREIE U BERLI
   *MOT INC SUN MICR, 2003, MOB INF DEV PROF V2
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   *PREEMPT SOL, 2003, DASHOPRO
   Richter-Gebert J., 1999, INTERACTIVE GEOMETRY
   RICHTERGEBERT J, 1999, INTERAKTIVE GEOMETRI
   ROJAS R, 2001, FORSCH ENTWICKL, V16, P159
   *SUN MICR, 2003, PERS PROF ZAUR EARL
   TIP F, 1999, P 14 AN ACM SIGPLAN
   VANHOFF A, 2003, JAVA IMPLEMENTATION
NR 23
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2004
VL 53
IS 1
BP 71
EP 85
DI 10.1016/j.scico.2004.02.006
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 849KT
UT WOS:000223538200006
DA 2024-07-18
ER

PT J
AU Coughlin, N
   Smith, G
AF Coughlin, Nicholas
   Smith, Graeme
TI Compositional noninterference on hardware weak memory models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Information flow; Concurrency; Weak memory models
AB Weak memory models are employed by all modern multicore processors to improve their performance. For most code, the effects of such memory models can be largely ignored by the programmer. However, for low-level operating system or library code which can include data races for efficiency, these effects may lead to information leaks which cannot be detected without taking the specific memory model into account. While there have been some efforts to develop information flow logics which can detect such leaks, the existing approaches are either not compositional, hindering scalability, or support only a limited form of compositionality, reducing applicability to programs with only simple interactions between threads.This paper is the first to provide a compositional logic for enforcing noninterference properties on more complex concurrent algorithms, while taking into account the underlying hardware memory model. It uses rely/guarantee reasoning to establish how security classifications may be modified by concurrent threads, and considers effects of out-of-order execution allowed on modern multicore processors. The results have been formalised and proved sound in the Isabelle/HOL theorem prover, and automated in a prototype symbolic execution tool. Crown Copyright (c) 2022 Published by Elsevier B.V. All rights reserved.
C1 [Coughlin, Nicholas] Def Sci & Technol Grp, Canberra, ACT, Australia.
   [Coughlin, Nicholas; Smith, Graeme] Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld, Australia.
C3 Defence Science & Technology; University of Queensland
RP Coughlin, N (corresponding author), Def Sci & Technol Grp, Canberra, ACT, Australia.; Coughlin, N (corresponding author), Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld, Australia.
EM s4320589@student.uq.edu.au
RI ; Smith, Graeme/F-9960-2014
OI Coughlin, Nicholas/0000-0001-8758-0666; Smith,
   Graeme/0000-0003-1019-4761
FU Australian Research Council [DP160102457]
FX Acknowledgements Thanks to Kirsten Winter for many insightful discussion
   on this work, and to Liam Kent for implementing the symbolic execution
   tool. This work was supported by Australian Research Council Discovery
   Grant DP160102457.
CR [Anonymous], 2011, Synthesis Lectures on Computer Architecture, DOI 10.2200/S00346ED1V01Y201104CAC016
   Apt KR, 2019, FORM ASP COMPUT, V31, P751, DOI 10.1007/s00165-019-00501-3
   Askarov A, 2015, 2015 IEEE 28TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM CSF 2015, P137, DOI 10.1109/CSF.2015.17
   Atig MF, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P7, DOI 10.1145/1706299.1706303
   Colvin R.J., 2018, ARXIV181200996 CORR
   Colvin RJ, 2018, LECT NOTES COMPUT SC, V10951, P240, DOI 10.1007/978-3-319-95582-7_14
   Coughlin N., 2021, LECT NOTES COMPUTER
   Coughlin N, 2020, P IEEE COMPUT SECUR, P380, DOI 10.1109/CSF49147.2020.00034
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ernst G, 2019, LECT NOTES COMPUT SC, V11562, P208, DOI 10.1007/978-3-030-25543-5_13
   Flur S, 2016, ACM SIGPLAN NOTICES, V51, P608, DOI 10.1145/2914770.2837615
   Frumin D., 2021, 42 IEEE S SEC PRIV
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Gordon CS, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2499370.2462160
   Jones C. B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P321
   Karbyshev A, 2018, LECT NOTES COMPUT SC, V10804, P53, DOI 10.1007/978-3-319-89722-6_3
   Liang HJ, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P455
   Lourenço L, 2015, ACM SIGPLAN NOTICES, V50, P317, DOI [10.1145/2775051.2676994, 10.1145/2676726.2676994]
   Mantel H, 2015, LECT NOTES COMPUT SC, V9527, P201, DOI 10.1007/978-3-319-27436-2_12
   Mantel H, 2014, P IEEE CSFW, P80, DOI 10.1109/CSF.2014.14
   Mantel H, 2011, 2011 IEEE 24TH COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P218, DOI 10.1109/CSF.2011.22
   Moir Mark., 2004, Handbook of Data Structures and Applications, p47
   Murray T.C., 2015, P 10 ACM WORKSH PROG, P43
   Murray T, 2018, 2018 3RD IEEE EUROPEAN SYMPOSIUM ON SECURITY AND PRIVACY (EUROS&P 2018), P16, DOI 10.1109/EuroSP.2018.00010
   Murray T, 2016, P IEEE CSFW, P417, DOI 10.1109/CSF.2016.36
   Nelson L, 2019, PROCEEDINGS OF THE TWENTY-SEVENTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES (SOSP '19), P225, DOI 10.1145/3341301.3359641
   Pulte C, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158107
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sabelfeld A, 2000, P IEEE CSFW, P200, DOI 10.1109/CSFW.2000.856937
   Sarkar S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P175
   Schoepe D, 2020, P IEEE COMPUT SECUR, P79, DOI 10.1109/CSF49147.2020.00014
   Sewell P, 2010, COMMUN ACM, V53, P89, DOI 10.1145/1785414.1785443
   Sigurbjarnarson H, 2018, PROCEEDINGS OF THE 13TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P287
   Smith Graeme, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P539, DOI 10.1007/978-3-030-30942-8_32
   Vaughan JA, 2012, P IEEE CSFW, P19, DOI 10.1109/CSF.2012.20
   Winter K, 2021, P IEEE COMPUT SECUR, P33, DOI 10.1109/CSF51468.2021.00017
   Zdancewic S, 2003, P IEEE CSFW, P29, DOI 10.1109/CSFW.2003.1212703
NR 37
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2022
VL 217
AR 102779
DI 10.1016/j.scico.2022.102779
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0D6NG
UT WOS:000776109200003
DA 2024-07-18
ER

PT J
AU Yan, RJ
   Chen, YH
   Gao, HY
   Yan, J
AF Yan, Rongjie
   Chen, Yuhang
   Gao, Hongyu
   Yan, Jun
TI Test case prioritization with neuron valuation based pattern
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Deep neural network; Test case prioritization; Classifier;
   Characteristics extraction
AB Deep neural networks (DNNs) have been increasingly adopted in various applications. Systematic verification and validation are essential techniques to guarantee the quality of such systems. Testing is one of the feasible solutions for system validation. However, testing DNNs usually requires a large number of test cases and leads to the high labeling cost. Meanwhile, the test cases may contain various noisy data, which also increases the burden of testing. In this paper, we put forwards a test case prioritization method for DNN-based classifiers, which assigns high priorities to those cases that can lead to problematic classifications. The test cases are prioritized w.r.t. the pattern extracted from the neuron outputs. The difference between the pattern acquired from the training set and the neurons matched from a given input determines the priority of the input. For a trained model, the method consists of two steps. First, we collect neuron output values over the training set and construct a neuron-based pattern for every class of training samples. Second, the metrics are computed according to the comparison between neuron output values of the DNN model from an input and the selected pattern. We carry out the experimentation over three popular datasets with various neural network structures. The extensive experimental results demonstrate that the efficiency and the generalizability of the prioritization method outperform most of the existing techniques. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Yan, Rongjie; Yan, Jun] ISCAS, State Key Lab Comp Sci, Beijing, Peoples R China.
   [Chen, Yuhang; Yan, Jun] ISCAS, Technol Ctr Software Engn, Beijing, Peoples R China.
   [Gao, Hongyu] Beijing Univ Technol, Coll Comp, Beijing, Peoples R China.
   [Yan, Rongjie; Chen, Yuhang; Yan, Jun] Univ Chinese Acad Sci, Beijing, Peoples R China.
C3 Chinese Academy of Sciences; Institute of Software, CAS; Chinese Academy
   of Sciences; Institute of Software, CAS; Beijing University of
   Technology; Chinese Academy of Sciences; University of Chinese Academy
   of Sciences, CAS
RP Yan, J (corresponding author), ISCAS, State Key Lab Comp Sci, Beijing, Peoples R China.
EM yanjun@ios.ac.cn
OI Chen, Yuhang/0000-0002-8421-190X
FU Key Research Program of Frontier Sciences, CAS [QYZDJ-SSWJSC036];
   CAS-INRIA major project [171311KYSB20170027]
FX This work has been partly funded by Key Research Program of Frontier
   Sciences, CAS, under Grant No. QYZDJ-SSWJSC036, and the CAS-INRIA major
   project under No. 171311KYSB20170027.
CR Benesty J, 2009, SPRINGER TOP SIGN PR, V2, P37, DOI 10.1007/978-3-642-00296-0_5
   Byun T, 2019, 2019 IEEE INTERNATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE TESTING (AITEST), P63, DOI 10.1109/AITest.2019.000-6
   Cheng CH, 2019, DES AUT TEST EUROPE, P300, DOI [10.23919/DATE.2019.8714971, 10.23919/date.2019.8714971]
   Elbaum S, 2002, IEEE T SOFTWARE ENG, V28, P159, DOI 10.1109/32.988497
   Fraser G., 2019, HDB SOFTWARE ENG, P123
   Hendrycks Dan, 2017, INT C LEARNING REPRE
   Henzinger TA, 2020, FRONT ARTIF INTEL AP, V325, P2433, DOI 10.3233/FAIA200375
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kim J, 2019, PROC INT CONF SOFTW, P1039, DOI 10.1109/ICSE.2019.00108
   Krizhevsky A, CIFAR 10
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Ma L, 2018, PROC INT SYMP SOFTW, P100, DOI 10.1109/ISSRE.2018.00021
   Pei KX, 2018, GETMOBILE-MOB COMPU, V22, P36, DOI 10.1145/3308755.3308767
   Singh G, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290354
   Sun Y., ARXIV PREPRINT ARXIV
   Sun YC, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: COMPANION PROCEEDINGS (ICSE-COMPANION 2019), P111, DOI 10.1109/ICSE-Companion.2019.00051
   Tian YC, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P303, DOI 10.1145/3180155.3180220
   Weng TW, 2018, PR MACH LEARN RES, V80
   Wong WE, 2016, IEEE T SOFTWARE ENG, V42, P707, DOI 10.1109/TSE.2016.2521368
   Xiao H., ARXIV PREPRINT ARXIV
   Yan SA, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P775, DOI 10.1145/3368089.3409671
   Yang Feng, 2020, ISSTA '20: Proceedings of the 29th ACM SIGSOFT International Symposium on Software Testing and Analysis, P177, DOI 10.1145/3395363.3397357
   Zhang J M., IEEE T SOFTWARE ENG
   Zhang K, 2020, 2020 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2020), P81, DOI 10.1109/TASE49443.2020.00020
   Zhang MS, 2018, IEEE INT CONF AUTOM, P132, DOI 10.1145/3238147.3238187
NR 25
TC 8
Z9 10
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102761
DI 10.1016/j.scico.2021.102761
EA DEC 2021
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600007
DA 2024-07-18
ER

PT J
AU Türker, UC
   Hierons, RM
   Jourdan, GV
AF Turker, Uraz Cengiz
   Hierons, Robert M.
   Jourdan, Guy-Vincent
TI Minimizing Characterizing sets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based testing; Characterizing set; Complexity
ID FINITE-STATE MACHINES; TEST-GENERATION; FORMAL METHODS; SELECTION;
   DESIGN
AB A characterizing set (CS) for a deterministic finite state machine (FSM) M is a set of input sequences that, between them, separate (distinguish) all of the states of M. CSs are used within several test generation techniques that return test suites with guaranteed fault detection power. The number of input sequences in a CS directly affects the cost of applying the resultant test suite. In this paper, we study the complexity of decision problems associated with deriving a smallest CS from an FSM, showing that checking the existence of a CS with K sequences is PSPACE-complete. We also consider the length of a CS, which is the sum of the lengths of the input sequences in the CS. It transpires that the problem of deciding whether there is a CS with length at most K is NP-complete. Motivated by these results, we introduce a heuristic to construct a CS, from a deterministic FSM, with the aim of minimizing the number of input sequences. We evaluated the proposed algorithm by assessing its effect when used within a classical test generation algorithm (the W-method). In the evaluation, we used both randomly generated FSMs and benchmark FSMs. The results are promising, with the proposed algorithm reducing the number of test sequences by 37.3% and decreasing the total length of the test suites by 34.6% on average. (C) 2021 Published by Elsevier B.V.
C1 [Turker, Uraz Cengiz] Univ Leicester, Sch Informat, Leicester, Leics, England.
   [Hierons, Robert M.] Univ Sheffield, Dept Comp Sci, Sheffield, S Yorkshire, England.
   [Jourdan, Guy-Vincent] Univ Ottawa, Fac Engn, Sch Elect Engn & Comp Sci, Ottawa, ON, Canada.
C3 University of Leicester; University of Sheffield; University of Ottawa
RP Türker, UC (corresponding author), Univ Leicester, Sch Informat, Leicester, Leics, England.
EM u.c.turker@leicester.ac.uk; r.hierons@sheffield.ac.uk;
   gjourdan@uottawa.ca
RI Turker, Uraz/JDN-0220-2023
OI Turker, Uraz/0000-0001-5976-1945; Hierons, Robert/0000-0002-4771-1446
FU SPF [EP/V026801/2] Funding Source: UKRI
CR Aho A., 1986, SER ADDISON WESLEY S
   Aho A.V., 1988, P IEEE 8 INT S PROT, P75
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   [Anonymous], 1999, Testing Object-Oriented Systems: Models, Patterns, and Tools
   [Anonymous], 1964, 5 ANN S SWITCH CIRC, DOI DOI 10.1109/SWCT.1964.8
   [Anonymous], 1971, Fault Detection in Digital Circuits
   Betin-Can A, 2004, 19TH INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P248, DOI 10.1109/ASE.2004.1342742
   Brglez F., 1996, ACM SIGMOD BENCHMARK
   Brinksma Ed., 1988, PROTOCOL SPECIFICATI, VVIII, P63
   Bulut K., 2019, LECT NOTES COMPUTER, P72
   Chen TY, 1996, INFORM PROCESS LETT, V60, P135, DOI 10.1016/S0020-0190(96)00135-4
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Cohen J., 1988, STAT POWER ANAL BEHA
   DAHBURA AT, 1990, P IEEE, V78, P1317, DOI 10.1109/5.58319
   Dorofeeva R, 2005, LECT NOTES COMPUT SC, V3731, P204
   Dorofeeva R, 2010, INFORM SOFTWARE TECH, V52, P1286, DOI 10.1016/j.infsof.2010.07.001
   El-Fakih K., 2012, PROGRAM COMPUT SOFTW, V4, P1608
   Friedman A., 1971, Computer Applications in Electrical Engineering Series
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   Garey M.R., 1979, COMPUTERS INTRACTABI
   Gill A., 1962, Introduction to the Theory of Finite-State Machines
   GONENC G, 1970, IEEE T COMPUT, VC 19, P551, DOI 10.1109/T-C.1970.222975
   Grieskamp W, 2011, SOFTW TEST VERIF REL, V21, P55, DOI 10.1002/stvr.427
   Güniçen C, 2012, COMPUTER AND INFORMATION SCIENCES II, P487, DOI 10.1007/978-1-4471-2155-8_62
   Haydar M, 2004, LECT NOTES COMPUT SC, V3235, P115
   Hierons RM, 2004, INFORM PROCESS LETT, V90, P287, DOI 10.1016/j.ipl.2004.03.003
   Hierons RM, 2016, IEEE T COMPUT, V65, P3370, DOI 10.1109/TC.2016.2532869
   HSIEH EP, 1971, IEEE T COMPUT, VC 20, P1152, DOI 10.1109/T-C.1971.223100
   Huistra D, 2018, LECT NOTES COMPUT SC, V11119, P162, DOI 10.1007/978-3-030-00244-2_11
   Kohavi Z., 1978, Switching and Finite State Automata Theory
   Koufareva I., 2002, JOINT B NOVOSIBIRSK, P69
   Lee D, 1996, P IEEE, V84, P1090, DOI 10.1109/5.533956
   Lee D, 1996, IEEE T COMMUN, V44, P631, DOI 10.1109/26.494307
   LEE D, 1994, IEEE T COMPUT, V43, P306, DOI 10.1109/12.272431
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Low S. H., 1993, Proceedings 1993 International Conference on Network Protocols, P368, DOI 10.1109/ICNP.1993.340890
   Luo G., 1995, Protocol Test Systems. 7th Workshop. 7th IFIP WG 6.1 International Workshop on Protocol Test Systems, P95
   Naik K, 1997, IEEE ACM T NETWORK, V5, P585, DOI 10.1109/90.649519
   Neider Daniel, 2019, Models, Mindsets, Meta. The What, the How, and the Why Not? Essays Dedicated to Bernhard Steffen on the Occasion of His 60th Birthday. Lecture Notes in Computer Science (LNCS 11200), P390, DOI 10.1007/978-3-030-22348-9_23
   PETRENKO A, 1994, IFIP TRANS C, V19, P363
   Petrenko A, 2005, IEEE T COMPUT, V54, P1154, DOI 10.1109/TC.2005.152
   Petrenko A., 1993, IFIP Transactions C (Communication Systems), VC-19, P157
   Pomeranz I, 1997, IEEE T COMPUT, V46, P783, DOI 10.1109/12.599899
   Rothermel G, 2002, SOFTW TEST VERIF REL, V12, P219, DOI 10.1002/stvr.256
   Rothermel G, 1996, IEEE T SOFTWARE ENG, V22, P529, DOI 10.1109/32.536955
   SABNANI K, 1988, COMPUT NETWORKS ISDN, V15, P285, DOI 10.1016/0169-7552(88)90064-5
   SIDHU DP, 1989, IEEE T SOFTWARE ENG, V15, P413, DOI 10.1109/32.16602
   Simao A, 2012, SOFTW TEST VERIF REL, V22, P435, DOI 10.1002/stvr.452
   Soucha M., 1996, FINITE STATE MACHINE
   Teetor P., 2011, R COOKBOOK
   Türker UC, 2014, LECT NOTES COMPUT SC, V8763, P32, DOI 10.1007/978-3-662-44857-1_3
   Türker UC, 2014, FORM METHOD SYST DES, V44, P264, DOI 10.1007/s10703-014-0205-0
   Ural H, 1993, IEEE ACM T NETWORK, V1, P358, DOI 10.1109/90.234857
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Vasilevskii M.P., 1973, CYBERNETICS, V4, P653
   Vuong S.T., 1989, 2 INT WORKSH PROT TE
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Yang N, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P253, DOI [10.1109/SANER.2019.8668007, 10.1109/saner.2019.8668007]
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
NR 59
TC 0
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2021
VL 208
AR 102645
DI 10.1016/j.scico.2021.102645
EA APR 2021
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF6EZ
UT WOS:000652847700002
OA Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Díaz, E
   Panach, JI
   Rueda, S
   Ruiz, M
   Pastor, O
AF Diaz, Eduardo
   Panach, Jose Ignacio
   Rueda, Silvia
   Ruiz, Marcela
   Pastor, Oscar
TI Are requirements elicitation sessions influenced by participants'
   gender? An empirical experiment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st IFIP WG 6.1 International Conference on Coordination Models and
   Languages (COORDINATION) Held as Part of the 14th International
   Federated Conference on Distributed Computing Techniques (DisCoTec)
CY JUN 17-21, 2019
CL Kongens Lyngby, DENMARK
SP Int Federat Informat Proc WG 6 1, Tech Univ Denmark, Dept Appl Math & Comp Sci, Nord IoT Hub
DE Requirements elicitation; BPMN model; Graphical user interfaces;
   Empirical experiment; Gender
AB Context: Requirements elicitation is a crucial phase in the software development life cycle. During requirements elicitation sessions, requirements engineers capture software requirements, and motivate stakeholders to express needs and expected software functionalities. In this context, there is a lack of extensive empirical research reporting the extent to which elicitation sessions can be influenced by participants' gender.
   Objective: This paper presents our research endeavour to investigate requirements engineers' effort and elicited requirements' accuracy based on participants' gender.
   Method: We conducted an experiment in two rounds with a total of 59 students who played the role of requirements engineers. In the first experimental task, the participant watched two videos where men and women stakeholders expressed software requirements. Later on, the participants specified software requirements in the shape of Business Process Model and Notation (BPMN) and next they generated Graphical User Interfaces (GUIs) from those models.
   Results: We observed two significant differences. One between men and women requirements engineers in terms of dedicated effort during requirements specification: men took less effort. Other between stakeholders' gender in terms of accuracy resulted of BPMN models: models built from men stakeholders yield more accuracy. On the contrary, accuracy of resulted GUIs models did not show significant differences regarding requirements engineers or stakeholders' gender.
   Conclusions: Analysing descriptive data, women spent more time both as stakeholders and as requirements engineers but their accuracy is better. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Diaz, Eduardo; Panach, Jose Ignacio; Rueda, Silvia] Univ Valencia, Dept Informat, Escola Tecn Super Engn, Ave Univ S-N, Valencia 46100, Spain.
   [Ruiz, Marcela] Zurich Univ Appl Sci, ZHAW Sch Engn InIT, Technikumstr 9, CH-8401 Winterthur, Switzerland.
   [Pastor, Oscar] Univ Politecn Valencia, Camino Vera S-N, Valencia 46022, Spain.
C3 University of Valencia; Zurich University of Applied Sciences;
   Universitat Politecnica de Valencia
RP Díaz, E (corresponding author), Univ Valencia, Dept Informat, Escola Tecn Super Engn, Ave Univ S-N, Valencia 46100, Spain.
EM diazsua@alumni.uv.es; joigpana@uv.es; silvia.rueda@uv.es; ruiz@zhaw.ch;
   opastor@pros.upv.es
RI Rueda Pascual, Silvia/A-2132-2019; López, Oscar Pastor/S-4216-2016
OI Rueda Pascual, Silvia/0000-0002-1020-706X; Diaz Suarez, Jorge
   Eduardo/0000-0003-2794-8152
FU Ministry of Education of Peru; National Scholarship Program PRONABEC -
   Republic President; Spanish Ministry of Science and Innovation through
   project DATAME [TIN2016-80811-P]
FX The first author has the support of the Ministry of Education of Peru
   with the National Scholarship Program PRONABEC - Republic President.
   This project also has the support of Spanish Ministry of Science and
   Innovation through project DATAME (ref: TIN2016-80811-P). We would like
   to thank the participants of the experiments.
CR Al-Rashdan, 2020 14 INT C UB INF, P1
   Ali N, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1830
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 2010, SYSTEMS SOFTWARE ENG, P1, DOI DOI 10.1109/IEEESTD.2010.5733835
   [Anonymous], 2008, BPMN modeling and reference guide: understanding and using BPMN
   Beyer S, 2014, COMPUT SCI EDUC, V24, P153, DOI 10.1080/08993408.2014.963363
   BPMN, 2013, BUSINESS PROCESS MOD
   BRAMBILLA M, 2010, INT C WEB ENG, P415
   Brambilla M, 2012, LECT NOTES BUS INF P, V99, P219
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cooperrider D.L., 1998, Appreciative Inquiry
   Decreus K, 2011, LECT NOTES BUS INF P, V72, P29
   Diaz E, 2018, INT CONF RES CHAL
   Dybå T, 2006, INFORM SOFTWARE TECH, V48, P745, DOI 10.1016/j.infsof.2005.08.009
   Embley DW, 2011, HANDBOOK OF CONCEPTUAL MODELING: THEORY, PRACTICE AND RESEARCH CHALLENGES, P3
   Erdfelder E, 1996, BEHAV RES METH INS C, V28, P1, DOI 10.3758/BF03203630
   Fernández-Sanz L, 2012, IET SOFTW, V6, P167, DOI 10.1049/iet-sen.2011.0070
   Gonzales CK, 2011, EMPIR SOFTW ENG, V16, P733, DOI 10.1007/s10664-011-9156-x
   Han L, 2016, COMM COM INF SC, V602, P19, DOI 10.1007/978-981-10-1019-4_2
   Hashim, 2020, INT J ADV SCI TECHNO, V29, P296
   Hickey AM, 2004, J MANAGE INFORM SYST, V20, P65, DOI 10.1080/07421222.2004.11045786
   HUANG FH, 2011, INT C HUM CTR DES, P509
   Ioannis B, 2019, EDUC INF TECHNOL, V24, P1269, DOI 10.1007/s10639-018-9828-x
   Jirotka M, 2006, IEEE SOFTWARE, V23, P42, DOI 10.1109/MS.2006.84
   JR BWB, 1980, BIOMETRICS, V36, P69
   Juristo N., 2013, BASICS SOFTWARE ENG
   Kieffer S, 2017, AIS T HUMANCOMPUTER, V9, P149, DOI [10.17705/1thci.00093, DOI 10.17705/1THCI.00093]
   Li XS, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P168
   Lucassen G, 2016, LECT NOTES COMPUT SC, V9619, P205, DOI 10.1007/978-3-319-30282-9_14
   Marques M, 2015, PROC FRONT EDUC CONF, P931, DOI 10.1109/FIE.2015.7344175
   NGUYENDUC A, 2019, P 41 INT C SOFTW ENG, P240, DOI DOI 10.1109/ICSE-Companion.2019.00094
   Panach J.I., 2020, DATA PARTICIPANTS GE
   Pastor O., 2018, JORNADA SOC INGENIER
   Ridley G, 2012, INFORM SYST J, V22, P355, DOI 10.1111/j.1365-2575.2012.00413.x
   Rix AW, 2001, INT CONF ACOUST SPEE, P749, DOI 10.1109/ICASSP.2001.941023
   Rosenberg D., 1999, AW OBJ TECHNOL S
   Sagnier C, 2019, ADV INTELLIGENT SYST, P305
   Schina D, 2020, ADV INTELL SYST, V1023, P313, DOI 10.1007/978-3-030-26945-6_28
   Silva TR, 2019, LECT NOTES COMPUT SC, V11746, P644, DOI 10.1007/978-3-030-29381-9_39
   Sobieraj S, 2020, COMPUT HUM BEHAV, V104, DOI 10.1016/j.chb.2019.09.021
   Sousa K, 2007, LECT NOTES COMPUT SC, V4849, P112
   Stoilescu D, 2010, COMPUT SCI EDUC, V20, P283, DOI 10.1080/08993408.2010.527691
   Tiwari S, 2018, 2018 IEEE/ACM INTERNATIONAL WORKSHOP ON SOFTWARE ENGINEERING EDUCATION FOR MILLENNIALS (SEEM), P8, DOI 10.1145/3194779.3194791
   Trauth EM, 2013, INFORM ORGAN-UK, V23, P277, DOI 10.1016/j.infoandorg.2013.08.003
   Winkler JP, 2019, INT REQUIR ENG CONF, P40, DOI 10.1109/RE.2019.00016
   Wohlin C., 2012, EXPT SOFTWARE ENG IN
   Zareen S, 2020, APPL SCI-BASEL, V10, DOI 10.3390/app10144981
NR 48
TC 3
Z9 3
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2021
VL 204
AR 102595
DI 10.1016/j.scico.2020.102595
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA QH9AO
UT WOS:000618565200004
OA Green Published
DA 2024-07-18
ER

PT J
AU Silvási, F
   Tomásek, M
AF Silvasi, Frantisek
   Tomasek, Martin
TI Lean formalization of bounded grids and computable cellular automata
   defined thereover
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cellular automata; Formalization; Grids; Lean
AB We present a formalization of bounded grids using Lean proof assistant and provide a formalized implementation along with an interface consisting of various definitions together with their proven-correct properties serving to manipulate grids in general fashion regardless of the intended use case. We then proceed to demonstrate the applicability of the grids by interpreting them as matrices, followed by developing a formalization of cellular automata with emphasis on preservation of computability, such that it is possible to both evaluate progress of generations of automata as well as reason about them in a mechanized setting. Along the way, we discuss design decisions and weigh their consequences. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Silvasi, Frantisek; Tomasek, Martin] Tech Univ Kosice, Kosice, Slovakia.
C3 Technical University Kosice
RP Silvási, F (corresponding author), Tech Univ Kosice, Kosice, Slovakia.
EM Frantisek.silvasi@tuke.sk
RI Tomášek, Martin/AAA-7380-2020
OI Tomášek, Martin/0000-0002-1604-023X
FU Slovak Research and Development Agency [APVV-15-0055]; KEGA
   [079TUKE4/2017]; FEI TUKE Grant [FEI-2018-57]
FX This work was supported by the Slovak Research and Development Agency
   under the contract No. APVV-15-0055. The paper was supported by project
   KEGA no. 079TUKE4/2017. This work was supported by FEI TUKE Grant no.
   FEI-2018-57.
CR [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Blanchette J, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P367, DOI 10.1145/3372885.3373824
   Blanchette JC, 2011, LECT NOTES ARTIF INT, V6989, P12, DOI 10.1007/978-3-642-24364-6_2
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   DEWDNEY AK, 1989, SCI AM, V260, P116, DOI 10.1038/scientificamerican0489-116
   Doczkal C, 2013, LECT NOTES COMPUT SC, V8307, P82, DOI 10.1007/978-3-319-03545-1_6
   Ebner G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110278
   FRISCH U, 1986, PHYS REV LETT, V56, P1505, DOI 10.1103/PhysRevLett.56.1505
   GARDNER M, 1970, SCI AM, V223, P120, DOI 10.1038/scientificamerican1070-120
   Gonthier G, 2010, J FORMALIZ REASON, V3, P95
   HARDY J, 1973, J MATH PHYS, V14, P1746, DOI 10.1063/1.1666248
   Kutrib M, 1997, PARALLEL COMPUT, V23, P1567, DOI 10.1016/S0167-8191(97)00073-2
   Lamport L, 1999, ACM T PROGR LANG SYS, V21, P502, DOI 10.1145/319301.319317
   LANGTON CG, 1986, PHYSICA D, V22, P120, DOI 10.1016/0167-2789(86)90237-X
   PUGH W, 1991, SUPERCOMPUTING 91, P4
NR 18
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2020
VL 195
AR 102471
DI 10.1016/j.scico.2020.102471
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LR7RO
UT WOS:000535893800002
DA 2024-07-18
ER

PT J
AU Boreale, M
AF Boreale, Michele
TI Complete algorithms for algebraic strongest postconditions and weakest
   preconditions in polynomial ODES
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ordinary differential equations; Postconditions; Preconditions;
   Invariants; Grobner bases
ID COMPUTATION; BASES
AB A system of polynomial ordinary differential equations (odes) is specified via a vector of multivariate polynomials, or vector field, F. A safety assertion psi -> [F] phi means that the trajectory of the system will lie in a subset phi (the postcondition) of the state-space, whenever the initial state belongs to a subset psi (the precondition). We consider the case when phi and psi are algebraic varieties, that is, zero sets of polynomials. In particular, polynomials specifying the postcondition can be seen as a system's conservation laws implied by psi. Checking the validity of algebraic safety assertions is a fundamental problem in, for instance, hybrid systems. We consider a generalized version of this problem, and offer an algorithm that, given a user specified polynomial set P and an algebraic precondition psi, finds the largest subset of polynomials in P implied by psi (relativized strongest postcondition). Under certain assumptions on phi, this algorithm can also be used to find the largest algebraic invariant included in phi and the weakest algebraic precondition for phi. Applications to continuous semialgebraic systems are also considered. The effectiveness of the proposed algorithm is demonstrated on several case studies from the literature. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Boreale, Michele] Univ Firenze, Dipartimento Stat Informat Applicaz DiSIA G Paren, Viale Morgagni 65, I-50134 Florence, Italy.
C3 University of Florence
RP Boreale, M (corresponding author), Univ Firenze, Dipartimento Stat Informat Applicaz DiSIA G Paren, Viale Morgagni 65, I-50134 Florence, Italy.
EM michele.boreale@unifi.it
OI Boreale, Michele/0000-0002-1972-7491
CR Abraham E., 2014, Tools and Algorithms for the Constructionand Analysis of Systems, V8413, P279
   [Anonymous], [No title captured]
   [Anonymous], 2006, USING ALGEBRAIC GEOM, DOI DOI 10.1007/B138611
   Arnold VI, 1978, Ordinary Differential Equations
   Blinov ML, 2004, BIOINFORMATICS, V20, P3289, DOI 10.1093/bioinformatics/bth378
   Bonchi F, 2012, INFORM COMPUT, V211, P77, DOI 10.1016/j.ic.2011.12.002
   Boreale M, 2018, HSCC 2018: PROCEEDINGS OF THE 21ST INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (PART OF CPS WEEK), P207, DOI 10.1145/3178126.3178137
   Boreale M, 2018, LECT NOTES COMPUT SC, V10706, P442, DOI 10.1007/978-3-319-73117-9_31
   Boreale M, 2017, LECT NOTES COMPUT SC, V10203, P71, DOI 10.1007/978-3-662-54458-7_5
   Boreale M, 2015, LECT NOTES COMPUT SC, V9135, P82, DOI 10.1007/978-3-662-47666-6_7
   Boreale M, 2009, LECT NOTES COMPUT SC, V5710, P163, DOI 10.1007/978-3-642-04081-8_12
   Buchberger B., 1976, SIGSAM B, V10, P19, DOI [/10.1145/1088216.1088219, DOI 10.1145/1088216.1088219]
   Decker W., 2019, SINGULAR 4-1-2-A computer algebra system for polynomial computations
   Din MS, 2018, ISSAC'18: PROCEEDINGS OF THE 2018 ACM INTERNATIONAL SYMPOSIUM ON SYMBOLIC AND ALGEBRAIC COMPUTATION, P351, DOI 10.1145/3208976.3209002
   Faugere J. C., 2002, P 2002 INT S SYMB AL, P75, DOI DOI 10.1145/780506.780516
   Faugére JC, 1999, J PURE APPL ALGEBRA, V139, P61, DOI 10.1016/S0022-4049(99)00005-5
   Goriely A., 2001, ADV SERIES NONLINEAR, V19
   Jiang Liu, 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P97
   Ko CK, 2005, IEEE DECIS CONTR P, P2805
   Kong H, 2017, PROCEEDINGS OF THE 20TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (PART OF CPS WEEK) (HSCC' 17), P163, DOI 10.1145/3049797.3054966
   KRICK T, 1991, LECT NOTES COMPUT SC, V539, P195
   Laplagne S., 2006, Proceedings of the 2006 International Symposium on Symbolic and Algebraic Computation, ISSAC'06, P191
   Lasserre JB, 2013, J SYMB COMPUT, V51, P63, DOI 10.1016/j.jsc.2012.03.007
   Müller-Olm M, 2004, INFORM PROCESS LETT, V91, P233, DOI 10.1016/j.ipl.2004.05.004
   Neuhaus R, 1998, J PURE APPL ALGEBRA, V124, P261, DOI 10.1016/S0022-4049(96)00103-X
   Novikov D, 1999, ANN I FOURIER, V49, P563, DOI 10.5802/aif.1683
   Parrilo PA, 2003, MATH PROGRAM, V96, P293, DOI 10.1007/s10107-003-0387-5
   Peyrl H, 2008, THEOR COMPUT SCI, V409, P269, DOI 10.1016/j.tcs.2008.09.025
   Platzer A, 2012, LOG METH COMPUT SCI, V8, DOI 10.2168/LMCS-8(4:16)2012
   Platzer A, 2012, IEEE S LOG, P13, DOI 10.1109/LICS.2012.13
   Rebiha R, 2015, THEOR COMPUT SCI, V594, P180, DOI 10.1016/j.tcs.2015.06.018
   Sankaranarayanan S, 2004, ACM SIGPLAN NOTICES, V39, P318, DOI 10.1145/982962.964028
   Sankaranarayanan Sriram, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P686, DOI 10.1007/978-3-642-22110-1_56
   Sankaranarayanan S, 2010, HSSC 10: PROCEEDINGS OF THE 13TH ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P221
   She ZK, 2015, LECT NOTES COMPUT SC, V9301, P440, DOI 10.1007/978-3-319-24021-3_32
   Stengel R.F., 2004, Flight Dynamics
   STENGLE G, 1974, MATH ANN, V207, P87, DOI 10.1007/BF01362149
   Tiwari A, 2004, LECT NOTES COMPUT SC, V2993, P600
   Tribastone M, 2012, IEEE T SOFTWARE ENG, V38, P205, DOI 10.1109/TSE.2010.82
NR 39
TC 9
Z9 9
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2020
VL 193
AR 102441
DI 10.1016/j.scico.2020.102441
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LG6EP
UT WOS:000528192000003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ben Said, N
   Cristescu, I
AF Ben Said, Najah
   Cristescu, Ioana
TI End-to-end information flow security for web services orchestration
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web service orchestration; BPEL; Component-based systems;
   Non-interference; Secure-by-construction
AB Multi-party interactions in Web Service (WS) composition are hard to managed and difficult to design and verify, especially while end-to-end information flow security (IFS) must be respected. Usually, IFS is guaranteed for a data originator and ultimate recipient WS, however inter-organizational service compositions involve partners that do not necessarily share the same level of security, especially for data they do not generate nor process themselves.
   In this paper, we focus on the non-interference property and we present a correct-by-construction approach to build orchestrated WSs with multi-party interactions. A key ingredient of this approach is to present the system composition at an abstract level as a component-based model where the IFS verification and the system configuration are considered at early stage. When this configuration is validated, that is, no security leak is detected, we automatically generate orchestrator components that handle IFS. Afterwards, we generate accordingly BPEL processes where the IFS constraints are enforced as security WS-policies in the BPEL description of services. We develop a set of tools that automate the approach and we validate the effectiveness of our approach with well known Web service use cases. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Ben Said, Najah] Thales SIX GTS Palaiseau, Palaiseau, France.
   [Cristescu, Ioana] INRIA Rennes Bretagne Atlantique, Rennes, France.
C3 Universite de Rennes
RP Ben Said, N (corresponding author), Thales SIX GTS Palaiseau, Palaiseau, France.
EM najah.ben-said@thalesgroupes.fr; ioana-domnina.cristescu@inria.fr
RI dbs, hunzla/HZL-0324-2023
CR Accorsi R., 2012, BPM 12 P
   Accorsi R., 2010, ISSS BPSC 10 P
   Adao R, 2006, ICALP 06 P
   [Anonymous], HANDS ON INTRO BPEL
   [Anonymous], XML ENCRYPTION SYNTA
   [Anonymous], HANDS ON INTRO BPE 2
   [Anonymous], 2006, Business Process Execution Language for Web Services BPEL and BPEL4WS
   Bartoletti M, 2008, IEEE T SOFTWARE ENG, V34, P33, DOI 10.1109/TSE.2007.70740
   Basin D, 2006, ACM T SOFTW ENG METH, V15, P39, DOI 10.1145/1125808.1125810
   Ben Said N., 2014, ETAPS FPS 14 P
   Ben Said N., 2016, FACS 15
   Bonakdarpour B., 2010, AUTOMATED CONFLICT F
   Charfi A, 2007, WORLD WIDE WEB, V10, P309, DOI 10.1007/s11280-006-0016-3
   Chen S., 2004, Fifth IEEE International Vacuum Electronics Conference (IEEE Cat. No.04EX786), P358, DOI 10.1109/IVELEC.2004.1316360
   Chollet S., 2008, SCC 08 P
   Courant J, 2007, LECT NOTES COMPUT SC, V4855, P364
   DENNING DE, 1977, COMMUN ACM, V20, P504, DOI 10.1145/359636.359712
   Deubler M., 2004, Proceedings of the 2nd international conference on Service oriented computing, P115, DOI [10.1145/1035167.1035185, DOI 10.1145/1035167.1035185]
   Dhankhar V, 2007, SWS'07: PROCEEDINGS OF THE 2007 ACM WORKSHOP ON SECURE WEB SERVICES, P99
   Dragoni N, 2007, THIRD INTERNATIONAL WORKSHOP ON SECURITY, PRIVACY AND TRUST IN PERVASIVE AND UBIQUITOUS COMPUTING, PROCEEDINGS, P49, DOI 10.1109/SECPERU.2007.2
   Dragoni N, 2009, COMPUT SECUR, V28, P566, DOI 10.1016/j.cose.2009.06.005
   Dragoni N, 2007, SWS'07: PROCEEDINGS OF THE 2007 ACM WORKSHOP ON SECURE WEB SERVICES, P90
   Dulay N., 2001, AOSE, P84
   EASTLAKE D, 2002, XML SIGNATURE SYNTAX
   Focardi R., 2005, FOSSACS 05 P
   Fournet C., 2008, POPL 08 P
   Fournet C., 2009, CCS 09 P
   Frau S., 2009, FAST 08 P
   Georg G, 2010, IEEE T SOFTWARE ENG, V36, P338, DOI 10.1109/TSE.2010.36
   Goguen J. A., 1982, 1982 IEEE S SEC PRIV
   Gondara M.K., 2011, ARXIV11050141 CORR
   GUDGIN M, 2005, WEB SERVICES TRUST L
   Gudgin M., 2003, SOAP VERSION 1 2 1
   GUDGIN M, 2005, WEB SERVICES SECURE
   Guillou X.L., 2009, P 20 INT WORKSH PRIN
   Gutiérrez C, 2006, J RES PRACT INF TECH, V38, P57
   Hafner M, 2006, INTERNET RES, V16, P491, DOI 10.1108/10662240610710978
   Heckel R, 2005, ELECTRON NOTES THEOR, V116, P145, DOI 10.1016/j.entcs.2004.02.073
   Heintze N., 1998, POPL 98 P
   KALER C, 2005, WEB SERVICES SECURIT
   Kedjar S., 2013, 8 INT C INT TECHN SE
   Kedjar S., 2016, INT J INF TECHNOL WE, VII
   Krohn M.N., 2007, SOSP 07 P
   Laud P., 2001, ESOP 01 P
   Laud P, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P337, DOI 10.1145/1328438.1328479
   Menzel Michael, 2010, 2010 IEEE International Conference on Web Services (ICWS), P243, DOI 10.1109/ICWS.2010.25
   Myers AC, 2000, ACM T SOFTW ENG METH, V9, P410, DOI 10.1145/363516.363526
   NADALIN A, 2004, WEB SERVICES SECURIT
   Patwardhan A, 2004, PROCEEDINGS OF MOBIQUITOUS 2004, P299
   Pino L, 2014, SERVICE ORIENTED COM
   Rahaman MohammadAshiqur., 2006, SWS 06, P77
   Rushby J., NONINTERFERENCE TRAN
   Said N.B., 2016, LEVERAGING APPL FO 1
   Séguran M, 2008, PROCEEDINGS OF THE SIXTH IEEE EUROPEAN CONFERENCE ON WEB SERVICES, P125, DOI 10.1109/ECOWS.2008.13
   Souza ARR, 2009, LECT NOTES COMPUT SC, V5900, P373, DOI 10.1007/978-3-642-10383-4_27
   van der Aalst W.M.P., 2005, TECHNICAL REPORT
   Vandebogart S, 2007, ACM T COMPUT SYST, V25, DOI 10.1145/1314299.1314302
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Walsh A.E., 2002, UDDI SOAP WSDL WEB S
   Zdancewic S, 2002, ACM T COMPUT SYST, V20, P283, DOI 10.1145/566340.566343
   Zeldovich N., 2008, NSDI 08 P
   Zeldovich N, 2006, USENIX ASSOCIATION 7TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P263
NR 62
TC 4
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102376
DI 10.1016/j.scico.2019.102376
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KM2YN
UT WOS:000513988800002
OA Bronze
DA 2024-07-18
ER

PT J
AU Wang, JW
   Fu, M
   Qiao, L
   Feng, XY
AF Wang, Jiawei
   Fu, Ming
   Qiao, Lei
   Feng, Xinyu
TI Formalizing SPARCv8 instruction set architecture in Coq
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE SPARCv8; Coq; Verification; Operational semantics
ID MODULAR VERIFICATION; ASSEMBLY CODE
AB The SPARCv8 instruction set architecture (ISA) has been widely used in various processors for workstations, embedded systems, and space missions. In order to formally verify the correctness of embedded operating systems running on SPARCv8 processors, one has to formalize the semantics of SPARCv8 ISA. In this article, we present our formalization of SPARCv8 ISA, which is faithful to the realistic design of SPARCv8. We also prove the determinacy and isolation properties with respect to the operational semantics of our formal model. In addition, we have verified that two trap handlers handling window overflow and window underflow satisfy the user's specifications based on our formal model. All of the formalization and proofs have been mechanized in Coq. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Wang, Jiawei] Univ Sci & Technol China, Hefei, Peoples R China.
   [Fu, Ming] Huawei Technol Co Ltd, Shanghai, Peoples R China.
   [Qiao, Lei] Beijing Inst Control Engn, Beijing, Peoples R China.
   [Feng, Xinyu] Nanjing Univ, Nanjing, Peoples R China.
C3 Chinese Academy of Sciences; University of Science & Technology of
   China, CAS; Huawei Technologies; Nanjing University
RP Feng, XY (corresponding author), Nanjing Univ, Nanjing, Peoples R China.
EM xyfeng@nju.edu.cn
FU National Natural Science Foundation of China (NSFC) [61632005]
FX This work is supported in part by grants from National Natural Science
   Foundation of China (NSFC) under Grant No. 61632005.
CR Armand Michael, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P135
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ekici B, 2017, LECT NOTES COMPUT SC, V10427, P126, DOI 10.1007/978-3-319-63390-9_7
   Feng X, 2006, ACM SIGPLAN NOTICES, V41, P401, DOI 10.1145/1133981.1134028
   Feng XY, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P170, DOI 10.1145/1375581.1375603
   Feng XY, 2005, ACM SIGPLAN NOTICES, V40, P254, DOI 10.1145/1090189.1086399
   Fox A, 2010, LECT NOTES COMPUT SC, V6172, P243, DOI 10.1007/978-3-642-14052-5_18
   Gaisler A., LEON3 MULTIPROCESSIN
   Gonthier G., 2009, THESIS
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hou Z, 2016, LECT NOTES COMPUT SC, V9995, P388, DOI 10.1007/978-3-319-48989-6_24
   Jiawei Wang, 2017, Dependable Software Engineering. Theories, Tools, and Applications. Third International Symposium, SETTA 2017. Proceedings: LNCS 10606, P300, DOI 10.1007/978-3-319-69483-2_18
   Kennedy Andrew., 2013, P 15 S PRINCIPLES PR, P13, DOI DOI 10.1145/2505879.2505897
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Qiao LL, 2011, 2011 INTERNATIONAL CONFERENCE ON FUZZY SYSTEMS AND NEURAL COMPUTING (FSNC 2011), VOL VI, P161
   Xu FW, 2016, LECT NOTES COMPUT SC, V9780, P59, DOI 10.1007/978-3-319-41540-6_4
NR 17
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102371
DI 10.1016/j.scico.2019.102371
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KM2YN
UT WOS:000513988800008
OA Bronze
DA 2024-07-18
ER

PT J
AU Jomaa, N
   Nowak, D
   Grimaud, G
   Hym, S
AF Jomaa, Narjes
   Nowak, David
   Grimaud, Gilles
   Hym, Samuel
TI Formal proof of dynamic memory isolation based on MMU
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal proof; Memory isolation; Microkernel; Coq
ID MONADS; LOGIC
AB For security and safety reasons, it is essential to ensure memory isolation between processes. The memory manager is thus a critical part of the kernel of an operating system. It is common for kernels to ensure memory isolation through a piece of hardware called memory management unit (MMU). However an MMU by itself does not provide memory isolation. It is only a tool the kernel can use to ensure this property. In this paper we show how a proof assistant such as Coq can be used to model a hardware architecture with an MMU, and an abstract model of microkernel supporting preemptive scheduling and memory management. We proceed by making formally explicit the consistency properties that must be preserved in order for memory isolation to be preserved. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Jomaa, Narjes] CNRS, CRIStAL, Paris, France.
   Lille 1 Univ, Villeneuve Dascq, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite de Lille
RP Jomaa, N (corresponding author), CNRS, CRIStAL, Paris, France.
EM narjes.jomaa@univ-lille1.fr
FU Celtic-Plus Project ODSI [C2014/2-12]; CNRS Action Specifique Securite;
   IRCICA [USR 3380]
FX This work was partially supported by the Celtic-Plus Project ODSI
   C2014/2-12, CNRS Action Specifique Securite, and IRCICA USR 3380.
CR Barthe G., 2013, LIPICS, V26, P45
   Chen H, 2016, ACM SIGPLAN NOTICES, V51, P431, DOI [10.1145/2908080.2908101, 10.1145/2980983.2908101]
   Cock D, 2008, LECT NOTES COMPUT SC, V5170, P167, DOI 10.1007/978-3-540-71067-7_16
   Elkaduwe D, 2008, LECT NOTES COMPUT SC, V5295, P99, DOI 10.1007/978-3-540-87873-5_11
   Engler D. R., 1995, Operating Systems Review, V29, P251, DOI 10.1145/224057.224076
   Gu L., 2011, P 2 AS PAC WORKSH SY, P3
   Gu RH, 2016, PROCEEDINGS OF OSDI'16: 12TH USENIX SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P653
   Guo Y, 2014, 2014 THEORETICAL ASPECTS OF SOFTWARE ENGINEERING CONFERENCE (TASE), P26, DOI 10.1109/TASE.2014.29
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Jomaa N, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P73, DOI 10.1109/TASE.2016.28
   Jones M. B., 1995, P 15 ACM S OP SYST P
   Klein G, 2014, ACM T COMPUT SYST, V32, DOI 10.1145/2560537
   Liedtke J., MICROKEMEL CONSTRUCT, P237, DOI [10.1145/224056.224075, DOI 10.1145/224056.224075]
   Marti N, 2006, LECT NOTES COMPUT SC, V4260, P400
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Stallings W., 2015, COMPUTER ORG ARCHITE, P116
   Swierstra W, 2009, LECT NOTES COMPUT SC, V5674, P440, DOI 10.1007/978-3-642-03359-9_30
   Tanenbaum Andrew S, 2006, Operating Systems-Design and Implementation
   Vaynberg Alexander, 2012, Certified Programs and Proofs. Second International Conference (CPP 2012). Proceedings, P143, DOI 10.1007/978-3-642-35308-6_13
   Wadler Philip, 1992, MATH STRUCTURES COMP, V2, P461, DOI [DOI 10.1017/S0960129500001560, DOI 10.1016/0304-3975(75)90017-1]
NR 20
TC 4
Z9 5
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2018
VL 162
SI SI
BP 76
EP 92
DI 10.1016/j.scico.2017.06.012
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GJ1UM
UT WOS:000435053400005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Lin, CT
   Tang, KW
   Wang, JS
   Kapfhammer, GM
AF Lin, Chu-Ti
   Tang, Kai-Wei
   Wang, Jiun-Shiang
   Kapfhammer, Gregory M.
TI Empirically evaluating Greedy-based test suite reduction methods at
   different levels of test suite complexity
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software testing; Regression testing; Test suite reduction; Test suite
   complexity
ID FAULT-DETECTION EFFECTIVENESS; TEST-CASE PRIORITIZATION; SET SIZE
   MINIMIZATION; CALL-STACK COVERAGE; SPACE APPLICATION; COST
AB Test suite reduction is an important approach that decreases the cost of regression testing. A test suite reduction technique operates based on the relationship between the test cases in the regression test suite and the test requirements in the program under test. Thus, its effectiveness should be closely related to the complexity of a regression test suite - the product of the number of test cases and the number of test requirements. Our previous work has shown that cost-aware techniques (i.e., the test suite reduction techniques that aim to decrease the regression test suite's execution cost) generally outperform the others in terms of decreasing the cost of running the regression test suite. However, the previous empirical studies that evaluated cost-aware techniques did not take into account test suite complexity. That is, prior experiments do not reveal if the cost-aware techniques scale and work effectively on test suites with more test cases and more test requirements. This means that prior experiments do not appropriately shed light on how well test suite reduction methods work with large programs or test suites. Therefore, this paper focuses on the Greedy-based techniques and empirically evaluates the additional Greedy and two cost-aware Greedy techniques - at different levels of test suite complexity - from various standpoints including the cost taken to run the regression test suite, the time taken to reduce the test suites, the total regression testing costs, the fault detection capability, the fault detection efficiency, and the common rates of the representative sets. To the best of our knowledge, none of the previous empirical studies classify a considerable number of test suites according to their complexity. Nor do any prior experiments evaluate the test suite reduction techniques, in terms of the aforementioned criteria, at different levels of test suite complexity. This paper represents the first such attempt to carry out this important task. Based on the empirical results, we confirm the strengths and weaknesses of the cost-aware techniques and develop insights into how the cost-aware techniques' effectiveness varies as the test suite complexity increases. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Lin, Chu-Ti; Tang, Kai-Wei; Wang, Jiun-Shiang] Natl Chiayi Univ, Dept Comp Sci & Informat Engn, Chiayi, Taiwan.
   [Kapfhammer, Gregory M.] Allegheny Coll, Dept Comp Sci, Meadville, PA 16335 USA.
C3 National Chiayi University; Allegheny College
RP Lin, CT (corresponding author), Natl Chiayi Univ, Dept Comp Sci & Informat Engn, Chiayi, Taiwan.
EM chutilin@mail.ncyu.edu.tw
OI Lin, Chu-Ti/0000-0003-2184-9700
FU Ministry of Science and Technology, Taiwan [MOST 103-2221-E-415-010,
   MOST 104-2628-E-415-001-MY3]
FX This work was supported by the Ministry of Science and Technology,
   Taiwan, under Grants MOST 103-2221-E-415-010 and MOST
   104-2628-E-415-001-MY3. The authors would like to thank the anonymous
   referees for their constructive and insightful suggestions, which led to
   a significant improvement of this paper.
CR Arlt Stephan, 2014, INT S SOFTWARE TESTI, P270
   Binkley D, 1997, IEEE T SOFTWARE ENG, V23, P498, DOI 10.1109/32.624306
   Bozkurt M, 2013, GECCO'13: PROCEEDINGS OF THE 2013 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, P1429
   Chen TY, 1998, INFORM SOFTWARE TECH, V40, P347, DOI 10.1016/S0950-5849(98)00050-0
   Chvatal V., 1979, Mathematics of Operations Research, V4, P233, DOI 10.1287/moor.4.3.233
   Do HS, 2005, EMPIR SOFTW ENG, V10, P405, DOI 10.1007/s10664-005-3861-2
   Engström E, 2010, INFORM SOFTWARE TECH, V52, P14, DOI 10.1016/j.infsof.2009.07.001
   Fahndrich M., 1999, THESIS
   Gong DD, 2013, COMPUT LANG SYST STR, V39, P95, DOI 10.1016/j.cl.2013.04.001
   Gupta A, 2006, LECT NOTES COMPUT SC, V3920, P365
   Harrold M. J., 1993, ACM Transactions on Software Engineering and Methodology, V2, P270, DOI 10.1145/152388.152391
   Huang YC, 2012, J SYST SOFTWARE, V85, P626, DOI 10.1016/j.jss.2011.09.063
   HUTCHINS M, 1994, PROC INT CONF SOFTW, P191, DOI 10.1109/ICSE.1994.296778
   Inozemtseva L, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P435, DOI 10.1145/2568225.2568271
   Jeffrey D, 2005, PROC IEEE INT CONF S, P549
   Jeffrey D, 2007, IEEE T SOFTWARE ENG, V33, P108, DOI 10.1109/TSE.2007.18
   Kapfhammer Gregory M., 2010, ENCY SOFTWARE ENG
   Khalilian A, 2012, LECT NOTES COMPUT SC, V7054, P243
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Lin CT, 2014, INFORM SOFTWARE TECH, V56, P1322, DOI 10.1016/j.infsof.2014.04.013
   Lin CT, 2012, INT CONF GENET EVOL, P257, DOI 10.1109/ICGEC.2012.124
   Lin JW, 2009, INFORM SOFTWARE TECH, V51, P679, DOI 10.1016/j.infsof.2008.11.004
   McMaster S, 2005, PROC IEEE INT CONF S, P539
   McMaster S, 2008, IEEE T SOFTWARE ENG, V34, P99, DOI 10.1109/TSE.2007.70756
   Smith A.M., 2009, P 2009 ACM S APPL CO, p[461, 467], DOI DOI 10.1145/1529282.1529382
   Vokolos FI, 1998, PROC IEEE INT CONF S, P44, DOI 10.1109/ICSM.1998.738488
   Whittaker JA, 2002, IEEE SOFTWARE, V19, P108, DOI 10.1109/MS.2002.1020297
   Wong WE, 1997, P INT COMP SOFTW APP, P522, DOI 10.1109/CMPSAC.1997.625062
   Wong WE, 1999, J SYST SOFTWARE, V48, P79, DOI 10.1016/S0164-1212(99)00048-5
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
   Yoo S., 2007, Proceedings of the 2007 international symposium on Software testing and analysis, P140, DOI 10.1145/1273463.1273483
   Yoo S, 2011, LECT NOTES COMPUT SC, V6956, P219, DOI 10.1007/978-3-642-23716-4_20
   Yoo S, 2010, J SYST SOFTWARE, V83, P689, DOI 10.1016/j.jss.2009.11.706
   Yu YB, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P201, DOI 10.1145/1368088.1368116
   Zhang ZY, 2010, J SYST SOFTWARE, V83, P174, DOI 10.1016/j.jss.2009.09.041
   Zhong H, 2008, INFORM SOFTWARE TECH, V50, P534, DOI 10.1016/j.infsof.2007.06.003
NR 36
TC 11
Z9 13
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2017
VL 150
BP 1
EP 25
DI 10.1016/j.scico.2017.05.004
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FK3IT
UT WOS:000413379500001
OA Bronze
DA 2024-07-18
ER

PT J
AU Dalvandi, M
   Butler, M
   Rezazadeh, A
AF Dalvandi, Mohammadsadegh
   Butler, Michael
   Rezazadeh, Abdolbaghi
TI Derivation of algorithmic control structures in Event-B refinement
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Workshop on Automated Verification of Critical
   Systems (AVoCS)
CY SEP, 2015
CL Heriot Watt Univ, Edinburgh, SCOTLAND
SP Altran, D RisQ, Formal Methods Europe, Scottish Informat & Comp Sci Alliance
HO Heriot Watt Univ
DE Refinement; Program verification; Event-B; Program derivation
ID OBJECT-Z
AB The Event-B formalism allows program specifications to be modelled at an abstract level and refined towards a concrete model. However, Event-B lacks explicit control flow structure and ordering is implicitly encoded in event guards. This makes it difficult to identify and apply rules for transformation of Event-B models to sequential code. This paper introduces a scheduling language to support the incremental derivation of algorithmic control structure for events as part of the Event-B refinement process. We provide intermediate control structures for non-deterministic iteration and choice that ease the transition from abstract specifications to sequential implementations. We present rules for transforming algorithmic structures to more concrete refinements. We illustrate our approach by applying our method to the Schorr-Waite graph marking algorithm. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Dalvandi, Mohammadsadegh; Butler, Michael; Rezazadeh, Abdolbaghi] Univ Southampton, Southampton SO17 1BJ, Hants, England.
C3 University of Southampton
RP Dalvandi, M (corresponding author), Univ Southampton, Southampton SO17 1BJ, Hants, England.
EM md5g11@ecs.soton.ac.uk; mjb@ecs.soton.ac.uk; ra3@ecs.soton.ac.uk
RI Dalvandi, Sadegh/L-4997-2019
OI Dalvandi, Mohammadsadegh/0000-0001-8813-780X; Rezazadeh,
   Abdolbaghi/0000-0002-0029-469X
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial JR, 2003, LECT NOTES COMPUT SC, V2805, P51
   Alagar VS, 2011, TEXTS COMPUT SCI, P405, DOI 10.1007/978-0-85729-277-3_16
   [Anonymous], 2002, SEMANTICS CIRCUS
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1988, ACM T PROGR LANG SYS, V10, P513, DOI 10.1145/48022.48023
   Bostrom P, 2010, IFM 10 P 8 INT C INT, V6396, P74
   Bubel R., 2007, Verification of Object-Oriented Software. The KeY Approach, P569
   Butler M, 2009, NATO SCI PEAC SECUR, V22, P131, DOI 10.3233/978-1-58603-976-9-131
   Dalvandi M., TRANSFOMRING EVENT B
   Dalvandi M, 2015, LECT NOTES COMPUT SC, V9392, P308, DOI 10.1007/978-3-319-24644-4_21
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   DUKE R, 1995, COMP STAND INTER, V17, P511, DOI 10.1016/0920-5489(95)00024-O
   Edmunds A., 2011, TASKING EVENT B EXTE, V1
   Fathabadi A.S., 2014, FORM ASP COMPUT, P1
   Fitzgerald J, 2008, ACM SIGPLAN NOTICES, V43, P3, DOI 10.1145/1361213.1361214
   Fukagawa M., 1994, Proceedings. 1994 First Asia-Pacific Software Engineering Conference, P220, DOI 10.1109/APSEC.1994.465258
   Furst A, 2014, LECT NOTES COMPUT SC, V8739, P323, DOI 10.1007/978-3-319-10181-1_20
   Hallerstede S, 2012, FORM ASP COMPUT, V24, P97, DOI 10.1007/s00165-011-0205-4
   Hallerstede S, 2010, LECT NOTES COMPUT SC, V5977, P273, DOI 10.1007/978-3-642-11811-1_21
   Iliasov A., 2010, TECHNICAL REPORT SER, P19
   Jorgensen P.W.V., 2015, TECHNICAL REPORT SER
   Larsen Peter Gorm., 2010, SIGSOFT Softw. Eng. Notes, V35, P1, DOI DOI 10.1145/1668862.1668864
   MORGAN C, 1988, ACM T PROGR LANG SYS, V10, P403, DOI 10.1145/44501.44503
   MORRIS JM, 1989, ACTA INFORM, V26, P287
   MORRIS JM, 1987, SCI COMPUT PROGRAM, V9, P287, DOI 10.1016/0167-6423(87)90011-6
   Najafi M, 2012, SCI IRAN, V19, P1699, DOI 10.1016/j.scient.2012.06.021
   Rafsaniani G.-H.B., 1993, OBJECT Z C STRUCTURA, P166
   Ramkarthik S., 2006, 5 IEEE ACIS INT C CO, P405, DOI DOI 10.1109/ICIS-COMSAR.2006.41
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Schneider S, 2010, LECT NOTES COMPUT SC, V6396, P260, DOI 10.1007/978-3-642-16265-7_19
   SCHORR H, 1967, COMMUN ACM, V10, P501, DOI 10.1145/363534.363554
   Spivey J.M., 1992, THE Z NOTATION
   VONWRIGHT J, 1994, ACTA INFORM, V31, P105, DOI 10.1007/BF01192157
   vonWright J., 2002, KLEENE ALGEBRA REFIN, P233
   WIRTH N, 1996, 14977 ISOIEC
   Woodcock J., 2001, IWFM, V1, P5
NR 38
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 49
EP 65
DI 10.1016/j.scico.2017.05.010
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100004
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Kamali, M
   Dennis, LA
   McAree, O
   Fisher, M
   Veres, SM
AF Kamali, Maryam
   Dennis, Louise A.
   McAree, Owen
   Fisher, Michael
   Veres, Sandor M.
TI Formal verification of autonomous vehicle platooning
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Workshop on Automated Verification of Critical
   Systems (AVoCS)
CY SEP, 2015
CL Heriot Watt Univ, Edinburgh, SCOTLAND
SP Altran, D RisQ, Formal Methods Europe, Scottish Informat & Comp Sci Alliance
HO Heriot Watt Univ
DE Vehicle platooning; Agent programming; Model checking
ID MODEL-CHECKING
AB The coordination of multiple autonomous vehicles into convoys or platoons is expected on our highways in the near future. However, before such platoons can be deployed, the behaviours of the vehicles in these platoons must be certified. This is non-trivial and goes beyond current certification requirements, for human-controlled vehicles, in that these vehicles can act autonomously. In this paper, we show how formal verification can contribute to the analysis of these new, and increasingly autonomous, systems. An appropriate overall representation for vehicle platooning is as a multi-agent system in which each agent captures the "autonomous decisions" carried out by each vehicle. In order to ensure that these autonomous decision-making agents in vehicle platoons never violate safety requirements, we use formal verification. However, as the formal verification technique used to verify the individual agent's code does not scale to the full system, and as the global system verification technique does not capture the essential verification of autonomous behaviour, we use a combination of the two approaches. This mixed strategy allows us to verify safety requirements not only of a model of the system, but of the actual agent code used to program the autonomous vehicles. (C) 2017 The Authors. Published by Elsevier B.V.
C1 [Kamali, Maryam; Dennis, Louise A.; Fisher, Michael] Univ Liverpool, Dept Comp Sci, Liverpool, Merseyside, England.
   [McAree, Owen; Veres, Sandor M.] Univ Sheffield, Dept Automat Control & Syst Engn, Sheffield, S Yorkshire, England.
C3 University of Liverpool; University of Sheffield
RP Kamali, M (corresponding author), Univ Liverpool, Dept Comp Sci, Liverpool, Merseyside, England.
EM maryam.kamali@liverpool.ac.uk
RI Fisher, Michael/P-2111-2019; Veres, Sandor Mihaly/JNE-1547-2023
OI Fisher, Michael/0000-0002-0875-3862; Kamali, Maryam/0000-0002-2789-6914;
   Dennis, Louise/0000-0003-1426-1896
FU EPSRC via the research project "Verifiable Autonomy", at Liverpool
   [EP/L024845]; EPSRC via the research project "Verifiable Autonomy", at
   Sheffield [EP/L024942]; EPSRC [EP/J011894/2, EP/J011843/2, EP/L024942/1,
   EP/L024845/1] Funding Source: UKRI
FX This research was funded by EPSRC via the research project "Verifiable
   Autonomy", at Liverpool (EP/L024845) and Sheffield (EP/L024942). Further
   details of the project are available at
   http://wordpress.csc.liv.ac.uk/va. We would like to kindly thank the
   reviewers for their detailed and valuable comments on our manuscript.
CR ALUR R, 1993, INFORM COMPUT, V104, P2, DOI 10.1006/inco.1993.1024
   [Anonymous], 2006, INTRO AUTOMATA THEOR
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Berg C, 2011, P AM MATH SOC, V139, P2121, DOI 10.1090/S0002-9939-2010-10636-6
   Branicky MS, 2005, CONTROL ENGN SER BIR, P91
   Campbell J., 2016, P 9 INT CONC EXP WOR
   Colin S, 2009, LECT NOTES COMPUT SC, V5596, P103, DOI 10.1007/978-3-642-03240-0_11
   Dennis L.A., 2017, TECHNICAL REPORT
   Dennis L.A., 2008, AISB 08 WORKSH LOG S
   Dennis L. A., 2010, P 10 INT S ART INT R
   Dennis LA, 2016, AUTOMAT SOFTW ENG, V23, P305, DOI 10.1007/s10515-014-0168-9
   Dennis LA, 2011, LECT NOTES ARTIF INT, V6619, P96, DOI 10.1007/978-3-642-20715-0_6
   Dennis LA, 2012, AUTOMAT SOFTW ENG, V19, P5, DOI 10.1007/s10515-011-0088-x
   Dolginova E, 1997, LECT NOTES COMPUT SC, V1201, P154, DOI 10.1007/BFb0014723
   El-Zaher Madeleine, 2012, Stud. Inform. Univ., V10, P119
   Finger M., 1996, Notre Dame Journal of Formal Logic, V37, P204, DOI 10.1305/ndjfl/1040046087
   Fisher M, 2013, COMMUN ACM, V56, P84, DOI [10.1145/2494558, 10.1145/2500468.2494558]
   Gabbay D.M., 2003, STUD LOGIC FDN MATH, V148
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Hilscher Martin, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P196, DOI 10.1007/978-3-642-39698-4_12
   Hilscher M, 2011, LECT NOTES COMPUT SC, V6991, P404, DOI 10.1007/978-3-642-24559-6_28
   Ilie L., 2004, ON NFA REDUCTIONS, P112
   Konur S, 2013, THEOR COMPUT SCI, V503, P61, DOI 10.1016/j.tcs.2013.07.012
   Kurucz A, 2007, STUD LOGIC PRACT REA, V3, P869
   Lygeros J, 1998, IEEE T AUTOMAT CONTR, V43, P522, DOI 10.1109/9.664155
   McAree O., 2016, P EUR CONTR C ECC
   Nair R, 2005, J ARTIF INTELL RES, V23, P367, DOI 10.1613/jair.1549
   PURI A, 1995, PROCEEDINGS OF THE 1995 AMERICAN CONTROL CONFERENCE, VOLS 1-6, P3597
   Rao A. S., 1995, ICMAS-95 Proceedings. First International Conference on Multi-Agent Systems, P312
   RAO AS, 1992, PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE (KR 92), P439
   Rao AS, 1998, J LOGIC COMPUT, V8, P293, DOI 10.1093/logcom/8.3.293
   Shladover SE, 2007, IEEE T INTELL TRANSP, V8, P584, DOI 10.1109/TITS.2007.903052
   Swaroop D., 1997, THESIS U CALIFORNIA
   Visser W., 2003, Automated Software Engineering, V10, P203, DOI 10.1023/A:1022920129859
   Wille M., 2008, HUMAN FACTORS ASSIST, P243
   Wooldridge M., 1999, APPL LOGIC SER
   Wooldridge M. J., 2002, INTRO MULTIAGENT SYS
NR 37
TC 73
Z9 83
U1 1
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 88
EP 106
DI 10.1016/j.scico.2017.05.006
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100006
OA hybrid, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Pérez-Rodríguez, R
   Anido-Rifón, L
   Gómez-Carballa, M
   Mouriño-García, M
AF Perez-Rodriguez, Roberto
   Anido-Rifon, Luis
   Gomez-Carballa, Miguel
   Mourino-Garcia, Marcos
TI Architecture of a concept-based information retrieval system for
   educational resources
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Exploratory search; Information retrieval; Bag-of-concepts (BoC)
   representation; Software architecture
AB Internet searches that occur in learning contexts are very different in nature from traditional "lookup" or "known item" searches: students usually perform searches to gather information about or master a certain topic, and the search engine is used as an aid in the exploration of a domain of knowledge. This paper presents SDE (Search Discover Explore), an exploratory search engine for educational resources that was built on top of the knowledge provided by Wikipedia: the set of its articles provides the search space (the set of topics that users can investigate), and the relationships between Wikipedia articles inform the suggestions that the search engine provides to students to go deeper in the exploration of a certain domain of knowledge. SDE indexes several hundreds of thousands of educational resources from high-quality Web sources, such as Project Gutenberg and Open Education Europe, among many others. This paper also reports the results of the evaluation of SDE by experts in Technology Enhanced Learning in several workshops that took place across Europe in the context of the European FP7 project iTEC. These results enable us to conclude that the exploratory search paradigm, making use of knowledge mined from Wikipedia, is a very promising approach for building information retrieval systems to be used in learning contexts. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Perez-Rodriguez, Roberto; Anido-Rifon, Luis; Gomez-Carballa, Miguel; Mourino-Garcia, Marcos] Univ Vigo, Dept Telemat Engn, Vigo, Pontevedra, Spain.
C3 Universidade de Vigo
RP Pérez-Rodríguez, R (corresponding author), Univ Vigo, Dept Telemat Engn, Vigo, Pontevedra, Spain.
EM roberto.perez@gist.uvigo.es; lanido@det.uvigo.es;
   miguelgomez@det.uvigo.es; marcos@gist.uvigo.es
RI Anido-Rifón, Luis/D-4597-2018; Anido-Rifón, Luis/ABI-6838-2020
OI Anido-Rifón, Luis/0000-0003-2780-2727; Anido-Rifón,
   Luis/0000-0003-2780-2727
FU Xunta de Galicia [GRC2013-006]
FX This work has been partially funded by Xunta de Galicia through Grant
   No. GRC2013-006.
CR [Anonymous], 2004, P ACM C HUMAN FACTOR, DOI [DOI 10.1145/985692.985765, 10.1145/985692.985765]
   [Anonymous], 2012, P 27 ACM S APPL COMP, DOI DOI 10.1145/2245276.2245347
   [Anonymous], 2011, TOIS
   [Anonymous], 1988, P SIGCHI C HUMAN FAC, DOI DOI 10.1145/57167.57214
   [Anonymous], 2015, Apache Solr enterprise search server
   [Anonymous], 2008, P AAAI WIKIAI WORKSH
   Arends M., 2012, 2012 IEEE 12th International Conference on Advanced Learning Technologies (ICALT), P395, DOI 10.1109/ICALT.2012.166
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Blizard W. D., 1989, Notre Dame Journal of Formal Logic, V30, P36, DOI 10.1305/ndjfl/1093634995
   Cornolti Marco., 2013, Proceedings of the 22nd international conference on World Wide Web, P249, DOI [10.1145/2488388.2488411, DOI 10.1145/2488388.2488411]
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   DIAZAVILES E, 2011, UBIQUITOUS LEARNING, P83
   Egozi O., 2008, P 23 AAAI C ARTIFICI, P1132
   Gabrilovich E., 2007, ACM SIGIR Forum, V41, P123, DOI DOI 10.1145/1328964.1328988
   Gabrilovich E, 2007, 20TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P1606
   Gediga G., 2002, ENCY COMPUTER SCI TE, V45, P127
   Giles J, 2005, NATURE, V438, P900, DOI 10.1038/438900a
   Giordano D., 2009, 9 INT C INF TECHN AP, P1
   Guha R.V., 2003, Proceedings of the 12th international conference on World Wide Web, P700, DOI DOI 10.1145/775152.775250
   Gunnemann Nikou, 2013, Datenbank-Spektrum, V13, P213, DOI 10.1007/s13222-013-0134-x
   HARRIS ZS, 1968, INTERSCIENCE TRACTS, V21
   KRASNER GE, 1988, J OBJECT-ORIENT PROG, V1, P41
   Landauer TK, 1997, PSYCHOL REV, V104, P211, DOI 10.1037/0033-295X.104.2.211
   Lops P, 2011, RECOMMENDER SYSTEMS HANDBOOK, P73, DOI 10.1007/978-0-387-85820-3_3
   Malo P, 2011, J AM SOC INF SCI TEC, V62, P2496, DOI 10.1002/asi.21596
   Marchionini G, 2006, COMMUN ACM, V49, P41, DOI 10.1145/1121949.1121979
   Mendes Pablo N, 2011, P 7 INT C SEM SYST, P1, DOI [DOI 10.1145/2063518.2063519, 10.1145/2063518.2063519]
   Mihalcea Rada, 2007, P 16 ACM C C INF KNO, P233, DOI DOI 10.1145/1321440.1321475.19
   MILNE D.N., 2007, Proceedings of the Sixteenth ACM Conference on Conference on information and Knowledge Management (Lisbon, Portugal, November 06 - 10, P445, DOI DOI 10.1145/1321440.1321504
   Milne D, 2013, ARTIF INTELL, V194, P222, DOI 10.1016/j.artint.2012.06.007
   Müller C, 2009, LECT NOTES COMPUT SC, V5706, P219, DOI 10.1007/978-3-642-04447-2_28
   Niemann K., 2015, P 5 INT C LEAR AN KN, P414
   Price A. Z. R. J., 2003, P S DOC IM UND TECHN, P87
   Reeve Lawrence., 2005, SAC 05, P1634, DOI DOI 10.1145/1066677.1067049
   Sahlgren M, 2008, ITAL J LINGUIST, V20, P33
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Tackstrom O., 2005, THESIS
   Van Assche F., 2015, REENGINEERING UPTAKE, P115
   Wilson E.O., 1975, P1
   Xing Wei, 2006, Proceedings of the Twenty-Ninth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P178
   Yi X, 2009, LECT NOTES COMPUT SC, V5478, P29
NR 41
TC 6
Z9 6
U1 0
U2 32
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2016
VL 129
SI SI
BP 72
EP 91
DI 10.1016/j.scico.2016.05.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DW0CM
UT WOS:000383308500006
OA hybrid
DA 2024-07-18
ER

PT J
AU Boudjadar, A
   David, A
   Kim, JH
   Larsen, KG
   Mikucionis, M
   Nyman, U
   Skou, A
AF Boudjadar, Abdeldjalil
   David, Alexandre
   Kim, Jin Hyun
   Larsen, Kim G.
   Mikucionis, Marius
   Nyman, Ulrik
   Skou, Arne
TI Statistical and exact schedulability analysis of hierarchical scheduling
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Symposium on Formal Aspects of Component Software
   (FACS) Colocated with the 11th International Conference on Integrated
   Formal Methods (IFM)
CY SEP 10-12, 2014
CL Bertinoro, ITALY
DE Hierarchical scheduling systems; Schedulability analysis; Resource
   utilization; Uppaal; Statistical model checking
ID CONFIDENCE
AB This paper contains two contributions: 1) A development methodology involving two techniques to enhance the resource utilization and 2) a new generic multi-core resource model for hierarchical scheduling systems.
   As the first contribution, we propose a two-stage development methodology relying on the adjustment of timing attributes in the detailed models during the design stage. We use a lightweight method (statistical model checking) for design exploration, easily assuring high confidence in the correctness of the models. Once a satisfactory design has been found, it can be proved schedulable using the computation costly method (symbolic model checking). In order to analyze a hierarchical scheduling system compositionally, we introduce the notion of a stochastic supplier modeling the supply of resources from each component to its child components in the hierarchy. We specifically investigate two different techniques to widen the set of provably schedulable systems: 1) a new supplier model; 2) restricting the potential task offsets.
   We also provide a way to estimate the minimum resource supply (budget) that a component is required to provide, In contrast to analytical methods, we prove non-schedulable cases via concrete counterexamples. By having richer and more detailed scheduling models this framework, has the potential to prove the schedulability of more systems.
   As the second contribution, we introduce a generic resource model for multi-core hierarchical scheduling systems, and show how it can be instantiated for classical resource models: Periodic Resource Models (PRM) and Explicit Deadline Periodic (EDP) resource models. The generic multi-core resource model is presented in the context of a compositional model-based approach for schedulability analysis of hierarchical scheduling systems.
   The multi-core framework presented in this paper is an extension of the single-core framework used for the analysis in the rest of the paper. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Boudjadar, Abdeldjalil; David, Alexandre; Kim, Jin Hyun; Larsen, Kim G.; Mikucionis, Marius; Nyman, Ulrik; Skou, Arne] Aalborg Univ, Comp Sci, Aalborg, Denmark.
C3 Aalborg University
RP Nyman, U (corresponding author), Aalborg Univ, Comp Sci, Aalborg, Denmark.
EM jalil@cs.aau.dk; adavid@cs.aau.dk; jin@cs.aau.dk; kgl@cs.aau.dk;
   marius@cs.aau.dk; ulrik@cs.aau.dk; ask@cs.aau.dk
RI Nyman, Ulrik/HNJ-5352-2023; Skou, Arne J/J-3659-2017; Mikucionis,
   Marius/AAF-7969-2020
OI Nyman, Ulrik/0000-0001-6430-540X; Skou, Arne/0000-0002-3727-9936;
   Mikucionis, Marius/0000-0001-8157-5428; Guldstrand Larsen,
   Kim/0000-0002-5953-3384
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Amnell T, 2003, LECT NOTES COMPUT SC, V2791, P60
   [Anonymous], P 6 INT WORKSH JAV T
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2009, SIMULATION RELATIONS
   [Anonymous], MINIMUM COST REACHAB
   [Anonymous], 2005, 26 IEEE INT REAL TIM, DOI DOI 10.1109/RTSS.2005.25
   [Anonymous], 2011, SIGBED REV
   [Anonymous], P 10 WORKSH QUANT AS
   [Anonymous], 2005, J EMBEDDED COMPUT
   [Anonymous], LNCS
   [Anonymous], J CONVERG
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2012, REAL TIME SYSTEMS AR
   [Anonymous], P INT C EMB REAL TIM
   Basu Ananda, 2012, International Journal on Software Tools for Technology Transfer, V14, P53, DOI 10.1007/s10009-011-0201-2
   Behnam M., 2008, OSPERT 2008, Proceedings of the Fourth International Workshop on Operating Systems Platforms for Embedded Real-Time Applications, P63
   Boudjadar A, 2014, LECT NOTES COMPUT SC, V8348, P61, DOI 10.1007/978-3-319-07602-7_6
   Carnevali L, 2013, IEEE T SOFTWARE ENG, V39, P638, DOI 10.1109/TSE.2012.54
   Clarke EM, 2008, LECT N BIOINFORMAT, V5307, P231, DOI 10.1007/978-3-540-88562-7_18
   Clopper CJ, 1934, BIOMETRIKA, V26, P404, DOI 10.1093/biomet/26.4.404
   David Alexandre, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P293, DOI 10.1007/978-3-642-34032-1_28
   David Alexandre, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P349, DOI 10.1007/978-3-642-22110-1_27
   David A, 2012, ELECTRON PROC THEOR, P122, DOI 10.4204/EPTCS.92.9
   David A, 2011, LECT NOTES COMPUT SC, V6919, P80, DOI 10.1007/978-3-642-24310-3_7
   Deng Z, 1997, REAL TIM SYST SYMP P, P308, DOI 10.1109/REAL.1997.641292
   Easwaran A, 2007, RTSS 2007: 28TH IEEE INTERNATIONAL REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P129
   Frey J, 2010, AM STAT, V64, P242, DOI 10.1198/tast.2010.09140
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Hérault T, 2004, LECT NOTES COMPUT SC, V2937, P73
   HOEFFDING W, 1963, J AM STAT ASSOC, V58, P13, DOI 10.2307/2282952
   Larsen K, 2001, LECT NOTES COMPUT SC, V2102, P493
   Martins J, 2011, LECT NOTES COMPUT SC, V6991, P131, DOI 10.1007/978-3-642-24559-6_11
   Mok AK, 2001, SEVENTH IEEE REAL-TIME TECHNOLOGY AND APPLICATIONS SYMPOSIUM, PROCEEDINGS, P75, DOI 10.1109/RTTAS.2001.929867
   Montgomery D.C., 2006, DESIGN ANAL EXPT, DOI DOI 10.1198/TECH.2006.S372
   Phan L.T. X., 2011, SIGBED Rev, V8, P62, DOI DOI 10.1145/1967021.1967029
   Phan LTX, 2013, IEEE REAL TIME, P217, DOI 10.1109/RTAS.2013.6531094
   Shin I, 2003, RTSS 2003: 24TH IEEE INTERNATIONAL REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P2, DOI 10.1109/REAL.2003.1253249
   Shin I., 2008, ACM Trans. Embed. Comput. Syst, V7
   Shin I, 2008, ECRTS 2008: PROCEEDINGS OF THE 20TH EUROMICRO CONFERENCE ON REAL-TIME SYSTEMS, P181, DOI 10.1109/ECRTS.2008.28
   Sun Y, 2014, C ELECT INSUL DIEL P, P15, DOI 10.1109/CEIDP.2014.6995782
   Tindell K., 1994, Adding time-offsets to schedulability analysis
NR 42
TC 15
Z9 17
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2016
VL 127
SI SI
BP 103
EP 130
DI 10.1016/j.scico.2016.05.008
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DQ5ZA
UT WOS:000379282600006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Basten, B
   van den Bos, J
   Hills, M
   Klint, P
   Lankamp, A
   Lisser, B
   van der Ploeg, A
   van der Storm, T
   Vinju, J
AF Basten, Bas
   van den Bos, Jeroen
   Hills, Mark
   Klint, Paul
   Lankamp, Arnold
   Lisser, Bert
   van der Ploeg, Atze
   van der Storm, Tijs
   Vinju, Jurgen
TI Modular language implementation in Rascal - <i>experience</i>
   <i>report</i>
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Language engineering; Language workbench; Meta-programming; Modularity;
   Compiler generators
ID SYSTEM
AB All software evolves, and programming languages and programming language tools are no exception. And just like in ordinary software construction, modular implementations can help ease the process of changing a language implementation and its dependent tools. However, the syntactic and semantic dependencies between language features make this a challenging problem. In this paper we detail how programming languages can be implemented in a modular fashion using the RASCAL meta-programming language. RASCAL supports extensible definition of concrete syntax, abstract syntax and operations on concrete and abstract syntax trees like matching, traversal and transformation. As a result, new language features can be added without having to change existing code. As a case study, we detail our solution of the LDTA'11 Tool Challenge: a modular implementation of OBERON-0, a relatively simple imperative programming language. The approach we sketch can be applied equally well to the implementation of domain-specific languages. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Basten, Bas; Klint, Paul; Lisser, Bert; van der Storm, Tijs; Vinju, Jurgen] Ctr Wiskunde & Informat, Amsterdam, Netherlands.
   [van der Ploeg, Atze] Chalmers Univ Technol, S-41296 Gothenburg, Sweden.
   [Klint, Paul; van der Storm, Tijs; Vinju, Jurgen] INRIA Lille Nord Europe, Lille, France.
   [Hills, Mark] E Carolina Univ, Greenville, NC 27858 USA.
   [Lankamp, Arnold] Xebia, Hilversum, Netherlands.
   [van den Bos, Jeroen] Netherlands Forens Inst, The Hague, Netherlands.
C3 Chalmers University of Technology; University of North Carolina; East
   Carolina University
RP Basten, B (corresponding author), Ctr Wiskunde & Informat, Amsterdam, Netherlands.
EM storm@cwi.nl
RI van der Storm, Tijs/HGB-8960-2022
OI van den Bos, Jeroen/0000-0002-6759-4654; Hills,
   Mark/0000-0003-0996-9275; van der Ploeg, Atze/0000-0001-9535-5282
CR Basten B., 2010, Proceedings of the 2010 10th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2010), P101, DOI 10.1109/SCAM.2010.21
   Basten B., 2011, LECT NOTES COMPUT SC, V6940, P283
   Bergstra J. A., 1989, ALGEBRAIC SPECIFICAT
   Casey A., 2011, P 10 INT C ASPECT OR, P7
   CORDY JR, 1991, COMPUT LANG, V16, P97, DOI 10.1016/0096-0551(91)90019-6
   Dijkstra A, 2006, LECT NOTES COMPUT SC, V3945, P30
   Economopoulos G, 2009, LECT NOTES COMPUT SC, V5501, P126, DOI 10.1007/978-3-642-00722-4_10
   Ekman T, 2006, LECT NOTES COMPUT SC, V4143, P422
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Erdweg S, 2013, LECT NOTES COMPUT SC, V8225, P197, DOI 10.1007/978-3-319-02654-1_11
   Grimm R, 2006, ACM SIGPLAN NOTICES, V41, P38, DOI 10.1145/1133981.1133987
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   JOHNSSON T, 1985, LECT NOTES COMPUT SC, V201, P190
   Johnstone A, 2014, SCI COMPUT PROGRAM, V87, P23, DOI 10.1016/j.scico.2013.09.012
   Kaminski Ted, 2011, REVISED SELECTED PAP, V6940, P263, DOI [10.1007/978-3-642-28830-2_15, DOI 10.1007/978-3-642-28830-2_15]
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Klint Paul, 2012, Software Language Engineering. 4th International Conference, SLE 2011. Revised Selected Papers, P1, DOI 10.1007/978-3-642-28830-2_1
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Knuth DonaldE., 1971, MATH SYST THEORY, V5, P95
   Lewis J. R., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P108, DOI 10.1145/325694.325708
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Meyer B., 1988, Object-Oriented Software Construction
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mosses P.D., 2015, SCI COMPUT PROGRAM, V97, P2
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   Mosses PD, 1996, LECT NOTES COMPUT SC, V1113, P37
   Rekers J., 1992, THESIS
   Renggli L, 2010, LECT NOTES COMPUT SC, V5969, P274
   Schwerdfeger AC, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P199, DOI 10.1145/1542476.1542499
   Scott Dana., 1971, P S COMPUTERS AUTOMA, P19
   Scott E, 2010, ELECTRON NOTES THEOR, V253, P177, DOI 10.1016/j.entcs.2010.08.041
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
   Sloane AM, 2011, LECT NOTES COMPUT SC, V6491, P408, DOI 10.1007/978-3-642-18023-1_12
   Swierstra S.D., 1998, IFIP C P, V117, P180
   Tobin-Hochstadt S, 2011, PLDI 11: PROCEEDINGS OF THE 2011 ACM CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P132
   Van Den Brand M., 1996, ACM Transactions on Software Engineering and Methodology, V5, P1, DOI 10.1145/226155.226156
   van den Brand MGJ, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P331
   Van den Brand MGJ, 2003, ACM T SOFTW ENG METH, V12, P152, DOI 10.1145/941566.941568
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   van der Storm T., 2011, SEN1111 CWI
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Van Wyk EricR., 2007, GPCE 07, P63
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser Eelco, 1997, THESIS
   Voelter Markus., 2011, GENERATIVE TRANSFORM, P383, DOI [10.1007/978-3-642-35992-7_11, DOI 10.1007/978-3-642-35992-7_11]
   Volter Markus., 2010, Proceedings of the ACM international conference companion on Object oriented programming systems languages and applications companion, P301, DOI [10.1145/1869542.1869623, DOI 10.1145/1869542.1869623]
   WIRTH N, 1996, COMPILER CONSTRUCTIO
NR 52
TC 22
Z9 23
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2015
VL 114
BP 7
EP 19
DI 10.1016/j.scico.2015.11.003
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DX
UT WOS:000367123800002
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Pang, LN
   Wang, CW
   Lawford, M
   Wassyng, A
AF Pang, Linna
   Wang, Chen-Wei
   Lawford, Mark
   Wassyng, Alan
TI Formal verification of function blocks applied to IEC 61131-3
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Critical systems; Formal verification; Function blocks; Tabular
   expressions; IEC 61131-3
ID PLC PROGRAMS
AB Many industrial control systems use programmable logic controllers (PLCs) since they provide a highly reliable, off-the-shelf hardware platform. On the programming side, function blocks (FBs) are reusable components provided by the PLC supplier that can be combined to implement the required system behaviour. A higher quality system may be realized if the FBs are pre-certified to be compliant with an international standard such as IEC 61131-3. We present an approach: 1) to create complete and unambiguous FB requirements using tabular expressions; and 2) to verify the consistency and correctness of FB implementations in the PVS proof environment. We apply our approach to the examples in the informative Appendix F of the IEC 61131-3 standard. We examined the entire library of FBs and their supplied implementations described in structured text (ST) and function block diagrams (FBDs). Our approach identified issues in the informative examples, including: a) ambiguous behavioural descriptions; b) missing assumptions; and c) inconsistent implementations. We also proposed solutions to these issues. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Pang, Linna; Wang, Chen-Wei; Lawford, Mark; Wassyng, Alan] McMaster Univ, McMaster Ctr Software Certificat, Hamilton, ON L8S 4K1, Canada.
C3 McMaster University
RP Pang, LN (corresponding author), McMaster Univ, McMaster Ctr Software Certificat, 1280 Main St W, Hamilton, ON L8S 4K1, Canada.
EM pangl@mcmaster.ca; wangcw@mcmaster.ca; lawford@mcmaster.ca;
   wassyng@mcmaster.ca
OI Wang, Chen-Wei/0000-0003-4046-5585; Pang, Linna/0000-0001-5723-704X
FU Ontario Research Fund - Research Excellence program
FX This work is supported by funding from the Ontario Research Fund -
   Research Excellence program. The authors are grateful to Neeraj Kumar
   Singh and Hao Wang for their technical advice throughout the development
   of this paper. We would like to thank the anonymous reviewers for their
   detailed and very helpful comments. We took them to heart and think that
   the changes inspired by the reviews significantly improved this paper.
CR [Anonymous], 2003, 611313 IEC
   [Anonymous], 2000, P 4 INT C AUTOMATION
   Bakhmach E., 2009, P INT C OPP CHALL WA, P173
   Bauer N, 2004, LECT NOTES COMPUT SC, V3147, P517
   Blech J.O., 2013, CORR
   Camilleri A., 1986, UCAMCLTR91
   Canet G, 2000, IEEE SYS MAN CYBERN, P2449, DOI 10.1109/ICSMC.2000.884359
   Eles C, 2011, LECT NOTES COMPUT SC, V6617, P494, DOI 10.1007/978-3-642-20398-5_38
   Hu X.-M., 2008, THESIS
   Hu XY, 2009, LECT NOTES COMPUT SC, V5596, P119
   IEC, 2013, IEC 61131-3
   IEEE, 2010, 7432 IEEE
   Janicki R, 2005, FUND INFORM, V67, P343
   Janicki R, 1997, ADV COMP SCI, P184
   Jiménez-Fraustro F, 2001, EUROMICRO, P135, DOI 10.1109/EMRTS.2001.934016
   Jin Y, 2010, SCI COMPUT PROGRAM, V75, P980, DOI 10.1016/j.scico.2009.12.009
   John Karl-Heinz, 2010, 611313 IEC
   Kabra A., 2012, 2012 3rd National Conference on Emerging Trends and Applications in Computer Science (NCETACS), P115, DOI 10.1109/NCETACS.2012.6203309
   Lawford M, 2000, LECT NOTES COMPUT SC, V1816, P73
   Lawford M., 2000, P 2000 C INF SCI SYS, V2
   Liu ZY, 2010, FRONT COMPUT SCI CHI, V4, P151, DOI 10.1007/s11704-010-0026-2
   Mader A., 1999, P 11 EUR C REAL TIM, P114
   Melham T., 1987, VLSI SPECIFICATION V, P129
   Munoz C A., 2012, Tools for Practical Software Verification: LASER, International Summer School 2011, Elba Island, Italy, Revised Tutorial Lectures, P96, DOI DOI 10.1007/978-3-642-35746-64
   Németh E, 2009, LECT NOTES COMPUT SC, V5596, P199, DOI 10.1007/978-3-642-03240-0_17
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Pang L., 2013, COMMUN COMPUT PHYS, V419, P163
   PARNAS DL, 1995, SCI COMPUT PROGRAM, V25, P41, DOI 10.1016/0167-6423(95)96871-J
   PARNAS DL, 1994, IEEE T SOFTWARE ENG, V20, P948, DOI 10.1109/32.368133
   PARNAS DL, 1983, COMMUN ACM, V26, P572, DOI 10.1145/358161.358168
   Roussel JM, 2002, WODES'02: SIXTH INTERNATIONAL WORKSHOP ON DISCRETE EVENT SYSTEMS, PROCEEDINGS, P303, DOI 10.1109/WODES.2002.1167703
   Shankar N, 1999, PVS PROVER GUIDE
   Soliman D., 2012, ANNU REV CONTROL
   Special Committee 205 of RTCA, 2011, DO178C RTCA
   Völker N, 2002, SCI COMPUT PROGRAM, V42, P101, DOI 10.1016/S0167-6423(01)00028-4
   Wassyng A., 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P219
   Wassyng A., 2003, P ICSSEA PAR FRANC, P1
NR 37
TC 7
Z9 7
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2015
VL 113
BP 149
EP 190
DI 10.1016/j.scico.2015.10.005
PN 2
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CY2HV
UT WOS:000366230300004
OA Bronze
DA 2024-07-18
ER

PT J
AU Kameyama, Y
   Kiselyov, O
   Shan, CC
AF Kameyama, Yukiyoshi
   Kiselyov, Oleg
   Shan, Chung-chieh
TI Combinators for impure yet hygienic code generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multi-stage programming; Mutable state and control effects; CPS;
   Higher-order abstract syntax; Lexical scope
ID CLOSED TYPES; TRANSFORMATIONS; SYSTEM
AB Code generation is the leading approach to making high-performance software reusable. Effects are indispensable in code generators, whether to report failures or to insert let-statements and if-guards. Extensive painful experience shows that unrestricted effects interact with generated binders in undesirable ways to produce unexpectedly unbound variables, or worse, unexpectedly bound ones. These subtleties hinder domain experts in using and extending the generator. A pressing problem is thus to express the desired effects while regulating them so that the generated code is correct, or at least correctly scoped, by construction.
   We present a code-combinator framework that lets us express arbitrary monadic effects, including mutable references and delimited control, that move open code across generated binders. The static types of our generator expressions not only ensure that a well-typed generator produces well-typed and well-scoped code. They also express the lexical scopes of generated binders and prevent mixing up variables with different scopes. For the first time ever we demonstrate statically safe and well-scoped loop interchange and constant factoring from arbitrarily nested loops.
   Our framework is implemented as a Haskell library that embeds an extensible typed higher-order domain-specific language. It may be regarded as 'staged Haskell.' To become practical, the library relies on higher-order abstract syntax and polymorphism over generated type environments, and is written in a mature language. (C) 2015 Elsevier B.V. All rights reserved.
EM kameyama@acm.org; oleg@okmij.org; ccshan@indiana.edu
FU JSPS, under Kakenhi [25280020]; Grants-in-Aid for Scientific Research
   [25280020] Funding Source: KAKEN
FX We are very grateful to Simon Peyton Jones, Nicolas Pouillard, Nathaniel
   W. Filardo and Jun Inoue for many helpful comments. We appreciate
   helpful discussions with Atsushi Igarashi, and Didier Remy. We thank
   anonymous reviewers for very many suggestions. The support of JSPS,
   under the Kakenhi grant 25280020, is gratefully acknowledged.
CR [Anonymous], THESIS
   [Anonymous], 2012, HIGH ORDER SYMB COMP
   [Anonymous], UUCS2014019 DEP INF
   Begel A, 1999, COMP COMM R, V29, P123, DOI 10.1145/316194.316214
   Bondorf A., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P1, DOI 10.1145/141471.141483
   Calcagno C, 2003, J FUNCT PROGRAM, V13, P545, DOI 10.1017/S0956796802004598
   Calcagno C, 2000, LECT NOTES COMPUT SC, V1853, P25
   Carette J, 2011, SCI COMPUT PROGRAM, V76, P349, DOI 10.1016/j.scico.2008.09.008
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Chen CY, 2005, J FUNCT PROGRAM, V15, P797, DOI 10.1017/S0956796805005617
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Cohen A, 2006, SCI COMPUT PROGRAM, V62, P25, DOI 10.1016/j.scico.2005.10.013
   DANVY O, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P151, DOI 10.1145/91556.91622
   DeVito Z, 2013, ACM SIGPLAN NOTICES, V48, P105, DOI 10.1145/2499370.2462166
   Dussart D., 1996, WSI9628 U TUB
   Eckhardt J, 2007, NEW GENERAT COMPUT, V25, P305, DOI 10.1007/s00354-007-0020-x
   Eo H, 2006, LECT NOTES COMPUT SC, V4279, P61
   ERSHOV AP, 1977, INFORM PROCESS LETT, V6, P38, DOI 10.1016/0020-0190(77)90078-3
   Fluet M, 2006, J FUNCT PROGRAM, V16, P485, DOI 10.1017/S095679680600596X
   Heeren B, 2005, LECT NOTES COMPUT SC, V3350, P253
   Heeren B, 2003, ACM SIGPLAN NOTICES, V38, P3, DOI 10.1145/944746.944707
   Herman D., 2008, ESOP 08
   HUET G, 1978, ACTA INFORM, V11, P31, DOI 10.1007/BF00264598
   Kameyama Y., 2009, P 2009 ACM SIGPLAN W, P111, DOI DOI 10.1145/1480945.1480962
   Keller G., 2008, LNCS
   Kim LS, 2006, ACM SIGPLAN NOTICES, V41, P257, DOI 10.1145/1111320.1111060
   Kiselyov O, 2005, LECT NOTES COMPUT SC, V3605, P488
   Kiselyov Oleg., 2004, EMSOFT 04, P249
   Kiselyov Oleg, 2012, Generic and Indexed Programming, P130, DOI DOI 10.1007/978-3-642-32202-0_3
   Kohlbecker Eugene., 1986, P 1986 ACM C LISP FU, P151
   Launchbury J., 1995, LISP and Symbolic Computation, V8, P293, DOI 10.1007/BF01018827
   Lawall J. L., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P227, DOI 10.1145/182409.182483
   Leijen D., 2004, UUCS200451 DEP COMP
   Lengauer C, 2006, SCI COMPUT PROGRAM, V62, P1, DOI 10.1016/j.scico.2006.05.001
   Mainland Geoffrey, 2012, SIGPLAN Notices, V47, P311
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   Miller D., 1987, Proceedings of the 1987 Symposium on Logic Programming (Cat. No.87CH2472-9), P379
   Nanevski A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352591
   Pientka B, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P371, DOI 10.1145/1328438.1328483
   POPL, 2003, POPL 03 C ANN ACM S
   Poswolsky A, 2009, ELECTRON NOTES THEOR, V228, P113, DOI 10.1016/j.entcs.2008.12.120
   Pottier F, 2007, IEEE S LOG, P356, DOI 10.1109/LICS.2007.44
   Pouillard N, 2010, ICFP 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P217
   Püschel M, 2005, P IEEE, V93, P232, DOI 10.1109/JPROC.2004.840306
   Rhiger M, 2012, LECT NOTES COMPUT SC, V7211, P559, DOI 10.1007/978-3-642-28869-2_28
   Rompf T, 2012, COMMUN ACM, V55, P121, DOI 10.1145/2184319.2184345
   Swadi K., 2006, PEPM, V06
   Taha W., 2000, PEPM, P34, DOI DOI 10.1145/328690.328697
   Taha Walid., 2003, Environment Classi ers, V38, P26, DOI [DOI 10.1145/640128.604134, 10.1145/640128.604134]
   Thiemann P., 1999, Journal of Functional Programming, V9, P483, DOI 10.1017/S0956796899003469
   Thiemann Peter, 1999, PARTIAL EVALUATION H
   Wand M., 1998, LISP SYMBOLIC COMPUT, V10, P189, DOI DOI 10.1023/A:1007720632734
   Westbrook Edwin., 2010, PLDI 10
   Xi H., 2003, GUARDED RECURSIVE DA, P224
   Yallop J, 2014, LECT NOTES COMPUT SC, V8475, P119, DOI 10.1007/978-3-319-07151-0_8
NR 55
TC 9
Z9 9
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 120
EP 144
DI 10.1016/j.scico.2015.08.007
PN 2
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CW3HD
UT WOS:000364881700002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Albert, E
   Arenas, P
   Genaim, S
   Puebla, G
AF Albert, Elvira
   Arenas, Puri
   Genaim, Samir
   Puebla, German
TI A practical comparator of cost functions and its applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Foundational Practical Aspects Resource Analysis (FOPARA)
CY MAY 19, 2011
CL Madrid, SPAIN
DE Resource analysis; Cost analysis; Function comparison; Upper/lower
   bounds
AB Automatic cost analysis has significantly advanced in the last few years. Nowadays, a number of cost analyzers exist which automatically produce upper- and/or lower-bounds on the amount of resources required to execute a program. Cost analysis has a number of important applications such as resource-usage verification and program synthesis and optimization. For such applications to be successful, it is not sufficient to have automatic cost analysis. It is also required to have automated means for handling the analysis results, which are in the form of Cost Functions (CFs for short) i.e., non-recursive expressions composed of a relatively small number of types of basic expressions. In particular, we need automated means for comparing CFs in order to prove that a CF is smaller than or equal to another one for all input values of interest. General function comparison is a hard mathematical problem. Rather than attacking the general problem, in this work we focus on comparing CFs by exploiting their syntactic properties and we present, to the best of our knowledge, the first practical CF comparator which opens the door to fully automated applications of cost analysis. We have implemented the comparator and made its source code available online, so that any cost analyzer can use it. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Albert, Elvira; Arenas, Puri; Genaim, Samir] Complutense Univ Madrid UCM, DSIC, Madrid, Spain.
   [Puebla, German] Tech Univ Madrid UPM, DLSIIS, Madrid, Spain.
C3 Complutense University of Madrid; Universidad Politecnica de Madrid
RP Albert, E (corresponding author), Complutense Univ Madrid UCM, DSIC, Madrid, Spain.
EM elvira@sip.ucm.es; puri@sip.ucm.es; samir.genaim@fdi.ucm.es;
   german@fi.upm.es
OI Genaim, Samir/0000-0002-7176-1881
FU EU project ENVISAGE: Engineering Virtualized Services [FP7-ICT-610582];
   Spanish projects [TIN2008-05624, TIN2012-38137]; CM project
   [S2013/ICE-3006]
FX This work was funded partially by the EU project FP7-ICT-610582
   ENVISAGE: Engineering Virtualized Services
   (http://www.envisage-project.eu), by the Spanish projects TIN2008-05624
   and TIN2012-38137, and by the CM project S2013/ICE-3006.
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   Albert E., 2012, P WORKSH PART EV PRO, P151
   Albert E., 2011, P 20 ACM SIGPLAN WOR, P73
   Albert E, 2013, ACM T COMPUT LOG, V14, DOI 10.1145/2499937.2499943
   Albert E, 2009, LECT NOTES COMPUT SC, V5705, P258, DOI 10.1007/978-3-642-03829-7_9
   Albert E, 2010, LECT NOTES COMPUT SC, V6324, P1
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Albert E, 2009, LECT NOTES COMPUT SC, V5904, P294, DOI 10.1007/978-3-642-10672-9_21
   Alonso-Blas Diego Esteban, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P319, DOI 10.1007/978-3-319-02444-8_23
   [Anonymous], 1993, Prentice Hall international series in computer science
   Bagnara R., 2013, CORR
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Craig Stephen-John., 2005, PPDP 05, P23
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Debray Saumya K., 1995, CLIP20950 TR UPM FAC
   Fuhs C, 2008, LECT NOTES COMPUT SC, V5117, P110, DOI 10.1007/978-3-540-70590-1_8
   Gulavani LS, 2008, LECT NOTES COMPUT SC, V5123, P370
   Hermenegildo Manuel., 2005, Proc. of the 7th ACM SIGPLAN international conference on Principles and practice of declarative programming, P1
   Hirokawa N, 2007, INFORM COMPUT, V205, P474, DOI 10.1016/j.ic.2006.08.010
   Hong H, 1998, J AUTOM REASONING, V21, P23, DOI 10.1023/A:1005983105493
   KIRKPATRICK S, 1983, SCIENCE, V220, P671, DOI 10.1126/science.220.4598.671
   Lopez-Garcia Pedro, 2012, Foundational and Practical Aspects of Resource Analysis. Second International Workshop, FOPARA 2011. Revised Selected Papers, P54, DOI 10.1007/978-3-642-32495-6_4
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Neurauter F, 2010, LECT NOTES ARTIF INT, V6173, P502, DOI 10.1007/978-3-642-14203-1_42
   Ochoa C, 2008, ELECTRON NOTES THEOR, V220, P145, DOI 10.1016/j.entcs.2008.11.024
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
NR 27
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 483
EP 504
DI 10.1016/j.scico.2014.12.001
PN 3
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DB5LY
UT WOS:000368556800006
OA Bronze
DA 2024-07-18
ER

PT J
AU Davies, J
   Milward, D
   Wang, CW
   Welch, J
AF Davies, Jim
   Milward, David
   Wang, Chen-Wei
   Welch, James
TI Formal model-driven engineering of critical information systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Workshop on Formal-Techniques-for-
   Safety-Critical-Systems (FTSCS 2012)
CY NOV 12, 2012
CL Kyoto, JAPAN
DE Model-driven engineering; Formal methods; Critical systems; Information
   systems; Data migration
ID REFINEMENT; TRANSFORMATION; SEMANTICS; RULES
AB Model-driven engineering is the generation of software artefacts from abstract models. This is achieved through transformations that encode domain knowledge and implementation strategies. The same transformations can be used to produce quite different systems, or to produce successive versions of the same system. A model-driven approach can thus reduce the cost of development. It can also reduce the cost of verification: if the transformations are shown or assumed to be correct, each new system or version can be verified in terms of its model, rather than its implementation. This paper introduces an approach to model-driven engineering that is particularly suited to the development of critical information systems. The language of the models, and the language of the transformations, are amenable to formal analysis. The transformation strategy, and the associated development methodology, are designed to preserve systems integrity and availability. (C) 2014 The Authors. Published by Elsevier B.V.
C1 [Davies, Jim; Milward, David; Wang, Chen-Wei; Welch, James] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
C3 University of Oxford
RP Welch, J (corresponding author), Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
EM Jim.Davies@cs.ox.ac.uk; David.Milward@cs.ox.ac.uk; jackie@cse.yorku.ca;
   James.Welch@cs.ox.ac.uk
RI Welch, Doctor James/HZI-2490-2023
OI Welch, Doctor James/0000-0002-3563-1254; Welch,
   James/0000-0003-1017-1623; Davies, Jim/0000-0003-4664-6862; Wang,
   Chen-Wei/0000-0003-4046-5585
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], 2011, META OBJECT FACILITY
   [Anonymous], MARS CLIM ORB MISH I
   [Anonymous], OCL 2 3 1 SPEC
   Australian Transport Safety Bureau, 2011, IN FLIGHT UPS 154 KM
   Back RJR, 1994, LECT NOTES COMPUT SC, V836, P367
   Bauer Christian., 2006, Java Persistence with Hibernate
   Boiten E, 2009, FORM ASP COMPUT, V21, P65, DOI 10.1007/s00165-007-0066-z
   Bolton C, 2006, FORM ASP COMPUT, V18, P181, DOI 10.1007/s00165-005-0081-x
   Cavalcanti A., 2005, SOFTW SYST MODEL, V4, P277, DOI DOI 10.1007/S10270-005-0085-2
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Davies Jim, 2012, Formal Methods: Foundations and Applications. Proceedings 15th Brazilian Symposium, SBMF 2012, P99, DOI 10.1007/978-3-642-33296-8_9
   Davies J, 2014, SCI COMPUT PROGRAM, V89, P88, DOI 10.1016/j.scico.2013.02.002
   Davies J, 2008, ELECTRON NOTES THEOR, V195, P151, DOI 10.1016/j.entcs.2007.08.031
   Davies J, 2005, ELECTRON NOTES THEOR, V130, P39, DOI 10.1016/j.entcs.2005.03.004
   Derrick J., 2001, FACIT, VSecond
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   Fischer C, 1998, LECT NOTES COMPUT SC, V1493, P5, DOI 10.1007/BFb0056022
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Fowler M., 2015, UML Distilled: A Brief Guide to the Standard Object Modeling Language
   Frankel D.S., 2003, Model Driven Architecture: Applying MDA to Enterprise Computing
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Khalafinejad S, 2013, INFORM SOFTWARE TECH, V55, P1017, DOI 10.1016/j.infsof.2012.12.007
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   Knight JC, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P547, DOI 10.1109/ICSE.2002.1007998
   Mahony B, 1998, PROC INT CONF SOFTW, P95, DOI 10.1109/ICSE.1998.671106
   Mammar A, 2009, SOFTW SYST MODEL, V8, P385, DOI 10.1007/s10270-008-0098-8
   Massoudi A., 2012, FINANCIAL TIMES
   McComb T, 2006, LECT NOTES COMPUT SC, V4085, P205
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   Smith G., 1995, Formal Aspects of Computing, V7, P289, DOI 10.1007/BF01211075
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   SNOOK C, 2004, UML B FORMAL MODELLI
   Stenzel K, 2011, LECT NOTES COMPUT SC, V6981, P533, DOI 10.1007/978-3-642-24485-8_39
   Visser Eelco, 2004, Domain-Specific Program Generation: International Seminar, Dagstuhl Castle, Germany, March 23-28, 2003, P216, DOI DOI 10.1007/978-3-540-25935-0_13
   Wang CW, 2012, ELECTRON P THEOR COM, P100, DOI 10.4204/EPTCS.105.8
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
   Williams M., 2010, COMPUTERWORLD   0209
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
NR 41
TC 9
Z9 11
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2015
VL 103
BP 88
EP 113
DI 10.1016/j.scico.2014.11.004
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CE6QX
UT WOS:000351964100006
OA hybrid
DA 2024-07-18
ER

PT J
AU Backhouse, R
   Truong, H
AF Backhouse, Roland
   Hai Truong
TI The capacity-<i>C</i> torch problem
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Algorithmic problem solving; Dynamic programming; Linear programming;
   Integer programming; Optimisation
AB The torch problem (also known as the bridge problem or the flashlight problem) is about getting a number of people across a bridge as quickly as possible under certain constraints. Although a very simply stated problem, the solution is surprisingly non-trivial. The case in which there are just four people and the capacity of the bridge is two is a well-known puzzle, widely publicised on the Internet. We consider the general problem where the number of people, their individual crossing times and the capacity of the bridge are all input parameters. We present two methods to determine the shortest total crossing time: the first expresses the problem as an integer-programming problem that can be solved by a standard linear-programming package, and the second expresses the problem as a shortest-path problem in an acyclic directed graph, i.e. as a dynamic-programming problem. The complexity of the linear-programming solution is difficult to predict; its main purpose is to act as an independent test of the correctness of the results returned by the second solution method. The dynamic-programming solution has best- and worst-case time complexity proportional to the square of the number of people. An empirical comparison of the efficiency of both methods is also presented. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Backhouse, Roland] Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
   [Hai Truong] Natl Univ Ho Chi Minh City, HCMC Univ Technol, Fac Comp Sci & Engn, Ho Chi Minh City, Vietnam.
C3 University of Nottingham; Vietnam National University Hochiminh City
RP Backhouse, R (corresponding author), Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
EM roland.backhouse@nottingham.ac.uk; haitruong@cse.hcmut.edu.vn
OI Backhouse, Roland/0000-0002-0140-8089
CR [Anonymous], 1988, Algorithms
   Backhouse R., 2011, ALGORITHMIC PROBLEM
   Backhouse R, 2008, LECT NOTES COMPUT SC, V5133, P57
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Rote G., 2002, B EATCS, V78, P241
   Truong Hai, 2011, CAPACITY C TORCH PRO
NR 6
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2015
VL 102
BP 76
EP 107
DI 10.1016/j.scico.2015.01.003
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE7UO
UT WOS:000352047500005
OA Green Submitted, hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Cortellessa, V
   Mirandola, R
   Potena, P
AF Cortellessa, Vittorio
   Mirandola, Raffaela
   Potena, Pasqualina
TI Managing the evolution of a software architecture at minimal cost under
   performance and reliability constraints
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software evolution; Software cost; Software reliability; Software
   performance; Optimization model
ID ERROR PROPAGATION; OPTIMIZATION; QUALITY; AVAILABILITY; TRADEOFF; MODELS
AB Managing a software architecture after the deployment phase is a very complex task due to frequent changes in the software requirements and environment. The software architecture must evolve in order to tackle such changes. The goal of this paper is to provide support for the decisions that software architects make after deployment. This approach is based on an optimization model whose solution suggests the "best" actions to be taken according to a given change scenario (i.e., a set of new requirements that induce changes in the structural and behavioral aspects of the software architecture). The model aims to minimize the costs while keeping the reliability and the performance of the software architecture within certain thresholds. The approach has been implemented as a framework named SHEPhERd, which is composed of a UML case tool, a model builder and a model solver. We show how SHEPhERd works on a smartphone mobile application example, and we highlight its potential to drive architectural decisions through sensitivity analysis. The achieved results are compared with those obtained by two groups of (human) maintainers composed of experts and non-experts with respect to the system and the execution environment, and we show that SHEPhERd outperforms the human judgment-based approaches. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Cortellessa, Vittorio] Univ Aquila, DISIM, Coppito, AQ, Italy.
   [Mirandola, Raffaela] Politecn Milan, Dip Elett Informaz Bioingn, I-20133 Milan, Italy.
   [Potena, Pasqualina] Univ Alcala, Dept Comp Sci, Madrid, Spain.
C3 University of L'Aquila; Polytechnic University of Milan; Universidad de
   Alcala
RP Mirandola, R (corresponding author), Politecn Milan, Dip Elett Informaz Bioingn, I-20133 Milan, Italy.
EM vittorio.cortellessa@univaq.it; raffaela.mirandola@polimi.it;
   p.potena@uah.es
OI MIRANDOLA, RAFFAELA/0000-0003-3154-2438; Cortellessa,
   Vittorio/0000-0002-4507-464X
FU VISION European Research Council [ERC-240555]; European Commission
   [324356]
FX We would like to thank the anonymous referees for their comments that
   helped to substantially improve the quality of the paper. This work has
   been partially supported by the VISION European Research Council
   Starting Grant (ERC-240555), and by European Commission funding under
   the 7th Framework Programme IAPP Marie Curie program for project ICEBERG
   No. 324356.
CR Aleti A, 2013, IEEE T SOFTWARE ENG, V39, P658, DOI 10.1109/TSE.2012.64
   [Anonymous], SOFTWARE ENG MULTIAG
   [Anonymous], 2012, P 20 INT S FDN SOFTW
   [Anonymous], 2002, P 3 INT WORKSHOP SOF, DOI DOI 10.1145/584369.584415
   Babar MA, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P309, DOI 10.1109/ASWEC.2004.1290484
   Bass L., 2001, International Workshop on Software Product-Family Engineering, P169, DOI DOI 10.21236/ADA469332
   Bhattacharya S, 2007, ICCBSS 2007: SIXTH INTERNATIONAL IEEE CONFERENCE ON COMMERCIAL-OFF-THE-SHELF (COTS)-BASED SOFTWARE SYSTEMS, PROCEEDINGS, P41
   Boehm BW., 1981, Software Engineering Economics
   Bondavalli A, 2002, J SYST ARCHITECT, V47, P763, DOI 10.1016/S1383-7621(01)00029-7
   Boone B, 2007, PROCEEDINGS OF THE IASTED INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P242
   Breivold HP, 2012, J SYST SOFTWARE, V85, P2574, DOI 10.1016/j.jss.2012.05.085
   Cortellessa V., APPENDIX PAPER MANAG
   Cortellessa V, 2008, J UNIVERS COMPUT SCI, V14, P1228
   Cortellessa V, 2008, COMPUT OPER RES, V35, P3090, DOI 10.1016/j.cor.2007.01.011
   Cortellessa V, 2007, LECT NOTES COMPUT SC, V4829, P97
   Cortellessa V, 2007, LECT NOTES COMPUT SC, V4608, P140
   Cortellessa V, 2010, EUR CON SFTWR MTNCE, P21, DOI 10.1109/CSMR.2010.15
   Cortellessa V, 2009, 1ST INTERNATIONAL SYMPOSIUM ON SEARCH BASED SOFTWARE ENGINEERING, PROCEEDINGS, P97, DOI 10.1109/SSBSE.2009.22
   David PC, 2008, LECT NOTES COMPUT SC, V5053, P106
   Dearle A, 2004, INTERNATIONAL CONFERENCE ON AUTONOMIC COMPUTING, PROCEEDINGS, P300, DOI 10.1109/ICAC.2004.1301386
   Esfahani Naeem, 2011, SIGSOFT FSE 11 19 AC, P234, DOI DOI 10.1145/2025113.2025147
   Garcia J, 2009, LECT NOTES COMPUT SC, V5581, P146, DOI 10.1007/978-3-642-02351-4_10
   Gokhale SS, 2007, IEEE T DEPEND SECURE, V4, P32, DOI 10.1109/TDSC.2007.4
   Grassi Vincenzo., 2007, Proceedings of the 6th International Workshop on Software and Performance, WOSP'07, P103, DOI 10.1145/1216993.1217011
   Grunske L., 2006, 28th International Conference on Software Engineering Proceedings, P849, DOI 10.1145/1134285.1134431
   Harman M, 2007, GECCO 2007: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOL 1 AND 2, P1106
   Helander ME, 1998, IEEE T SOFTWARE ENG, V24, P420, DOI 10.1109/32.689400
   Immonen A, 2008, SOFTW SYST MODEL, V7, P49, DOI 10.1007/s10270-006-0040-x
   Jae young Bang, 2010, 2010 32nd International Conference on Software Engineering (ICSE), P243, DOI 10.1145/1810295.1810341
   Jung H.-W., 1999, ISSRE
   Jung HW, 1999, EUR J OPER RES, V112, P613, DOI 10.1016/S0377-2217(98)00169-6
   Kazman R, 1998, IEEE INT C ENG COMP, P68, DOI 10.1109/ICECCS.1998.706657
   Kim S, 2009, J SYST SOFTWARE, V82, P1211, DOI 10.1016/j.jss.2009.03.102
   Koziolek A, 2013, J SYST SOFTWARE, V86, P2542, DOI 10.1016/j.jss.2013.03.081
   Martens A., 2010, P 1 JOINT WOSP SIPEW, P105, DOI [DOI 10.1145/1712605.1712624, 10.1145]
   Mikic-Rakic M, 2004, LECT NOTES COMPUT SC, V3083, P1
   Mirandola R., 2010, Proceedings of the 12th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing (SYNASC 2010), P493, DOI 10.1109/SYNASC.2010.16
   Mirandola R, 2014, SCI COMPUT PROGRAM, V80, P356, DOI 10.1016/j.scico.2013.09.017
   Mohamed A, 2008, REQUIR ENG, V13, P147, DOI 10.1007/s00766-008-0062-8
   Mohamed A, 2007, ECBS 2007: 14TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P103
   MUSA JD, 1993, IEEE SOFTWARE, V10, P14, DOI 10.1109/52.199724
   Neubauer T., 2007, P 40 ANN HAW INT C S, P283
   Potena P, 2013, J SYST SOFTWARE, V86, P624, DOI 10.1016/j.jss.2012.10.929
   Risse T., 2009, P 18 INT C WORLD WID, P881, DOI DOI 10.1145/1526709.1526828
   Roshandel R, 2007, LECT NOTES COMPUT SC, V4880, P108
   Shan Tang, 2008, 2008 IEEE 32nd International Computer Software and Applications Conference (COMPSAC), P369, DOI 10.1109/COMPSAC.2008.13
   Trivedi K.S., 2001, Probability and statistics with reliability, queueing, and computer science applications, V2nd
   Vescan Andreea, 2008, 2008 Second UKSIM European Symposium on Computer Modeling and Simulation (EMS), P58, DOI 10.1109/EMS.2008.16
   Wattanapongsakorn N, 2007, RELIAB ENG SYST SAFE, V92, P395, DOI 10.1016/j.ress.2005.12.011
   Yang J, 2009, J SYST SOFTWARE, V82, P319, DOI 10.1016/j.jss.2008.06.039
NR 50
TC 10
Z9 12
U1 0
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 439
EP 463
DI 10.1016/j.scico.2014.06.001
PN 4
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Karatas, F
   Fischer, L
   Kesdogan, D
AF Karatas, Fatih
   Fischer, Lars
   Kesdogan, Dogan
TI Service composition with consideration of interdependent security
   objectives
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Service-oriented computing; QoS-aware service composition;
   Multi-Objective Optimization; Interdependent protection goals; IT
   security
ID GENETIC ALGORITHM; FRAMEWORK; SELECTION
AB Current approaches for service composition consider security as either a single Quality of Service (QoS) attribute or as several mutually independent quality properties. This view is, however, not adequate, as security objectives are no singletons but are subject to interdependence. Another drawback of these approaches is that partial fulfillment of security objectives, either due to technical or organizational constraints cannot be captured. Formal methods on the other hand are usually limited to a fixed set of security objectives. To bridge this gap, we present an approach to assess the quality of service compositions with regards to interdependent security objectives. Our approach utilizes the notion of structural decomposition which estimates the impact of single quality attributes on a security goal. This allows for the definition of domain models for an arbitrary set of security objectives. As the fulfillment of each security objective is individually measured by a utility value, interdependencies between security objectives can be expressed by a single measure. Furthermore, it allows to express partial fulfillment of security objectives. As each security objective is modeled as a utility function on its own, the model resembles a Multi-Objective Optimization (MOO) problem. We present first evaluation results of transforming domain models into MOO problems and tackling them with state-of-the-art genetic algorithms. Furthermore, we give an overview of a support tool for our approach. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Karatas, Fatih; Kesdogan, Dogan] Univ Regensburg, Chair Management Informat Syst 4, D-93055 Regensburg, Germany.
   [Fischer, Lars] Univ Siegen, Chair IT Secur Management, D-57072 Siegen, Germany.
C3 University of Regensburg; Universitat Siegen
RP Karatas, F (corresponding author), Univ Regensburg, Chair Management Informat Syst 4, D-93055 Regensburg, Germany.
EM fatih.karatas@gmx.de; fischer@wiwi.uni-siegen.de; kesdogan@ur.de
OI Fischer, Lars/0000-0002-2755-0374
FU German Federal Ministry of Education and Science (BMBF) [13N10964];
   French Agence Nationale de la Recherche (ANR); EC (FP7) [257787]
FX This work is partially supported by the German Federal Ministry of
   Education and Science (BMBF) under grant no. 13N10964 in the project
   ReSCUelT which is jointly conducted together with the French Agence
   Nationale de la Recherche (ANR). Parts of this work are also supported
   by the di.me project, funded by the EC (FP7/2007-2013) under grant no.
   257787. The authors would like to thank the anonymous reviewers for
   valuable comments.
CR [Anonymous], 2005, P 20 NATL C ARTIFICI
   [Anonymous], 2007, COMM DISTR SYST 15 I
   [Anonymous], 2019, Business Process Management: Concepts, Languages, Architectures
   Bartoletti M, 2006, LECT NOTES COMPUT SC, V4037, P1
   Biskup J., 2009, Security in Computing Systems: Challenges, Approaches and Solutions
   Bistarelli S, 1997, J ACM, V44, P201, DOI 10.1145/256303.256306
   Bistarelli S, 2002, J HEURISTICS, V8, P25, DOI 10.1023/A:1013609600697
   Bosworth S., 2002, Computer security handbook
   Canfora G, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1069
   Carminati B, 2006, ICWS 2006: IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P489
   Coello C. A. C., 2007, EVOLUTIONARY ALGORIT
   Colombo R.T., 2012, SIGSOFT SOFTW ENG NO, V37, P1, DOI DOI 10.1145/2382756.2382781
   Comuzzi M, 2009, ACM T WEB, V3, DOI 10.1145/1541822.1541825
   Deb K, 2002, IEEE T EVOLUT COMPUT, V6, P182, DOI 10.1109/4235.996017
   Deb K., 2010, MULTIOBJECTIVE OPTIM
   Durillo JJ, 2011, ADV ENG SOFTW, V42, P760, DOI 10.1016/j.advengsoft.2011.05.014
   Government of Canada, 1993, CAN TRUST COMP PROD
   Guttman B., 1995, SP NATL I STANDARDS
   Jaeger MC, 2004, EIGHTH IEEE INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P149, DOI 10.1109/EDOC.2004.1342512
   Jain A. K., 1988, Algorithms for Clustering Data, P446
   Karatas Fatih, 2013, Online Communities and Social Computing. 5th International Conference, OCSC 2013 Held as Part of HCI International 2013. Proceedings. LNCS 8029, P375, DOI 10.1007/978-3-642-39371-6_42
   Kellerer H., 2004, Knapsack Problems. Springer Nature Book Archives Millennium, P317
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Kesdogan D, 2006, COMPUT COMMUN, V29, P306, DOI 10.1016/j.comcom.2004.12.011
   Kunreuther H, 2003, J RISK UNCERTAINTY, V26, P231, DOI 10.1023/A:1024119208153
   Lee K., 2003, QoS for Web Services: Requirements and Possible Approaches
   Lenstra AK, 2001, J CRYPTOL, V14, P255, DOI 10.1007/s00145-001-0009-4
   Nieto A., 2012, 2012 IEEE Workshops of International Conference on Advanced Information Networking and Applications (WAINA), P745, DOI 10.1109/WAINA.2012.204
   O'Sullivan J, 2002, DISTRIB PARALLEL DAT, V12, P117, DOI 10.1023/A:1016547000822
   Paci F, 2008, P IEEE I C SERV COMP, P5, DOI 10.1109/SCC.2008.116
   Papazoglou MP, 2007, COMPUTER, V40, P38, DOI 10.1109/MC.2007.400
   SAATY TL, 1990, EUR J OPER RES, V48, P9, DOI 10.1016/0377-2217(90)90057-I
   Sabata B, 1997, THIRD INTERNATIONAL WORKSHOP ON OBJECT-ORIENTED REAL-TIME DEPENDABLE SYSTEMS, PROCEEDINGS, P100, DOI 10.1109/WORDS.1997.609931
   Savola RM, 2009, 2009 THIRD INTERNATIONAL CONFERENCE ON EMERGING SECURITY INFORMATION, SYSTEMS, AND TECHNOLOGIES, P121, DOI 10.1109/SECURWARE.2009.26
   Sobrinho JL, 2002, IEEE ACM T NETWORK, V10, P541, DOI 10.1109/TNET.2002.801397
   STEVENS SS, 1946, SCIENCE, V103, P677, DOI 10.1126/science.103.2684.677
   Tarjan R., 1971, P 12 ANN S SWITCH AU, P114, DOI DOI 10.1109/SWAT.1971.10
   VELLEMAN PF, 1993, AM STAT, V47, P65, DOI 10.2307/2684788
   Wang Chenxi., 1997, Proc. National Information Systems Security Conference, Baltimore, P522
   Wei She, 2010, 2010 IEEE International Conference on Web Services (ICWS), P50, DOI 10.1109/ICWS.2010.37
   Wolf G, 2000, COMPUT NETW, V32, P685, DOI 10.1016/S1389-1286(00)00029-3
   Yan Yuhong., 2012, Proceedings of the 27th Annual ACM Symposium on Applied Computing, P1968
   Yau SS, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P287, DOI 10.1109/ICWS.2009.141
   Ye Z, 2011, LECT NOTES COMPUT SC, V6588, P321, DOI 10.1007/978-3-642-20152-3_24
   Yoon P., 1995, MULTIPLE ATTRIBUTE D
   Yu T, 2007, ACM T WEB, V1, DOI 10.1145/1232722.1232728
   Zeng L., 2003, Proceedings of the 12th International Conference on World Wide Web, P411, DOI [DOI 10.1145/775152.775211, 10.1145/775152.775211]
   Zitzler E, 1999, IEEE T EVOLUT COMPUT, V3, P257, DOI 10.1109/4235.797969
   Zitzler E, 2004, LECT NOTES COMPUT SC, V3242, P832
NR 49
TC 6
Z9 6
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 183
EP 201
DI 10.1016/j.scico.2014.06.016
PN 2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PS
UT WOS:000345725200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Marché, C
AF Marche, Claude
TI Verification of the functional behavior of a floating-point program: An
   industrial case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Deductive program verification; Automated theorem proving;
   Floating-point computations; Quaternions
ID FORMAL VERIFICATION
AB We report a case study that was conducted as part of an industrial research project on static analysis of critical C code. The example program considered in this paper is an excerpt of an industrial code, only slightly modified for confidentiality reasons, involving floating-point computations. The objective was to establish a property on the functional behavior of this code, taking into account rounding errors made during computations. The property is formalized using ACSL, the behavioral specification language available inside the Frama-C environment, and it is verified by automated theorem proving. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Marche, Claude] Inria Saclay Ile France, F-91120 Palaiseau, France.
   Univ Paris 11, CNRS, LRI, F-91405 Orsay, France.
C3 Universite Paris Saclay; Centre National de la Recherche Scientifique
   (CNRS)
RP Marché, C (corresponding author), Univ Paris 11, Bat 650, F-91405 Orsay, France.
OI Marche, Claude/0000-0003-3035-1269
FU U3CAT project of the French national research organization (ANR)
   [ANR-08-SEGI-021]; Hisseo project; RTRA Digiteo
FX This work was partly funded by the U3CAT project (ANR-08-SEGI-021,
   http://frama-c.com/u3cat/) of the French national research organization
   (ANR), and the Hisseo project, funded by RTRA Digiteo
   (DIGITEO-2008-Hisseo, http://hisseo.saclay.inria.fr/).
CR Akbarpour B, 2010, J AUTOM REASONING, V44, P175, DOI 10.1007/s10817-009-9149-2
   [Anonymous], 2008, FRAMA C PLATFORM STA
   [Anonymous], 2001, P 14 INT C THEOR PRO
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 2008, 7542008 IEEE
   Ayad A, 2010, LECT NOTES ARTIF INT, V6173, P127
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Baudin P, ACSL: ANSI/ISO C Specification Language
   Bertot Y., 2004, TEXT THEORET COMP S
   Blazy S, 2009, J AUTOM REASONING, V43, P263, DOI 10.1007/s10817-009-9148-3
   BOBOT F., The Alt-Ergo Automated Theorem Prover
   Bobot F., 2011, BOOGIE 2011 1 INT WO, P53
   Boldo S, 2007, P S COMP ARITHM, P187, DOI 10.1109/ARITH.2007.20
   Boldo S, 2011, MATH COMPUT SCI, V5, P377, DOI 10.1007/s11786-011-0099-9
   Boldo S, 2013, J AUTOM REASONING, V50, P423, DOI 10.1007/s10817-012-9255-4
   Boldo S, 2011, INNOV SYST SOFTW ENG, V7, P151, DOI 10.1007/s11334-011-0151-6
   Boldo Sylvie., 2010, 2 NASA FORMAL METHOD, P14
   Bouillaguet C, 2007, LECT NOTES COMPUT SC, V4349, P74
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Carre B., 1990, Proceedings TRI-Ada '90, P392, DOI 10.1145/255471.255563
   Carreno V., 1995, HOL95
   Cok D.R., 2007, ESC JAVA2 IMPLEMENTA
   Conchon S., 2012, THESIS U PARIS SUD
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delmas D, 2009, LECT NOTES COMPUT SC, V5825, P53
   Dowek G., 2007, P 7 AIAA AV TECHN IN
   Filliatre J.-C., 2012, COMPARE2012
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Gerlach J., 2010, KARLSRUHE REPORTS IN, P191
   Goodloe Alwyn E., 2013, NASA Formal Methods. 5th International Symposium, NFM 2013. Proceedings, P441, DOI 10.1007/978-3-642-38088-4_31
   Harrison J, 2000, FORM METHOD SYST DES, V16, P271, DOI 10.1023/A:1008712907154
   Harrison J, 2000, LECT NOTES COMPUT SC, V1954, P217
   Herms P., 2013, Ph. D. Dissertation
   Hubert Thierry., 2007, Heap Analysis and Verification (HAV), P81
   Klebanov V., 2011, LNCS, V6664, P154, DOI [10.1007/978-3-642-21437-0_14, DOI 10.1007/978-3-642-21437-0_14]
   Kuipers J.B., 1999, Quaternions and rotation sequences: a primer with applications to orbits, aerospace, and virtual reality, DOI DOI 10.1515/9780691211701
   Melquiond G, 2008, LECT NOTES ARTIF INT, V5195, P2, DOI 10.1007/978-3-540-71070-7_2
   Melquiond G, 2012, INFORM COMPUT, V216, P14, DOI 10.1016/j.ic.2011.09.005
   Miné A, 2004, LECT NOTES COMPUT SC, V2986, P3
   Monniaux D, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1353445.1353446
   Moy Y., 2011, JESSIE PLUGIN DEDUCT
   Moya Y, 2010, J SYMB COMPUT, V45, P1184, DOI 10.1016/j.jsc.2010.06.004
   Nguyen T.M.T., 2012, THESIS U PARIS SUD
   Russinoff D., 1998, LMS J Comput Math, V1, P148, DOI DOI 10.1112/S1461157000000176
   Thi Minh Tuyen Nguyen, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P314
NR 46
TC 8
Z9 9
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 279
EP 296
DI 10.1016/j.scico.2014.04.003
PN 3
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KA
UT WOS:000345181100002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU De Angelis, E
   Fioravanti, F
   Pettorossi, A
   Proietti, M
AF De Angelis, E.
   Fioravanti, F.
   Pettorossi, A.
   Proietti, M.
TI Program verification via iterated specialization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software model checking; Constraint logic programming; Program
   specialization; Program transformation
ID SOFTWARE MODEL CHECKING; GUIDED ABSTRACTION; PARTIAL DEDUCTION; LOGIC
AB We present a method for verifying properties of imperative programs by using techniques based on the specialization of constraint logic programs (CLP). We consider a class of imperative programs with integer variables and we focus our attention on safety properties, stating that no error configuration can be reached from any initial configuration. We introduce a CLP program I that encodes the interpreter of the language and defines a predicate unsafe equivalent to the negation of the safety property to be verified. Then, we specialize the CLP program I with respect to the given imperative program and the given initial and error configurations, with the objective of deriving a new CLP program I-sp that either contains the fact unsafe (and in this case the imperative program is proved unsafe) or contains no clauses with head unsafe (and in this case the imperative program is proved safe). If Isp enjoys neither of these properties, we iterate the specialization process with the objective of deriving a CLP program where we can prove unsafety or safety. During the various specializations we may apply different strategies for propagating information (either propagating forward from an initial configuration to an error configuration, or propagating backward from an error configuration to an initial configuration) and different operators (such as the widening and the convex hull operators) for generalizing predicate definitions. Each specialization step is guaranteed to terminate, but due to the undecidability of program safety, the iterated specialization process may not terminate. By an experimental evaluation carried out on a significant set of examples taken from the literature, we show that our method improves the precision of program verification with respect to state-of-the-art software model checkers. (C) 2014 Elsevier B.V. All rights reserved.
C1 [De Angelis, E.; Fioravanti, F.] Univ G DAnnunzio, DEC, I-65127 Pescara, Italy.
   [Pettorossi, A.] Univ Roma Tor Vergata, DICII, I-00133 Rome, Italy.
   [Proietti, M.] CNR IASI, I-00185 Rome, Italy.
C3 G d'Annunzio University of Chieti-Pescara; University of Rome Tor
   Vergata; Consiglio Nazionale delle Ricerche (CNR); Istituto di Analisi
   dei Sistemi ed Informatica "Antonio Ruberti" (IASI-CNR)
RP De Angelis, E (corresponding author), Univ G DAnnunzio, DEC, Viale Pindaro 42, I-65127 Pescara, Italy.
EM emanuele.deangelis@unich.it; fioravanti@unich.it; adp@iasi.cnr.it;
   proietti@iasi.cnr.it
RI Pettorossi, Alberto/D-8503-2016; Proietti, Maurizio/AAW-7487-2020
OI De Angelis, Emanuele/0000-0002-7319-8439; Proietti,
   Maurizio/0000-0003-3835-4931; Pettorossi, Alberto/0000-0001-7858-4032;
   FIORAVANTI, Fabio/0000-0002-1268-7829
CR Ball T, 2011, COMMUN ACM, V54, P68, DOI 10.1145/1965724.1965743
   Beyer Dirk, 2007, International Journal on Software Tools for Technology Transfer, V9, P505, DOI 10.1007/s10009-007-0044-z
   Beyer D, 2013, LECT NOTES COMPUT SC, V7795, P594
   Bjorner Nikolaj S., 2012, EPiC Series in Computing, V20, P3, DOI DOI 10.29007/1L7F
   Brough D. R., 1991, New Generation Computing, V9, P115, DOI 10.1007/BF03037639
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   Cousot P., 1979, 6 ACM S PRINCIPLES P, P269, DOI DOI 10.1145/567752.567778
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2007, LECT NOTES COMPUT SC, V4634, P333
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   Cui BQ, 2000, LECT NOTES ARTIF INT, V1861, P478
   De Angelis Emanuele, 2013, Logic-Based Program Synthesis and Transformation. 22nd International Symposium, LOPSTR 2012. Revised Selected Papers, P51, DOI 10.1007/978-3-642-38197-3_5
   De Angelis E., 2014, Lecture Notes in Computer Science, V8413, P568, DOI [DOI 10.1007/978-3-642-54862-8_47, 10.1007/978-3-642-54862-8_47]
   De Angelis  E., 2013, PEPM, P43
   De Angelis E, 2014, LECT NOTES COMPUT SC, V8318, P182, DOI 10.1007/978-3-642-54013-4_11
   Etalle S, 1996, THEOR COMPUT SCI, V166, P101, DOI 10.1016/0304-3975(95)00148-4
   Fioravanti F, 2004, LECT NOTES COMPUT SC, V3049, P291
   Fioravanti Fabio, 2012, Logic-Based Program Synthesis and Transformation. 21st International Symposium, LOPSTR 2011. Revised Selected Papers, P106, DOI 10.1007/978-3-642-32211-2_8
   Fioravanti F., 2001, LECT NOTES COMPUTER, V2042
   Fioravanti F, 2013, THEOR PRACT LOG PROG, V13, P175, DOI 10.1017/S1471068411000627
   Fioravanti F, 2011, LECT NOTES COMPUT SC, V6945, P165, DOI 10.1007/978-3-642-24288-5_15
   Gallagher J. P., 1993, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics-Based Program Manipulation. PEPM'93, P88, DOI 10.1145/154630.154640
   Grebenshchikov S, 2012, ACM SIGPLAN NOTICES, V47, P405, DOI 10.1145/2345156.2254112
   Grebenshchikov S, 2012, LECT NOTES COMPUT SC, V7214, P549, DOI 10.1007/978-3-642-28756-5_46
   Gulavani BS, 2008, LECT NOTES COMPUT SC, V4963, P443, DOI 10.1007/978-3-540-78800-3_33
   Gupta A, 2009, LECT NOTES COMPUT SC, V5643, P634, DOI 10.1007/978-3-642-02658-4_48
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jaffar J, 1998, J LOGIC PROGRAM, V37, P1, DOI 10.1016/S0743-1066(98)10002-X
   Jaffar J., 2011, SYMBOLIC EXECUTION V
   Jaffar J., 2012, TRACER SYMBOLIC EXEC
   Jaffar J, 2009, LECT NOTES COMPUT SC, V5732, P454, DOI 10.1007/978-3-642-04244-7_37
   Jhala R, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592438
   Leuschel M, 2002, THEOR PRACT LOG PROG, V2, P461, DOI 10.1017/S147106840200145X
   Leuschel M, 2000, LECT NOTES COMPUT SC, V1817, P62, DOI 10.1007/10720327_5
   Leuschel M, 1998, ACM T PROGR LANG SYS, V20, P208, DOI 10.1145/271510.271525
   McCarthy John, 1963, IFIP congress series, P21
   Miller SP, 2010, COMMUN ACM, V53, P58, DOI 10.1145/1646353.1646372
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Peralta JC, 2003, LECT NOTES COMPUT SC, V2664, P90, DOI 10.1007/3-540-45013-0_8
   Peralta JC, 1998, LECT NOTES COMPUT SC, V1503, P246
   Podelski A, 2007, LECT NOTES COMPUT SC, V4354, P245
   Ranzato F, 2008, LECT NOTES COMPUT SC, V4905, P248, DOI 10.1007/978-3-540-78163-9_22
   Rybalchenko A, 2010, LECT NOTES COMPUT SC, V6174, P57, DOI 10.1007/978-3-642-14295-6_7
   Saïdi H, 2000, LECT NOTES COMPUT SC, V1824, P377
NR 44
TC 30
Z9 30
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 149
EP 175
DI 10.1016/j.scico.2014.05.017
PN 2
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RG
UT WOS:000344578700002
DA 2024-07-18
ER

PT J
AU Servetto, M
   Zucca, E
AF Servetto, Marco
   Zucca, Elena
TI A meta-circular language for active libraries
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java; Meta-programming; Nested classes; Active libraries
ID JAVA; TRAITS; CALCULUS; IMPLEMENTATION; EXTENSION; MIXIN; JAM
AB We present a new Java-like language design coupling disciplined meta-programming features with a composition language. That is, programmers can write meta-expressions that combine class definitions, on top of a small set of composition operators, inspired by the seminal Bracha's Jigsaw framework. Moreover, such operators are deep, that is, they allow manipulation (e.g., renaming or duplication) of a nested class at any level of depth. This provides an effective language support for active libraries: namely, a (library) class can provide a method returning a customized version of a class, depending, e.g., on the execution platform. Since a class can contain nested classes, a whole library can be generated in this way. That is, deep operators allow the programmer to better exploit meta-programming capabilities, leading to a "meta-programming in the large" style. We adopt a mixed typechecking technique, which provides a good compromise between meta-programming systems with extreme expressiveness and no static type checking, and those with strong type system and only limited meta-programming capability. In particular, our technique ensures an important property, called meta-level soundness, stating that typing errors never originate from already compiled (meta-)code, that is, programmers can safely use (active) libraries. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Servetto, Marco] Victoria Univ Wellington, Wellington, New Zealand.
   [Zucca, Elena] Univ Genoa, DIBRIS, Genoa, Italy.
C3 Victoria University Wellington; University of Genoa
RP Zucca, E (corresponding author), Univ Genoa, DIBRIS, Genoa, Italy.
OI Servetto, Marco/0000-0003-1458-2868
FU MIUR PRIN (Ministero dell'Istruzione, dell'Universita e della Ricerca,
   Programmi di Ricerca Scientifica di Rilevante Interesse nazionale)
   [2010LHT4KM_003 CINA]
FX This work has been partially supported by MIUR PRIN (Ministero
   dell'Istruzione, dell'Universita e della Ricerca, Programmi di Ricerca
   Scientifica di Rilevante Interesse nazionale) 2010LHT4KM_003 CINA. We
   warmly thank the anonymous referees of PEPM'13 and SCP for many useful
   comments and suggestions.
CR Aldrich J, 2002, LECT NOTES COMPUT SC, V2374, P334
   Alexandrescu A., 2010, The D Programming Language
   Ancona D, 2003, ACM T PROGR LANG SYS, V25, P641, DOI 10.1145/937563.937567
   Ancona D, 2002, J FUNCT PROGRAM, V12, P91, DOI 10.1017/S0956796801004257
   Ancona D., 1998, Mathematical Structures in Computer Science, V8, P401, DOI 10.1017/S0960129598002576
   Ancona D, 2000, LECT NOTES COMPUT SC, V1850, P154
   Ancona D, 2006, LECT NOTES COMPUT SC, V4228, P136
   [Anonymous], 2000, The C++ Programming Language
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   [Anonymous], EXPERT F 3 0
   Banavar G., 1996, ECOOP '96 - Object-Oriented Programming. 10th European Conference. Proceedings, P91, DOI 10.1007/BFb0053058
   Bettini L, 2010, LECT NOTES COMPUT SC, V6116, P46, DOI 10.1007/978-3-642-13414-2_4
   Bettini Lorenzo., 2010, Proceedings of the 2010 ACM Symposium on Applied Computing, SAC '10, P2096
   Bono Viviana, 2007, FTOP 07 FORMAL TECHN
   Bono Viviana, 2008, TCS 08 IFIP INT C TH
   Boyland J, 1997, ACM SIGPLAN NOTICES, V32, P66, DOI 10.1145/263700.263721
   BRACHA G, 1992, PROCEEDINGS OF THE 1992 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P282, DOI 10.1109/ICCL.1992.185492
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Bracha G., 2016, The Dart Programming Language. Always learning
   Bracha G, 2010, LECT NOTES COMPUT SC, V6183, P405, DOI 10.1007/978-3-642-14107-2_20
   Bruce K. B., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P523, DOI 10.1007/BFb0054106
   Bruce KB, 2004, LECT NOTES COMPUT SC, V3086, P389
   Clarke Dave, 2007, ACM INT C P SERIES, V208, P121, DOI DOI 10.1145/1218563.1218578
   Clifton C, 2006, ACM T PROGR LANG SYS, V28, P517, DOI 10.1145/1133651.1133655
   Corradi A, 2012, J OBJECT TECHNOL, V11, DOI 10.5381/jot.2012.11.2.a1
   Corradi Andrea, 2011, ACM INT P SER, p101 , DOI [10.1145/2093157.2093172, DOI 10.1145/2093157.2093172]
   Corradi Andrea, 2010, FOOL 10 INT WORKSH F
   Czarnecki K, 2000, LECT NOTES COMPUT SC, V1766, P25
   Dreyer D, 2008, ACM SIGPLAN NOTICES, V43, P307, DOI 10.1145/1411203.1411248
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Ernst E, 2006, ACM SIGPLAN NOTICES, V41, P270, DOI 10.1145/1111320.1111062
   Ernst E, 1999, LECT NOTES COMPUT SC, V1628, P67
   ERNST E, 2001, LNCS, V2072, P00303
   Ernst Erik, 2004, P MECH SPEC, P27
   Findler RobertBruce., 1998, INT C FUNCTIONAL PRO, P94
   Fisher Kathleen, 2004, FOOL 04 INT WORKSH F
   Gamma E., 1995, ADDISON WESLEY PROF
   Huang SS, 2007, LECT NOTES COMPUT SC, V4609, P399
   Huang SS, 2005, LECT NOTES COMPUT SC, V3676, P309
   Hutchins D, 2006, ACM SIGPLAN NOTICES, V41, P1, DOI 10.1145/1167515.1167475
   Igarashi A, 2005, LECT NOTES COMPUT SC, V3780, P161
   Igarashi A, 1999, ACM SIGPLAN NOTICES, V34, P132, DOI 10.1145/320385.320395
   Igarashi A, 2007, ACM SIGPLAN NOTICES, V42, P113, DOI 10.1145/1297105.1297037
   International Organization for Standardization, 2003, 148822003 ISO IEC
   Keene S.E., 1989, OBJECT ORIENTED PROG
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Koenig Dierk, 2007, GROOVY ACTION MANNIN
   Lagorio G, 2012, INFORM COMPUT, V214, P86, DOI 10.1016/j.ic.2012.02.004
   Lagorio G, 2010, ELECTRON NOTES THEOR, V263, P161, DOI 10.1016/j.entcs.2010.05.010
   Lagorio Giovanni, 2009, FOOL 09 INT WORKSH F
   Lagorio Giovanni, 2009, LECT NOTES COMPUT SC, V5653
   Liquori L, 2008, THEOR COMPUT SCI, V398, P243, DOI 10.1016/j.tcs.2008.01.051
   Liquori L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1330017.1330022
   Madsen O. Lehrmann, 1993, Object Oriented Programming in the BETA Programming Language
   McDirmid Sean, 2001, SIGPLAN NOT
   Miao Weiyu, 2010, GPCE 10 GENERATIVE P
   MOON DA, 1986, SIGPLAN NOTICES, V21, P1, DOI 10.1145/960112.28698
   Nierstrasz O, 2006, J OBJECT TECHNOL, V5, P129, DOI 10.5381/jot.2006.5.4.a4
   Nystrom N, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/1035292.1028986
   Nystrom N, 2006, ACM SIGPLAN NOTICES, V41, P21, DOI 10.1145/1167515.1167476
   Odersky Martin, 2005, FOOL 05 INT WORKSH F
   Parnas D. L., 1978, 3rd International Conference on Software Engineering, P264
   Reppy J, 2007, LECT NOTES COMPUT SC, V4609, P373
   Saito C, 2008, J FUNCT PROGRAM, V18, P285, DOI 10.1017/S0956796807006405
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Schonberg Edmond., 1979, POPL 79, P197, DOI DOI 10.1145/567752.567771
   Servetto M, 2010, ACM SIGPLAN NOTICES, V45, P464, DOI 10.1145/1932682.1869498
   Servetto Marco, 2013, PEPM 13 PART EV PROG, P117
   Servetto Marco, 2011, THESIS U GENOVA
   Sheard T, 2002, ACM SIGPLAN NOTICES, V37, P60, DOI 10.1145/636517.636528
   Shields M., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P289, DOI 10.1145/268946.268970
   Smith C, 2005, LECT NOTES COMPUT SC, V3586, P453
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   Tatsubori M, 2000, LECT NOTES COMPUT SC, V1826, P117
   Torgersen M, 2004, LECT NOTES COMPUT SC, V3086, P123
   Westbrook Edwin, 2010, PLD1 10 ACM C PROGR
   Zook D., 2004, Generative Programming and Component Engineering, V3286, P583
NR 78
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 219
EP 253
DI 10.1016/j.scico.2014.05.003
PN 2
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RG
UT WOS:000344578700005
OA Bronze
DA 2024-07-18
ER

PT J
AU Büttner, F
   Bartels, U
   Hamann, L
   Hofrichter, O
   Kuhlmann, M
   Gogolla, M
   Rabe, L
   Steimke, F
   Rabenstein, Y
   Stosiek, A
AF Buettner, Fabian
   Bartels, Ullrich
   Hamann, Lars
   Hofrichter, Oliver
   Kuhlmann, Mirco
   Gogolla, Martin
   Rabe, Lutz
   Steimke, Frank
   Rabenstein, Yorck
   Stosiek, Alina
TI Model-driven standardization of public authority data interchange
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE e-government; Standardization; Interoperability; Industrial case study;
   Model validation; Model transformation
ID XML SCHEMAS; UML; EVOLUTION
AB In the past decade, several electronic data exchange processes between public authorities have been established by the German public administration. In the context of various legacy systems and numerous suppliers of software for public authorities, it is crucial that these interfaces are open and precisely and uniformly defined, in order to foster free competition and interoperability. A community of such projects and specifications for various public administration domains has arisen from an early adopter project in the domain of data interchange between the 5400 German municipal citizen registers. A central coordination office provides a framework for these projects that is put into operation by a unified model-driven method, supported by tools and components, involving UML profiles, model validation, and model-to-text transformations into several technical domains. We report how this model-driven approach has already proven to be effective in a number of projects, and how it could contribute to the development of standardized e-government specifications in various ways. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Buettner, Fabian] Ecole Mines Nantes INRIA, AtlanMod, Nantes, France.
   [Hamann, Lars; Hofrichter, Oliver; Kuhlmann, Mirco; Gogolla, Martin] Univ Bremen, Database Syst Grp, D-28359 Bremen, Germany.
   [Rabe, Lutz; Steimke, Frank] Senatorin Finanzen, Koordinierungsstelle IT Stand, Bremen, Germany.
   [Rabenstein, Yorck; Stosiek, Alina] Init AG, Berlin, Germany.
C3 IMT - Institut Mines-Telecom; IMT Atlantique; University of Bremen
RP Büttner, F (corresponding author), Ecole Mines Nantes INRIA, AtlanMod, Nantes, France.
EM fabian.buettner@inria.fr
FU Nouvelles Equipes Program of the Pays de la Loire Region (France)
FX The first author's research was partially funded by the Nouvelles
   Equipes Program of the Pays de la Loire Region (France).
CR Anderson KM, 2000, ACM T INFORM SYST, V18, P211, DOI 10.1145/352595.352596
   [Anonymous], 2011, META OBJECT FACILITY
   [Anonymous], P 5 AGILE C MALL SPA
   Arnold Robert S., 1996, SOFTWARE CHANGE IMPA
   Bartels U, 2004, LECT NOTES COMPUT SC, V3183, P246
   Bernauer M, 2004, LECT NOTES COMPUT SC, V3140, P440
   BRADNER S, 1997, 2119 RFC IETF
   Büttner F, 2011, LECT NOTES COMPUT SC, V7021, P124, DOI 10.1007/978-3-642-25032-3_9
   Bundesvereinigung der Kommunalen Spitzenverbande, 2012, GERM DAT FIELDS MUN
   Bundesverwaltungsamt-Bundesstelle fiir Informationstechnik, 2012, XGENERATOR 2 2 1
   CCTS, 2009, COR COMP TECHN SPEC
   Charalabidis Yannis, 2010, International Journal of Electronic Governance, V3, P189, DOI 10.1504/IJEG.2010.034095
   Domínguez E, 2007, LECT NOTES COMPUT SC, V4831, P184
   Domínguez E, 2011, INFORM SOFTWARE TECH, V53, P34, DOI 10.1016/j.infsof.2010.08.001
   EC, 2012, EGOV COR VOC V 2
   EC, 2012, ADMS ASS DESCR MET S
   European Commission (EC), 2010, ANN 2 COMM COMM INT
   Favre JM, 2005, ELECTRON NOTES THEOR, V127, P59, DOI 10.1016/j.entcs.2004.08.034
   Gil-García JR, 2005, GOV INFORM Q, V22, P187, DOI 10.1016/j.giq.2005.02.001
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   Guijarro L, 2007, GOV INFORM Q, V24, P89, DOI 10.1016/j.giq.2006.05.003
   Hassan AE, 2004, PROC IEEE INT CONF S, P284, DOI 10.1109/ICSM.2004.1357812
   HongXing Liu, 2006, 28th International Conference on Software Engineering Proceedings, P973
   ISO, 2007, 19136 ISOISO
   IT-Planungsrat, 2010, NATI E GOVT STRAT
   Jezequel J. M., 2009, INT SUMMER SCH GENER, P201
   Jouault F., 2010, P 2010 ACM S APPL CO, P2011, DOI DOI 10.1145/1774088.1774511
   Jouault F., 2008, SCI COMPUTER PROGRAM, V72
   Kolovos DS, 2008, LECT NOTES COMPUT SC, V5063, P46, DOI 10.1007/978-3-540-69927-9_4
   KOSIT, 2011, 4 XOV ANW
   KOSIT, 2012, HDB ENTWICKLUNG KONF
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   NIFO, 2012, NAT INT FRAM OBS NIF
   OASIS, 2007, COD LIST REPR GEN SP
   Object Management Group (OMG), 2011, 20110604 OMG
   Object Management Group (OMG), 2008, MOF Model to Text Transformation Language; Version 1.0, Document Formal/2008-01-16
   OMG, 2012, OBJ CONSTR LANG SPEC
   Peristeras V, 2009, COMPUT STAND INTER, V31, P613, DOI 10.1016/j.csi.2008.09.034
   Pfeiffer Rolf-Helge, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P168, DOI 10.1007/978-3-642-33666-9_12
   SAGA, 2011, SAGA MOD TECHN SPECZ
   Stantchev V, 2009, 2009 FOURTH INTERNATIONAL CONFERENCE ON INTERNET AND WEB APPLICATIONS AND SERVICES, P614, DOI 10.1109/ICIW.2009.98
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   USE, 2012, UML BAS SPEC ENV
   Vara J., 2005, NEXT GENERATION WEB, P6
NR 44
TC 10
Z9 11
U1 1
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 162
EP 175
DI 10.1016/j.scico.2013.03.009
PN B
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CA
UT WOS:000337929100007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Huang, FQ
   Liu, B
   Song, Y
   Keyal, S
AF Huang, Fuqun
   Liu, Bin
   Song, You
   Keyal, Shreya
TI The links between human error diversity and software diversity:
   Implications for fault diversity seeking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software diversity; Human error; N-version programming; Cognitive style;
   Personality trait
ID PERSONALITY; KNOWLEDGE; FRAMEWORK; EXPERTS; DESIGN; MODEL; STRATEGIES;
   EXPERIENCE
AB Software diversity is known to improve fault tolerance in N-version software systems by independent development. As the leading cause of software faults, human error is considered an important factor in diversity seeking. However, there is little scientific research focusing on how to seek software fault diversity based on human error mechanisms. A literature review was conducted to extract factors that may differentiate people with respect to human error-proneness. In addition, we constructed a conceptual model of the links between human error diversity and software diversity. An experiment was designed to validate the hypotheses, in the form of a programming contest, accompanied by a survey of cognitive styles and personality traits. One hundred ninety-two programs were submitted for the identical problem, and 70 surveys were collected. Code inspection revealed 23 faults, of which 10 were coincident faults. The results show that personality traits seems not effective predictors for fault diversity as a whole model, whereas cognitive styles and program measurements moderately account for the variation of fault density. The results also show causal relations between performance levels and coincident faults; coincident faults are unlikely to occur at skill-based performance level; the coincident faults introduced in rule-based performances show a high probability of occurrence, and the coincident faults introduced in knowledge-based performances are shaped by the content and formats of the task itself. Based on these results, we have proposed a model to seek software diversity and prevent coincident faults. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Huang, Fuqun; Liu, Bin; Song, You] Beihang Univ, Beijing 100191, Peoples R China.
   [Keyal, Shreya] UCL, London WC1E 6BT, England.
C3 Beihang University; University of London; University College London
RP Huang, FQ (corresponding author), Beihang Univ, Dept Syst & Reliabil Engn, Beijing 100191, Peoples R China.
EM huangfuqun@gmail.com; liubin@buaa.edu.cn; songyou@buaa.edu.cn;
   shreya_keyal@hotmail.com
RI Huang, Fuqun/E-5467-2013
OI Huang, Fuqun/0000-0001-7973-5808
CR Acuña ST, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P291
   ADELSON B, 1981, MEM COGNITION, V9, P422, DOI 10.3758/BF03197568
   ADELSON B, 1985, IEEE T SOFTWARE ENG, V11, P1351, DOI 10.1109/TSE.1985.231883
   Adelson B., 1986, INT J INTELL SYST, V1, P195
   [Anonymous], 2002, Software Design-Cognitive Aspects
   [Anonymous], 10441993 IEEE
   [Anonymous], HDB SOFTWARE RELIABI
   Avizienis A., 1988, Eighteenth International Symposium on Fault-Tolerant Computing. Digest of Papers. FTCS-18 (Cat. No.88CH2543-7), P15, DOI 10.1109/FTCS.1988.5291
   Begosso L., 2011, STUDY HUMAN ERROR IN, P270
   Bishop-Clark C., 1994, Journal of Research on Computing in Education, V26, P358
   BISHOPCLARK C, 1995, COMPUT HUM BEHAV, V11, P241, DOI 10.1016/0747-5632(94)00034-F
   Bolton ML, 2012, INT J HUM-COMPUT ST, V70, P888, DOI 10.1016/j.ijhcs.2012.05.010
   Bryant S., 2005, P PAIRED PROGRAMMING, P19
   Burkhardt J., 1997, HUM COMP INT INT INT, P14
   Capretz L. F., 2002, SIGCSE Bulletin, V34, P134, DOI 10.1145/820127.820185
   Capretz L. F., 2010, ACM SIGSOFT Software Engineering Notes, V35, P1, DOI DOI 10.1145/1734103.1734111
   Capretz LF, 2003, INT J HUM-COMPUT ST, V58, P207, DOI 10.1016/S1071-5819(02)00137-4
   Chandler J., 2003, P 4 ANN LTSN ICS C L, P169
   Chatel S, 1996, ACTA PSYCHOL, V91, P245, DOI 10.1016/0001-6918(95)00058-5
   Chi M., 1988, The Nature of Expertise
   Cohen J., 1988, STAT POWER ANAL BEHA
   COOKE NJ, 1988, INT J MAN MACH STUD, V29, P407, DOI 10.1016/S0020-7373(88)80003-8
   Cross N, 2004, DESIGN STUD, V25, P427, DOI 10.1016/j.destud.2004.06.002
   Da Cunha AD, 2007, COMMUN ACM, V50, P109, DOI 10.1145/1230819.1241672
   DAVIES SP, 1991, COGNITIVE SCI, V15, P547, DOI 10.1207/s15516709cog1504_3
   DETIENNE F, 1995, HUM-COMPUT INTERACT, V10, P129, DOI 10.1207/s15327051hci1002&3_1
   Drivalou S, 2009, INT J IND ERGONOM, V39, P947, DOI 10.1016/j.ergon.2009.08.012
   ECKHARDT DE, 1991, IEEE T SOFTWARE ENG, V17, P692, DOI 10.1109/32.83905
   ECKHARDT DE, 1985, IEEE T SOFTWARE ENG, V11, P1511, DOI 10.1109/TSE.1985.231895
   Fagg P., 2000, DEFECT MEASUREMENT M
   FELDER RM, 1988, ENG EDUC, V78, P674
   Feldt R., 1998, IEE Proceedings-Software, V145, P228, DOI 10.1049/ip-sen:19982444
   Feldt R., 2008, INT WORKSHOP COOPERA, P49, DOI DOI 10.1145/1370114.1370127
   Greathead D., 2008, P 20 WORKSH PSYCH PR, P128
   GUINDON R, 1990, INT J MAN MACH STUD, V33, P279, DOI 10.1016/S0020-7373(05)80120-8
   Guindon Raymonde, 1987, EMPIRICAL STUDIES PR, P65
   Hannay JE, 2010, IEEE T SOFTWARE ENG, V36, P61, DOI 10.1109/TSE.2009.41
   HANSEN CP, 1989, J APPL PSYCHOL, V74, P81, DOI 10.1037/0021-9010.74.1.81
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Hoc JM, 2000, ERGONOMICS, V43, P833, DOI 10.1080/001401300409044
   HOLLNAGEL E, 1993, INT J MAN MACH STUD, V39, P1, DOI 10.1006/imms.1993.1051
   Huang AFQ, 2012, PROCEEDINGS 18TH ISSAT INTERNATIONAL CONFERENCE ON RELIABILITY & QUALITY IN DESIGN, P44
   KITCHENHAM B, 1995, IEEE T SOFTWARE ENG, V21, P929, DOI 10.1109/32.489070
   KNIGHT JC, 1986, IEEE T SOFTWARE ENG, V12, P96, DOI 10.1109/TSE.1986.6312924
   Ko AJ, 2005, J VISUAL LANG COMPUT, V16, P41, DOI 10.1016/j.jvlc.2004.08.003
   Lin CJ, 2010, NUCL ENG DES, V240, P1897, DOI 10.1016/j.nucengdes.2010.03.026
   LITTLEWOOD B, 1989, IEEE T SOFTWARE ENG, V15, P1596, DOI 10.1109/32.58771
   Littlewood B, 2001, ACM COMPUT SURV, V33, P177, DOI 10.1145/384192.384195
   Lyu M. R., 1992, Proceedings. The Sixteenth Annual International Computer Software and Applications Conference, P69, DOI 10.1109/CMPSAC.1992.217601
   MATTHEWS G, 1991, PERS INDIV DIFFER, V12, P535, DOI 10.1016/0191-8869(91)90248-A
   MATTHEWS G, 1990, J PSYCHOPATHOL BEHAV, V12, P49, DOI 10.1007/BF00960453
   MCKEITHEN KB, 1981, COGNITIVE PSYCHOL, V13, P307, DOI 10.1016/0010-0285(81)90012-8
   Mosleh A, 2004, RELIAB ENG SYST SAFE, V83, P241, DOI 10.1016/j.ress.2003.09.014
   Müller MM, 2007, J SYST SOFTWARE, V80, P1460, DOI 10.1016/j.jss.2006.10.032
   Myers Isabel Briggs, 1998, MBTI Manual: A Guide to the Development and Use of the Myers-Briggs Type Indicator
   POCIUS KE, 1991, COMPUT HUM BEHAV, V7, P103, DOI 10.1016/0747-5632(91)90002-I
   Popov P, 1999, LECT NOTES COMPUT SC, V1698, P272
   Ranjeeth S., 2007, COLL TEACH METHODS S, V3, P31
   Reason J., 1990, Human error, DOI [10.1017/CBO9781139062367, DOI 10.1017/CBO9781139062367]
   Riecken R. D., 1991, Empirical Studies of Programmers: Fourth Workshop, P177
   Rien Sach M.P., 2010, P 22 ANN PSYCH PROGR, P19
   Rist R. S., 1991, Human-Computer Interaction, V6, P1, DOI 10.1207/s15327051hci0601_1
   Rist Robert S., 1986, P 1 WORKSH EMP STUD, P28
   Salleh N, 2009, INT SYMP EMP SOFTWAR, P214, DOI 10.1109/ESEM.2009.5315997
   Schnotz W, 2007, EDUC PSYCHOL REV, V19, P469, DOI 10.1007/s10648-007-9053-4
   SCHRAAGEN JM, 1993, COGNITIVE SCI, V17, P285, DOI 10.1207/s15516709cog1702_4
   Schroeder M A, 1990, West J Nurs Res, V12, P175, DOI 10.1177/019394599001200204
   Sim S.E., 2006, UCIISR066 U CAL I SO
   Sodiya A., 2007, INTERDISCIPLINARY J, V2, P163
   Soloman B.A., Index of learning styles questionnaire
   SOLOWAY E, 1982, P 1982 C HUM FACT CO, P52, DOI DOI 10.1145/800049.801754
   Thomas L., 2002, SIGCSE Bulletin, V34, P33, DOI 10.1145/563517.563352
   TURLEY RT, 1995, J SYST SOFTWARE, V28, P19, DOI 10.1016/0164-1212(94)00078-2
   van der Meulen MJP, 2008, IEEE T SOFTWARE ENG, V34, P753, DOI 10.1109/TSE.2008.70
   Whitley BE, 1996, COMPUT HUM BEHAV, V12, P389, DOI 10.1016/0747-5632(96)00015-5
   WIEDENBECK S, 1991, INT J MAN MACH STUD, V35, P517, DOI 10.1016/S0020-7373(05)80090-2
   YE N, 1994, INT J HUM-COMPUT INT, V6, P105
NR 77
TC 21
Z9 25
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
BP 350
EP 373
DI 10.1016/j.scico.2014.03.004
PN C
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CB
UT WOS:000337929200007
DA 2024-07-18
ER

PT J
AU Conde, MA
   García-Peñalvo, F
   Alier, M
   Mayol, E
   Fernández-Llamas, C
AF Conde, Miguel A.
   Garcia-Penalvo, Francisco
   Alier, Marc
   Mayol, Enric
   Fernandez-Llamas, Camino
TI Implementation and design of a service-based framework to integrate
   personal and institutional learning environments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Learning platform; Personal learning environment; Interoperability; Web
   services; SOA
ID WEB
AB The landscape of teaching and learning has changed in recent years because of the application of Information and Communications technology. Among the most representative innovations in this regard are Learning Management Systems. Despite of their popularity in institutional contexts and the wide set of tools and services that they provide to learners and teachers, they present several issues. Learning Management Systems are linked to an institution and a period of time, and are not adapted to learners' needs. In order to address these problems Personal Learning Environments are defined, but it is clear that these will not replace Learning Management Systems and other institutional contexts. Both types of environment should therefore coexist and interact. This paper presents a service-based framework to facilitate such interoperability. It supports the export of functionalities from the institutional to the personal environment and also the integration within the institution of learning outcomes from personal activities. In order to achieve this in a flexible, extensible and open way, web services and interoperability specifications are used. In addition some interoperability scenarios are posed. The framework has been tested in real learning contexts and the results show that interoperability is possible, and that it benefits learners, teachers and institutions. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Conde, Miguel A.; Garcia-Penalvo, Francisco] Univ Salamanca, GRIAL Res Grp, Sci Educ Res Inst IUCE, Dept Comp Sci, E-37008 Salamanca, Spain.
   [Alier, Marc; Mayol, Enric] UPC, Serv & Informat Syst Engn Dept, Barcelona, Spain.
   [Fernandez-Llamas, Camino] Univ Leon, Dept Mech Comp Sci & Aeronaut, E-24071 Leon, Spain.
C3 University of Salamanca; Universitat Politecnica de Catalunya;
   Universidad de Leon
RP Conde, MA (corresponding author), Univ Salamanca, GRIAL Res Grp, Sci Educ Res Inst IUCE, Dept Comp Sci, Paseo Canalejas 169, E-37008 Salamanca, Spain.
EM mconde@usal.es; fgarcia@usal.es; marc.alier@upc.edu; mayol@essi.upc.edu;
   camino.fernandez@unileon.es
RI Llamas, Camino Fernández/AAC-4269-2020; Conde, Miguel Ángel/L-3882-2014;
   GARCÍA-PEÑALVO, Francisco José/D-5445-2013; Llamas, Camino
   Fernández/G-2805-2016; Alier, Marc/AAB-8169-2019; LLAMAS, Camino
   FERNÁNDEZ/AAA-4859-2022
OI Llamas, Camino Fernández/0000-0002-8705-4786; Conde, Miguel
   Ángel/0000-0001-5881-7775; GARCÍA-PEÑALVO, Francisco
   José/0000-0001-9987-5584; Llamas, Camino Fernández/0000-0002-8705-4786;
   Alier, Marc/0000-0003-3922-1516; 
CR Adell Segura J., 2013, Entornos Personales de Aprendizaje: Claves para el ecosistema educativo en red, P11
   Ajjan H, 2008, INTERNET HIGH EDUC, V11, P71, DOI 10.1016/j.iheduc.2008.05.002
   Alario-Hoyos Carlos, 2010, 2010 IEEE 10th International Conference on Advanced Learning Technologies (ICALT 2010), P384, DOI 10.1109/ICALT.2010.110
   Alario-Hoyos C, 2010, 3RD INTERNATIONAL CONFERENCE OF EDUCATION, RESEARCH AND INNOVATION (ICERI2010), P3466
   Forment MA, 2012, J UNIVERS COMPUT SCI, V18, P1483
   [Anonymous], 2008, REV LATINOAMERICANA
   Arroway P., 2010, ED CORE DATA SERVICE
   Attwell G., 2007, Journal of e-Learning and Knowledge Society, V3, P39
   Avgeriou P, 2003, EDUC TECHNOL SOC, V6, P11
   Bandura A, 2003, J APPL PSYCHOL, V88, P87, DOI 10.1037/0021-9010.88.1.87
   Booth AG, 2009, HORIZON, V17, P232, DOI 10.1108/10748120910993268
   Browne T., 2010, Survey of technology enhanced learning for higher education in the UK
   Campbell DT., 1963, EXPT QUASIEXPERIMENT
   Casany M.J., 2009, 23 INT C ADV INF NET, P750
   Chadwick C., 2001, REV LATINOAMERICANA, VXXXI, P87
   Cole J., 2007, USING MOODIE
   Conde M. A., 2011, Proceedings of the 2011 Third International Conference on Intelligent Networking and Collaborative Systems (INCoS 2011), P801, DOI 10.1109/INCoS.2011.104
   Conde M.A., 2012, 1 S LANG APPL TECHN, P205
   Conde M.A., 2012, PERSONALIZATION APRE
   de-la-Fuente-Valentin L., 2008, MASH UP PERS LEARN E, P18
   Downes S., 2005, ACM eLearn Magazine, V2005, P1
   García-Peñalvo FJ, 2012, BEHAV INFORM TECHNOL, V31, P753, DOI 10.1080/0144929X.2012.661548
   García-Peñalvo FJ, 2011, J UNIVERS COMPUT SCI, V17, P1222
   Green JL, 2006, HANDBOOK OF COMPLEMENTARY METHODS IN EDUCATION RESEARCH, pXV
   Hernandez-Pina F., 2009, REV ESP ORIENTAC PSI, V20
   IETF, 2010, OAUTH 1 0
   IMS-GLC, COMM CARTR BASC LEAR
   IMS-GLC, IMS LEARN TOOLS INT
   Miles M. B., 1984, Qualitative data analysis: An expanded sourcebook
   Molist M., 2008, DIARIO EL PAIS
   Mott J., 2009, EXPLOR CONNECT ED LA, V15
   Nieto S., 2010, INVESTIGACION EVALUA
   OMG, 2011, BUS PROC MOD NOT VER
   *OMG, 2007, UN MOD LANG SUP VERS
   OMG, 2009, SERV OR ARCH MOD LAN
   Pastor O., 2001, ACM SIGECOM EXCHANGE, V2, P28
   Peret Y., 2010, WORKSH FUT LEARN LAN, P1
   Prendes M.P., 2009, INFORM PROYECTO 2008
   Schwaber Ken, 2008, AGILE SOFTWARE DEV S
   Schwaber Ken., 2004, Agile Project Management With Scrum (Developer Best Practices)
   Sclater N., 2008, Web 2.0, Personal Learning Environments
   Siegel S., 1956, Nonparametric statistics for the behavioral sciences
   Tejedor FJ, 2009, COMUNICAR, V17, P115, DOI 10.3916/c33-2009-03-002
   Torres R., 2008, EDEN RES WORKSH 2008
   Van Harmelen M., 2006, em ICALT, V6, P815, DOI DOI 10.1109/ICALT.2006.1652565
   Vancouver JB, 2005, J APPL PSYCHOL, V90, P38, DOI 10.1037/0021-9010.90.1.38
   Verpoorten D, 2009, LECT NOTES COMPUT SC, V5794, P52, DOI 10.1007/978-3-642-04636-0_7
   W3C, PACK XML CONF
   Wexler S., 2008, GUILD RES 360 DEGREE
   Wilson S., 2008, MASH UP PERS LEARN E, P25
   Wilson S, 2007, J E-LEARN KNOWL SOC, V3, P27
NR 51
TC 31
Z9 34
U1 0
U2 27
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2014
VL 88
SI SI
BP 41
EP 53
DI 10.1016/j.scico.2013.10.012
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA AH9QM
UT WOS:000336476900004
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Joncheere, N
   Günther, S
   Van Der Straeten, R
   Jonckers, V
AF Joncheere, Niels
   Gunther, Sebastian
   Van Der Straeten, Ragnhild
   Jonckers, Viviane
TI Improving workflow modularity using a concern-specific layer on top of
   Unify
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concern-specific languages; Domain-specific languages; Modularization;
   Separation of concerns; Workflow languages
ID BUSINESS PROCESS MODELS; FLEXIBILITY; SYSTEMS
AB Workflows are a popular means of automating processes in many domains, ranging from high-level business process modeling to lower-level web service orchestration. However, state-of-the-art workflow languages offer a limited set of modularization mechanisms. This results in monolithic workflow specifications, in which different concerns are scattered across the workflow and tangled with one another. This hinders the design, evolution, and reusability of workflows expressed in these languages. We address this problem through the Unify framework. This framework enables uniform modularization of workflows by supporting the specification of all workflow concerns - including crosscutting ones - in isolation of each other. These independently specified workflow concerns are connected to each other using workflow-specific connectors. In order to further facilitate the development of workflows, we enable the definition of concern-specific languages (CSLs) on top of the Unify framework. A CSL facilitates the expression of a family of workflow concerns by offering abstractions that map well to the concerns' domain. Thus, domain experts can add concerns to a workflow using concern-specific language constructs. We exemplify the specification of a workflow in Unify, and show the definition and application of two concern-specific languages built on top of Unify. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Joncheere, Niels; Gunther, Sebastian; Van Der Straeten, Ragnhild; Jonckers, Viviane] Vrije Univ Brussel, Software Languages Lab, B-1050 Brussels, Belgium.
C3 Vrije Universiteit Brussel
RP Joncheere, N (corresponding author), Vrije Univ Brussel, Software Languages Lab, Pleinlaan 2, B-1050 Brussels, Belgium.
EM njonchee@soft.vub.ac.be; sgunther@soft.vub.ac.be;
   rvdstrae@soft.vub.ac.be; vejoncke@soft.vub.ac.be
OI Jonckers, Viviane/0000-0001-7724-3412; Joncheere,
   Niels/0000-0003-3356-7938
FU Innoviris; Brussels Institute for Research and Innovation, through the
   VariBru project
FX Funded by Innoviris, the Brussels Institute for Research and Innovation,
   through the VariBru project.
CR [Anonymous], THESIS U CALIFORNIA
   [Anonymous], 1999, WFMCTC1011
   [Anonymous], 1997, Handbook of Graph Grammars and Computing by Graph Transformation
   [Anonymous], 2002, Workflow management: models, methods, and systems
   [Anonymous], 2004, Software Factories
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   [Anonymous], 2007, Web services business process execution language version 2.0
   [Anonymous], 2006, OBJ CONSTR LANG VERS
   ASSmann Uwe., 2003, INVASIVE SOFTWARE CO
   BENTLEY J, 1986, COMMUN ACM, V29, P711, DOI 10.1145/6424.315691
   Bodden E., P 3 INT WORKSH SOFTW
   Braem M, 2006, LECT NOTES COMPUT SC, V4102, P113
   Braem M, 2007, ELECTRON NOTES THEOR, V163, P3, DOI 10.1016/j.entcs.2006.10.012
   Charfi A, 2004, LECT NOTES COMPUT SC, V3250, P168
   CIBRAN MA, 2007, THESIS VRIJE U BRUSS
   Consel C., 1998, LECT NOTES COMPUTER, V1490, P170
   Courbis C, 2005, PROC INT CONF SOFTW, P69
   Dijkman R, 2012, COMPUT IND, V63, P91, DOI 10.1016/j.compind.2011.12.003
   Dijkstra Edsger., 1982, SELECTED WRITINGS CO
   Döhring M, 2012, IEEE INT ENTERP DIST, P133, DOI 10.1109/EDOC.2012.24
   Döhring M, 2011, LECT NOTES BUS INF P, V81, P332
   Emanuele J., 2007, A913371250 SIEM MED
   FABRY J, 2005, THESIS VRIJE U BRUSS
   Filman R.E., 2001, 0112 RES I ADV COMP
   Foundation Y.A.W.L., 2012, YAWL US MAN VERS 2 0
   González O, 2009, LECT NOTES BUS INF P, V21, P157
   Grefen P., 2002, LECT NOTES COMPUT SC, V2503
   Gunther S., 2010, THESIS OTTO VON GUER
   Heering J., 2000, SENR0010 CTR WISK IN
   Heinlein C, 2002, LECT NOTES COMPUT SC, V2519, P54
   Joncheere N., 2011, SOFTTR20110415 VRIJ
   Joncheere N., 2011, LECT NOTES COMPUT SC, V6940, P77
   Karastoyanova D, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P222, DOI 10.1109/ICWS.2009.75
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiepuszewski B, 2000, LECT NOTES COMPUT SC, V1789, P431
   LOPES CV, 1997, SPL97010 XER PAL ALT
   LOPES CV, 1997, THESIS NE U BOSTON
   Martin J., 2003, Queue, V1, P48
   Mendling J, 2012, DECIS SUPPORT SYST, V53, P195, DOI 10.1016/j.dss.2011.12.013
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Niemöller J, 2009, LECT NOTES COMPUT SC, V5900, P19, DOI 10.1007/978-3-642-10383-4_2
   *OBJ MAN GROUP, 2007, UN MOD LANG SUP VERS
   Oinn T, 2004, BIOINFORMATICS, V20, P3045, DOI 10.1093/bioinformatics/bth361
   OMG, 2011, BUS PROC MOD NOT BPM
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Reijers HA, 2008, LECT NOTES COMPUT SC, V5240, P20, DOI 10.1007/978-3-540-85758-7_5
   Reijers HA, 2011, INFORM SYST, V36, P881, DOI 10.1016/j.is.2011.03.003
   Russell N., 2006, Workflow Control-Flow Patterns: A Revised View
   RUSSELL N, 2004, FITTR200401 QUEENSL
   Sandhu R., 2000, Symposium on Access Control Models and Technologies: Proceedings of the fifth ACM workshop on Role-based access control, V26, P47, DOI 10.1145/344287.344301
   Schonenberg H, 2008, LECT NOTES BUS INF, V10, P16
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   Suvée D, 2006, LECT NOTES COMPUT SC, V4063, P114
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Thibault S, 1997, PROCEEDINGS OF THE CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES, P11
   van der Aalst WMP, 2005, INFORM SYST, V30, P245, DOI 10.1016/j.is.2004.02.002
   van der Aalst WMP, 2000, LECT NOTES COMPUT SC, V1901, P198
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Vanhatalo J, 2007, LECT NOTES COMPUT SC, V4749, P43
   Weber B, 2008, DATA KNOWL ENG, V66, P438, DOI 10.1016/j.datak.2008.05.001
   Wohed P., 2005, PATTERN BASED ANAL B
   Yu JA, 2010, LECT NOTES COMPUT SC, V6488, P548, DOI 10.1007/978-3-642-17616-6_48
NR 62
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2014
VL 87
BP 62
EP 94
DI 10.1016/j.scico.2013.11.003
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AH3GP
UT WOS:000336012000005
OA hybrid
DA 2024-07-18
ER

PT J
AU Huhn, M
   Milius, S
AF Huhn, Michaela
   Milius, Stefan
TI Observations on formal safety analysis in practice
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based development; SCADE; Formal safety analysis
ID CHECKING
AB We report on the application of formal verification in the safety analysis of two level crossing controllers that were industrially designed using SCADE Suite. Although the theoretical grounds for formalizing safety analysis have been developed in recent years, we faced numerous and intense complexity problems even with these medium-sized industrial case studies. The complexity problems constricted formal verification and even remained after employing different heuristics based on abstraction and introducing environmental models. In addition, we found that the modeling style has a significant impact on the complexity of the verification tasks. We finally succeeded to formally classify all relevant fault combinations as either critical or uncritical by identifying a crucial, design-specific liveness property. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Huhn, Michaela] Tech Univ Clausthal, Inst Informat, D-38678 Clausthal Zellerfeld, Germany.
   [Milius, Stefan] Univ Erlangen Nurnberg, Lehrstuhl Theoret Informat, Erlangen, Germany.
C3 TU Clausthal; University of Erlangen Nuremberg
RP Huhn, M (corresponding author), Tech Univ Clausthal, Inst Informat, D-38678 Clausthal Zellerfeld, Germany.
EM Michaela.Huhn@tu-clausthal.de; mail@stefan-milius.eu
CR Abdulla PA, 2006, LECT NOTES COMPUT SC, V4313, P115, DOI 10.1007/11925040_8
   Andre C, 2003, 6070 UMR U NIC SOPH
   [Anonymous], 1998, 615083 IEC
   [Anonymous], 50129 CENELEC EN
   Beer I, 2001, FORM METHOD SYST DES, V18, P141, DOI 10.1023/A:1008779610539
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Bozzano M., 2003, IMPROVING SYSTEM REA
   Burdek J., 2011, THESIS
   CENELEC, 2001, 50128 CENELEC EN
   CENELEC, 1999, 50126 CENELEC EN
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Clarke EM, 1999, MODEL CHECKING, P1
   Dajani-Brown S, 2004, LECT NOTES COMPUT SC, V3253, P5
   Daskaya I, 2011, LECT NOTES COMPUT SC, V6959, P68, DOI 10.1007/978-3-642-24431-5_7
   Güdemann M, 2007, LECT NOTES COMPUT SC, V4680, P465
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Halbwachs Nicolas., 1994, Algebraic Methodology and Software Technology (AMAST'93), P83, DOI DOI 10.1007/978-1-4471-3227-1_8
   Hanisch H.-M., 2000, AUTOMATISIERUNGSTECH, V48
   Huth Michael, 2004, Logic in Computer Science: Modelling and reasoning about systems
   IEC, IEC 60812: Analysis Techniques for System Reliability-Procedure for Failure Mode and Effects Analysis (FMEA)
   Joshi A., 2005, TECHNICAL REPORT
   MCDERMID JA, 1995, COMPASS '95 - PROCEEDINGS OF THE TENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P37, DOI 10.1109/CMPASS.1995.521885
   Ortmeier F., 2006, P IFAC WORLD C
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
NR 24
TC 0
Z9 0
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 150
EP 168
DI 10.1016/j.scico.2013.01.001
PN A
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FG
UT WOS:000329887000011
OA hybrid
DA 2024-07-18
ER

PT J
AU Pinho, EG
   de Carvalho, FH
AF Pinho, Eduardo Gurgel
   de Carvalho Junior, Francisco Heron
TI An object-oriented parallel programming language for distributed-memory
   parallel computing platforms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Programming Languages (SBLP)
CY SEP 27-29, 2010
CL Salvador, BRAZIL
DE Object-oriented programming languages; Parallel programming languages;
   Parallel programming techniques; High performance computing
AB In object-oriented programming (OOP) languages, the ability to encapsulate software concerns of the dominant decomposition in objects is the key to reaching high modularity and loss of complexity in large scale designs. However, distributed-memory parallelism tends to break modularity, encapsulation, and the functional independence of objects, since parallel computations cannot be encapsulated in individual objects, which reside in a single address space. For reconciling object-orientation and distributed-memory parallelism, this paper introduces OOPP (Object-Oriented Parallel Programming), a style of OOP where objects are distributed by default. As an extension of C++, a widespread language in HPC, the PObC++ language has been designed and prototyped, incorporating the ideas of OOPP. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Pinho, Eduardo Gurgel; de Carvalho Junior, Francisco Heron] Univ Fed Ceara, Fortaleza, Ceara, Brazil.
C3 Universidade Federal do Ceara
RP de Carvalho, FH (corresponding author), Univ Fed Ceara, Fortaleza, Ceara, Brazil.
EM edgurgel@lia.ufc.br; carvalho.heron@gmail.com
RI Carvalho, Francisco/AAR-9865-2021
OI Carvalho, Francisco/0000-0003-2286-2376
CR Allen Eric., 2008, FORTRESS LANGUAGE SP
   [Anonymous], 1998, GRID BLUEPRINT NEW C
   Aridor Y., 2000, INT J HIGH PERFORM C, P168
   Bailey D., 1995, NAS95020
   Baker M, 2000, LECT NOTES COMPUT SC, V1800, P552
   Baker M, 1999, COMPUTER, V32, P79
   Batcher K.E., 1980, P AFIPS SPRING JOINT, V32, P307
   Bernholdt D. E., 2004, IEEE INT C HIGH PERF, P76
   Bertran F., 2005, 19 IEEE INT PAR DIST
   Burkardt J., NINTLIB MULTIDIMENSI
   Carvalho FH, 2007, CONCURR COMP-PRACT E, V19, P697, DOI 10.1002/cpe.1121
   Chamberlain BL, 2007, INT J HIGH PERFORM C, V21, P291, DOI 10.1177/1094342007078442
   Cole M, 2004, PARALLEL COMPUT, V30, P389, DOI 10.1016/j.parco.2004.12.002
   Cole M., 1989, ALGORITHM SKELETONS
   Dahl O.-J., 2002, Software pioneers, P79
   Dahl Ole-Johan., 1968, SIMULA 67 Common Base Language
   DIJKSTRA EW, 1972, COMMUN ACM, V15, P859, DOI 10.1145/355604.361591
   Dongarra J., 2003, SOURCEBOOK PARALLEL
   Dongarra JJ, 1996, COMMUN ACM, V39, P84, DOI 10.1145/233977.234000
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Grama A., 1976, INTRO PARALLEL COMPU
   Gregor D, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P133, DOI 10.1145/1345206.1345228
   Jain R., 1991, ART COMPUTER SYSTEMS
   JOHNSSON SL, 1989, PROCEEDINGS : SUPERCOMPUTING 89, P326, DOI 10.1145/76263.76298
   Kale L.V., 1993, CHARM PORTABLE CONCU
   Kuchen H, 2006, PARALLEL COMPUT, V32, P447, DOI 10.1016/j.parco.2006.08.001
   Lusk E, 2007, PARALLEL PROCESS LET, V17, P89, DOI 10.1142/S0129626407002892
   McPeak S.G., 2003, ELKHOUND FAST PRACTI
   Meyer B., 1988, Object-Oriented Software Construction
   Milli H., 2004, WORKSH EARL ASP ASP, P411
   MINTCHEV S, 1997, MANCSPE02 U WESTM SC
   Nguyen TA, 2003, EIGHTH INTERNATIONAL WORKSHOP ON HIGH-LEVEL PARALLEL PROGRAMMING MODELS AND SUPPORTIVE ENVIRONMENTS, PROCEEDINGS, P25, DOI 10.1109/HIPS.2003.1196492
   Nguyen TA, 2007, FUTURE GENER COMP SY, V23, P23, DOI 10.1016/j.future.2006.04.012
   OpenMP Architecture Review Board, 1997, OPENMP SIMPL PORT SC
   Philippsen M, 1997, CONCURRENCY-PRACT EX, V9, P1225, DOI 10.1002/(SICI)1096-9128(199711)9:11<1225::AID-CPE332>3.0.CO;2-F
   Post DE, 2005, PHYS TODAY, V58, P35, DOI 10.1063/1.1881898
   Sarkar V., 2005, INT J HIGH PERFORM C, P393
   Taivalsaari A, 1996, ACM COMPUT SURV, V28, P438, DOI 10.1145/243439.243441
   Yelick K, 1998, CONCURRENCY-PRACT EX, V10, P825, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<825::AID-CPE383>3.0.CO;2-H
   Zhang BY, 2006, CONCURR COMP-PRACT E, V18, P1541, DOI 10.1002/cpe.986
   [No title captured]
NR 41
TC 5
Z9 6
U1 0
U2 20
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 65
EP 90
DI 10.1016/j.scico.2013.03.014
PN A
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 292FG
UT WOS:000329887000006
OA hybrid
DA 2024-07-18
ER

PT J
AU Bergel, A
   Peña, V
AF Bergel, Alexandre
   Pena, Vanessa
TI Increasing test coverage with HAPAO
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Testing; Pharo; Coverage; Visualization
AB Test coverage is about assessing the relevance of unit tests against the tested application. It is widely acknowledged that software with a "good" test coverage is more robust against unanticipated execution, thus lowering the maintenance cost. However, ensuring good quality coverage is challenging, especially since most of the available test coverage tools do not discriminate between software components that require "strong" coverage from the components that require less attention from the unit tests.
   HAPAO is an innovative test coverage tool, implemented in the Pharo Smalltalk programming language. It employs an effective and intuitive graphical representation to visually assess the quality of the coverage. A combination of appropriate metrics and relations visually shape methods and classes, which indicates to the programmer whether more effort on testing is required.
   This paper presents the important features of HAPAO by illustrating its application on an open source software. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Bergel, Alexandre; Pena, Vanessa] Univ Chile, PLEIAD Lab, Santiago, Chile.
C3 Universidad de Chile
RP Bergel, A (corresponding author), Univ Chile, PLEIAD Lab, Santiago, Chile.
EM alexandre.bergel@me.com; vpena@dcc.uchile.cl
RI Bergel, Alexandre/I-1397-2013
OI Bergel, Alexandre/0000-0001-8087-1903
FU University of Chile [U-INICIA 11/06 VID 2011, U-INICIA 11/06]; FONDECYT
   [1120094]
FX We warmly thank all the people who influenced and participated in the
   construction of HAPAO. We thank Pablo Estefo and Juan Pablo Sandoval for
   reviewing an early draft of this article. We further thank Renato Cerro
   for his proofreading. This work has been partially funded by Program
   U-INICIA 11/06 VID 2011, grant U-INICIA 11/06, University of Chile, and
   by FONDECYT number 1120094.
CR Bergel A, 2005, ACM SIGPLAN NOTICES, V40, P177, DOI 10.1145/1103845.1094826
   Bergel A., 2010, SMALLTALKS 2010
   BRANT J, 1998, LNCS, V1445, P396
   Ducasse S, 2005, IEEE T SOFTWARE ENG, V31, P75, DOI 10.1109/TSE.2005.14
   Ducasse S., 2005, P VISSOFT 2005 3 IEE
   Jones J. A., 2004, Information Visualization, V3, P173, DOI 10.1057/palgrave.ivs.9500077
   Jones JA, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P467, DOI 10.1109/ICSE.2002.1007991
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Ressia J., 2010, P 5 WORKSH MOD RUN T, P37
   Tanter Eric, 2010, P 9 ACM INT C ASP OR, P37, DOI DOI 10.1145/1739230.1739236
   Tufte ER, 1990, Envisioning Information
   Yang Q, 2009, COMPUT J, V52, P589, DOI 10.1093/comjnl/bxm021
NR 13
TC 3
Z9 4
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2014
VL 79
SI SI
BP 86
EP 100
DI 10.1016/j.scico.2012.04.006
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 246RH
UT WOS:000326556300007
OA hybrid
DA 2024-07-18
ER

PT J
AU Heuer, A
   Stricker, V
   Budnik, CJ
   Konrad, S
   Lauenroth, K
   Pohl, K
AF Heuer, Andre
   Stricker, Vanessa
   Budnik, Christof J.
   Konrad, Sascha
   Lauenroth, Kim
   Pohl, Klaus
TI Defining variability in activity diagrams and Petri nets
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Variability; Variability in activity diagrams; Documenting variability;
   Quality assurance for product line engineering
ID PRODUCT; CHECKING
AB Control flow models, such as UML activity diagrams or Petri nets, are widely accepted modeling languages used to support quality assurance activities in single system engineering as well as software product line (SPL) engineering. Quality assurance in product line engineering is a challenging task since a defect in a domain artifact may affect several products of the product line. Thus, proper quality assurance approaches need to pay special attention to the product line variability. Automation is essential to support quality assurance approaches. A prerequisite for automation is a profound formalization of the underlying control flow models and, in the context of SPLs, of the variability therein.
   In this paper, we propose a formal syntax and semantics for defining variability in Petri nets. We use these extended Petri nets as a foundation to formally define variability in UML activity diagrams; UML activity diagrams serve as a basis for several testing techniques in product line engineering. We illustrate the contribution of such a formalization to assurance activities in product line engineering by describing its usage in three application examples. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Heuer, Andre; Stricker, Vanessa; Pohl, Klaus] Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, D-45127 Essen, Germany.
   [Lauenroth, Kim] Adesso AG, D-44269 Dortmund, Germany.
   [Budnik, Christof J.] Siemens Corp Res, Princeton, NJ 08540 USA.
C3 University of Duisburg Essen; Siemens AG
RP Heuer, A (corresponding author), Univ Duisburg Essen, Paluno Ruhr Inst Software Technol, Gerlingstr 16, D-45127 Essen, Germany.
EM andre.heuer@paluno.uni-due.de
RI Lauenroth, Kim/JQJ-2746-2023
OI Lauenroth, Kim/0009-0008-9197-0809
FU DFG [PO 607/2-1 IST-SPL, PO 607/4-1 KOPI]
FX This paper was partially funded by the DFG grants PO 607/2-1 IST-SPL and
   PO 607/4-1 KOPI and is an extended version of our paper presented in
   Heuer et al. (2010) [1].
CR [Anonymous], 2004, P INT WORKSHOP SOFTW
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Beizer B., 1990, SOFTWARE TESTING TEC
   Binder R. V., 1999, ADDISON WESLEY OBJEC
   Bragança A, 2006, SPLC 2006: 10TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P123
   Czarnecki K., 2006, GPCE, P211
   Eshuis R, 2006, ACM T SOFTW ENG METH, V15, P1, DOI 10.1145/1125808.1125809
   Eshuis R, 2004, IEEE T SOFTWARE ENG, V30, P437, DOI 10.1109/TSE.2004.33
   Eshuis R., 2002, THESIS U TWENTE, V02-44
   Heuer A., 2010, P 14 INT SOFTW PROD
   Kamsties E., 2003, International Workshop on Software Product-Family Engineering, P6
   Kang Kyo C, 1990, Technical Report
   Lauenroth K., 2007, P 27 INT C AUT SOFTW, P5
   Lauenroth K., 2009, P 24 INT C AUT SOFTW, P373
   Lauenroth K., 2010, QUALITY ASSURANCE PR
   Lauenroth K, 2008, INT REQUIR ENG CONF, P193, DOI 10.1109/RE.2008.21
   Metzger A., 2007, ICFI, P1
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   Muschevici R., 2010, P WORKSH FORM METH S, V2
   Nianhua Yang, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P369, DOI 10.1109/QSIC.2010.26
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   *OBJ MAN GROUP, 2007, OMG UN MOD LANG OMG
   Object Management Group, 2010, OMG UN MOD LANG OMG
   Olimpiew E., 2008, P 12 INT SOFTW PROD, P8
   Peterson J.L., 1981, Petri Net Theory and the Modeling of Systems
   Petri C. A., 1966, RADCTR65377 GRIFF AI, V1
   Petri C. A, 1962, Kommunikation mit Automaten
   Pohl K., 2005, SOFTWARE PRODUCT LIN
   Pohl R., 2011, P ASE 2011 26 IEEE A
   Rapps S., 1982, Sixth International Conference on Software Engineering, P272
   Reis S, 2007, LECT NOTES COMPUT SC, V4422, P321
   Reisig W., 2012, Petri nets: an introduction, V4
   Reuys A, 2005, LECT NOTES COMPUT SC, V3520, P519
   Reuys A., 2006, Software Product Lines, P479
   Robak S., 2002, International Journal of Applied Mathematics and Computer Science, V12, P285
   Störrle H, 2005, ELECTRON NOTES THEOR, V127, P35, DOI 10.1016/j.entcs.2004.08.046
   Storrle H., 2004, Nordic Journal of Computing, V11, P279
   Störrle H, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P235, DOI 10.1109/VLHCC.2004.46
   Storrle H., 2005, Software Engineering, P117
   Stricker V, 2010, LECT NOTES COMPUT SC, V6287, P226, DOI 10.1007/978-3-642-15579-6_16
   Trickovic I., 2000, NOVI SAD J MATH, V30, P161
   Wang LZ, 2004, 11TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P284, DOI 10.1109/APSEC.2004.55
NR 43
TC 4
Z9 5
U1 0
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2414
EP 2432
DI 10.1016/j.scico.2012.06.003
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 234SL
UT WOS:000325664500009
OA hybrid
DA 2024-07-18
ER

PT J
AU Muldoon, C
   O'Hare, GMP
   O'Grady, MJ
   Tynan, R
   Trigoni, N
AF Muldoon, Conor
   O'Hare, Gregory M. P.
   O'Grady, Michael J.
   Tynan, Richard
   Trigoni, Niki
TI Distributed constraint optimisation for resource limited sensor networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Wireless sensor networks; Distributed constraint optimisation; Multi
   agent systems
AB This paper addresses the problem of self-organisation and coordination within Wireless Sensor Networks. It advocates the use of a multi-agent system and specifically the use of multi-agent distributed constraint optimisation algorithms. Developing agent-based software for low powered sensing devices introduces several problems to be addressed; the most obvious being the limited computational and energy resources available. This paper details the Constrained Limited Device Configuration (CLDC) implementation of two pre-existing algorithms for distributed constraint optimisation, namely Adopt and the Max Sum algorithm. We discuss (1) a novel algorithm for bounded function mergers that reduces the communication overhead and the number of cycles in the factor graph of the Max Sum algorithm and (2) how the footprint of Adopt has been reduced from the reference implementation. This work is evaluated through the use of the canonical multi-agent coordination problem, namely graph colouring. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Muldoon, Conor; Trigoni, Niki] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
   [O'Hare, Gregory M. P.; O'Grady, Michael J.; Tynan, Richard] Univ Coll Dublin, Sch Comp Sci & Informat, CLAR Ctr Sensor Web Technol, Dublin 4, Ireland.
C3 University of Oxford; University College Dublin
RP Muldoon, C (corresponding author), Univ Oxford, Dept Comp Sci, Wolfson Bldg,Parks Rd, Oxford OX1 3QD, England.
EM conor.muldoon@ucd.ie; gregory.ohare@ucd.ie; michael.ogrady@ucd.ie;
   richard.tynan@ucd.ie; niki.trigoni@cs.ox.ac.uk
RI O'Hare, Gregory M.P./AAA-7756-2022
OI O'Hare, Gregory M.P./0000-0002-5124-1686; Muldoon,
   Conor/0000-0003-1381-2561; O'Grady, Michael/0000-0002-3024-3666;
   Trigoni, Niki/0000-0001-6236-9645
FU Science Foundation Ireland (SFI) [07/CE/I1147]; Irish Research Council
   for Science, Engineering and Technology; European Commission Marie Curie
   Actions
FX This work is supported by Science Foundation Ireland (SFI) under grant
   07/CE/I1147. The authors would also like to acknowledge the support of
   the Irish Research Council for Science, Engineering and Technology and
   the European Commission Marie Curie Actions. Thanks go to the anonymous
   reviewers for their feedback and comments on the paper.
CR Aji S., 1998, IEEE INT S INF THEOR
   Aji S., 2002, IEEE T INFORM THEORY, V46, P325
   [Anonymous], 2009, USC DCOP REPOSITORY
   [Anonymous], 2006, PATTERN RECOGN
   [Anonymous], 2005, 4 INT JOINT C AUT AG, DOI DOI 10.1145/1082473.1082682
   Béjar R, 2005, ARTIF INTELL, V161, P117, DOI 10.1016/j.artint.2004.09.002
   Faltings B, 2006, FOUND ARTIF INTELL, P699
   Farinelli Alessandro, 2008, AAMAS, P639
   FLOYD RW, 1962, COMMUN ACM, V5, P345, DOI 10.1145/367766.368168
   Hayes B, 2003, AM SCI, V91, P12, DOI 10.1511/2003.1.12
   Kschischang F., 2001, IEEE T INFORM THEORY
   MacKay D., 2003, INFORM THEORY INFERE
   Maheswaran R., TAKING DCOP REAL WOR
   Maheswaran RT, 2006, COORDINATION OF LARGE-SCALE MULTIAGENT SYSTEMS, P127, DOI 10.1007/0-387-27972-5_6
   Marsh D, 2004, ENG APPL ARTIF INTEL, V17, P741, DOI 10.1016/j.engappai.2004.08.038
   Modi P., 2003, AAMAS
   Modi PJ, 2005, ARTIF INTELL, V161, P149, DOI 10.1016/j.artint.2004.09.003
   Moscibroda T., 2005, SPAA 05, P39
   Muldoon C., 2010, ACM SAC
   Muldoon C., 2007, AAMAS
   Petcu A, 2005, 19TH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI-05), P266
   Rogers A, 2010, LECT NOTES COMPUT SC, V6090, P84, DOI 10.1007/978-3-642-14412-7_5
   Tynan R, 2011, COMPUT J, V54, P490, DOI 10.1093/comjnl/bxp109
   VITERBI AJ, 1967, IEEE T INFORM THEORY, V13, P260, DOI 10.1109/TIT.1967.1054010
   Weiss Y, 2000, NEURAL COMPUT, V12, P1, DOI 10.1162/089976600300015880
   Yeoh A. K. amd William, 2011, P 13 INT WORKSH DIST, P57
   Zhang WX, 2005, ARTIF INTELL, V161, P55, DOI 10.1016/j.artint.2004.10.004
NR 27
TC 6
Z9 9
U1 2
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 583
EP 593
DI 10.1016/j.scico.2012.10.005
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500012
OA Bronze
DA 2024-07-18
ER

PT J
AU de Oliveira, DCB
   Déharbe, D
   Fontaine, P
AF de Oliveira, Diego Caminha B.
   Deharbe, David
   Fontaine, Pascal
TI Combining decision procedures by (model-)equality propagation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal verification; Automated theorem proving; SMT solving; Combination
   of decision procedures
ID MODULO THEORIES; NELSON-OPPEN; COMBINATIONS; INFINITE
AB Formal methods in software and hardware design often generate formulas that need to be validated, either interactively or automatically. Among the automatic tools, SMT (Satisfiability Modulo Theories) solvers are particularly suitable to discharge such proof obligations, as their input language is equational logic with symbols from various useful decidable fragments such as uninterpreted symbols, linear arithmetic, and usual data-structures like arrays or lists. In this paper, we present an approach to combine decision procedures and propositional solvers into an SMT-solver, based not only on the exchange of deducible equalities between decision procedures, but also on the generation of model equalities by decision procedures. This extends nicely the classical Nelson-Oppen combination procedure in a simple platform to smoothly combine convex and non-convex theories. We show the soundness and completeness of this approach using an original abstract framework to represent and reason about SMT-solvers. We then describe an algorithmic translation of this method, implemented in the kernel of the veriT solver (Bouton et al. (2009)) [9]. (C) 2010 Elsevier B.V. All rights reserved.
C1 [de Oliveira, Diego Caminha B.; Fontaine, Pascal] Univ Nancy, Nancy, France.
   [de Oliveira, Diego Caminha B.; Fontaine, Pascal] INRIA, Nancy, France.
   [de Oliveira, Diego Caminha B.; Fontaine, Pascal] LORIA, Nancy, France.
   [Deharbe, David] Univ Fed Rio Grande do Norte, Dept Informat & Mat Aplicada, BR-59072970 Natal, RN, Brazil.
C3 Universite de Lorraine; Inria; Universite de Lorraine; Universidade
   Federal do Rio Grande do Norte
RP de Oliveira, DCB (corresponding author), Univ Nancy, Nancy, France.
EM Diego.Caminha@loria.fr; deharbe@gmail.com; Pascal.Fontaine@loria.fr
RI Deharbe, David/C-8531-2009; Ines, INCT/J-9550-2013
FU National Institute of Science and Technology for Software Engineering
   (INES); CNPq [573964/2008-4]; ANR
FX The research presented in this paper has been partially supported by the
   National Institute of Science and Technology for Software Engineering
   (INES), funded by CNPq grant 573964/2008-4, and by the ANR project
   DECERT.
CR Abadi M., 1988, 29 DECSRC
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   [Anonymous], 1977, 2 EASY THEORIES WHOS
   Baaz M., 2001, Handbook of Automated Reasoning, V1, P273
   Barrett C, 2008, INT J ARTIF INTELL T, V17, P569, DOI 10.1142/S0218213008004060
   Barrett C, 2006, LECT NOTES ARTIF INT, V4246, P512, DOI 10.1007/11916277_35
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Barrett CW, 2002, LECT NOTES ARTIF INT, V2309, P132
   Barsotti D, 2007, FORM ASP COMPUT, V19, P321, DOI 10.1007/S00165-007-0027-6
   Bouton T, 2009, LECT NOTES ARTIF INT, V5663, P151, DOI 10.1007/978-3-642-02959-2_12
   Bruttomesso R, 2006, LECT NOTES ARTIF INT, V4246, P527, DOI 10.1007/11916277_36
   Cornelio M., 2004, P BRAS S FORM METH S, P199
   DAVIS M, 1962, COMMUN ACM, V5, P394, DOI 10.1145/368273.368557
   de Moura L, 2008, ELECTRON NOTES THEOR, V198, P37, DOI 10.1016/j.entcs.2008.04.079
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Oliveira DCB, 2009, ELECTRON NOTES THEOR, V240, P113, DOI 10.1016/j.entcs.2009.05.048
   Een N.S. N., 2003, INT C THEORY APPL SA, P333
   Fontaine P, 2006, LECT NOTES COMPUT SC, V3920, P167
   Fontaine P, 2005, ELECTRON NOTES THEOR, V125, P37, DOI 10.1016/j.entcs.2004.06.066
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   Harrison J, 1996, LECT NOTES COMPUT SC, V1166, P265, DOI 10.1007/BFb0031814
   Huet G., 2004, COQ PROOF ASSISTANT
   Lahiri SK, 2006, ELECTRON NOTES THEOR, V144, P27, DOI 10.1016/j.entcs.2005.12.004
   Lahiri SK, 2005, LECT NOTES COMPUT SC, V3717, P168
   Leino K.R.M., 2006, P BRAZ S FORM METH S, P3
   Morgan Carroll, 1994, Programming from specifications
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3576, P321
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Nonnengart Andreas., 2001, HDB AUTOMATED REASON, VI, P335
   OPPEN DC, 1980, THEOR COMPUT SCI, V12, P291, DOI 10.1016/0304-3975(80)90059-6
   RANISE S., 2006, The SMT-LIB standard: Version 1.2
   SHOSTAK RE, 1984, J ACM, V31, P1, DOI 10.1145/2422.322411
   Tinelli C, 1996, APPL LOG SER, V3, P103
   Tinelli C, 2005, J AUTOM REASONING, V34, P209, DOI 10.1007/s10817-005-5204-9
   Zhang LT, 2001, ICCAD 2001: IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER AIDED DESIGN, DIGEST OF TECHNICAL PAPERS, P279, DOI 10.1109/ICCAD.2001.968634
NR 38
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2012
VL 77
IS 4
SI SI
BP 518
EP 532
DI 10.1016/j.scico.2010.04.003
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 906ER
UT WOS:000301328200006
OA Bronze
DA 2024-07-18
ER

PT J
AU Apel, S
   Kolesnikov, S
   Liebig, J
   Kästner, C
   Kuhlemann, M
   Leich, T
AF Apel, Sven
   Kolesnikov, Sergiy
   Liebig, Joerg
   Kaestner, Christian
   Kuhlemann, Martin
   Leich, Thomas
TI Access control in feature-oriented programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature-oriented programming; Feature modularity; Access control; Access
   modifier model; Fuji
ID SUPPORT
AB In feature-oriented programming (FOP) a programmer decomposes a program in terms of features. Ideally, features are implemented modularly so that they can be developed in isolation. Access control mechanisms in the form of access or visibility modifiers are an important ingredient to attain feature modularity as they allow programmers to hide and expose internal details of a module's implementation. But developers of contemporary feature-oriented languages have not considered access control mechanisms so far. The absence of a well-defined access control model for FOP breaks encapsulation of feature code and leads to unexpected program behaviors and inadvertent type errors. We raise awareness of this problem, propose three feature-oriented access modifiers, and present a corresponding access modifier model. We offer an implementation of the model on the basis of a fully-fledged feature-oriented compiler. Finally, by analyzing ten feature-oriented programs, we explore the potential of feature-oriented modifiers in FOP. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Apel, Sven; Kolesnikov, Sergiy; Liebig, Joerg] Univ Passau, Dept Informat & Math, Passau, Germany.
   [Kaestner, Christian] Univ Marburg, Dept Comp Sci & Math, D-35032 Marburg, Germany.
   [Kuhlemann, Martin] Univ Magdeburg, Sch Comp Sci, D-39106 Magdeburg, Germany.
   [Leich, Thomas] Metop Res Ctr, Magdeburg, Germany.
C3 University of Passau; Philipps University Marburg; Otto von Guericke
   University
RP Apel, S (corresponding author), Univ Passau, Dept Informat & Math, Passau, Germany.
EM apel@uni-passau.de; kolesnik@fim.uni-passau.de;
   joliebig@fim.uni-passau.de; kaestner@informatik.uni-marburg.de;
   kuhlemann@iti.cs.uni-magdeburg.de; thomas.leich@metop.de
RI Leich, Thomas/N-8106-2017
OI Kastner, Christian/0000-0002-4450-4572; Apel, Sven/0000-0003-3687-2233
FU German Research Foundation (DFG) [AP 206/2-1]; Metop Research Center
FX This work is being supported in part by the German Research Foundation
   (DFG), project number AP 206/2-1 and by the Metop Research Center.
CR Anfurrutia FI, 2007, LECT NOTES COMPUT SC, V4607, P473
   Apel S, 2005, LECT NOTES COMPUT SC, V3676, P125
   Apel S., 2009, P INT WORKSH FEAT OR, P26
   Apel S, 2008, IEEE T SOFTWARE ENG, V34, P162, DOI 10.1109/TSE.2007.70770
   Apel S, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1745312.1745316
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Apel S, 2010, AUTOMAT SOFTW ENG, V17, P251, DOI 10.1007/s10515-010-0066-8
   Apel S, 2009, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2009.5070523
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P161
   Apel S, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P101
   Apel S, 2009, LECT NOTES COMPUT SC, V5634, P9, DOI 10.1007/978-3-642-02655-3_3
   Aracic I, 2006, LECT NOTES COMPUT SC, V3880, P135
   Batory Don, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P135, DOI 10.1145/1190216.1190238
   Batory D, 2004, IEEE T SOFTWARE ENG, V30, P355, DOI 10.1109/TSE.2004.23
   Batory D, 2007, LECT NOTES COMPUT SC, V4420, P156
   Bergel A, 2005, ACM SIGPLAN NOTICES, V40, P177, DOI 10.1145/1103845.1094826
   Bouillon P, 2008, LECT NOTES BUS INF P, V11, P41
   Delaware B, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P243, DOI 10.1145/1595696.1595733
   Ebraert P, 2008, WORK CONF REVERSE EN, P319, DOI 10.1109/WCRE.2008.43
   Ekman T., 2007, Proceedings of the 22nd annual ACM SIGPLAN conference on Object-oriented programming systems and applications, P1, DOI [10.1145/1297027.1297029, DOI 10.1145/1297027.1297029]
   Hundt C, 2007, J OBJECT TECHNOL, V6, P417, DOI 10.5381/jot.2007.6.9.a21
   HUTCHINS D., 2009, THESIS U EDINBURGH
   Hutchins D, 2006, ACM SIGPLAN NOTICES, V41, P1, DOI 10.1145/1167515.1167475
   Kuhlemann M, 2007, LECT NOTES COMPUT SC, V4829, P168
   Lopez-Herrejon R., 2006, THESIS U TEXAS AUSTI
   Lopez-Herrejon RE, 2005, LECT NOTES COMPUT SC, V3586, P169
   Lopez-Herrejon Roberto., 2006, Proceedings of the 2006 ACM SIGPLAN symposium on Partial evaluation and semantics-based program manipulation (New York, NY, USA), PEPM '06, P68
   Prehofer C, 1997, LECT NOTES COMPUT SC, V1241, P419
   REENSKAUG T, 1992, J OBJECT-ORIENT PROG, V5, P27
   Smaragdakis Y, 2002, ACM T SOFTW ENG METH, V11, P215, DOI 10.1145/505145.505148
   Steimann F., 2010, ACM T SOFTW IN PRESS, V20
   VanHilst Michael., 1996, P 11 ACM SIGPLAN C O, P359
NR 32
TC 12
Z9 12
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 174
EP 187
DI 10.1016/j.scico.2010.07.005
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000004
DA 2024-07-18
ER

PT J
AU Eveleens, JL
   van der Pas, M
   Verhoef, C
AF Eveleens, J. L.
   van der Pas, M.
   Verhoef, C.
TI Quantifying forecast quality of IT business value
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE IT business value; Forecast; Estimation; Reference cone; Forecast to
   actual ratio; Estimating Quality Factor; EQF; IT
ID SOFTWARE; INVESTMENT
AB This article discusses how to quantify the forecasting quality of IT business value. We address a common economic indicator often used to determine the business value of project proposals, the Net Present Value (NPV). To quantify the forecasting quality of IT business value, we develop a generalized method that is able to account for asymptotic cases and negative valued entities. We assess the generalization with real-world data of four organizations together consisting of 1435 IT assets with a total investment cost of 1232+ million Euro for which 6328 forecasts were made. Using the generalized method, we determine the forecasting quality of the NPV, along with the benefits and cost using real-world data of another 102 IT assets with a total business value of 1812 million Euro. For the real-world case study, we will find that the quality of the forecasted NPVs is lower than the forecasted benefits, which is again lower than the forecasting quality of the cost. Also, we perform a sensitivity analysis to investigate the impact on the quality of an asset's forecasted NPV when the forecasting quality of benefits or cost improves. Counterintuitively, it turned out in this case study that if the quality of cost forecasts would improve, the overall quality of its NPV predictions would degrade. This underlines the importance of both accurate cost and benefit predictions. Finally, we show how to use the quantified forecast information to enhance decision information using two simulation examples. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Eveleens, J. L.; Verhoef, C.] Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
   [van der Pas, M.] Vodafone, Portfolio & Innovat Management, D-40547 Dusseldorf, Germany.
C3 Vrije Universiteit Amsterdam; Vodafone Group
RP Eveleens, JL (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, De Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM laurenz@few.vu.nl; mark.vanderpas@vodafone.com; x@cs.vu.nl
FU Dutch Joint Academic and Commercial Quality Research & Development
   (Jacquard) program on Software Engineering Research [638.004.405,
   638.003.611]
FX This research received partial support by the Dutch Joint Academic and
   Commercial Quality Research & Development (Jacquard) program on Software
   Engineering Research via contract 638.004.405 EQUITY: Exploring
   Quantifiable Information Technology Yields and via contract 638.003.611
   Symbiosis: Synergy of managing business-IT-alignment, IT-sourcing and
   off shoring success in society. Furthermore, we would like to thank a
   number of organizations that will remain anonymous and Todd Little of
   Landmark Graphics Corporation for kindly sharing their forecasting data
   with us. Also, we thank our colleague Rob Peters for his help, comments
   and remarks in reviewing this article numerous times. Finally, we are
   grateful to Capers Jones and the reviewers for their comments, which
   allowed us to further improve this article.
CR [Anonymous], 1986, Software Engineering Metrics and Models
   [Anonymous], J STAT SOFTWARE
   [Anonymous], 1999, Concise Oxford English Dictionary, V10th
   [Anonymous], 1998, FINANCIAL PRACTICE E
   [Anonymous], 2011, PRACTICAL SOFTWARE P
   Arditti F., 1973, The Journal of Finance, V28, P1001
   Arnold G.C., 2000, J BUSINESS FINANCE A, V27, P603, DOI DOI 10.1111/1468-5957.00327
   BERGERON F, 1992, INFORM MANAGE, V22, P239, DOI 10.1016/0378-7206(92)90026-C
   Boehm BW., 1981, Software Engineering Economics
   Bower JosephL., 1970, MANAGING RESOURCE AL
   Brealey R., 1988, PRINCIPLES CORPORATE
   Briand L. C., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P313, DOI 10.1109/ICSE.1999.841022
   Bundschuh Manfred, 2010, IT MEASUREMENT COMPE
   Chemuturi M., 2009, Software estimation best practices, tools techniques: A complete guide for software project estimators
   DEMARCO T, 1982, CONTROLLING SOFTWARE
   Dewan S, 2007, MANAGE SCI, V53, P1829, DOI 10.1287/mnsc.1070.0739
   Dreger J.B., 1989, FUNCTION POINT ANAL
   Eveleens JL, 2009, SCI COMPUT PROGRAM, V74, P934, DOI 10.1016/j.scico.2009.09.005
   Eveleens JL, 2010, IEEE SOFTWARE, V27, P30, DOI 10.1109/MS.2009.154
   Fisz M., 1963, PROBABILITY THEORY M
   Fremgen J.M., 1973, Management Accounting, V54, P19
   Garmus David., 2001, AW INFORMAT
   GITMAN LJ, 1977, FINANC MANAGE, V6, P66, DOI 10.2307/3665258
   Harold Harold Bierman, 1993, CAPITAL BUDGETING DE
   Hope J., 1999, , Management Accounting, V77, P16
   Hyndman RJ, 2006, INT J FORECASTING, V22, P679, DOI 10.1016/j.ijforecast.2006.03.001
   INGERSOLL JE, 1992, J BUS, V65, P1, DOI 10.1086/296555
   JONES C, 2008, APPL SOFTWARE MEASUR
   JONES C, 2001, CONFLICT LITIGATION
   Jones C., 2007, Estimating Software Costs: Bringing Realism To Estimating
   Jones Capers, 2011, COMMUNICATION    MAR
   JORGENSEN M, 1995, IEEE T SOFTWARE ENG, V21, P674, DOI 10.1109/32.403791
   KEMERER CF, 1987, COMMUN ACM, V30, P416, DOI 10.1145/22899.22906
   Kulk GP, 2009, SCI COMPUT PROGRAM, V74, P900, DOI 10.1016/j.scico.2009.09.001
   Laird L., 2006, Software Measurement and Estimation: A Practical Approach
   Leliveld I., 2003, IT PORTFOLIO MANAGEM
   LISTER T, 2002, BECOMING BETTER ESTI
   Little T, 2006, IEEE SOFTWARE, V23, P48, DOI 10.1109/MS.2006.82
   Little T, 2005, IEEE SOFTWARE, V22, P28, DOI 10.1109/MS.2005.60
   Lorie JH, 1955, J BUS, V28, P229, DOI 10.1086/294081
   McConnell S., 2006, Software Estimation: Demystifying the Black Art
   *META GROUP, 2002, BUS IT PORTF MAN BAL
   Neely A., 2003, Measuring Business Excellence, V7, P22, DOI [10.1108/136830403, DOI 10.1108/136830403, 10.1108/13683040310496471, DOI 10.1108/13683040310496471]
   Peters RJ, 2008, SCI COMPUT PROGRAM, V71, P17, DOI 10.1016/j.scico.2007.11.001
   Petty J.William., 1975, Engineering Economist, V20, P159, DOI DOI 10.1080/00137917508965140
   Phan Dien., 1998, COMPUTERWORLD, V22, P95
   Pike R.H., 1982, CAPITAL BUDGETING 19
   PISELLO T, 2003, DIGITAL PUBLICATIO D, V10
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   ROSS SA, 1995, FINANC MANAGE, V24, P96, DOI 10.2307/3665561
   Ross SA., 2000, FUNDAMENTALS CORPORA, V5th edn
   Ryan P.A., 2002, Journal of Business and Management, V8, P355
   SCHALL LD, 1978, J FINANC, V33, P281, DOI 10.1111/j.1540-6261.1978.tb03404.x
   Shepperd M, 1997, IEEE T SOFTWARE ENG, V23, P736, DOI 10.1109/32.637387
   Verhoef C., 2005, SCI COMPUT PROGRAM, V56, P281
NR 55
TC 3
Z9 4
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 314
EP 354
DI 10.1016/j.scico.2011.07.010
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA 898NB
UT WOS:000300748000010
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Wagner, G
   Gal, A
   Franz, M
AF Wagner, Gregor
   Gal, Andreas
   Franz, Michael
TI "Slimming" a Java virtual machine by way of cold code removal and
   optimistic partial program loading
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on the Principles and Practice of
   Programming in Java (PPPJ 2008)
CY SEP 08-11, 2008
CL Modena, ITALY
DE Java virtual machine; Just-in-time compilation; Embedded connected
   devices; Cold code removal
AB Embedded systems provide limited storage capacity. This limitation conflicts with the demands of modern virtual machine platforms, which require large amounts of library code to be present on each client device. These conflicting requirements are often resolved by providing specialized embedded versions of the standard libraries, but even these stripped down libraries consume significant resources.
   We present a solution for "always connected" mobile devices based on a zero footprint client paradigm. In our approach, all code resides on a remote server. Only those parts of applications and libraries that are likely to be needed are transferred to the mobile client device. Since it is difficult to predict statically which library parts will be needed at run time, we combine static analysis, opportunistic off-target linking and lazy code loading to transfer code with a high likelihood of execution ahead of time while the other code, such as exception code, remains on the server and is transferred only on demand. This allows us to perform not only dead code elimination, but also aggressive elimination of unused code.
   The granularity of our approach is flexible from class files all the way down to individual basic blocks. Our method achieves total code size reductions of up to 95%. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Wagner, Gregor; Gal, Andreas; Franz, Michael] Univ Calif Irvine, Irvine, CA 92697 USA.
C3 University of California System; University of California Irvine
RP Wagner, G (corresponding author), Univ Calif Irvine, Irvine, CA 92697 USA.
EM wagnerg@uci.edu; gal@uci.edu; franz@uci.edu
CR Antonioli D. M., 1998, ANAL JAVA CLASS FILE
   BRADLEY Q, 1998, CASCON 98, P7
   Butts JA, 2002, ACM SIGPLAN NOTICES, V37, P199, DOI 10.1145/605432.605419
   Clausen LR, 1997, CONCURRENCY-PRACT EX, V9, P1031, DOI 10.1002/(SICI)1096-9128(199711)9:11<1031::AID-CPE354>3.0.CO;2-O
   Clausen LR, 2000, ACM T PROGR LANG SYS, V22, P471, DOI 10.1145/353926.353933
   DAHM M, 2001, BYTE CODE ENG LIB BC
   Franz M, 1997, COMMUN ACM, V40, P87, DOI 10.1145/265563.265576
   GOSLING J, 1996, JAVA SERIES
   KRINTZ C, 1998, ASPLOS 8, P159
   Mathew J. A., 1999, P ACM 1999 JAV GRAND
   PUGH W, 1999, P 1999 ACM SIGPLAN C, P247
   RAYSIDE D, 1999, CASCON 99, P9
   RAYSIDE D, 1999, EXTRACTING JAVA LIB
   ROSE WPJ, 2004, JSR 200 NETWORK TRAN
   Sartor JB, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P111
   STORK CH, 2006, THESIS U CALIFORNIA
   *SUN MICR, 1999, KVM KIL VIRT MACH WH
   *SUN MICR INC, 2000, CONN LTD DEV CONF K
   SWEENEY P, 2000, S FDN SOFTW ENG, P98
   Tip F, 2003, COMMUN ACM, V46, P35, DOI 10.1145/859670.859695
   Tip F, 2002, ACM T PROGR LANG SYS, V24, P625, DOI 10.1145/586088.586090
   Titzer BL, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P352, DOI 10.1145/1250734.1250775
   YANG YS, 2004, VIRTUAL ENV HUMAN CO, P20
   [No title captured]
   SUN J2MES HOMEPAGE
NR 25
TC 11
Z9 13
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2011
VL 76
IS 11
SI SI
BP 1037
EP 1053
DI 10.1016/j.scico.2010.04.008
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 791ND
UT WOS:000292671000005
DA 2024-07-18
ER

PT J
AU Brabrand, C
   Giegerich, R
   Moller, A
AF Brabrand, Claus
   Giegerich, Robert
   Moller, Anders
TI Analyzing ambiguity of context-free grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Context-free languages; Approximation; Biosequence analysis
AB It has been known since 1962 that the ambiguity problem for context-free grammars is undecidable. Ambiguity in context-free grammars is a recurring problem in language design and parser generation, as well as in applications where grammars are used as models of real-world physical structures.
   We observe that there is a simple linguistic characterization of the grammar ambiguity problem, and we show how to exploit this by presenting an ambiguity analysis framework based on conservative language approximations. As a concrete example, we propose a technique based on local regular approximations and grammar unfoldings. We evaluate the analysis using grammars that occur in RNA analysis in bioinformatics, and we demonstrate that it is sufficiently precise and efficient to be practically useful. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Moller, Anders] Aarhus Univ, Dept Comp Sci, DK-8200 Aarhus N, Denmark.
   [Brabrand, Claus] IT Univ Copenhagen, DK-2300 Copenhagen S, Denmark.
   [Giegerich, Robert] Univ Bielefeld, Ctr Biotechnol, D-33501 Bielefeld, Germany.
C3 Aarhus University; IT University Copenhagen; University of Bielefeld
RP Moller, A (corresponding author), Aarhus Univ, Dept Comp Sci, Aabogade 34, DK-8200 Aarhus N, Denmark.
EM amoeller@cs.au.dk
OI Moller, Anders/0000-0003-1333-2314
CR Aho A. V., 1972, THEORY PARSING TRANS
   [Anonymous], 1998, BIOL SEQUENCE ANAL P
   Basten HJS, 2009, ELECTRON NOTES THEOR, V238, P35, DOI 10.1016/j.entcs.2009.09.039
   Berstel J., 2002, Formal and natural computing. Essays dedicated to Grzegorz Rozenberg (Lecture Notes in Computer Science Vol.2300), P3
   BRABRAND C, LNCS, V3774
   Brabrand C, 2007, SCI COMPUT PROGRAM, V68, P2, DOI 10.1016/j.scico.2005.06.007
   Brabrand Claus, 2008, INFORM SYSTEMS, V33
   CANTOR DG, 1962, J ACM, V9, P477, DOI 10.1145/321138.321145
   CHEUNG BSN, 1995, P ACM S APPL COMP SA
   Chomsky Noam, 1959, Studies in Logic and the Foundations of Mathematics, V26, P118, DOI [10.1016/S0049-237X(09)70104-1, DOI 10.1016/S0049-237X(09)70104-1]
   Christensen AS, 2003, LECT NOTES COMPUT SC, V2694, P1
   Culik K.  II, 1973, Journal of Computer and System Sciences, V7, P66, DOI 10.1016/S0022-0000(73)80050-9
   Dowell RD, 2004, BMC BIOINFORMATICS, V5, DOI 10.1186/1471-2105-5-71
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   FLOYD RW, 1962, COMMUN ACM, V5, P526, DOI 10.1145/368959.368993
   Gardner PP, 2009, NUCLEIC ACIDS RES, V37, pD136, DOI 10.1093/nar/gkn766
   Giegerich R, 2004, SCI COMPUT PROGRAM, V51, P215, DOI 10.1016/j.scico.2003.12.005
   Giegerich R, 2000, LECT NOTES COMPUT SC, V1848, P46
   GIEGERICH R, 2009, SEMANTICS AMBI UNPUB
   GORN S, 1963, J ACM, V10, P196, DOI 10.1145/321160.321168
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   KNUTH DE, 1967, INFORM CONTROL, V11, P269, DOI 10.1016/S0019-9958(67)90564-5
   Kuich W., 1970, Elektronische Informationsverarbeitung und Kybernetik (EIK), V6, P95
   MCPEAK S, 2004, P 13 INT C COMP CONS
   MOHRI M, 2001, ROBUSTNESS LANGUAGE, pCH9
   MOLLER A, 2008, DK BRICS AUTOMATON F
   Nawrocki EP, 2009, BIOINFORMATICS, V25, P1335, DOI 10.1093/bioinformatics/btp157
   Nederhof MJ, 2000, COMPUT LINGUIST, V26, P17, DOI 10.1162/089120100561610
   Reeder J, 2005, BMC BIOINFORMATICS, V6, DOI 10.1186/1471-2105-6-153
   Reeder J, 2007, BIOINFORMATICS, V23, pI392, DOI 10.1093/bioinformatics/btm179
   SCHMITZ S, 2007, P 34 INT C AUT LANG
   SCHMITZ S, 2009, SCI COMPUTER PROGRAM
   SCOTT E, 2000, CSDTR00A U LONDON
   van den Brand M.G.J., 2002, P 11 INT C COMP CONS
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Voss B, 2006, BMC BIOL, V4, DOI 10.1186/1741-7007-4-5
NR 37
TC 13
Z9 15
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2010
VL 75
IS 3
BP 176
EP 191
DI 10.1016/j.scico.2009.11.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 561LD
UT WOS:000274977800004
OA Green Published
DA 2024-07-18
ER

PT J
AU Butterfield, A
   Freitas, L
   Woodcock, J
AF Butterfield, Andrew
   Freitas, Leo
   Woodcock, Jim
TI Mechanising a formal model of flash memory
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Grand challenge; Verification; Flash hardware; Theorem proving
ID FILE SYSTEM; RELIABILITY
AB We present second steps in the construction of formal models of NAND flash memory, based oil a recently emerged open standard for such devices. The model is intended as a key part of a pilot project to develop a verified file store system based on flash memory. The project was proposed by Joshi and Holzmann as a contribution to the Grand Challenge in Verified Software, and involves constructing a highly assured flash file store for use in space-flight missions. The model is at a level of abstraction that captures the internal architecture of NAND flash devices. In this paper, we focus Oil mechanising the state model and its initialisation operation, where most of the Conceptual Complexity resides. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Butterfield, Andrew] Univ Dublin Trinity Coll, Dublin 2, Ireland.
   [Freitas, Leo; Woodcock, Jim] Univ York, York YO10 5DD, N Yorkshire, England.
C3 Trinity College Dublin; University of York - UK
RP Butterfield, A (corresponding author), Univ Dublin Trinity Coll, Dublin 2, Ireland.
EM Andrew.Butterfield@cs.tcd.ie; leo@cs.york.ac.uk;
   Jim.Woodcock@cs.york.ac.uk
RI Freitas, Leo/G-5733-2012
OI Woodcock, James/0000-0001-7955-2702; Butterfield,
   Andrew/0000-0002-2337-2101
FU NASA/JPL; EPSRC [EP/G061947/1, EP/E025366/1] Funding Source: UKRI
FX We are grateful to Rajeev Joshi and Gerard Holzmann from NASA/JPL who
   originally suggested the flash file store as a grand challenge pilot
   project. We received constructive feedback on our formalisation of flash
   memory from members of IFIP WG 2.3 on Programming Methodology at their
   meeting in Santa Fe in October 2007. We would also like to acknowledge
   Amber Huffman of Intel for support within ONFI and for answering many of
   our technical questions about the standard.
CR ANDY G, 2007, YCS2007423 U YORK DE
   [Anonymous], 1992, The Z Notation
   [Anonymous], 2006, OP NAND FLASH INT SP
   [Anonymous], COMP SOFTW APPL C AN
   [Anonymous], JFFS JOURNALLING FLA
   ARITOME S, 1993, P IEEE, V81, P776, DOI 10.1109/5.220908
   Arkoudas K, 2004, LECT NOTES COMPUT SC, V3308, P373
   BUTTERFIELD A, 2007, 12 IEEE INT C ENG CO
   FREITAS L, 2007, ONFI SPECIFICATION Z
   FREITAS L, 2007, CRG12 U YORK
   Freund StephenN., 2004, Journal of Object Technology, V3, P81
   GAL T, 2005, CSURV COMPUTING SURV, V37
   Heisel M, 1995, LECT NOTES COMPUT SC, V936, P475
   Hoare T, 2003, J ACM, V50, P63, DOI 10.1145/602382.602403
   *INTEL CORP, 2004, INT FLASH FIL SYST C
   JOSHI R, 2005, P VER SOFTW THEOR TO
   Kgil Taeho., 2006, P 2006 INT C COMPILE, P103, DOI DOI 10.1145/1176760.1176774
   KIM M, 2008, ICST, P475
   Lim SH, 2006, IEEE T COMPUT, V55, P906, DOI 10.1109/TC.2006.96
   MANNING C, 2002, INTRODUCING YAFFS 1
   MARSH B, 1994, P 27 ANN HAW INT C S, V1, P451
   MEIRA SL, 1994, OBJECT ORIENTED SPEC, P80
   Meisels I., 1997, Z EVES REFERENCE MAN
   MORGAN C, 1987, SPECIFICATION CASE S, P91, DOI DOI 10.1109/TSE.1984.5010215
   PLACE PRH, 1995, POSIX 1003 21 REAL T
   SAALTINK M, 2004, Z EVES 2 0 USERS GUI
   SCHWARZ B, 2005, ACSAC, P13
   Sikora A, 2006, MICROELECTRON RELIAB, V46, P1980, DOI 10.1016/j.microrel.2006.01.003
   Woodcock J., 1996, INT SERIES COMPUTER
   WOODCOCK J, 2006, SCIENCE, V4281, P15
   Woodcock J, 2006, COMPUTER, V39, P57, DOI 10.1109/MC.2006.340
   Yang JF, 2006, ACM T COMPUT SYST, V24, P393, DOI 10.1145/1189256.1189259
NR 32
TC 11
Z9 12
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2009
VL 74
IS 4
BP 219
EP 237
DI 10.1016/j.scico.2008.09.014
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 410ZK
UT WOS:000263616600004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Crasso, M
   Zunino, A
   Campo, M
AF Crasso, Marco
   Zunino, Alejandro
   Campo, Marcelo
TI Easy web service discovery: A query-by-example approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE web services; web service discovery; distributed systems; information
   filtering; query-by-example; information retrieval
ID SEMANTIC WEB; ONTOLOGIES; MODEL
AB Web services have acquired enormous popularity among software developers. This popularity has motivated developers to publish a large number of Web service descriptions in UDDI registries. Although these registries provide search facilities, they are still rather difficult to use and often require service consumers to spend too much time manually browsing and selecting service descriptions. This paper presents a novel search method for Web services called WSQBE that aims at both easing query specification and assisting discoverers by returning a short and accurate list of candidate services. In contrast with previous approaches, WSQBE discovery process is based on an automatic search space reduction mechanism that makes this approach more efficient. Empirical evaluations of WSQBE search space reduction mechanism, retrieval performance, processing time and memory usage, using a registry with 391 service descriptions, are presented. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Crasso, Marco; Zunino, Alejandro; Campo, Marcelo] UNICEN Univ, ISISTAN Res Inst, Buenos Aires, DF, Argentina.
   [Crasso, Marco; Zunino, Alejandro; Campo, Marcelo] Consejo Nacl Invest Cient & Tecn, Buenos Aires, DF, Argentina.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET)
RP Zunino, A (corresponding author), UNICEN Univ, ISISTAN Res Inst, Campus Univ,Tandil B7001BBO, Buenos Aires, DF, Argentina.
EM azunino@exa.unicen.edu.ar
RI Zunino, Alejandro/W-2100-2017
OI Zunino, Alejandro/0000-0002-9537-3541; Campo,
   Marcelo/0000-0002-3555-835X
CR [Anonymous], INT C SERV OR COMP
   [Anonymous], 3 EUR START AI RES S
   [Anonymous], INT C MULT UB ENG SE
   [Anonymous], INT J VERY LARGE DAT
   [Anonymous], 2008, INTEL ARTIF REV IBER
   [Anonymous], 10 EUR C MACH LEARN
   [Anonymous], INT C MACH LEARN
   [Anonymous], SUBLANGUAGES
   [Anonymous], IEEE INT C SERV COMP
   [Anonymous], NOTEWSDL20010315 WOR
   [Anonymous], INT SEM WEB C
   [Anonymous], J SYST SOFTWARE
   [Anonymous], INT C COMP COMM NETW
   [Anonymous], INT SEM WEB C
   [Anonymous], 2003 INT C WEB SERV
   [Anonymous], UDDI VERS 3 0 2
   [Anonymous], P 13 INT C VER LARG
   [Anonymous], GRAPH INT 84 P
   [Anonymous], LECT NOTES ARTIFICIA
   [Anonymous], P 2 INT C GRID SERV
   [Anonymous], SIGIR 94
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Burstein M, 2005, IEEE INTERNET COMPUT, V9, P72, DOI 10.1109/MIC.2005.96
   Cristianini N., 2000, INTRO SUPPORT VECTOR
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Fallside D.C., 2004, W3C recommendation, V16
   Feldman R., 2006, TEXT MINING HDB ADV
   Fensel D., 2006, ENABLING SEMANTIC WE
   Garofalakis J, 2006, J WEB ENG, V5, P265
   Gomez-Perez A., 2003, Ontological Engineering
   Grefen P, 2006, INFORM SOFTWARE TECH, V48, P1115, DOI 10.1016/j.infsof.2006.03.010
   Hearst M.A., 1999, P ASS COMPUTATIONAL, P3, DOI [DOI 10.3115/1034678.1034679, 10.3115/1034678.1034679]
   Huhns MN, 2005, IEEE INTERNET COMPUT, V9, P75, DOI 10.1109/MIC.2005.21
   Kim MC, 1999, INFORM PROCESS MANAG, V35, P19, DOI 10.1016/S0306-4573(98)00040-5
   Korfhage R.R., 1997, INFORM STORAGE RETRI
   Kozlenkov A, 2007, INT J WEB SERV RES, V4, P82, DOI 10.4018/jwsr.2007040104
   Kuhn HW, 2005, NAV RES LOG, V52, P7, DOI 10.1002/nav.20053
   Lee DL, 1997, IEEE SOFTWARE, V14, P67, DOI 10.1109/52.582976
   LOSEE RM, 1995, J AM SOC INFORM SCI, V46, P519, DOI 10.1002/(SICI)1097-4571(199508)46:7<519::AID-ASI5>3.0.CO;2-R
   Mateos C, 2008, FUTURE GENER COMP SY, V24, P99, DOI 10.1016/j.future.2007.04.011
   McCool R, 2005, IEEE INTERNET COMPUT, V9, P88, DOI 10.1109/MIC.2005.133
   McIlraith SA, 2003, IEEE INTELL SYST, V18, P90, DOI 10.1109/MIS.2003.1179199
   Paolucci M, 2003, IEEE INTERNET COMPUT, V7, P34, DOI 10.1109/MIC.2003.1232516
   Platzer C, 2005, Third European Conference on Web Services, Proceedings, P62
   PORTER MF, 1980, PROGRAM-AUTOM LIBR, V14, P130, DOI 10.1108/eb046814
   Rocchio J., 1971, SMART RETRIEVAL SYST, P313
   Sabou M, 2005, J WEB SEMANT, V3, P340, DOI 10.1016/j.websem.2005.09.008
   SALTON G, 1988, INFORM PROCESS MANAG, V24, P513, DOI 10.1016/0306-4573(88)90021-0
   SALTON G, 1975, COMMUN ACM, V18, P613, DOI 10.1145/361219.361220
   Sebastiani F, 2002, ACM COMPUT SURV, V34, P1, DOI 10.1145/505282.505283
   Shadbolt N, 2006, IEEE INTELL SYST, V21, P96, DOI 10.1109/MIS.2006.62
   Shamsfard M, 2004, INT J HUM-COMPUT ST, V60, P17, DOI 10.1016/j.ijhcs.2003.08.001
   Shen J, 2007, FUTURE GENER COMP SY, V23, P283, DOI 10.1016/j.future.2006.05.007
   Stroulia E, 2005, INT J COOP INF SYST, V14, P407, DOI 10.1142/S0218843005001213
   Tang CQ, 2003, ACM SIGCOMM COMP COM, V33, P89, DOI 10.1145/774763.774777
   van Rijsbergen C. J, 1979, Information Retrieval, V2nd
   Vaughan-Nichols SJ, 2002, COMPUTER, V35, P18, DOI 10.1109/2.982908
   Vega-Gorgojo G, 2006, FUTURE GENER COMP SY, V22, P709, DOI 10.1016/j.future.2006.02.012
   Wang Hongbing., 2004, Journal of web semantics, V1, P309
   WHANG KY, 1987, ACM T INFORM SYST, V5, P393, DOI 10.1145/42196.42200
   Witten Ian H., 2005, DATA MINING PRACTICA, VSecond
   Zhuge H, 2003, J SYST SOFTWARE, V67, P201, DOI 10.1016/S0164-1212(02)00130-9
NR 62
TC 45
Z9 49
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2008
VL 71
IS 2
BP 144
EP 164
DI 10.1016/j.scico.2008.02.002
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 305LX
UT WOS:000256181000003
OA Bronze
DA 2024-07-18
ER

PT J
AU Peters, RJ
   Verhoef, C
AF Peters, R. J.
   Verhoef, C.
TI Quantifying the yield of risk-bearing IT-portfolios
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE appraisal; IT-investment portfolio; risk-bearing IT-portfolio;
   uncertainty and risk; scenario analysis; IT-portfolio management;
   valuation; discounted cash-flow (DCF); net present value (NPV); gain;
   loss; yield; yield distribution; portfolio yield; internal rate of
   return (IRR); pay back period (PBP); return on investment (ROI);
   risk-adjusted return on capital (RAROC); weighted average cost of
   capital (WACC); weighted average cost of information technology (WACIT);
   IT-investment management; quantitative IT-portfolio management;
   requirements creep; time compression; failure risk; cost over-run; time
   over-runs
ID RELIABILITY
AB We proposed a method to quantify the yield of an IT-investment portfolio in an environment of uncertainty and risk. For various common implementation scenarios such as growing demands during implementation without deadline extensions we showed how to monetize their impact on the net present value. Depending on the business case this can lead to higher or lower gains. We also took failure of projects within an IT-investment portfolio into account, by appraising the loss in case of failure, resulting in a more realistic yield. To provide maximal insight into this yield, we proposed to treat it as a stochastic variable. We explained how to infer various portfolio yield distributions: discrete, continuous, and cumulative distributions, leading to useful summaries such as box plots and histograms. We argued that these information-rich characterizations support decision makers in taking calculated risks, and provided insight in how to address IT-specific risks and what such risk mitigation may cost. We explained our approach by quantifying the expected yield of a small four project portfolio under uncertainty and risk, and we provided the results for a larger and realistic IT-investment portfolio. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Peters, R. J.; Verhoef, C.] Vrije Univ Amsterdam, Dept Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Verhoef, C (corresponding author), Vrije Univ Amsterdam, Dept Comp Sci, Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM rjpeters@cs.vu.nl; x@cs.vu.nl
CR Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   ALBRECHT AJ, 1983, IEEE T SOFTWARE ENG, V9, P639, DOI 10.1109/TSE.1983.235271
   Allen Paul., 1998, Component-based development for enterprise systems: Applying the SE- LECT Perspective
   [Anonymous], ANN SOFTWARE ENG SPE
   [Anonymous], 1995, The Capability Maturity Model: Guidelines for Improving the Software Process
   [Anonymous], 1999, CHAOS REC SUCC
   [Anonymous], 2001, EXTREME CHAOS
   BASILI V, 2002, DOD SOFTWARE TECH NE, V5, P20
   BASILI V, 2002, DOD SOFTWARE TECH NE, V5, P4
   Berger J. O., 1985, STAT DECISION THEORY, DOI DOI 10.1007/978-1-4757-4286-2
   Bloem J., 2006, MAKING IT GOVERNANCE
   Boehm B.W., 2002, SOFTWARE COST ESTIMA
   Brown A.W., 1996, COMPONENT BASED SOFT
   Clelland, 1973, BASIC STAT BUSINESS
   Dalcher D, 2003, TECHNOL ANAL STRATEG, V15, P403, DOI 10.1080/095373203000136006
   Dreger J.B., 1989, FUNCTION POINT ANAL
   Garmus David., 2001, AW INFORMAT
   Hogg RV., 2005, Introduction to mathematical statistics
   *INT FUNC POINT US, 2003, 209262003 ISOIEC
   JONES C, 2000, INFORM TECHNOLOGY SE
   Jones C., 1998, Estimating Software Cost
   JONES C, 1994, CONTROL
   Jones C., 1996, APPL SOFTWARE MEASUR
   Jordan E., 2005, BEATING IT RISKS
   KEMERER CF, 1993, COMMUN ACM, V36, P85, DOI 10.1145/151220.151230
   KEMERER CF, 1992, IEEE T SOFTWARE ENG, V18, P1011, DOI 10.1109/32.177370
   *META GROUP, 2002, BUSINESS IT PORTFOLI
   MOSTELLER F, 1977, DATA REDUCTION REGRE
   PISELLO T, 2003, DIGITAL PUBLICATIO D, V10
   Putnam L., 1992, MEASURES EXCELLENCE
   PUTNAM LH, 1984, P INT SOC PAR AN 6 A, V3, P443
   *STAND GROUP, 2001, RETRIEVABLE STANDISH
   Tukey J.W., 1977, EXPLORATORY DATA ANA
   Verhoef C, 2007, SCI COMPUT PROGRAM, V67, P247, DOI 10.1016/j.scico.2007.01.010
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VERHOEF C, 2004, QUANTIFYING SOFTWARE
   VERHOEF C, 2005, SCI COMPUTER PROGRAM, V56
   Yourdon E., 1997, DEATH MARCH COMPLETE
NR 38
TC 9
Z9 11
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2008
VL 71
IS 1
BP 17
EP 56
DI 10.1016/j.scico.2007.11.001
PG 40
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 283MX
UT WOS:000254641400002
OA Bronze
DA 2024-07-18
ER

PT J
AU Yang, CC
   Chen, CK
   Chang, YH
   Chung, KH
   Lee, JK
AF Yang, Chih-Chieh
   Chen, Chung-Kai
   Chang, Yu-Hao
   Chung, Kai-Hsin
   Lee, Jenq-Kuen
TI Software architecture design for streaming Java RMI
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Conference on Principles and Practices of Programming in
   Java
CY 2006
CL Mannheim, GERMANY
DE Java RMI; streaming Java RMI; aggregation scheduling methods; novel
   applications of Java; Java-based tools
ID REMOTE METHOD INVOCATION; MODEL
AB In recent years, network streaming becomes a highly popular research topic in computer science due to the fact that a large proportion of network traffic is occupied by multimedia streaming. In this paper we present novel methodologies for enhancing the streaming capabilities of Java RMI. Our streaming support for Java RMI includes the pushing mechanism, which allows the servers to push data in a streaming fashion to the client site, and the aggregation mechanism, which allows the client site to make a single remote invocation to gather data from multiple servers that keep replicas of data streams and aggregate partial data into a complete data stream. In addition, our system also allows the client site to forward local data to other clients. Our framework is implemented by extending the Java RMI stub to allow custom designs for streaming buffers and controls, and by providing a continuous buffer for raw data in the transport layer socket. This enhanced framework allows standard Java RMI services to enjoy streaming capabilities. In addition, we propose aggregation algorithms as scheduling methods in such an environment. Preliminary experiments using our framework demonstrate its promising performance in the provision of streaming services in Java RMI layers. (C) 2008 Published by Elsevier B.V.
C1 [Yang, Chih-Chieh; Chen, Chung-Kai; Chang, Yu-Hao; Chung, Kai-Hsin; Lee, Jenq-Kuen] Natl Tsing Hua Univ, Dept Comp Sci, Hsinchu 30013, Taiwan.
C3 National Tsing Hua University
RP Yang, CC (corresponding author), Natl Tsing Hua Univ, Dept Comp Sci, Hsinchu 30013, Taiwan.
EM ccyang@pllab.cs.nthu.edu.tw; ckchen@pllab.cs.nthu.edu.tw;
   yhchang@pllab.cs.nthu.edu.tw; kschung@pllab.cs.nthu.edu.tw;
   jklee@cs.nthu.edu.tw
RI Yang, Chih-Chieh/V-5315-2019
OI Yang, Chih-Chieh/0000-0002-4452-6667
CR Abadi DJ, 2003, VLDB J, V12, P120, DOI 10.1007/s00778-003-0095-z
   Breg F, 1998, CONCURRENCY-PRACT EX, V10, P941, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<941::AID-CPE391>3.0.CO;2-T
   Chen C.C., 2004, P 12 ANN ACM INT WOR, P47, DOI DOI 10.1145/1032222.1032231
   Chen CK, 2005, PROC INT CONF PARAL, P350
   CHEN CW, 2004, P ICC PAR FRANC JUN, P1391
   Fitzpatrick T, 1998, FOURTH INTERNATIONAL CONFERENCE ON CONFIGURABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P128, DOI 10.1109/CDS.1998.675766
   HARNMAD MA, 2004, P ICDE BOST MA MAR, P851
   JANNOTTI J, 2000, P USENIX S OP SYST D, P209
   MAASSEN J, 1999, P 7 ACM SIGPLAN S PR, P173, DOI DOI 10.1145/301104.301120
   MUNGEE S, 1999, P HAW INT C SYST SCI, P8043
   NCSTER C, 1999, P ACM JAV GUID GRAND, P152
   NGUYEN T, 2002, P SPIE ACM MMCN SAN
   *OBJ MAN GROUP, 1997, 970507 OBJ MAN GROUP
   *OBJ MAN GROUP, 1998, COMM OBJ REQ BROK AR
   Raje RR, 1997, CONCURRENCY-PRACT EX, V9, P1207, DOI 10.1002/(SICI)1096-9128(199711)9:11<1207::AID-CPE351>3.0.CO;2-C
   *SUN MICR INC, 158 JSR SUN MICR INC
   Thiruvathukal GK, 1998, CONCURRENCY-PRACT EX, V10, P911, DOI 10.1002/(SICI)1096-9128(199809/11)10:11/13<911::AID-CPE389>3.0.CO;2-9
   WEY PC, 2002, P ACM JAV GRAND ISCO, V17, P967
   [No title captured]
NR 19
TC 2
Z9 2
U1 1
U2 15
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2008
VL 70
IS 2-3
BP 168
EP 184
DI 10.1016/j.scico.2007.07.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 278EJ
UT WOS:000254266600006
DA 2024-07-18
ER

PT J
AU Ernst, MD
   Perkins, JH
   Guo, PJ
   McCarnant, S
   Pacheco, C
   Tschantz, MS
   Xiao, C
AF Ernst, Michael D.
   Perkins, Jeff H.
   Guo, Philip J.
   McCarnant, Stephen
   Pacheco, Carlos
   Tschantz, Matthew S.
   Xiao, Chen
TI The Daikon system for dynamic detection of likely invariants
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Daikon; dynamic analysis; dynamic invariant detection; inductive logic
   programming; inference; invariant; likely invariant; program
   understanding; specification; specification mining
AB Daikon is an implementation of dynamic detection of likely invariants; that is, the Daikon invariant detector reports likely program invariants. An invariant is a property that holds at a certain point or points in a program; these are often used in assert statements, documentation, and formal specifications. Examples include being constant (x = a), non-zero (x not equal 0), being in a range (a <= x <= b), linear relationships (y = ax + b), ordering (x <= y), functions from a library (x = fn(y)), containment (x epsilon y), sortedness (x is sorted), and many more. Users can extend Daikon to check for additional invariants.
   Dynamic invariant detection runs a program, observes the values that the program computes, and then reports properties that were true over the observed executions. Dynamic invariant detection is a machine learning technique that can be applied to arbitrary data. Daikon can detect invariants in C, C + +, Java, and Perl programs, and in record-structured data sources; it is easy to extend Daikon to other applications.
   Invariants can be useful in program understanding and a host of other applications. Daikon's output has been used for generating test cases, predicting incompatibilities in component integration, automating theorem proving, repairing inconsistent data structures, and checking the validity of data streams, among other tasks.
   Daikon is freely available in source and binary form, along with extensive documentation, at http://pag.csaii.mit.edu/daikon/. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Ernst, Michael D.; Perkins, Jeff H.; Guo, Philip J.; McCarnant, Stephen; Pacheco, Carlos; Tschantz, Matthew S.; Xiao, Chen] MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Ernst, MD (corresponding author), MIT, Comp Sci & Artificial Intelligence Lab, 32 Vassar St, Cambridge, MA 02139 USA.
EM mernst@csail.mit.edu; jhp@csail.niit.edu
CR Ammons G, 2002, ACM SIGPLAN NOTICES, V37, P4, DOI 10.1145/565816.503275
   [Anonymous], ISSTA 2002
   [Anonymous], P ACM SIGSOFT INT S
   Boshernitsan M., 2006, INT S SOFTWARE TESTI, P169
   Brun Y, 2004, PROC INT CONF SOFTW, P480, DOI 10.1109/ICSE.2004.1317470
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Cook J. E., 1998, ACM Transactions on Software Engineering and Methodology, V7, P215, DOI 10.1145/287000.287001
   DEMSKY B, 2006, ISSTA, P233
   DETLEFS D, 2003, HPL2003148, V23
   Dodoo Nii, 2003, MITLCSTR914
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   FLANAGAN C, 2002, P ACM SIGPLAN 2002 C, P234
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   Groce A, 2003, LECT NOTES COMPUT SC, V2648, P121
   Guo PhilipJ., 2006, P 2006 INT S SOFTWAR, P255
   Gupta N, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P49, DOI 10.1109/ASE.2003.1240294
   Hangal S, 2005, DES AUT CON, P775, DOI 10.1109/DAC.2005.193920
   Hangal S, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1109/ICSE.2002.1007976
   Harder M, 2003, PROC INT CONF SOFTW, P60, DOI 10.1109/ICSE.2003.1201188
   Henkel J, 2003, LECT NOTES COMPUT SC, V2743, P431
   HENKEL J, 2004, ICSE, P499
   Leavens Gary T., 1999, Behavioral Specifications of Businesses and Systems, P175
   LEVESON NG, 1990, IEEE T SOFTWARE ENG, V16, P432, DOI 10.1109/32.54295
   LIBLIT B, 2003, ICSE, P141
   Lin L., 2004, Software Engineering Notes, V29, P206, DOI 10.1145/1013886.1007540
   MARIANI L, 2004, TACOS, P17
   McCamant S, 2004, LECT NOTES COMPUT SC, V3086, P440
   Nimmer J.W., 2002, Proc. of the 10th International Symposium on the Foundations of Software Engineering (FSE), P11
   NIMMER JW, 2002, ISSTA 2002, P232
   Ohba M, 1989, ICSE, p237 
   Pacheco C, 2005, LECT NOTES COMPUT SC, V3586, P504
   *PAR CORP, JTEST VERS 4 5
   Perkins J. H., 2004, Software Engineering Notes, V29, P23, DOI 10.1145/1041685.1029901
   Pytlik Brock., 2003, Proceedings of AADEBUG'03, P273
   Raz O, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P302, DOI 10.1109/ICSE.2002.1007977
   VAZIRI M, 1998, SPIN, P129
   Win TN, 2003, LECT NOTES COMPUT SC, V2575, P283
   Xie T, 2004, PROC IEEE INT CONF S, P28
   Xie T, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P40
   Yang Jinlin, 2006, ICSE, P282, DOI [10.1145/1134285.1134325, DOI 10.1145/1134285.1134325]
NR 40
TC 504
Z9 638
U1 1
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2007
VL 69
IS 1-3
BP 35
EP 45
DI 10.1016/j.scico.2007.01.015
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 253CQ
UT WOS:000252496700005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Verstichel, S
   Van Hoecke, S
   Strobbe, M
   Van den Berghe, S
   De Turck, F
   Dhoedt, B
   Demeester, P
   Vermeulen, F
AF Verstichel, Stijn
   Van Hoecke, Sofie
   Strobbe, Matthias
   Van den Berghe, Steven
   De Turck, Filip
   Dhoedt, Bart
   Demeester, Piet
   Vermeulen, Frederik
TI Ontology-driven middleware for next-generation train backbones
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on System/Software Architectures (IWSSA 2006)
CY JUN 27, 2006
CL Las Vegas, NV
DE ontology; middleware; distributed software; web service
AB The current evolution in the railway management software domain heads in the direction of highly modular systems with many different smaller components working together, tuned towards the operator's needs. In order to create an integrated management system for the train and railway domain in general, many different applications from both operators and manufacturers have to cooperate. To create a robust integrated system, a good supporting middleware infrastructure is needed. To the authors' knowledge, very few integrated or standardized techniques for creating higher-level intelligent middleware in the railway domain are publicly defined to date. The solution today towards establishing connectivity through the train makes use of a messaging bus. A service layer, providing mechanisms for e.g. life-cycle management, discovery and information aggregation, is however not provided in this current approach. Therefore, a distributed and modular architecture using ontologies, and widely used standards, such as Ethernet and IP, is detailed in this paper. The architecture provides the required intelligence needed for monitoring distributed applications in the train environment. The middleware allows information to be aggregated and analysed on different levels. Information querying, based on the ontology in the middleware is also discussed. By means of directory functionality, the ontology-driven middleware provides intelligent discovery as well. Finally, the ontologies used in the middleware to structure the domain and corresponding methods for creating such ontologies are presented. (C) 2006 Elsevier B.V. All rights reserved.
C1 Univ Ghent, Dept Informat Technol, B-9050 Ghent, Belgium.
   Telev NV SA, Telev Transportat Syst Div, B-8870 Izegem, Belgium.
C3 Ghent University
RP Verstichel, S (corresponding author), Univ Ghent, Dept Informat Technol, Gaston Crommenlaan 8 Bus 201, B-9050 Ghent, Belgium.
EM stijn.verstichel@intec.ugent.be
RI Van Hoecke, Sofie/KAM-3603-2024; Verstichel, Stijn/AAJ-5730-2021;
   Dhoedt, Bart AGMH/K-5851-2015; Demeester, Piet/N-6619-2013
OI Verstichel, Stijn/0000-0001-8007-2984; Dhoedt, Bart
   AGMH/0000-0002-7271-7479; Strobbe, Matthias/0000-0003-1730-0862; De
   Turck, Filip/0000-0003-4824-1199
CR [Anonymous], 11898 ISO
   [Anonymous], KNOWLEDGE ACQUISITIO
   [Anonymous], W3C RECOMMENDATION
   BROEKSTRA J, 2002, 1 INT SEM WEB C SARD
   CHERVET A, 1998, NETWORK MANGEMEN JUN
   Gu T, 2005, J NETW COMPUT APPL, V28, P1, DOI 10.1016/j.jnca.2004.06.002
   GU T, 2004, IEEE PERVASIVE COMPU, V3
   HAARSLEVV, 2003, P INT WORKSH APP
   KIRYAKOV A, 2002, IST199910132
   Minin VA, 1997, PROCEEDINGS OF THE 1997 IEEE/ASME JOINT RAILROAD CONFERENCE, P201, DOI 10.1109/RRCON.1997.581399
   Noy NF, 2001, IEEE INTELL SYST APP, V16, P60, DOI 10.1109/5254.920601
   *OWL, 2004, OWL WEB ONT LANG W3C
   PARSIA B, 2004, P INT WORKSH DESCR L
   Preuveneers D, 2004, LECT NOTES COMPUT SC, V3295, P148
   *RDF, 2004, RDF VOC DESCR LANG 1
   *RDF XML, 2004, RDF XML SYNT SPEC W3
   SCHIFERS C, 2000, VEH TECHN C P VTC 20, V2, P1581
   SCHMIDT DC, 2000, IEEE COMPUTER
   *SUMO, P16001 SUMO IEEE
   *TCN, 2004, 147412004 TCN IEEE, P1
   TOVAR E, 1999, IND ELECT IEEE T DEC
   VANHOECKE S, 2005, 2005 INT C SOFTW ENG
NR 22
TC 8
Z9 9
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2007
VL 66
IS 1
BP 4
EP 24
DI 10.1016/j.scico.2006.10.006
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 168GO
UT WOS:000246511500002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Burgess, M
   Reitan, T
AF Burgess, Mark
   Reitan, Trond
TI A risk analysis of disk backup or repository maintenance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE computer models; dynamical system; system administration; mean field
   theory
AB We discuss a simple model of disk backups and other maintenance processes that include change to computer data. We determine optimal strategies for scheduling such processes. A maximum entropy model of random change provides a simple and intuitive guide to the process of sector based disk change and leads to an easily computable optimum time for backup that is robust to changes in the model. We conclude with some theoretical considerations about strategies for organizing backup information. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Oslo Coll, N-0130 Oslo, Norway.
   Univ Oslo, N-0316 Oslo, Norway.
C3 University of Oslo; University of Oslo
RP Burgess, M (corresponding author), Univ Oslo Coll, POB 4,St Olavs Plass, N-0130 Oslo, Norway.
EM mark@iu.hio.no
RI Reitan, Trond/P-4554-2019
OI Reitan, Trond/0000-0003-0793-8731
CR [Anonymous], 1991, The Art of Computer Systems Performance Analysis: Techniques for Experimental Design, Measurement, Simulation, and Modeling
   APTHORPE R, 2001, P 15 SYST ADM C LISA, P31
   Barabasi A.-L., 2002, LINKED
   Burgess M, 2004, SCI COMPUT PROGRAM, V51, P197, DOI 10.1016/j.scico.2003.12.004
   Burgess M, 2002, ACM T COMPUT SYST, V20, P125, DOI 10.1145/507052.507054
   BURGESS M, 2003, SCI COMPUTER PROGRAM, V49
   BURGESS M, 2005, UNPUB P 8 IFIP IEEE
   BURGESS M, 2000, PRINCIPLES NETWORK S
   BURGESS M, 2004, ANAL NETWORK SYSTEM
   DASILVA J, 1993, PROCEEDINGS OF THE SEVENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA VII), P171
   ENGQUIST J, 1991, PROCEEDINGS OF THE FIFTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P89
   Grimmett G., 2001, Probability and random processes, V3rd edn
   HARRISON HE, 1988, P WORKSH LARG INST S, P33
   HECHT S, 1988, P WORKSH LARG INST S, P35
   HENRICI P, 1964, ELEMENTS NUMERICAL A, pCH6
   HOMMEL CB, 1987, P LARG INST SYST ADM, P8
   HOYLAND A, 1994, SYSTEM RELABILITY TH
   KOLSTAD R, 1991, PROCEEDINGS OF THE FIFTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P73
   KOVACS T, 1989, P WORKSH LARG INST S, P123
   MELSKI E, 1999, P LISA 99, P207
   METZ M, 1992, PROCEEDINGS OF THE SIXTH SYSTEMS ADMINISTRATION CONFERENCE ( LISA VI ), P115
   MONTGOMERY K, 1989, P WORKSH LARG INST S, P95
   PARESEGHIAN PE, 1988, P WORKSH LARG INST S, P41
   PAXSON V, 1995, IEEE ACM T NETWORK, V3, P226, DOI 10.1109/90.392383
   POEPPING M, 1987, P LARG INST SYST ADM, P10
   Preston WC, 1998, PROCEEDINGS OF THE TWELFTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XII), P87
   PRESTON WC, 1999, UNIX BACKUP RECOVERY
   Qian C, 2003, COMPUT MATH APPL, V46, P1111, DOI 10.1016/S0898-1221(03)00317-1
   Romig S. M., 1990, USENIX Association. Proceedings of the Fourth Large Installation System Administrator's Conference, P137
   Sato K-I., 1999, Levy Processes and Infinitely Divisible Distributions
   SHUMWAY S, 1991, PROCEEDINGS OF THE FIFTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P81
   TRIDGELL A, 1996, RYSNC ALGORITHM
   WEISSLER LY, 1991, PROCEEDINGS OF THE FIFTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P191
   Willinger W, 1998, PRACTICAL GUIDE TO HEAVY TAILS, P27
   ZWICKY E, 1988, P WORKSH LARG INST S, P43
   ZWICKY ED, 1991, PROCEEDINGS OF THE FIFTH LARGE INSTALLATION SYSTEMS ADMINISTRATION CONFERENCE, P181
   ZWICKY ED, 2003, P 17 ANN LARG INST S
NR 37
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2007
VL 64
IS 3
BP 312
EP 331
DI 10.1016/j.scico.2006.06.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 122SH
UT WOS:000243246500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Danaher, JS
   Lee, ITA
   Leiserson, CE
AF Danaher, John S.
   Lee, I. -Ting Angelina
   Leiserson, Charles E.
TI Programming with exceptions in JCilk
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT OOPSLA Workshop on Synchronization and Concurrent in Object-Oriented
   Languages
CY 2005
CL San Diego, CA
DE multithreading; parallel computing; programming language; runtime
   system; posix; thread; Cilk; fork-join; JVM; Java; exception handling;
   bytecode; semisynchronous; atomicity; speculative computing
AB JCilk extends the serial subset of the Java language by importing the fork-join primitives spawn and sync from the Cilk multithreaded language, thereby providing call-return semantics for multithreaded subcomputations. In addition, JCilk transparently integrates Java's exception handling with multithreading by extending the semantics of Java's try and catch constructs, but without adding new keywords. This extension is "faithful" in that it obeys Java's ordinary serial semantics when executed on a single processor. When executed in parallel, however, an exception thrown by a JCilk computation causes its sibling computations to abort, which yields a clean semantics in which the enclosing cilk try block need only handle a single exception.
   The exception semantics of JCilk allows programs with speculative computations to be programmed easily. Speculation is essential in order to parallelize programs such as branch-and-bound or heuristic search. We show how JCilk's linguistic mechanisms can be used to program the "queens" puzzle and a parallel alpha-beta search. We have implemented JCilk's semantic model in a prototype compiler and runtime system, called JCilk-1. The compiler implements continuations in a novel fashion by introducing goto statements into Java. The JCilk-1 runtime system shadows the dynamic hierarchy of cilk try blocks using a "try tree", allowing the system to chase down side computations that must be aborted. Performance studies indicate that JCilk's exception mechanism incurs minimal overhead, contributing at most a few percent on top of the cost for a spawn/return. (c) 2006 Elsevier B.V. All rights reserved.
C1 MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02139 USA.
C3 Massachusetts Institute of Technology (MIT)
RP Lee, ITA (corresponding author), MIT, Comp Sci & Artificial Intelligence Lab, Cambridge, MA 02139 USA.
EM danaherj@gmail.com; angelee@mit.edu; cel@mit.edu
CR ACKERMAN W, 1979, TR218 MIT LAB COMP S
   ADAMS JC, 1992, FORTRAN 90 HDB
   Aditya S., 1995, P HASK WORKSH LA JOL, P35
   Aho A.V., 1986, COMPILERS PRINCIPLES
   ATKINSON RR, 1978, ACM 78 P 1978 ANN C, P123
   BLELLOCH GE, 1993, CMUCS93129 SCH COMP
   Blumofe R. D., 1999, Journal of the ACM, V46, P720, DOI [10.1109/SFCS.1994.365680, 10.1145/324133.324234]
   CULLER DE, 1993, SUPERCOMP PROC, P262
   DAILEY D, 2002, J INT COMPUTER CHESS
   FELDMANN R, 1993, ADV COMPUTER CHESS, V7, P203
   FRIGO M, 1998, PLDI 98, P212, DOI DOI 10.1145/277652.277725
   Gaudiot JL, 1997, SECOND AIZU INTERNATIONAL SYMPOSIUM ON PARALLEL ALGORITHMS/ARCHITECTURE SYNTHESIS, PROCEEDINGS, P112, DOI 10.1109/AISPAS.1997.581640
   *GNU, 2004, GNU COMP JAV PROGR L
   Gontmakher A, 2000, ACM T COMPUT SYST, V18, P333, DOI 10.1145/362670.362673
   Gosling J., 2000, The Java Language Specification
   GRIMSHAW AS, 1993, COMPUTER, V26, P39, DOI 10.1109/2.211896
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   HATCHER PJ, 1991, PPOPP 91 P 3 ACM SIG, P73
   HATCHER PJ, 1991, 6 DISTR MEM COMP C I, P91
   *IEEE, 1996, 10031 IEEE 1
   ISSARNY V, 1991, SOFTWARE ENG NOTES, P92
   Kernighan B.W., 1988, The C Programming Language
   KNUTH DE, 1975, ARTIF INTELL, V6, P293, DOI 10.1016/0004-3702(75)90019-3
   KUSZMAUL BC, 1995, ICCA J, V18, P3, DOI 10.3233/ICG-1995-18102
   Lea Doug, 1999, Concurrent Programming in Java. Second Edition: Design Principles and Patterns, V2nd
   Lea Doug, 2000, JAVA, P36
   LINDHOLM T, 2000, JAVA VIRTUAL MACHINE
   LISKOV BH, 1979, IEEE T SOFTWARE ENG, V5, P546, DOI 10.1109/TSE.1979.230191
   Manson Jeremy., 2005, Proceedings of the 32Nd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, POPL'05, P378, DOI DOI 10.1145/1040305.1040336
   MCLAUGHLIN B, 2004, JAVA 1 5 TIG DEV NOT
   MERLIN J, 1997, HIGH PERFORMANCE FOR
   Netzer R. H. B., 1992, ACM Letters on Programming Languages and Systems, V1, P74, DOI 10.1145/130616.130623
   NIKHIL R, 1991, 2842 MIT
   NIKHIL RS, 1995, CSGMEMO369 MIT LAB C
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   *OP, 2002, OP C CPLUSPL APPL PR
   Pugh W, 2000, CONCURRENCY-PRACT EX, V12, P445, DOI 10.1002/1096-9128(200005)12:6<445::AID-CPE484>3.0.CO;2-A
   Richardson H., 1996, High Performance Fortran: history, overview and current developments
   Russell S., 2016, Artificial intelligence a modern approach
   *SUN MICR, 2004, JAV 2 PLATF STAND ED
   *SUP TECHN GROUP M, 2001, SUP CILK 5 3 2 REF M
   Tazuneki S, 2000, SEVENTH INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED SYSTEMS: WORKSHOPS, PROCEEDINGS, P75, DOI 10.1109/PADSW.2000.884518
   THORNLEY J, 1995, CSC 95 P 1995 ACM 23, P73
   THORNLEY J, 1993, PROGRAMMING LANGUAGE
   Winston P.H., 1992, Artificial Intelligence
NR 45
TC 27
Z9 36
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2006
VL 63
IS 2
BP 147
EP 171
DI 10.1016/j.scico.2006.05.008
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 103XT
UT WOS:000241921200004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hermenegildo, MV
   Puebla, G
   Bueno, F
   López-García, P
AF Hermenegildo, MV
   Puebla, G
   Bueno, F
   López-García, P
TI Integrated program debugging, verification, and optimization using
   abstract interpretation (and the Ciao system preprocessor)
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE program development; global analysis; abstract interpretation;
   debugging; verification; partial evaluation; program transformation;
   optimization; parallelization; resource control; programming
   environments; multi-Paradigm programming; (constraint) logic programming
ID LOGIC PROGRAMS; PARALLELIZATION; SPECIALIZATION
AB The technique of Abstract Interpretation has allowed the development of very sophisticated global program analyses which are at the same time provably correct and practical. We present in a tutorial fashion a novel program development framework which uses abstract interpretation as a fundamental tool. The framework uses modular, incremental abstract interpretation to obtain information about the program. This information is used to validate programs, to detect bugs with respect to partial specifications written using assertions (in the program itself and/or in system libraries), to generate and simplify run-time tests, and to perform high-level program transformations such as multiple abstract specialization, parallelization, and resource usage control, all in a provably correct way. In the case of validation and debugging, the assertions can refer to a variety of program points such as procedure entry, procedure exit, points within procedures, or global computations. The system can reason with much richer information than, for example, traditional types. This includes data structure shape (including pointer sharing), bounds on data structure sizes, and other operational variable instantiation properties, as well as procedure-level properties such as determinacy, termination, non-failure, and bounds on resource consumption (time or space cost). CiaoPP, the preprocessor of the Ciao multi-paradigm programming system, which implements the described functionality, will be used to illustrate the fundamental ideas. (c) 2005 Elsevier B.V. All rights reserved.
C1 Tech Univ Madrid, Sch Comp Sci, Madrid 28660, Spain.
   Tech Univ Madrid, Dept Comp Sci, Madrid 28660, Spain.
   Univ New Mexico, Dept Comp Sci, Albuquerque, NM 87131 USA.
   Univ New Mexico, Dept Elect & Comp Engn, Albuquerque, NM 87131 USA.
C3 Universidad Politecnica de Madrid; Universidad Politecnica de Madrid;
   University of New Mexico; University of New Mexico
RP Tech Univ Madrid, Sch Comp Sci, Campus Monteganedo, Madrid 28660, Spain.
EM herme@fi.upm.es; german@fi.upm.es; bueno@fi.upm.es;
   pedro.lopez@fi.upm.es
RI Lopez-Garcia, Pedro/KIA-1704-2024; Hermenegildo, w V/I-4418-2015
OI Lopez-Garcia, Pedro/0000-0002-1092-2071; Hermenegildo, w
   V/0000-0002-7583-323X
CR ALBERT E, 2004, P COMP OPT MEETS COM
   Bueno F, 1999, ACM T PROGR LANG SYS, V21, P189, DOI 10.1145/316686.316688
   Bueno F, 2004, LECT NOTES COMPUT SC, V2998, P100
   Bueno F., 1996, LNCS, V1058, P108, DOI [10.1007/3-540-61055-3_32, DOI 10.1007/3-540-61055-3_32]
   Bueno F., 1997, PROC 3 INT WS AUTOMA, P155
   Bueno R, 2001, LECT NOTES COMPUT SC, V2042, P86
   CABEZA D, 1994, LNCS, V864, P297
   Comini M, 1999, J LOGIC PROGRAM, V39, P43, DOI 10.1016/S0743-1066(98)10033-X
   Comini M., 1995, 1995 INT LOG PROGR S, P275
   Cousot P, 2003, LECT NOTES COMPUT SC, V2575, P20
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   COUSOT P, 2002, 29 ACM SIGPLAN SIGAC, P18
   DART PW, 1992, TYPES LOGIC PROGRAMM, P157
   De la Banda MG, 2000, ACM T PROGR LANG SYS, V22, P296, DOI 10.1145/349214.349224
   Debray S, 1997, LOGIC PROGRAMM, P48
   Debray S, 1997, LOGIC PROGRAMM, P291
   DEBRAY SK, 1994, LNCS, V864, P255
   DeLaBanda MG, 1996, ACM T PROGR LANG SYS, V18, P564, DOI 10.1145/232706.232734
   GALLAGHER J, 2002, LNCS, V2257, P243
   GALLAGHER JP, 1994, MIT PS LOG, P599
   GIANNOTTI F, 1991, LNCS, V528, P323
   Hermenegildo M, 2000, ACM T PROGR LANG SYS, V22, P187, DOI 10.1145/349214.349216
   Hermenegildo M, 2004, LECT NOTES COMPUT SC, V3149, P21
   Hermenegildo M, 2000, LECT NOTES ARTIF INT, V1861, P1345
   HERMENEGILDO M, 1999, PARALLELISM IMPLEMEN, P65
   HERMENEGILDO M, 1999, 1999 INT C LOG PROGR, P52
   HERMENEGILDO MV, 1995, J LOGIC PROGRAM, V22, P1, DOI 10.1016/0743-1066(93)00007-F
   Hermenegildo MV, 1999, LOGIC PROGRAMM, P54
   LECHARLIER B, 1994, ACM T PROGR LANG SYS, V16, P35, DOI 10.1145/174625.174627
   LEUSCHEL M, 1998, JOINT INT C S LOG PR
   LICHTENSTEIN Y, 1988, 5 INT C S LOG PROGR, P512
   Lopez P, 1996, J SYMB COMPUT, V21, P715, DOI 10.1006/jsco.1996.0038
   LOPEZGARCIA P, 1995, EFFICIENT TERM SIZE, P647
   LOPEZGARCIA P, 2004, P 14 INT S LOG BAS P
   MARRIOTT K, 1994, 20 ANN ACM C PRINC P, P240
   MUTHUKUMAR K, 1992, J LOGIC PROGRAM, V13, P315, DOI 10.1016/0743-1066(92)90035-2
   Muthukumar K, 1999, J LOGIC PROGRAM, V38, P165, DOI 10.1016/S0743-1066(98)10022-5
   MUTHUKUMAR K, 1991, LOGIC PROGRAMM, P49
   Puebla, 1996, LNCS, V1145, P270
   Puebla G, 1999, J LOGIC PROGRAM, V41, P279, DOI 10.1016/S0743-1066(99)00031-X
   Puebla G, 2000, LECT NOTES COMPUT SC, V1870, P63
   Puebla G, 2000, LECT NOTES COMPUT SC, V1870, P23
   Puebla G, 2000, LECT NOTES COMPUT SC, V1817, P273, DOI 10.1007/10720327_16
   Puebla G, 1997, LECT NOTES COMPUT SC, V1207, P169
   Puebla G, 1997, LOGIC PROGRAMM, P93
   PUEBLA G, 2000, ELECT NOTES THEORETI, V30
   PUEBLA G, 1999, BRISC SERIES, P75
   Vaucheret C, 2002, LECT NOTES COMPUT SC, V2477, P102
   YARDENI E, 1987, TYPE SYSTEM LOGIC PR, P211
   [No title captured]
   [No title captured]
NR 51
TC 75
Z9 82
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 115
EP 140
DI 10.1016/j.scico.2005.02.006
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Webber, DL
   Gomaa, H
AF Webber, DL
   Gomaa, H
TI Modeling variability in software product lines with the variation point
   model
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB A major challenge for software reuse is developing components that can be reused in several applications. This paper describes a systematic method for providing components that can be extended through variation points, as initially specified in the software requirements. Allowing the tenser or application engineer to extend components at pre-specified variation points creates a more flexible set of components. The existing variation point methods do not provide enough design detail for the tenser. This paper introduces a method called the Variation Point Model (VPM), which models variation points at the design level, beginning with the common requirements. The product line approach provides a systematic approach for software reuse. A challenge with the product line approach is to model the variability between the core assets and the applications. This paper describes the VPM and how it is used for modeling four different approaches to variability, modeling variability using parameterization, modeling variability using information hiding, modeling variability using inheritance, and modeling variability using variation points. VPM allows a tenser or application engineer to extend components at pre-specified variation points. For this to be possible, a variation point must be modeled such that the tenser has enough knowledge to build a variant. (C) 2004 Elsevier B.V. All rights reserved.
C1 Booz Allen & Hamilton Inc, Mclean, VA 22102 USA.
   George Mason Univ, Dept Informat & Software Engn, Fairfax, VA 22030 USA.
C3 Booz Allen Hamilton Holding Corporation; George Mason University
RP Webber, DL (corresponding author), Booz Allen & Hamilton Inc, 8283 Greensboro Dr, Mclean, VA 22102 USA.
EM webber_diana@bah.com; hgomaa@gmu.edu
CR [Anonymous], 1995, Design patterns for object-oriented software development
   ATKINSON C, 2000, P 3 INT WORKSH COMP
   ATKINSON C, 2000, P 1 INT SOFTW PROD L
   BAYER J, 1999, P 5 S SOFTW REUS
   BERGEY J, 1999, 2 DOD PROD LIN PRACT
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Brownsword L., 1996, CASE STUDY SUCCESSFU
   Clements P., 2002, Software product lines
   CORIAT M, 2000, SPLIT METHOD
   DAVIS M, 1995, P 1995 S SOFTW REUS
   ELKAIM W, 2000, P SOFTW PROD LIN EC
   ELKAIM W, 2000, P PROD LIN ARCH WORK
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GOMAA H, 1999, IEEE SOFTWARE, V146
   GOMAA H, 2000, P IEEE INT C SOFTW R
   Gomaa H., 2000, DESIGNING CONCURRENT
   HAYESROTH B, 1995, IEEE T SOFTWARE ENG
   Jacobson I., 1997, Software Reuse: Architecture, Process and Organization for Business Success
   Kang Kyo C, 1990, Technical Report
   MCCOMAS D, 2000, P SPLC1 PROD LIN ARC
   MORISIO M, 2000, P 1 INT SOFTW PROD L
   Rumbaugh James, 1999, The unified modeling language reference manual
   SHARP D, 1998, PROD LIN ISS ACT TEA
   *STARS, 1993, 0512 STARS
   WEBBER D, 2001, THESIS G MASON U
   WEBBER D, 2002, P INT C SOFTW REUS A
   Weiss D.M., 1999, Software Product-Line Engineering-A Family-Based Software Development Process
NR 28
TC 34
Z9 39
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2004
VL 53
IS 3
BP 305
EP 331
DI 10.1016/j.scico.2003.04.004
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 863UY
UT WOS:000224590100004
DA 2024-07-18
ER

PT J
AU Elnagar, A
   Lulu, L
AF Elnagar, A
   Lulu, L
TI A global path planning Java-based system for autonomous mobile robots
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE robot motion planning; global motion planning; simulation;
   computer-aided learning; Java; computational geometry
AB We present an autonomous robot motion planning system developed in Java. This interactive system enables users to set up the working environment by creating obstacles and a robot of different shapes, specifying starting and goal positions and setting other path or environment parameters from a user-friendly interface. A collision-free path is computed upon specifying the goal point. The path planning system involves several phases: collision detection, obstacle avoidance, free-path generation and then selecting the shortest one. Each of these modules is complex and therefore we provide the possibility of visualizing graphically the output of each phase. It has been shown that this system can be an effective computer-aided learning (CAL) tool in classroom teaching and/or motivating junior researchers in this field of research to further implement practical complex systems. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Sharjah, Dept Comp Sci, Sharjah, U Arab Emirates.
C3 University of Sharjah
RP Univ Sharjah, Dept Comp Sci, POB 27272, Sharjah, U Arab Emirates.
EM ashraf@ieee.org
OI Elnagar, Ashraf/0000-0003-2265-7268
CR ANDREW AM, 1979, INFORM PROCESS LETT, V9, P216, DOI 10.1016/0020-0190(79)90072-3
   [Anonymous], 2000, Computational Geometry Algorithms and Applications
   Backes PG, 1997, IEEE INT CONF ROBOT, P411, DOI 10.1109/ROBOT.1997.620072
   Breu R., 2003, P WORKSH PRACT EXP J, P1
   Cruz J. L., 2002, International Journal of Robotics & Automation, V17, P112
   GEORGE S, 1999, P 9 INT C AI ED LEMA, P56
   GEORGE S, 2001, P 1 EUR C COMP SUPP, P269
   GOLDBERG K, 1995, IEEE INT CONF ROBOT, P654, DOI 10.1109/ROBOT.1995.525358
   JIN L, INTERACTIVE PIANO MO
   LATOMBE J, 2000, SOCCER SIMULATION
   LOZANOPEREZ T, 1983, IEEE T COMPUT, V32, P108, DOI 10.1109/TC.1983.1676196
   LYNCH S, 2003, P WORKSH PRACT EXP J, P20
   MAGNO H, 1998, JAVA APPLET ROBOTIC
   OVERMARS M, 2000, MOTION PLANNING GAME
   ROHRMEIER M, 1998, INTERACTIVE ROBOT MA
   THRAMBOULIDIS K, 2003, P WORKSH PRACT EXP J, P7
   XIA M, GLOBAL MOTION PLANNI
NR 17
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2004
VL 53
IS 1
BP 107
EP 122
DI 10.1016/j.scico.2004.02.008
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 849KT
UT WOS:000223538200008
OA Bronze
DA 2024-07-18
ER

PT J
AU Goldman, KJ
AF Goldman, KJ
TI An interactive environment for beginning Java programmers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB Building upon years of evolution in object-oriented programming language design, Java has emerged as the language of choice among many educators for teaching introductory computer science. A clean, type-safe language, Java provides a garbage collected heap and a comprehensive exception-handling mechanism. However, in spite of this support, many students in introductory computer science courses still find programming to be an overwhelming source of frustration. Linguistic concerns and programming mechanics demand so much attention that deeper concepts are often postponed for later courses, leaving students in introductory courses with the mistaken impression that computer science is a shallow discipline, concerned only with transcribing ideas into code, and not with the ideas themselves.
   JPie is a tightly integrated programming environment for live software construction in Java. JPie treats programming as an application in its own right, providing a visual representation of class definitions and supporting direct manipulation of graphical representations of programming abstractions and constructs. Exploiting Java's reflection mechanism, JPie supports the notion of a dynamic class that can be modified while the program is running, thereby eliminating the edit-compile-test cycle. Following years of experience using Java as the vehicle for teaching introductory computer science, we have designed JPie to provide a more natural and fluid software development process that both raises the level of abstraction and eliminates many of the common pitfalls that beginning Java programmers face. This paper studies JPie from an educational perspective. We systematically review key programming abstractions and explain how JPie supports them in ways that keep beginning programmers focused on important ideas. Our experience using JPie in an introductory computer science survey course for non-majors is briefly discussed. (C) 2004 Elsevier B.V. All rights reserved.
C1 Washington Univ, Dept Comp Sci & Engn, St Louis, MO 63130 USA.
C3 Washington University (WUSTL)
RP Goldman, KJ (corresponding author), Washington Univ, Dept Comp Sci & Engn, 1 Brookings Dr, St Louis, MO 63130 USA.
EM kjg@cse.wustl.edu
CR Allen E., 2002, 33 SIGCSE TECHN S CO
   Barnes D.J., 2003, OBJECTS 1 JAVA PRACT, VSecond
   Blum L., 2001, Transforming the culture of computing at Carnegie Mellon
   BORNING A, 1981, ACM T PROGR LANG SYS, V3, P355
   Burnett M, 2001, J FUNCT PROGRAM, V11, P155, DOI 10.1017/S0956796800003828
   Citrin W., 1994, Proceedings. IEEE Symposium on Visual Languages (Cat. No.94TH8010), P208, DOI 10.1109/VL.1994.363616
   COX PT, 1989, IEEE WORKSH VIS LANG, P150
   Cypher A., 1995, P SIGCHI C HUMAN FAC, P27
   Gamma E., 2004, CONTRIBUTING ECLIPSE
   GOLDMAN KJ, UNPUB LIVE SOFTWARE
   GOLDMAN KJ, 2003, CS123 WASH U
   GOLDMAN KJ, 2003, JPIE PROGRAMMING EAS
   GOLDMAN KJ, 2004, 35 SIGCSE TECHN S CO
   GOLDMAN KJ, 2003, OOPSLA 03 C COMP AN
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Heger N, 1998, J VISUAL LANG COMPUT, V9, P151, DOI 10.1006/jvlc.1998.0079
   Kay Alan C., 1996, History of Programming Languages, P511, DOI 10.1145/234286.1057828
   KIMURA TD, 1986, WUCS866 WASH U STLOU
   McCartney T. P., 1994, Proceedings. IEEE Symposium on Visual Languages (Cat. No.94TH8010), P80, DOI 10.1109/VL.1994.363637
   Papert S., 1980, MINDSTORMS CHILDREN
   Rasure J. R., 1991, Journal of Visual Languages and Computing, V2, P217, DOI 10.1016/S1045-926X(06)80007-8
   Repenning A., 1991, 1991 Symposium on Applied Computing (Cat. No.91TH0355-8), P190, DOI 10.1109/SOAC.1991.143873
   Repenning Alexander, 1993, Ph. D. Dissertation
   TURKLE S, 1984, 2 SELF COMPUTERS HUM, P108
NR 24
TC 9
Z9 12
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2004
VL 53
IS 1
BP 3
EP 24
DI 10.1016/j.scico.2004.02.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 849KT
UT WOS:000223538200002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gray, J
AF Gray, J
TI A Java-based approach for teaching principles of adaptive and evolvable
   software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Java education; evolvable software; aspect-oriented software
   development; model-integrated computing; adaptive middleware
AB The ability to adapt a software artifact is essential toward handling evolving stakeholder requirements. Adaptation is also vital in many areas where software is required to adjust to changing environment conditions (e.g., the growing presence of embedded systems). Current techniques for supporting adaptability and evolvability can be categorized as static (happening at compile-time or design-time), or dynamic (adaptation during the actual execution of the system). This paper describes a special-topics software engineering course that uses Java as a foundation for teaching concepts of static and dynamic adaptation. The course surveys Java-related research in the areas of metaprogramming and reflection, aspect-oriented software development, model-driven computing, and adaptive middleware. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Alabama Birmingham, Dept Comp & Informat Sci, Birmingham, AL 35294 USA.
C3 University of Alabama System; University of Alabama Birmingham
RP Univ Alabama Birmingham, Dept Comp & Informat Sci, 1300 Univ Blvd, Birmingham, AL 35294 USA.
EM gray@cis.uab.edu
OI Gray, Jeff/0000-0003-0082-6753
CR [Anonymous], 2000, Generative programming: methods, tools, and applications
   ASSmann Uwe., 2003, INVASIVE SOFTWARE CO
   Batory D, 2003, PROC INT CONF SOFTW, P187, DOI 10.1109/ICSE.2003.1201199
   BAXTER I, 2004, INT C SOFTW ENG ICSE
   Bergmans L, 2001, COMMUN ACM, V44, P51, DOI 10.1145/383845.383857
   Bézivin J, 2001, TOOLS, V39, P350
   Burt CC, 2002, SIXTH INTERNATIONAL ENTERPRISE DISTRIBUTED OBJECT COMPUTING CONFERENCE, PROCEEDINGS, P212, DOI 10.1109/EDOC.2002.1137710
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   Clarke S, 2001, PROC INT CONF SOFTW, P5, DOI 10.1109/ICSE.2001.919076
   COADY Y, 2003, INT C ASP OR SOFTW D, P50
   DENNISON R, 2004, 42 ANN ACM SE C HUNT
   DIJKSTRA EW, 1972, STRUCT PROGRAM, P39
   DUZAN G, 2004, INT C ASP OR SOFTW D, P66
   FILMAN R, 2000, OOPSLA WORKSH ADV SE
   Filman R., 2004, ASPECT ORIENTED SOFT
   GOKHALE A, 2004, MIDDLEWARE COMMUNICA
   Gray J, 2001, COMMUN ACM, V44, P87, DOI 10.1145/383845.383864
   GRAY J, 2004, J VISUAL LANGUAGES C
   Gray J., 2004, Aspect-Oriented Software Development
   Gray Jeff, 2004, INT C ASP OR SOFTW D, P36
   HANENBERG S, 2003, NET OBJECTDAYS 2003
   Karr DA, 2001, DOA'01: 3RD INTERNATIONAL SYMPOSIUM ON DISTRIBUTED OBJECTS & APPLICATIONS, PROCEEDINGS, P299, DOI 10.1109/DOA.2001.954095
   KARSAI G, 1995, IEEE COMPUT, P36
   Kiczales G, 1996, IEEE SOFTWARE, V13, P8, DOI 10.1109/52.476280
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G, 2001, COMMUN ACM, V44, P59, DOI 10.1145/383845.383858
   Kiczales G., 1993, OBJECT ORIENTED PROG, P101
   KLEFSTAD R, 2003, 36 HAW INT C SYST SC
   KNIESEL G, 2004, ASPECT ORIENTED SOFT
   KNIESEL G, 2001, IEEE WORKSH SOURC CO
   LAFFERTY D, 2003, OBJECT ORIENTED PROG, P1
   Lédeczi A, 2001, COMPUTER, V34, P44, DOI 10.1109/2.963443
   LEE E, 2000, IEEE COMPUTER    SEP, P18
   Liang XZ, 1998, OBJECT-ORIENTED TECHNOLOGY, P36
   Lieberherr K, 2001, COMMUN ACM, V44, P39, DOI 10.1145/383845.383855
   LIPPERT M, 2000, ICSE 00, P418
   LOYALL J, 2002, 5 IEEE INT S OBJ OR, P375
   MAES P, 1987, OCT P OBJ OR PROGR S, P147
   Masuhara H, 2003, LECT NOTES COMPUT SC, V2743, P2
   Nordstrom G, 1999, ECBS '99, IEEE CONFERENCE AND WORKSHOP ON ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P68, DOI 10.1109/ECBS.1999.755863
   Ossher H, 2001, COMMUN ACM, V44, P43, DOI 10.1145/383845.383856
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   POPOVICI A, 2003, INT C ASP OR SOFTW D, P100
   ROYCHOUDHURY S, 2003, 41 ANN ACM SE C SAV, P196
   Santo B, 2001, IEEE SPECTRUM, V38, P36
   Schmidt D.C., 2001, CROSSTALK J DEFENSE, P10
   SHARP D, 1998, SOFTW TECHN C SALT L
   SMITH BC, 1984, ACM S PRINC PROGR LA, P23
   Sztipanovits J, 2002, LECT NOTES COMPUT SC, V2487, P32
   Sztipanovits J, 1998, COMMUN ACM, V41, P66, DOI 10.1145/274946.274958
   Sztipanovits J., 1997, IEEE COMPUTER    APR, P10
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Tatsubori M, 2000, LECT NOTES COMPUT SC, V1826, P117
   TILEVICH E, 2003, IEEE INT C AUT SOFTW
   WANG N, 2001, IEEE COMMUNICATION M, P102
   Wohlstadter E, 2003, PROC INT CONF SOFTW, P174, DOI 10.1109/ICSE.2003.1201198
   Zhang Charles., 2003, AOSD 03, P130
NR 57
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2004
VL 53
IS 1
BP 51
EP 69
DI 10.1016/j.scico.2004.02.005
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 849KT
UT WOS:000223538200005
OA Bronze
DA 2024-07-18
ER

PT J
AU Haack, C
   Wells, JB
AF Haack, C
   Wells, JB
TI Type error slicing in implicitly typed higher-order languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE type error location; type inference; intersection types
AB Previous methods have generally identified the location of a type error as a particular program point or the program subtree rooted at that point. We present a new approach that identifies the location of a type error as a set of program points (a slice) all of which are necessary for the type error. We identify the criteria of completeness and minimality for type error slices. We discuss the advantages of complete and minimal type error slices over previous methods of presenting type errors. We present and prove the correctness of algorithms for finding complete and minimal type error slices for implicitly typed higher-order languages like Standard ML. (C) 2004 Published by Elsevier B.V.
C1 Heriot Watt Univ, Edinburgh, Midlothian, Scotland.
   Depaul Univ, Chicago, IL 60604 USA.
C3 Heriot Watt University; DePaul University
RP Heriot Watt Univ, Edinburgh, Midlothian, Scotland.
EM jbw@macs.hw.ac.uk
CR [Anonymous], 1998, Term rewriting and all thatM
   [Anonymous], 1997, The Definition of Standard ML
   Beaven M., 1993, ACM Letters on Programming Languages and Systems, V2, P17, DOI 10.1145/176454.176460
   Bernstein K.L., 1995, Debugging Type Errors
   CARLIER S, 2002, WEB DEMO TYPE ERROR
   CHITIL O, 2001, P 6 INT C FUNCT PROG
   CHOPPELLA V, 1995, 426 IND U
   CHOPPELLA V, 2002, THESIS INDIANA U
   DAMAS L, 1982, 9 ANN ACM S PRINC PR
   DAMAS LMM, 1985, THESIS U EDINBURGH E
   DINESH TB, 1997, P USENIX C DOM SPEC
   Duggan D, 1996, SCI COMPUT PROGRAM, V27, P37, DOI 10.1016/0167-6423(95)00007-0
   FLANAGAN C, 1996, P ACM SIGPLAN 96 C P
   HEEREN B, 2002, UUCS2002009
   HEEREN B, 2002, UUCS2002031
   HEEREN B, 2002, UUCS2002035
   JIM T, 1996, POPL 96 C REC POPL 9
   JOHNSON GF, 1996, POPL 96 C REC POPL 9
   Jun Y, 2002, COMPUT J, V45, P436, DOI 10.1093/comjnl/45.4.436
   KANNELLAKIS P, 1991, COMPUTATIONAL LOGIC
   KFOURY AJ, 1994, J ACM, V41, P368, DOI 10.1145/174652.174659
   KFOURY AJ, 1990, LECT NOTES COMPUTER, V431
   Lee OS, 1998, ACM T PROGR LANG SYS, V20, P707, DOI 10.1145/291891.291892
   MCADAM BJ, 1999, TRENDS FUNCTIONAL PR
   MCADAM BJ, 1998, LECT NOTES COMPUTER, V1595
   PORT GS, 1988, P 5 INT C LOG PROGR
   SHAO Z, 1993, 20 ACM S PRINC PROGR
   TRINDER P, 1999, TRENDS FUNCTIONAL PR
   WAND M, 1986, 13 ANN ACM S PRINC P
   WOLFRAM DA, 1986, LECT NOTES COMPUTER, V225
   Yang J, 2000, TRENDS IN FUNCTIONAL PROGRAMMING, P58
   Yang Jun, 2000, P 12 INT WORKSH IMPL
   1996, POPL 96 23 ACM S PRI
NR 33
TC 38
Z9 40
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 189
EP 224
DI 10.1016/j.scico.2004.01.004
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 804AH
UT WOS:000220271100009
DA 2024-07-18
ER

PT J
AU Buschhaus, C
   Gerasimov, A
   Kirchhof, JC
   Michael, J
   Netz, L
   Rumpe, B
   Stüber, S
AF Buschhaus, Constantin
   Gerasimov, Arkadii
   Kirchhof, Joerg Christian
   Michael, Judith
   Netz, Lukas
   Rumpe, Bernhard
   Stueber, Sebastian
TI Lessons learned from applying model-driven engineering in 5 domains: The
   success story of the MontiGem generator framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model -driven software engineering; Code synthesis; Domain -specific
   languages; Data management; Web applications
ID SOFTWARE
AB We report on our success stories in developing and using Model-Driven Engineering (MDE) tools for information systems on real-world projects within different application domains. It is necessary that we ensure the extensibility and adaptability of code generators if we want to reuse them for different domains. Up to now, research on reusing software has been mainly conducted in the software product line community but rarely discussed in the context of code generators. This paper introduces the generation framework MontiGem and shows how it has been used and evolved within five different research and industry projects in the domains of financial management, IoT, energy management, privacy policy, and wind turbine engineering. We have developed the code generator within the first project and further refined it with each of the following projects. This paper describes the projects, shows how MDE helped us in the software engineering process, and discusses the lessons we learned. These examples show how MDE techniques can be successfully applied to the development of information systems in practice, although further requirements have been met over time.
C1 [Buschhaus, Constantin; Gerasimov, Arkadii; Kirchhof, Joerg Christian; Michael, Judith; Netz, Lukas; Rumpe, Bernhard; Stueber, Sebastian] Rhein Westfal TH Aachen, Software Engn, Aachen, Germany.
C3 RWTH Aachen University
RP Gerasimov, A (corresponding author), Rhein Westfal TH Aachen, Software Engn, Aachen, Germany.
EM gerasimov@se-rwth.de
RI Rumpe, Bernhard/S-8216-2016; Michael, Judith/S-2844-2016; Michael,
   Judith/AAE-2646-2022
OI Michael, Judith/0000-0002-4999-2544; Michael, Judith/0000-0002-4999-2544
CR Adam K., 2020, 40 YEARS EMISA DIGIT, VP-304, P59
   Alfraihi H., 2017, Practical Aspects of the Integration of Agile Development and Model-Driven Development: An Exploratory, V2019, P399
   Alvarado SH, 2022, SOFTW SYST MODEL, V21, P623, DOI 10.1007/s10270-021-00901-1
   [Anonymous], 2018, ENTERPRISE MODELING
   Bano D, 2022, J COMPUT LANG, V70, DOI 10.1016/j.cola.2022.101121
   Ben Chaaben M, 2023, New Ideas and Emergi, P7, DOI 10.1109/ICSE-NIER58687.2023.00008
   Boronat A, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P874, DOI 10.1109/ASE.2019.00086
   Brambilla M, 2014, SCI COMPUT PROGRAM, V89, P71, DOI 10.1016/j.scico.2013.03.010
   Bucchiarone A, 2020, SOFTW SYST MODEL, V19, P5, DOI 10.1007/s10270-019-00773-6
   Butting Arvid, 2022, GPCE 2022: Proceedings of the 21st ACM SIGPLAN International Conference on Generative Programming: Concepts and Experiences, P108, DOI 10.1145/3564719.3568689
   Butting A., 2022, Selbstbestimmung, Privatheit und Datenschutz: Gestaltungsoptionen fur einen europaischen Weg, P489
   Cámara J, 2023, SOFTW SYST MODEL, V22, P781, DOI 10.1007/s10270-023-01105-5
   Casalaro GL, 2022, SOFTW SYST MODEL, V21, P19, DOI 10.1007/s10270-021-00908-8
   Chair of Software Engineering, 2023, Class Diagram For Analysis
   Cicchetti A, 2009, LECT NOTES COMPUT SC, V5648, P518, DOI 10.1007/978-3-642-02818-2_52
   Cretu L.G., 2014, Model-Driven Engineering of Information Systems: Principles, Techniques, and Practice
   Dalibor M, 2022, J COMPUT LANG, V70, DOI 10.1016/j.cola.2022.101117
   Dalibor M, 2020, LECT NOTES COMPUT SC, V12400, P377, DOI 10.1007/978-3-030-62522-1_28
   Davies J, 2014, SCI COMPUT PROGRAM, V89, P88, DOI 10.1016/j.scico.2013.02.002
   Drave I., 2022, Springer Nat. Comput. Sci. J., V3
   Drave I., 2021, Journal of Object Technology, V20, P1
   Drux F, 2022, J OBJECT TECHNOL, V21, DOI 10.5381/jot.2022.21.4.a4
   Ferrari Alessio, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P24, DOI 10.1007/978-3-642-28891-3_5
   Garcia M., 2008, DSML, V8, P7
   Gemeinhardt F, 2021, 2021 IEEE/ACM 2ND INTERNATIONAL WORKSHOP ON QUANTUM SOFTWARE ENGINEERING (Q-SE 2021), P13, DOI 10.1109/Q-SE52541.2021.00010
   Gerasimov A., 2020, COMPANION PROC MODEL, P22
   Gerasimov A., 2023, International Journal of Conceptual Modeling
   Gerasimov A, 2020, AMCIS 2020 PROCEEDINGS
   Gonzalez Magali, 2016, International Journal of Web Engineering and Technology, V11, P29
   Greifenberg T, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P34, DOI 10.1109/MODELS.2015.7338233
   Haber A, 2015, INT J SOFTW TOOLS TE, V17, P601, DOI 10.1007/s10009-015-0387-9
   Hölldobler K, 2019, J OBJECT TECHNOL, V18, DOI 10.5381/jot.2019.18.1.r1
   Holldobler K., 2021, MontiCore Language Workbench and Library Handbook: Edition 2021. Aachener Informatik-Berichte, Software Engineering, V48
   Hutchinson J, 2014, SCI COMPUT PROGRAM, V89, P144, DOI 10.1016/j.scico.2013.03.017
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P633, DOI 10.1145/1985793.1985882
   Iung A, 2020, EMPIR SOFTW ENG, V25, P4205, DOI 10.1007/s10664-020-09872-1
   Karagiannis D., 2016, Domain-Specific Conceptual Modeling
   Karg S, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P238, DOI 10.1145/2976767.2976811
   Krahn Holger, 2010, International Journal on Software Tools for Technology Transfer, V12, P353, DOI 10.1007/s10009-010-0142-1
   Kulkarni Vinay, 2013, Modelling Foundations and Applications. 9th European Conference, ECMFA 2013. Proceedings. LNCS 7949, P220, DOI 10.1007/978-3-642-39013-5_16
   Lano K, 2022, SOFTW SYST MODEL, V21, P1465, DOI 10.1007/s10270-022-01016-x
   Lelandais B, 2019, J COMPUT LANG, V55, DOI 10.1016/j.cola.2019.100919
   Michael J., 2019, P MODELS 2019 WORKSH, P595
   Michael J., 2022, MODELLIERUNG 2022, P33
   Michael J, 2021, 24TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2021), P371, DOI 10.1109/MODELS-C53483.2021.00060
   Michael Judith, 2022, MODELLIERUNG 2022 SA, P150, DOI [10.18420/modellierung2022ws-019, DOI 10.18420/MODELLIERUNG2022WS-019]
   Mirachi S, 2017, SOFTWARE PRACT EXPER, V47, P1465, DOI 10.1002/spe.2477
   Mohagheghi P, 2009, LECT NOTES COMPUT SC, V5421, P54, DOI 10.1007/978-3-642-01648-6_6
   Moreno Nathalie., 2008, Human-Computer Interaction Series, P353, DOI DOI 10.1007/978-1-84628-923-1_12
   Nadas A, 2014, SCI COMPUT PROGRAM, V89, P105, DOI 10.1016/j.scico.2013.05.004
   Nepomuceno T, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P719, DOI 10.1145/3341105.3373873
   Object Management Group, 2017, OMG Unified Modeling Language (OMG UML)
   Pastor O., 2010, Model-Driven Architecture in Practice: A Soft-ware Production Environment Based on Conceptual Modeling
   Rossi Gustavo, 2016, CLEIej, V19, P5, DOI 10.19153/cleiej.19.3.1
   Rumpe B., 2017, Agile Modeling with UML: Code Generation, Testing, Refactoring
   Rumpe Bernhard, 2016, Modeling with UML: Language, Concepts, Methods
   Cuadrado JS, 2014, SCI COMPUT PROGRAM, V89, P176, DOI 10.1016/j.scico.2013.04.007
   Schewe K., 2019, Design and Development of Web Information Systems
   Snoeck M, 2023, SOFTW SYST MODEL, V22, P1779, DOI 10.1007/s10270-023-01095-4
   Snoeck M, 2022, SOFTW SYST MODEL, V21, P1469, DOI 10.1007/s10270-022-01015-y
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   Süss JG, 2022, SOFTW SYST MODEL, V21, P1495, DOI 10.1007/s10270-022-01003-2
   Urbieta M, 2020, SOFTW SYST MODEL, V19, P1541, DOI 10.1007/s10270-020-00779-5
   Verbruggen C, 2023, SOFTW SYST MODEL, V22, P111, DOI 10.1007/s10270-022-01020-1
   VOLTER M., 2013, DSL ENG DESIGNING IM
   Whittle J, 2014, IEEE SOFTWARE, V31, P79, DOI 10.1109/MS.2013.65
NR 66
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103033
DI 10.1016/j.scico.2023.103033
EA OCT 2023
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y0WY4
UT WOS:001102570300001
DA 2024-07-18
ER

PT J
AU Di Sandro, A
   Murphy, L
   Viger, T
   Chechik, M
AF Di Sandro, Alessio
   Murphy, Logan
   Viger, Torin
   Chechik, Marsha
TI MMINT-A: A framework for model-based safety assurance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Megamodels; Automotive; Safety cases; Assurance; Queries
AB As the complexity of safety-critical systems increases, it becomes more and more challenging to assure that these systems will operate safely and reliably. This has led to the development of industry-specific safety standards that regulate the development of these systems. These standards involve developing model-based safety artifacts to assure the system is safe, such as safety cases and fault trees. Given the significant safety implications of these models, tool assistance is needed to support their creation and management throughout their lifecycle while maintaining traceability to their associated system models. To address this need, we have developed MMINT-A, a tool-supported framework that facilitates the creation, analysis and evolution of system safety models. In this paper, we report on recent extensions to MMINT-A supporting the development of provably correct assurance arguments. We highlight MMINT-A's features, demonstrate them over an example of a fleet of systems for a warehouse facility, and discuss MMINT-A's impact on research in assurance model management.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Di Sandro, Alessio; Murphy, Logan; Viger, Torin; Chechik, Marsha] Univ Toronto, Dept Comp Sci, Toronto, ON, Canada.
C3 University of Toronto
RP Di Sandro, A (corresponding author), Univ Toronto, Dept Comp Sci, Toronto, ON, Canada.
EM adisandro@cs.toronto.edu; lmurphy@cs.toronto.edu;
   torinviger@cs.toronto.edu; chechik@cs.toronto.edu
OI Di Sandro, Alessio/0000-0003-2429-4958
FU General Motors; NSERC
FX <B>Acknowledgements</B> Development of MMINT-A has been financially
   supported by General Motors and NSERC. We thank many people who have
   been involved in designing and developing MMINT-A over the years: Sahar
   Kokaly, Nick Fung, Michalis Famelis, Rick Salay, Ramy Shahin, Claudio
   Menghi, Gehan Selim, Mike Maksimov, Zinovy Diskin.
CR [Anonymous], 2011, ISO 262622011
   BaekGyu Kim, 2011, 2011 International Conference on Embedded Software (EMSOFT 2011), P155
   Bezivin J., 2004, OOPSLA GPCE WORKSH
   Bourbouh H, 2021, LECT NOTES COMPUT SC, V12673, P53, DOI 10.1007/978-3-030-76384-8_4
   Cârlan C, 2019, IEEE INT SYMP SOFTW, P330, DOI 10.1109/ISSREW.2019.00093
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Denney Ewen, 2012, Computer Safety, Reliability,and Security. Proceedings of SAFECOMP 2012 Workshops: Sassur, ASCoMS, DESEC4LCCI, ERCIM/EWICS, IWDE, P8, DOI 10.1007/978-3-642-33675-1_2
   Denney E, 2008, AEROSP CONF PROC, P3347
   Di Sandro A., 2022, MMINT A: a framework for model based safety assurance, DOI [10.5281/zenodo.7478019, DOI 10.5281/ZENODO.7478019]
   Di Sandro A., 2015, MODELS 15, P16
   Di Sandro A., 2020, MODELSC'20, P1
   Di Sandro A, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2019), P2, DOI 10.1109/MODELS-C.2019.00008
   Ebner G, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110278
   Famelis M, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P697, DOI 10.1109/ICSE.2015.226
   Foster S, 2021, FORM ASP COMPUT, V33, P855, DOI 10.1007/s00165-021-00537-4
   Fung NLS, 2022, RECENT TRENDS AND ADVANCES IN MODEL BASED SYSTEMS ENGINEERING, P351, DOI 10.1007/978-3-030-82083-1_30
   Fung NLS, 2018, LECT NOTES COMPUT SC, V11094, P60, DOI 10.1007/978-3-319-99229-7_7
   Giannakopoulou D., 2005, Automated Software Engineering, V12, P297, DOI 10.1007/s10515-005-2641-y
   GSN Working Group, 2011, GSN community standard version 2
   Hallsteinsen S, 2008, COMPUTER, V41, P93, DOI 10.1109/MC.2008.123
   Hassane O, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS COMPANION (MODELS-C 2019), P759, DOI 10.1109/MODELS-C.2019.00118
   Hassane O, 2019, LECT NOTES COMPUT SC, V11753, P116, DOI 10.1007/978-3-030-30690-8_7
   Idani A, 2020, INNOV SYST SOFTW ENG, V16, P289, DOI 10.1007/s11334-020-00366-3
   Jahan S, 2020, 2020 IEEE INTERNATIONAL CONFERENCE ON AUTONOMIC COMPUTING AND SELF-ORGANIZING SYSTEMS (ACSOS 2020), P48, DOI 10.1109/ACSOS49614.2020.00025
   Kokaly S, 2017, LECT NOTES COMPUT SC, V10488, P69, DOI 10.1007/978-3-319-66266-4_5
   Kokaly S, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P196, DOI 10.1145/2976767.2976792
   Kovacs Laura, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P1, DOI 10.1007/978-3-642-39799-8_1
   Maksimov M, 2019, ACM COMPUT SURV, V52, DOI 10.1145/3342481
   Mohamad M, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09971-7
   Murphy L, 2021, LECT NOTES COMPUT SC, V13085, P23, DOI 10.1007/978-3-030-92124-8_2
   Salay R, 2020, SOFTW SYST MODEL, V19, P231, DOI 10.1007/s10270-019-00738-9
   Salay R, 2015, 2015 ACM/IEEE 18TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS), P236, DOI 10.1109/MODELS.2015.7338254
   Sanchez B., 2020, MODELS'20, P1
   Sandro A.D., 2023, VaMoS'23
   Shahin R, 2021, LECT NOTES COMPUT SC, V12852, P130, DOI 10.1007/978-3-030-83903-1_9
   Sljivo I, 2017, J SYST SOFTWARE, V131, P570, DOI 10.1016/j.jss.2016.07.034
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Van Tendeloo Y, 2017, WINT SIMUL C PROC, P944, DOI 10.1109/WSC.2017.8247845
   Vardi M. Y., 1996, Logics for Concurrency. Structure versus Automata, P238
   Varró D, 2016, SOFTW SYST MODEL, V15, P609, DOI 10.1007/s10270-016-0530-4
   Viger T., 2020, SafeComp'20, P1
   Viger T, 2023, SOFTW SYST MODEL, V22, P1473, DOI 10.1007/s10270-022-01063-4
   Viger T, 2021, 24TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2021), P194, DOI 10.1109/MODELS50736.2021.00028
NR 43
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103004
DI 10.1016/j.scico.2023.103004
EA AUG 2023
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA W6WK9
UT WOS:001093010400001
DA 2024-07-18
ER

PT J
AU Hasrat, IR
   Jensen, PG
   Larsen, KG
   Srba, J
AF Hasrat, Imran Riaz
   Jensen, Peter Gjol
   Larsen, Kim Guldstrand
   Srba, Jiri
TI A toolchain for domestic heat-pump control using UPPAAL STRATEGO
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model identification; Strategy synthesis; Heat -pump control; Floor
   heating
ID THERMAL-BEHAVIOR PREDICTION; ARTIFICIAL NEURAL-NETWORK; GREY-BOX MODELS;
   PARAMETERS
AB Heatpump-based floor-heating systems for domestic heating offer flexibility in energy consumption patterns, which can be utilized for reducing heating costs-in particular when considering hour-based electricity prices. Such flexibility is hard to exploit via classical Model Predictive Control (MPC), and in addition, MPC requires a priori calibration (i.e., model identification) which is often costly and becomes outdated as the dynamics and use of a building change. We solve these shortcomings by combining recent advancements in stochastic model identification and automatic (near-)optimal controller synthesis. Our method suggests an adaptive model-identification using the tool CTSM-R, and an efficient control synthesis based on Q-learning for Euclidean Markov Decision Processes via UPPAAL STRATEGO. This paper investigates three potential control strategy perspectives (i.e., fixed -target, target-band, and setbacks) to achieve energy efficiency in the heating system. To examine the performance of the suggested approaches, we demonstrate our method on an experimental Danish family-house from the OpSys project. The results show that a fixed -target strategy offers up to a 39% reduction in heating cost while retaining comparable comfort to a standard bang-bang controller. Even better, target-band and setbacks strategies gain up to 46-49% energy cost savings. Furthermore, we show the flexibility of our method by computing the Pareto-frontier that visualizes the cost/comfort tradeoff. Additionally, we discuss the applicability of STRATEGO for an old-fashioned binary-mode heat-pump system and report significant cost savings (33 %) as compared to the bang-bang controller. Moreover, we also present the performance analysis of STRATEGO against an industry -standard control strategy.& COPY; 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons .org /licenses /by /4 .0/).
C1 [Hasrat, Imran Riaz; Jensen, Peter Gjol; Larsen, Kim Guldstrand; Srba, Jiri] Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
C3 Aalborg University
RP Hasrat, IR; Jensen, PG (corresponding author), Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
EM imranh@cs.aau.dk; pgj@cs.aau.dk
OI Guldstrand Larsen, Kim/0000-0002-5953-3384; Srba,
   Jiri/0000-0001-5551-6547; Jensen, Peter Gjol/0000-0002-9320-9991
FU ERC Advanced Grant LASSO; Villum Investigator Grant S4OS; DIREC: Digital
   Research Centre Denmark
FX We would like to thank Simon Thorsteinsson for his extensive help in
   acquiring base data from DYMOLA model for model identification. This
   research is partly funded by the ERC Advanced Grant LASSO, the Villum
   Investigator Grant S4OS, as well as DIREC: Digital Research Centre
   Denmark.
CR Agesen MK, 2016, IEEE IND ELEC, P5296, DOI 10.1109/IECON.2016.7794040
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Behrmann G, 2007, LECT NOTES COMPUT SC, V4590, P121
   Behrmann G, 2006, INT CONF QUANT EVAL, P125
   Bulychev P, 2012, Arxiv, DOI arXiv:1207.1272
   Carrascal E, 2016, ENERGIES, V9, DOI 10.3390/en9040251
   David Alexandre, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P206, DOI 10.1007/978-3-662-46681-0_16
   David A, 2014, LECT NOTES COMPUT SC, V8837, P129, DOI 10.1007/978-3-319-11936-6_10
   Dayssault systems. dymola (dynamic modeling laboratory), 2022, SYSTEMS ENG
   Dixit MK, 2010, ENERG BUILDINGS, V42, P1238, DOI 10.1016/j.enbuild.2010.02.016
   Ferracuti F, 2017, APPL ENERG, V204, P1375, DOI 10.1016/j.apenergy.2017.05.015
   Fonti A, 2017, ENRGY PROCED, V105, P2107, DOI 10.1016/j.egypro.2017.03.592
   Golmohamadi H, 2021, ENERG BUILDINGS, V232, DOI 10.1016/j.enbuild.2020.110665
   Harasty S., 2016, 12 REHVA WORLD C
   Hasrat Imran Riaz, 2022, Zenodo, DOI 10.5281/ZENODO.7413575
   Hasrat IR, 2022, LECT NOTES COMPUT SC, V13299, P363, DOI 10.1007/978-3-031-10363-6_24
   Hermansen R, 2022, ENERGY, V238, DOI 10.1016/j.energy.2021.121631
   Jaeger Manfred, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Verification. Principles. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12476), P275, DOI 10.1007/978-3-030-61362-4_15
   Jensen S.O., 2018, OPSYS tools for investigating energy flexibility in houses with heat pumps
   Juhl R., 2016, arXiv
   Juhl R., 2017, GREY BOX MODELING HE
   Kersken M., 2013, FRAUNHOFER IBP RAPPO, V527, P40
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Larsen KG, 2016, LECT NOTES COMPUT SC, V9636, P244, DOI 10.1007/978-3-662-49674-9_14
   Ljung L., 2016, MATLAB SYSTEM IDENTI
   Moon JW, 2016, ENERG BUILDINGS, V127, P859, DOI 10.1016/j.enbuild.2016.06.046
   Moon JW, 2011, ENERG BUILDINGS, V43, P338, DOI 10.1016/j.enbuild.2010.09.024
   Nassif N, 2014, BUILD SIMUL-CHINA, V7, P237, DOI 10.1007/s12273-013-0138-3
   Nyman U, 2017, IEEE INT C ENG COMP, P11, DOI 10.1109/ICECCS.2017.33
   Ponnaganti P., 2022, 2022 IEEEPES TRANSMI, P01
   Prívara S, 2013, ENERG BUILDINGS, V56, P8, DOI 10.1016/j.enbuild.2012.10.024
   Reynders G, 2014, ENERG BUILDINGS, V82, P263, DOI 10.1016/j.enbuild.2014.07.025
   Thilker CA, 2021, E3S WEB CONF, V246, DOI 10.1051/e3sconf/202124609005
   viessmanndirect, 2023, CONTR TECHN WEATH CO
   Vinther K, 2017, IFAC PAPERSONLINE, V50, P7381, DOI 10.1016/j.ifacol.2017.08.1477
   Vogler-Finck PJC, 2018, SUSTAIN CITIES SOC, V42, P558, DOI 10.1016/j.scs.2018.07.027
   Williams S, 2018, APPL THERM ENG, V133, P97, DOI 10.1016/j.applthermaleng.2018.01.035
   Yu X., 2020, INT S HEATING VENTIL, P77
NR 38
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102987
DI 10.1016/j.scico.2023.102987
EA JUN 2023
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N2VV2
UT WOS:001035660800001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Zakeriyan, A
   Khosravi, R
   Safari, H
   Khamespanah, E
   Shamsabadi, SM
AF Zakeriyan, Arvin
   Khosravi, Ramtin
   Safari, Hadi
   Khamespanah, Ehsan
   Shamsabadi, Seyede Mehrnaz
TI Automated testing of an industrial stock market trading platform based
   on functional specification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Automatic test case generation; Specification -based testing; Functional
   languages; Search -based software testing
AB Developing an automatic functional testing solution for high-capability software systems is challenging as these systems often have a complex architecture, resulting from satisfying a wide range of non-functional requirements. In this paper, we show how a specification -based approach can be used to generate test cases for providing a high level of confidence about the functional correctness of these systems. In this approach, the domain logic of a high-capability software system is specified in the Gallina language. The developed specification is used for both measuring coverage metrics and as the test oracle. Test cases are generated using a search-based approach, having the fitness functions defined in terms of the structural coverage of the specification. To illustrate the applicability of the approach, we applied it on an industrial stock market matching engine. The experiment indicates promising results in the effectiveness of our proposed approach, which is finding critical bugs in the system, although it has an acceptable number of manually developed test cases.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Zakeriyan, Arvin; Khosravi, Ramtin; Safari, Hadi; Khamespanah, Ehsan; Shamsabadi, Seyede Mehrnaz] Univ Tehran, Sch Elect & Comp Engn, Tehran, Iran.
C3 University of Tehran
RP Khosravi, R (corresponding author), Univ Tehran, Sch Elect & Comp Engn, Tehran, Iran.
EM a.zakeriyan@ut.ac.ir; r.khosravi@ut.ac.ir; hadi.safari@ut.ac.ir;
   e.khamespanah@ut.ac.ir; Mshamsabadi78@ut.ac.ir
OI Safari, Hadi/0000-0002-4240-8077
CR Adzic G., 2011, Specification by Example: How Successful Teams Deliver the Right Software
   Aichernig Bernhard K., 2019, Unifying Theories of Programming. 7th International Symposium, UTP 2019. Dedicated to Tony Hoare on the Occasion of His 85th Birthday. Proceedings. Lecture Notes in Computer Science (LNCS 11885), P22, DOI 10.1007/978-3-030-31038-7_2
   Almasi MM, 2017, 2017 IEEE/ACM 39TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2017), P263, DOI 10.1109/ICSE-SEIP.2017.27
   Asaadi Hamid Reza, 2012, Fundamentals of Software Engineering. 4th IPM International Conference, FSEN 2011. Revised Selected Papers, P253, DOI 10.1007/978-3-642-29320-7_17
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Berkholz D., 2013, PROGRAMMING LANGUAGE
   Bertot Y., 2004, INTERACTIVE THEOREM
   Binkley D, 2015, IEEE INT WORK C SO, P1, DOI 10.1109/SCAM.2015.7335396
   Cheng YF, 2016, IEEE INT CONF SOFTW, P255, DOI 10.1109/ICST.2016.8
   Claessen K, 2011, ACM SIGPLAN NOTICES, V46, P53, DOI 10.1145/1988042.1988046
   Dyson P., 2004, ARCHITECTING ENTERPR
   Evans E., 2003, Domain-Driven Design
   Farmer W.M., 2007, INSIGHT PROOF FESTSC, V10, P1
   Frantzen L, 2006, LECT NOTES COMPUT SC, V4262, P40
   Fraser G., 2011, Proceedings of the 11th International Conference on Quality Software (QSIC 2011), P31, DOI 10.1109/QSIC.2011.19
   Fraser G, 2014, ACM T SOFTW ENG METH, V24, DOI 10.1145/2685612
   Fraser G, 2013, IEEE T SOFTWARE ENG, V39, P276, DOI 10.1109/TSE.2012.14
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gaudel Marie-Claude, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P209, DOI 10.1007/978-3-540-78917-8_7
   Gill A, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P1
   HaskellWiki contributors, 2020, HASK IND HASKELLWIKI
   Hassanat A, 2019, INFORMATION, V10, DOI 10.3390/info10120390
   Hayes I. J., 1998, Formal Aspects of Computing, V10, P187, DOI 10.1007/s001650050010
   Hudak Paul., 1994, Haskell vs. ada vs. c++ vs awk vs..an experiment in software prototyping productivity
   Khurshid S., 2004, Automated Software Engineering, V11, P403, DOI 10.1023/B:AUSE.0000038938.10589.b9
   Kong L, 2007, P INT COMP SOFTW APP, P717
   Liu S., 2022, IEEE T SOFTWARE ENG
   McGilchrist T., 2017, HASKELL IND HASKELLW
   Panichella A, 2018, IEEE T SOFTWARE ENG, V44, P122, DOI 10.1109/TSE.2017.2663435
   Rojas JM, 2017, EMPIR SOFTW ENG, V22, P852, DOI 10.1007/s10664-015-9424-2
   Satpathy M, 2007, LECT NOTES COMPUT SC, V4454, P95
   Shamshiri S, 2015, IEEE INT CONF AUTOM, P201, DOI 10.1109/ASE.2015.86
   Shaoying Liu, 2010, Proceedings 2010 Fourth IEEE International Conference on Secure Software Integration and Reliability Improvement (SSIRI 2010), P147, DOI 10.1109/SSIRI.2010.11
   Sirjani M., 2018, Principles of Modeling, P423, DOI 10.
   Tonella P., 2004, Software Engineering Notes, V29, P119, DOI 10.1145/1013886.1007528
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Utting M, 2012, SOFTW TEST VERIF REL, V22, P297, DOI 10.1002/stvr.456
   Veanes Margus, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P39, DOI 10.1007/978-3-540-78917-8_2
   Vogl S, 2021, 2021 IEEE/ACM 14TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST 2021), P28, DOI 10.1109/SBST52555.2021.00012
   Wikibooks, 2021, HASK DEN SEM WIK FRE
   Zakeriyan Arvin, 2021, INT C FUND SOFTW ENG, P199
NR 41
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102908
DI 10.1016/j.scico.2022.102908
EA NOV 2022
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700008
DA 2024-07-18
ER

PT J
AU Ravelo-Méndez, W
   Escobar-Velásquez, C
   Linares-Vásquez, M
AF Ravelo-Mendez, William
   Escobar-Velasquez, Camilo
   Linares-Vasquez, Mario
TI Kraken 2.0: A platform-agnostic and cross-device interaction testing
   tool
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Signaling; Automated testing; Cross-device testing; Cross-application
   testing
AB Nowadays applications that require the interaction and collaboration of two or more users simultaneously via different devices such as web browsers and mobile phones are becoming more and more frequent in a time where cross-device and cross-play features are demanded by final users, thus, to ensure high quality of those products, software engineers are adopting test automation techniques that can optimize their quality assurance processes. In previous work we presented Kraken 2.0, a publicly available cross-device testing tool that completely reconstructed the Kraken 1.0 architecture and enables a tester to write, run, and validate test scenarios that involve the interaction of web and mobile devices in parallel by implementing test scripts created with the Gherkin syntax. In this paper, we provide more details about the Kraken 2.0 architecture and describe new features such as extraction of GUI snapshots and definition of test scripts in an automation API fashion.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Ravelo-Mendez, William; Escobar-Velasquez, Camilo; Linares-Vasquez, Mario] Univ Los Andes, Bogota, Colombia.
C3 Universidad de los Andes (Colombia)
RP Escobar-Velásquez, C (corresponding author), Univ Los Andes, Bogota, Colombia.
EM wr.ravelo@uniandes.edu.co; ca.escobar2434@uniandes.edu.co;
   m.linaresv@uniandes.edu.co
RI Escobar-Velásquez, Camilo/JVD-5595-2023
OI Escobar-Velásquez, Camilo/0000-0001-8414-9301
FU Google Latin American Research Award; Google Latin American Research
   Award 2018-2021
FX Escobar-Velasquez and Linares-Vasquez are partially supported by a
   Google Latin American Research Award 2018-2021.
CR Android, 2019, UIAPPL EX MONK
   Android, 2019, ESPRESSO
   Android, 2019, UI AUT
   BrowserStack, BROWS
   Calabash, 2019, CAL ANDR
   Chow B.J.A., 2015, OCTOPUS RESCUE FASCI
   J. Foundation, APP
   Marak, FAK JS
   Microsoft, PLAYWRG
   O. foundation, WEBDR IO
   Ravelo-Mendez W., SANER 22
NR 11
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102897
DI 10.1016/j.scico.2022.102897
EA NOV 2022
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700002
DA 2024-07-18
ER

PT J
AU Navarro, M
   Olmedo, F
AF Navarro, Marcelo
   Olmedo, Federico
TI Slicing of probabilistic programs based on specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Probabilistic programming; Program slicing; Expectation transformer
   semantics; Verification condition generator
AB This paper presents the first slicing approach for probabilistic programs based on specifications. We show that when probabilistic programs are accompanied by their specifications in the form of pre- and post-condition, we can exploit this semantic information to produce specification-preserving slices strictly more precise than slices yielded by conventional techniques based on data/control dependency. To achieve this goal, our technique is based on the backward propagation of postconditions via the greatest pre-expectation transformer-the probabilistic counterpart of Dijkstra weakest pre-condition transformer. The technique is termination-sensitive, allowing to preserve the partial as well as the total correctness of probabilistic programs w.r.t. their specifications. It is modular, featuring a local reasoning principle, and is formally proved correct. As fundamental technical ingredients of our technique, we design and prove sound verification condition generators for establishing the partial and total correctness of probabilistic programs, which are of interest on their own and can be exploited elsewhere for other purposes. On the practical side, we demonstrate the applicability of our approach by means of a few illustrative examples and a case study from the probabilistic modelling field. We also describe an algorithm for computing least slices among the space of slices derived by our technique.
C1 [Navarro, Marcelo; Olmedo, Federico] Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
C3 Universidad de Chile
RP Olmedo, F (corresponding author), Univ Chile, Comp Sci Dept DCC, Santiago, Chile.
EM mnavarro@dcc.uchile.cl; federico.olmedo@dcc.uchile.cl
OI Olmedo, Federico/0000-0003-0217-6483
FU FONDECYT [11181208]
FX This research has been supported by the FONDECYT Grant No. 11181208.
CR Agrawal S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158122
   Amtoft T, 2020, ACM T PROGR LANG SYS, V42, DOI 10.1145/3372895
   Amtoft T, 2016, LECT NOTES COMPUT SC, V9634, P180, DOI 10.1007/978-3-662-49630-5_11
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], 2004, Monographs in Computer Science
   [Anonymous], 2014, ARCH FORM PROOFS
   [Anonymous], 2013, ESEC SIGSOFT FSE
   Barros JB, 2012, FORM ASP COMPUT, V24, P217, DOI 10.1007/s00165-011-0196-1
   Barthe Gilles, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P117, DOI 10.1007/978-3-319-89884-1_5
   Batz Kevin, 2018, Programming Languages and Systems. 27th European Symposium on Programming, ESOP 2018, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2018. Proceedings: LNCS 10801, P186, DOI 10.1007/978-3-319-89884-1_7
   Chadha R, 2007, THEOR COMPUT SCI, V379, P142, DOI 10.1016/j.tcs.2007.02.040
   Chakarov Aleksandar, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P511, DOI 10.1007/978-3-642-39799-8_34
   Chatterjee K, 2018, ACM T PROGR LANG SYS, V40, DOI 10.1145/3174800
   Chatterjee K, 2017, LECT NOTES COMPUT SC, V10427, P41, DOI 10.1007/978-3-319-63390-9_3
   Chatterjee K, 2017, ACM SIGPLAN NOTICES, V52, P145, DOI 10.1145/3093333.3009873
   Chung I.S., 2001, SAC 01, P605
   Cock D, 2012, ELECTRON P THEOR COM, P167, DOI 10.4204/EPTCS.102.15
   Comuzzi J. J., 1996, FME '96: Industrial Benefit and Advances in Formal Methods. Third International Symposium of Formal Methods Europe. Proceedings, P557
   da Cruz D, 2010, LECT NOTES COMPUT SC, V6415, P106
   Darwiche A, 2009, MODELING AND REASONING WITH BAYESIAN NETWORKS, P1
   den Hartog J. I., 1999, Advances in Computing Science-ASIAN'99. 5th Asian Computing Science Conference. Proceedings (Lecture Notes in Computer Science Vol. 1742), P113
   Dijkstra E.W., 1976, PRENTICE HALL SERIES
   Dutta S, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P574, DOI 10.1145/3236024.3236057
   Fioriti LMF, 2015, ACM SIGPLAN NOTICES, V50, P489, DOI 10.1145/2676726.2677001
   Fu HF, 2019, LECT NOTES COMPUT SC, V11388, P468, DOI 10.1007/978-3-030-11245-5_22
   Ghahramani Z, 2015, NATURE, V521, P452, DOI 10.1038/nature14541
   GOLDWASSER S, 1984, J COMPUT SYST SCI, V28, P270, DOI 10.1016/0022-0000(84)90070-9
   Gordon Andrew D., 2014, P FUTURE SOFTWARE EN, P167, DOI [10.1145/2593882.2593900, DOI 10.1145/2593882.2593900]
   Huang MZ, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360555
   Huang MZ, 2018, LECT NOTES COMPUT SC, V11275, P181, DOI 10.1007/978-3-030-02768-1_11
   Hur CK, 2014, ACM SIGPLAN NOTICES, V49, P133, DOI [10.1145/2666356.2594303, 10.1145/2594291.2594303]
   Hurd J, 2005, THEOR COMPUT SCI, V346, P96, DOI 10.1016/j.tcs.2005.08.005
   Jones C., 1989, THESIS U EDINBURGH
   Kaminski BL, 2019, ACTA INFORM, V56, P255, DOI 10.1007/s00236-018-0321-1
   Kaminski BL, 2018, J ACM, V65, DOI 10.1145/3208102
   Kaminski BL, 2015, LECT NOTES COMPUT SC, V9234, P307, DOI 10.1007/978-3-662-48057-1_24
   Kaminski Benjamin Lucien, 2019, Advanced weakest precondition calculi for probabilistic programs
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   KOZEN D, 1981, J COMPUT SYST SCI, V22, P328, DOI 10.1016/0022-0000(81)90036-2
   LAURITZEN SL, 1988, J ROY STAT SOC B MET, V50, P157
   Lee WK, 2001, J SYST ARCHITECT, V47, P427, DOI 10.1016/S1383-7621(01)00003-0
   McIver A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158121
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Motwani Rajeev, 1995, RANDOMIZED ALGORITHM
   Rand R, 2015, ELECTRON NOTES THEOR, V319, P351, DOI 10.1016/j.entcs.2015.12.021
   Sanders JW, 2000, LECT NOTES COMPUT SC, V1837, P80
   TIP F, 1995, J PROGRAM LANG, V3, P121
   van de Meent J.W., 2021, ARXIV180910756
   Wechler W., 2012, UNIVERSAL ALGEBRA CO, V25
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Xu J. Qian, 2005, ACM SIGSOFT Software Engineering Notes, V30, P1, DOI [10.1145/1050849.1050865.36Y, DOI 10.1145/1050849.1050865]
NR 51
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2022
VL 220
AR 102822
DI 10.1016/j.scico.2022.102822
EA MAY 2022
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 1X0WI
UT WOS:000807184200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Alcocer, JPS
   Bergel, A
   Valente, MT
AF Sandoval Alcocer, Juan Pablo
   Bergel, Alexandre
   Valente, Marco Tulio
TI Prioritizing versions for performance regression testing: The Pharo case
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Formal Methods (SBMF)
CY NOV 29-DEC 01, 2017
CL Fed Univ Pernambuco, CIn, Recife, BRAZIL
SP CAPES, CNPq, FACEPE
HO Fed Univ Pernambuco, CIn
DE Performance regression; Software performance; Software evolution;
   Performance regression prediction; Regression benchmarking
AB Context: Software performance may suffer regressions caused by source code changes. Measuring performance at each new software version is useful for early detection of performance regressions. However, systematically running benchmarks is often impractical (e.g., long running execution, prioritizing functional correctness over non-functional).
   Objective: In this article, we propose Horizontal Profiling, a sampling technique to predict when a new revision may cause a regression by analyzing the source code and using run-time information of a previous version. The goal of Horizontal Profiling is to reduce the performance testing overhead by benchmarking just software versions that contain costly source code changes.
   Method: We present an evaluation in which we apply Horizontal Profiling to identify performance regressions of 17 software projects written in the Pharo programming language, totaling 1,288 software versions.
   Results: Horizontal Profiling detects more than 80% of the regressions by benchmarking less than 20% of the versions. In addition, our experiments show that Horizontal Profiling has better precision and executes the benchmarks in less versions that the state of the art tools, under our benchmarks.
   Conclusions: We conclude that by adequately characterizing the run-time information of a previous version, it is possible to determine if a new version is likely to introduce a performance regression or not. As a consequence, a significant fraction of the performance regressions are identified by benchmarking only a small fraction of the software versions. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Sandoval Alcocer, Juan Pablo] Univ Catolica Boliviana San Pablo, Dept Ciencias Exactas & Ingn, Cochabamba, Bolivia.
   [Bergel, Alexandre] Univ Chile, Dept Comp Sci DCC, ISCLab, Santiago, Chile.
   [Valente, Marco Tulio] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
C3 Universidad de Chile; Universidade Federal de Minas Gerais
RP Alcocer, JPS (corresponding author), Univ Catolica Boliviana San Pablo, Dept Ciencias Exactas & Ingn, Cochabamba, Bolivia.
EM sandoval@ucbcba.edu.bo; bergel@dcc.uchile.cl; mtov@dcc.ufmg.br
RI Sandoval Alcocer, Juan Pablo/AGK-7291-2022; Sandoval Alcocer, Juan
   Pablo/CAA-0465-2022
OI Sandoval Alcocer, Juan Pablo/0000-0002-8335-4351; Valente, Marco
   Tulio/0000-0002-8180-7548
FU Lam Research [4800054170, 4800043946]; STICAmSud project [14STIC-02];
   FONDECYT project [1200067]; European Smalltalk User Group
FX We are very grateful to Lam Research for partially sponsoring this work
   (4800054170 and 4800043946). We also thank the European Smalltalk User
   Group (www.esug.org) for the sponsoring. This work has been partially
   sponsored by the STICAmSud project 14STIC-02 and the FONDECYT project
   1200067.
CR [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2004, P 26 INT C SOFTW ENG
   [Anonymous], [No title captured]
   [Anonymous], 2013, P 4 ACM SPEC INT C P
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   Bergel A, 2011, LECT NOTES COMPUT SC, V6813, P533, DOI 10.1007/978-3-642-22655-7_25
   Bezemer C, 2014, J SOFTW-EVOL PROC, V26, P1193, DOI 10.1002/smr.1657
   Callau O., 2011, Proceedings of the 8th Working Conference on Mining Software Repositories, P23
   Elbaum S., 2000, Software Engineering Notes, V25, P102, DOI 10.1145/347636.348910
   Han S, 2012, PROC INT CONF SOFTW, P145, DOI 10.1109/ICSE.2012.6227198
   Jin GL, 2012, ACM SIGPLAN NOTICES, V47, P77, DOI 10.1145/2345156.2254075
   Kim JM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P119, DOI 10.1109/ICSE.2002.1007961
   Li Z, 2007, IEEE T SOFTWARE ENG, V33, P225, DOI 10.1109/TSE.2007.38
   Liu Y, 2014, 2014 7TH INTERNATIONAL CONFERENCE ON INTELLIGENT COMPUTATION TECHNOLOGY AND AUTOMATION (ICICTA), P36, DOI 10.1109/ICICTA.2014.16
   Maplesden D, 2015, IEEE T SOFTWARE ENG, V41, P691, DOI 10.1109/TSE.2015.2396514
   Nguyen TV, 2014, CLIN CASE DERMATOL, P11, DOI 10.1007/978-1-4471-4312-3_3
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Zaman Shahed, 2012, P 9 IEEE WORK C MIN
NR 25
TC 6
Z9 6
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2020
VL 191
AR 102415
DI 10.1016/j.scico.2020.102415
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA KW9NS
UT WOS:000521511000010
OA Bronze
DA 2024-07-18
ER

PT J
AU Feitosa, SD
   Vizzotto, JK
   Piveta, EK
   Du Bois, AR
AF Feitosa, Samuel da Silva
   Vizzotto, Juliana Kaizer
   Piveta, Eduardo Kessler
   Du Bois, Andre Rauber
TI A monadic semantics for quantum computing in an object oriented language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Programing Languages (SBLP)
CY SEP 22-23, 2016
CL Maringa, BRAZIL
DE Quantum computing; Monadic semantics; Featherweight Java
ID LAMBDA-CALCULUS; COMPUTATION
AB Nowadays, several languages and libraries have been proposed to program and reason about quantum programs in the imperative and functional paradigms. Having in mind that the object-oriented paradigm is one of the most used for developing general purpose software systems, in this work we propose to investigate quantum programming using the object-oriented paradigm. Hence, we present a monadic semantics for FJQuantum(1), an object-oriented language based on Featherweight Java, created to reason and to develop programs handling quantum data and quantum operations. We also provide an interpreter for this semantics and a set of examples of quantum programs to run with it. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Feitosa, Samuel da Silva; Vizzotto, Juliana Kaizer; Piveta, Eduardo Kessler] Univ Fed Santa Maria, Dept Languages & Comp Syst, Santa Maria, RS, Brazil.
   [Du Bois, Andre Rauber] Univ Fed Pelotas, Dept Comp, CDTec, Pelotas, RS, Brazil.
C3 Universidade Federal de Santa Maria (UFSM); Universidade Federal de
   Pelotas
RP Feitosa, SD (corresponding author), Univ Fed Santa Maria, Dept Languages & Comp Syst, Santa Maria, RS, Brazil.
EM sfeitosa@inf.ufsm.br
RI Vizzotto, Juliana/JCN-4891-2023
OI Feitosa, Samuel/0000-0002-9485-4845
CR Abramsky S, 2004, IEEE S LOG, P410, DOI 10.1109/LICS.2004.1319635
   Altenkirch T, 2005, IEEE S LOG, P249
   Altenkirch  T., 2005, P 20 ANN IEEE S LOG
   Altenkirch T, 2007, ELECTRON NOTES THEOR, V170, P23, DOI 10.1016/j.entcs.2006.12.010
   [Anonymous], 1992, 19th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, DOI DOI 10.1145/143165.143169
   Arrighi  P., ARXIVQUANTPH0612199
   Bellia  M., 2010, CSP2010, P61
   Bettelli  S., CSPL0103009 CORR
   Calegaro BC, 2013, 2013 2ND WORKSHOP-SCHOOL ON THEORETICAL COMPUTER SCIENCE (WEIT), P34, DOI 10.1109/WEIT.2013.31
   Coecke B, 2008, LECT NOTES COMPUT SC, V5126, P298, DOI 10.1007/978-3-540-70583-3_25
   DEUTSCH D, 1985, P ROY SOC LOND A MAT, V400, P97, DOI 10.1098/rspa.1985.0070
   Feitosa S. S., 2016, THESIS
   Feitosa SS, 2016, ELECTRON NOTES THEOR, V324, P67, DOI 10.1016/j.entcs.2016.09.007
   Grover L. K., 1996, Proceedings of the Twenty-Eighth Annual ACM Symposium on the Theory of Computing, P212, DOI 10.1145/237814.237866
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Knill E., 1996, TECH REP
   Mermin N. D., 2007, QUANTUM COMPUTER SCI
   Mintert F, 2009, LECT NOTES PHYS, V768, P61, DOI 10.1007/978-3-540-88169-8_2
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Mu  S.-C., 2001, AS WORKSH PROGR LANG
   Nielsen M. A, 2011, Quantum Computation and Quantum Information: 10th Anniversary Edition
   Omer  B., 1998, TECH REP
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Sabry Amr, 2003, P 2003 ACM SIGPLAN W, DOI DOI 10.1145/871895.871900
   Sanders J. W., 1999, MATH PROGRAM CONSTRU, P80
   Selinger P, 2004, MATH STRUCT COMP SCI, V14, P527, DOI 10.1017/S0960129504004256
   Selinger  P., 2008, P 5 INT WORKSH QUANT
   Selinger P, 2006, MATH STRUCT COMP SCI, V16, P527, DOI 10.1017/S0960129506005238
   SHOR PW, 1994, AN S FDN CO, P124
   Simon D., 1994, PROC 35 ANN S FDN CO, V26, P116
   van Tonder A, 2004, SIAM J COMPUT, V33, P1109, DOI 10.1137/S0097539703432165
   Vizzotto J. K., 2006, THESIS
   Vizzotto J, 2006, MATH STRUCT COMP SCI, V16, P453, DOI 10.1017/S0960129506005287
   Vizzotto JK, 2013, LECT NOTES COMPUT SC, V8129, P61, DOI 10.1007/978-3-642-40922-6_5
   Vizzotto JK, 2008, ELECTRON NOTES THEOR, V210, P139, DOI 10.1016/j.entcs.2008.04.023
   Vizzotto JK, 2009, LECT NOTES ARTIF INT, V5514, P379, DOI 10.1007/978-3-642-02261-6_30
   Williams C. P., 2008, EXPLORATIONS QUANTUM
   Yanofsky N. S., 2008, QUANTUM COMPUTING CO
NR 39
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2019
VL 173
BP 37
EP 55
DI 10.1016/j.scico.2018.03.003
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA HO3WK
UT WOS:000460853500004
OA hybrid
DA 2024-07-18
ER

PT J
AU Krishna, A
   Poizat, P
   Salaün, G
AF Krishna, Ajay
   Poizat, Pascal
   Salaun, Gwen
TI Checking business process evolution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Business processes; Evolution; Automated verification; BPMN
ID PROCESS MODELS; SEMANTICS; EQUIVALENCE; LANGUAGE
AB Business processes support the design and implementation of software as workflows of local and inter-organisation activities. Tools provide the business process designer with modelling and execution facilities, but they barely provide formal analysis techniques. When one makes a process evolve, for example by refactoring it or by adding new features in it, it is important to be able to check whether, and how, this process has changed, and possibly correct evolution flaws. To reach this objective, we first present a model transformation from the BPMN standard notation to the LNT process algebra and LTS formal models. We then propose a set of relations for comparing business processes at the formal model level. With reference to related work, we propose a richer set of comparison primitives supporting renaming, refinement, property and context-awareness. We also support BPMN processes containing unbalanced structures among gateways. In order to make the checking of evolution convenient for business process designers, we have implemented tool support for our approach as a web application. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Krishna, Ajay; Salaun, Gwen] Univ Grenoble Alpes, Inria, CNRS, Grenoble INP,LIG, F-38000 Grenoble, France.
   [Poizat, Pascal] Univ Paris Nanterre, Univ Paris Lumieres, F-92000 Nanterre, France.
   [Poizat, Pascal] Sorbonne Univ, CNRS, LIP6, F-75005 Paris, France.
C3 Inria; Communaute Universite Grenoble Alpes; Institut National
   Polytechnique de Grenoble; Universite Grenoble Alpes (UGA); Centre
   National de la Recherche Scientifique (CNRS); Centre National de la
   Recherche Scientifique (CNRS); Sorbonne Universite
RP Salaün, G (corresponding author), Univ Grenoble Alpes, Inria, CNRS, Grenoble INP,LIG, F-38000 Grenoble, France.
EM ajay.muroor-nadumane@inria.fr; pascal.poizat@lip6.fr;
   gwen.salaun@inria.fr
OI Poizat, Pascal/0000-0001-7979-9510
CR [Anonymous], 1989, 8807 ISO
   Arnold A., 1994, Finite transition systems
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Capel MI, 2012, IEEE ANNU SOFTW ENG, P100, DOI 10.1109/SEW.2012.17
   Champelovier D., 2018, Reference Manual of the LNT to LOTOS Translator (Version 6.7)
   Christiansen DR, 2011, LECT NOTES COMPUT SC, V6551, P146, DOI 10.1007/978-3-642-19589-1_10
   Cornax M. C., 2018, P SAC 18
   Corradini F., 2015, INT WORKSH FORM ASP, P161
   Coste N, 2010, LECT NOTES COMPUT SC, V6416, P128, DOI 10.1007/978-3-642-16561-0_18
   Dam M., 1993, CONCUR '93. 4th International Conference on Concurrency Theory Proceedings, P22
   de Medeiros AKA, 2008, DATA KNOWL ENG, V64, P55, DOI 10.1016/j.datak.2007.06.010
   Decker G, 2011, INFORM SYST, V36, P292, DOI 10.1016/j.is.2010.06.005
   Dijkman RM, 2008, INFORM SOFTWARE TECH, V50, P1281, DOI 10.1016/j.infsof.2008.02.006
   Durán F, 2017, LECT NOTES COMPUT SC, V10319, P219, DOI 10.1007/978-3-319-59746-1_12
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   El-Saber Nissreen A. S., 2014, P 2014 WORKSHOP BEHA, P1
   Fahland D, 2009, LECT NOTES COMPUT SC, V5701, P278, DOI 10.1007/978-3-642-03848-8_19
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   Garavel H, 2001, INT FED INFO PROC, V69, P377, DOI 10.1007/0-306-47003-9_24
   Geist, 2014, RIGOROUS SEMANTICS B
   Güdemann M, 2016, IEEE T SERV COMPUT, V9, P647, DOI 10.1109/TSC.2015.2413401
   ISO/IEC, 2013, ISO/IEC 19510
   Kluza K., 2012, 8 WORKSH KNOWL ENG S, P38
   Koehler J., 2007, 3678 IBM
   Lam V., 2012, THEORETICAL APPL INF, V24, P33
   Lee J., 1994, TECH REP
   Martens A, 2005, LECT NOTES COMPUT SC, V3442, P19, DOI 10.1007/978-3-540-31984-9_3
   Mateescu R., 2014, P CBSE 2014, P159
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   Mendoza LE, 2012, INFORM SOFTWARE TECH, V54, P149, DOI 10.1016/j.infsof.2011.08.004
   Nguyen H.N., 2012, LNCS, P525, DOI DOI 10.1007/978-3-642-34321-636
   O.M.G. Business, 2011, PROC MOD NOT BPMN VE
   Poizat P., 2016, INT WORKSH FORM ASP, P36
   Raedts I., 2007, MSVVEIS, P126
   Van der Aalst WMP, 1998, J CIRCUIT SYST COMP, V8, P21, DOI 10.1142/S0218126698000043
   Van der Aalst WMP, 2003, DISTRIB PARALLEL DAT, V14, P5, DOI 10.1023/A:1022883727209
   van Dongen B, 2008, LECT NOTES COMPUT SC, V5074, P450
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
   Weber B., 2012, ENABLING FLEXIBILITY
   Weidlich M, 2012, COMPUT J, V55, P1398, DOI 10.1093/comjnl/bxs014
   Wong PYH, 2008, INT CONF QUAL SOFTW, P126, DOI 10.1109/QSIC.2008.6
   Wong PYH, 2009, ELECTRON NOTES THEOR, V229, P59, DOI 10.1016/j.entcs.2009.06.029
   Wong PYH, 2008, LECT NOTES COMPUT SC, V5256, P355, DOI 10.1007/978-3-540-88194-0_22
   Yan Z., 2007, P ICWS 07, P1185
NR 44
TC 17
Z9 21
U1 3
U2 13
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2019
VL 170
BP 1
EP 26
DI 10.1016/j.scico.2018.09.007
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HF8AB
UT WOS:000454462200001
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Yallop, J
   Sheets, D
   Madhavapeddy, A
AF Yallop, Jeremy
   Sheets, David
   Madhavapeddy, Anil
TI A modular foreign function interface
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Foreign functions; Functional programming; Modularity
AB Foreign function interfaces are typically organised monolithically, tying together the specification of each foreign function with the mechanism used to make the function available in the host language. This leads to inflexible systems, where switching from one binding mechanism to another (say from dynamic binding to static code generation) often requires changing tools and rewriting large portions of code.
   We show that ML-style module systems support exactly the kind of abstraction needed to separate these two aspects of a foreign function binding, leading to declarative foreign function bindings that support switching between a wide variety of binding mechanisms - static and dynamic, synchronous and asynchronous, etc. - with no changes to the function specifications.
   Note. This is a revised and expanded version of an earlier paper, Declarative Foreign Function Binding Through Generic Programming [19]. This paper brings a greater focus on modularity, and adds new sections on error handling, and on the practicality of the approach we describe. (C) 2017 Published by Elsevier B.V.
C1 [Yallop, Jeremy; Sheets, David; Madhavapeddy, Anil] Docker Inc, San Francisco, CA 94107 USA.
   [Yallop, Jeremy; Sheets, David; Madhavapeddy, Anil] Univ Cambridge, Comp Lab, Cambridge, England.
C3 University of Cambridge
RP Yallop, J (corresponding author), Docker Inc, San Francisco, CA 94107 USA.; Yallop, J (corresponding author), Univ Cambridge, Comp Lab, Cambridge, England.
EM jeremy.yallop@cl.cam.ac.uk
RI Taheri, Zahra/AAA-6362-2022
OI Taheri, Zahra/0000-0001-8636-2798; Madhavapeddy,
   Anil/0000-0001-8954-2428
FU EPSRC [EP/K008528/1] Funding Source: UKRI
CR Altenkirch T, 2003, INT FED INFO PROC, V115, P1
   BEAZLEY DM, 1996, USENIX TCL TK WORKSH
   Benke M., 2003, Nordic Journal of Computing, V10, P265
   Blume M., 2001, ELECT NOTES THEOR CO, V59
   Carette J, 2009, J FUNCT PROGRAM, V19, P509, DOI 10.1017/S0956796809007205
   Cheney J., 2002, P 2002 ACM SIGPLAN W, P90, DOI DOI 10.1145/581690.581698
   Cheney J., 2003, TECH REP
   Danvy O, 1996, ACM T PROGR LANG SYS, V18, P730, DOI 10.1145/236114.236119
   Decome E., 2016, OCAML USERS DEV
   Furr M, 2005, ACM SIGPLAN NOTICES, V40, P62, DOI 10.1145/1064978.1065019
   Hinze R, 2006, J FUNCT PROGRAM, V16, P451, DOI 10.1017/S0956796806006022
   Kaloper-Mertinjak D., 2015, USENIX SEC S
   Karvonen V. A., 2007, ML 07
   Kondoh G, 2008, P 2008 INT S SOFTW T, P109
   Li SL, 2014, LECT NOTES COMPUT SC, V8586, P80
   Madhavapeddy A, 2013, ACM SIGPLAN NOTICES, V48, P461, DOI 10.1145/2499368.2451167
   Nordstrom B., 1990, Programming in Martin-Lof's Type Theory
   Vouillon J., 2008, ML 08
   Yallop J., 2016, DECLARATIVE FOREIGN, P198
   Yang Z., 1998, ICFP 98
NR 20
TC 4
Z9 6
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2018
VL 164
SI SI
BP 82
EP 97
DI 10.1016/j.scico.2017.04.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GR5WX
UT WOS:000442713700007
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Tamrawi, A
   Kothari, S
AF Tamrawi, Ahmed
   Kothari, Suresh
TI Projected control graph for computing relevant program behaviors
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program behaviors; Software analysis; Software verification; Software
   security; Software safety
ID PATH
AB Many software engineering tasks require analysis and verification of all behaviors relevant to the task. For example, all relevant behaviors must be analyzed to verify a safety or security property. An efficient algorithm must compute the relevant behaviors directly without computing all the behaviors. This is crucial in practice because it is computationally intractable if one were to compute all behaviors to find the subset of relevant behaviors. We present a mathematical foundation to define relevant behaviors and introduce the Projected Control Graph (PCG) as an abstraction to directly compute the relevant behaviors. We developed a PCG toolbox to facilitate the use of the PCG for program comprehension, analysis, and verification. The toolbox provides: (1) an interactive visual analysis mechanism, and (2) APIs to construct and use PCGs in automated analyses. The toolbox is designed to support multiple programming languages.
   Using the toolbox APIs. we conducted a verification case study of the Linux kernel to assess the practical benefits of using the PCG. The study shows that the PCG-based verification is faster and can verify 99% of 66,609 instances compared to the 66% instances verified by the formal verification tool used by the Linux Driver Verification (LDV) organization. This study has revealed bugs missed by the formal verification tool. The second case study is an interactive use of the PCG Smart View to detect side-channel vulnerabilities in Java bytecode. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Tamrawi, Ahmed] EnSoft Corp, Ames, IA 50010 USA.
   [Kothari, Suresh] Iowa State Univ, Dept Elect & Comp Engn, Ames, IA 50011 USA.
C3 Iowa State University
RP Tamrawi, A (corresponding author), EnSoft Corp, Ames, IA 50010 USA.
EM ahmedtamrawi@ensoftcorp.com; kothari@iastate.edu
FU DARPA [FA8750-12-2-0126]
FX This material is based on research sponsored by DARPA under agreement
   number FA8750-12-2-0126. The U.S. Government is authorized to reproduce
   and distribute reprints for Governmental purposes notwithstanding any
   copyright notation thereon. We thank our colleagues at the
   Knowledge-Centric Software (KCS) Engineering Lab at Iowa State
   University and the colleagues at EnSoft for helping us with our
   research. We are extremely grateful to the reviewers for their
   thoughtful and constructive reviews that have resulted in significant
   improvements in the paper. Dr. Kothari is the founding President of
   EnSoft.
CR AKERS SB, 1978, IEEE T COMPUT, V27, P509, DOI 10.1109/TC.1978.1675141
   [Anonymous], DARPABAA1460 STAC
   Ball T, 2001, ACM SIGPLAN NOTICES, P97
   Beyer Dirk, 2007, International Journal on Software Tools for Technology Transfer, V9, P505, DOI 10.1007/s10009-007-0044-z
   Beyer D., 2014, Tools and Algorithms for the Con- struction and Analysis of Systems, P373
   Beyer D, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P326, DOI 10.1145/2950290.2950351
   Brumley D, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE 12TH USENIX SECURITY SYMPOSIUM, P1
   Carter L, 2003, ACM SIGPLAN NOTICES, V38, P106, DOI 10.1145/640128.604141
   Cho H.K., 2013, Proc. of the 2013 International Symposium on Code Generation and Optimization, P1
   Choi Jong-Deok, 1991, P 18 ACM SIGPLANSIGA, P55, DOI DOI 10.1145/99583.99594
   Cook S. A., 1971, Proceedings of the 3rd annual ACM symposium on theory of computing, P151
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Deering T, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P588, DOI 10.1145/2591062.2591065
   DEMILLO RA, 1979, COMMUN ACM, V22, P271, DOI 10.1145/359104.359106
   Dillig I, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P270, DOI 10.1145/1375581.1375615
   EnSoft Corp, ATL PLATF
   Futoransky A., Timing attacks for recovering private entries from database engines
   Hell P., 2004, Graphs and Homomorphisms, V28
   Kothari S, 2017, WINT SIMUL C PROC, P1431, DOI 10.1109/WSC.2017.8247886
   Kothawade S.N., 2016, 2016 IEEE 1 INT C PO, P1, DOI DOI 10.1109/ICPEICES.2016.7853281
   Navabi A., 10006 PURD U
   Neginhal S, 2006, PROC IEEE INT CONF S, P279
   Ngo M.N., 2007, Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering, P215
   Perrin C., THE CIA TRIAD
   Ramalingam G., 2002, SPARSE EVALUATION RE, V277
   Ramanathan MK, 2007, PROC INT CONF SOFTW, P240
   Sui Yulei, 2011, P 9 AS S PROGR LANG, P155, DOI DOI 10.1007/978-3-642-25318-8
   Tamrawi A., EVENT FLOW GRAPHS EF
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Vojdani V, 2016, IEEE INT CONF AUTOM, P391, DOI 10.1145/2970276.2970337
   Wei T, 2007, LECT NOTES COMPUT SC, V4634, P170
   Xu ZX, 2008, INT CONF QUAL SOFTW, P412, DOI 10.1109/QSIC.2008.12
NR 32
TC 2
Z9 4
U1 0
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2018
VL 163
BP 93
EP 114
DI 10.1016/j.scico.2018.04.003
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GN0MN
UT WOS:000438662800006
OA hybrid
DA 2024-07-18
ER

PT J
AU Leske, M
   Chis, A
   Nierstrasz, O
AF Leske, Max
   Chis, Andrei
   Nierstrasz, Oscar
TI Improving live debugging of concurrent threads through thread histories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrency; Debugging; Promises; Smalltalk; Domain-specific tools
AB Concurrency issues are inherently harder to identify and fix than issues in sequential programs, due to aspects like indeterminate order of access to shared resources and thread synchronisation. Live debuggers are often used by developers to gain insights into the behaviour of concurrent programs by exploring the call stacks of threads. Nevertheless, contemporary live debuggers for concurrent programs are usually sequential debuggers augmented with the ability to display different threads in isolation. To these debuggers every thread call stack begins with a designated start routine and the calls that led to the creation of the thread are not visible, as they are part of a different thread. This requires developers to manually link stack traces belonging to related but distinct threads, adding another burden to the already difficult act of debugging concurrent programs. To improve debugging of concurrent programs we address the problem of incomplete call stacks in debuggers through a thread and debugger model that enables live debugging of child threads within the context of their parent threads. The proposed debugger operates on a virtual thread that merges together multiple relevant threads. To better understand the features of debuggers for concurrent programs we present an in-depth discussion of the concurrency related features in current live debuggers. We test the applicability of the proposed model by instantiating it for simple threads, local and remote promises, and a remote object-oriented database. Starting from these use cases we further discuss implementation details ensuring a practical approach. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Leske, Max; Nierstrasz, Oscar] Univ Bern, Software Composit Grp, Bern, Switzerland.
   [Chis, Andrei] Feenk GmbH, Wabern, Switzerland.
C3 University of Bern
RP Chis, A (corresponding author), Feenk GmbH, Wabern, Switzerland.
EM maxleske@gmail.com; chisvasileandrei@gmail.com
OI Nierstrasz, Oscar/0000-0002-9975-9791
FU Swiss National Science Foundation (SNSF) [200020-162352]
FX We gratefully acknowledge the financial support of the Swiss National
   Science Foundation for the project "Agile Software Analysis" (SNSF
   project No. 200020-162352, Jan. 1, 2016-Dec. 30, 2018).
CR [Anonymous], 1989, ACM COMPUT SURV, V21, P593, DOI DOI 10.1145/76894.76897
   [Anonymous], 1990, Software testing techniques {
   Baker H. G.  Jr., 1977, SIGPLAN Notices, V12, P55, DOI 10.1145/872734.806932
   Balzer R.M., 1969, Proceeding of the May 14-16, 1969, spring joint computer conference, AFIPS '69 (Spring), P567, DOI DOI 10.1145/1476793.1476881
   Black A.P., 2009, PHARO EXAMPLE
   Bottcher T., 2002, DRAFT P 14 INT WORKS, P129
   Bouraqadi N., 2013, J OBJECT TECHNOL, V12, P22, DOI [10.5381/jot.2013.12.1.a2,2:1-30, DOI 10.5381/JOT.2013.12.1.A2,2:1-30]
   Bouraqadi N., 2015, J OBJECT TECHNOLOGY, P36
   CARGILL TA, 1986, SIGPLAN NOTICES, V21, P350, DOI 10.1145/960112.28733
   Chen P., 2014, DEBUGGING ASYNCHRONO
   Chis A, 2015, COMPUT LANG SYST STR, V44, P89, DOI 10.1016/j.cl.2015.08.005
   Deutsch L. Peter, 1984, P 11 ACM SIGACT SIGP, P297, DOI [10.1145/800017.800542, DOI 10.1145/800017.800542]
   Ditzel D. R., 1982, Computer Architecture News, V10, P48, DOI 10.1145/964750.801825
   Friedman D. P., 1977, SIGPLAN Notices, V12, P41, DOI 10.1145/390017.808310
   Geels D., 2006, Proceedings of the annual conference on USENIX '06 Annual Technical Conference, ATEC '06, (Berkeley, CA, USA), P27
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Hudak P, 2007, HOPL III, P12, DOI DOI 10.1145/1238844.1238856
   *ISO, 2009, 9241100 ISO, P1, DOI DOI 10.1109/IEEESTD.2009.5393893
   KOWALSKI RA, 1988, COMMUN ACM, V31, P38, DOI 10.1145/35043.35046
   LAYER DK, 1991, COMMUN ACM, V34, P48, DOI 10.1145/114669.114674
   Leske M., 2016, P INT WORKSH SMALLT, V18
   Leske M, 2016, COMPANION PROCEEDINGS OF THE 2016 ACM SIGPLAN INTERNATIONAL CONFERENCE ON SYSTEMS, PROGRAMMING, LANGUAGES AND APPLICATIONS: SOFTWARE FOR HUMANITY (SPLASH COMPANION'16), P61, DOI 10.1145/2984043.2998544
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P260
   Marr S, 2012, LECT NOTES COMPUT SC, V7304, P171, DOI 10.1007/978-3-642-30561-0_13
   Miranda E., 2014, P INT WORKSH SMALLT
   Miranda E., 1999, TECHNICAL REPORT
   Miranda E, 2015, ACM SIGPLAN NOTICES, V50, P93, DOI 10.1145/2754169.2754186
   Papoulias  N., 2013, THESIS
   PENNINGTON N, 1987, COGNITIVE PSYCHOL, V19, P295, DOI 10.1016/0010-0285(87)90007-7
   Pothier Guillaume, 2007, SIGPLAN Notices, V42, P535, DOI 10.1145/1297105.1297067
   Saito Yasushi., 2005, Proceedings of the Sixth International Symposium on Automated Analysis-Driven Debugging, AADEBUG'05, page, P69, DOI DOI 10.1145/1085130.1085139
   Schulz D., 2000, ISSTA 00
   Srinivas Kavitha., 2005, Proceedings of the 10th European Soft- ware Engineering Conference Held Jointly with 13th ACM SIGSOFT Inter- national Symposium on Foundations of Software Engineering, ESEC/FSE-13, P136
   Sung M, 2002, INFORM PROCESS LETT, V84, P221, DOI 10.1016/S0020-0190(02)00286-7
   Sussman G. J., 1998, Higher-Order and Symbolic Computation, V11, P399, DOI 10.1023/A:1010079421970
   Utter P.S., 1989, ADV PARALLEL DEBUGGE, V18
   Zhang L., 2007, Proceedings of the 5th international symposium on Principles and practice of programming in Java, PPPJ '07, P175
NR 38
TC 1
Z9 1
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2018
VL 161
SI SI
BP 122
EP 148
DI 10.1016/j.scico.2017.10.005
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI7ZZ
UT WOS:000434742900008
OA Bronze
DA 2024-07-18
ER

PT J
AU Banach, R
AF Banach, Richard
TI Modelling, formal refinement and partitioning strategies for a small
   aircraft fuel pump system in Hybrid Event-B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cyberphysical systems; Aircraft fuel systems; Hybrid Event-B;
   Refinement; Proof obligations
ID SPECIFICATION; VERIFICATION
AB A case study centred on a fuel supply system for a small aircraft is presented in Hybrid Event-B, an extension of conventional Event-B that allows for the modelling and verification of hybrid and cyberphysical systems exhibiting nontrivial continuous behaviour. In contrast to many such case studies, which concentrate predominantly on timing issues, the focus in the present work is on nontrivial physical behaviour, and on the effect that this has on various refinement and partition strategies. More liberal proof obligations are developed to add flexibility to the decomposition process. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Banach, Richard] Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
C3 University of Manchester
RP Banach, R (corresponding author), Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
EM richard.banach@manchester.ac.uk
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R., 2015, PRINCIPLES CYBERPHYS
   [Anonymous], 2009, VERIFICATION CONTROL
   [Anonymous], 1993, Hybrid Systems, DOI [DOI 10.1007/3-540-57318-6_30, DOI 10.1007/3-540, DOI 10.1007/3-540-57318-6, 10.1007/3-540-57318-6_30]
   [Anonymous], TUM19903
   [Anonymous], 2008, SUMMIT REPORT CYBERP
   [Anonymous], 2010, LOGICAL ANAL HYBRID
   [Anonymous], 1996, HYBRID I O AUTOMATA
   [Anonymous], LNCS
   Audemard G, 2005, ELECTRON NOTES THEOR, V119, P17, DOI 10.1016/j.entcs.2004.12.022
   Back R.-J., 2001, Nordic Journal of Computing, V8, P2
   Back R.-J., 1998, Refinement Calculus
   BACK RJR, 1989, LECT NOTES COMPUT SC, V375, P115
   Back RJR, 1994, LECT NOTES COMPUT SC, V836, P367
   Banach Richard, 2013, Theoretical Aspects of Computing - ICTAC 2013. 10th International Colloquium. Proceedings: LNCS 8049, P76, DOI 10.1007/978-3-642-39718-9_5
   Banach Richard, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P37, DOI 10.1007/978-3-642-39698-4_3
   Banach R, 2017, INT J SOFTW TOOLS TE, V19, P205, DOI 10.1007/s10009-015-0409-7
   Banach R, 2017, SCI COMPUT PROGRAM, V139, P1, DOI 10.1016/j.scico.2016.12.003
   Banach R, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P65, DOI 10.1109/TASE.2016.16
   Banach R, 2015, SCI COMPUT PROGRAM, V105, P92, DOI 10.1016/j.scico.2015.02.003
   Barolli L, 2011, J AMB INTEL HUM COMP, V2, P249, DOI 10.1007/s12652-011-0062-2
   Bender K, 2002, LECT NOTES CONTR INF, V279, P37
   Carloni LP, 2006, FOUND TRENDS ELECTRO, V1, P1, DOI 10.1561/1000000001
   Chaochen Z., 1995, International Hybrid Systems Workshop, P511
   Cimatti A, 2009, LECT NOTES COMPUT SC, V5643, P188, DOI 10.1007/978-3-642-02658-4_17
   Clarke E, 2003, LECT NOTES COMPUT SC, V2619, P192
   Deshpande A., 1997, Hybrid Systems IV, P113, DOI 10.1007/BFb0031558
   Frehse G., 2011, COMPUTER AIDED VERIF, P379, DOI [DOI 10.1007/978-3-642-22110-1, 10.1007/978-3-642-22110-1_30]
   Friesen V, 1998, LECT NOTES COMPUT SC, V1493, P328, DOI 10.1007/BFb0056042
   Friesen V, 1999, OBJECT ORIENTED TECH, P1
   Geisberger E., 2015, Living in a networked world: Integrated research agenda Cyber-Physical Systems (agendaCPS)
   Grosu R, 1998, LECT NOTES COMPUT SC, V1486, P75, DOI 10.1007/BFb0055338
   Hallerstede Stefan, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P223, DOI 10.1007/978-3-642-30885-7_16
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Jifeng H., 1994, CLASSICAL MIND ESSAY, P171
   Kesten Y, 2000, ACTA INFORM, V36, P837, DOI 10.1007/s002360050177
   Krob Marchal, 2013, PROC CSDM 13, P97
   Lee EdwardA., 2015, INTRO EMBEDDED SYSTE, VSecond
   Lynch N, 2003, INFORM COMPUT, V185, P105, DOI 10.1016/S0890-5401(03)00067-1
   Manna Z., 1993, Hybrid Systems, P4
   Mosterman P., COMMUNICATION
   Sztipanovits Janos, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, DOI 10.1007/978-3-642-21437-0_1
   US Department of Transportation, 2012, AV MAINT TECHN HDB A
   Voisin L, 2014, LECT NOTES COMPUT SC, V8477, P1, DOI 10.1007/978-3-662-43652-3_1
   Willems J., 2007, RUBERTI LECT
NR 48
TC 1
Z9 1
U1 0
U2 12
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2018
VL 156
BP 21
EP 44
DI 10.1016/j.scico.2017.12.011
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GA7AE
UT WOS:000428486100002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Dupree, JL
   Lank, E
   Berry, DM
AF Dupree, Janna-Lynn (Weber)
   Lank, Edward
   Berry, Daniel M.
TI A case study of using grounded analysis as a requirement engineering
   method: Identifying personas that specify privacy and security tool
   users
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Interviews; Requirements analysis; Security; User categorization;
   User-space identification
AB This paper explains the importance (1) of full user-space identification with categorization in requirements engineering (RE) and of ensuring that the categorization is a partition of the user space, (2) of the creation and application of user-space-covering personas in RE, (3) of the use of grounded analysis to do RE to produce a specification as a grounded theory, and (4) of privacy and security features in computer-based systems. Then it gives the steps of a grounded analysis method for doing user-space identification with categorization and producing personas as a grounded theory that is describing the classes of users for a computer-based system. The paper summarizes a case study of an iterative application of this method to arrive at a set of user-space-covering personas for privacy and security features in computer-based systems, and it shows how these personas can be used to inform RE for these features. The full case study and the descriptions of the personas are found in the appendices. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Dupree, Janna-Lynn (Weber); Lank, Edward; Berry, Daniel M.] Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Berry, DM (corresponding author), Univ Waterloo, David R Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM jannaweber@gmail.com; lank@uwaterloo.ca; dberry@uwaterloo.ca
FU Canadian Natural Sciences and Engineering Research Council
   (NSERC)-Scotia Bank Industrial Research Chair [NSERC-IRCPJ365473-05];
   NSERC Discovery grant [NSERC-RGPIN327527-12]; Networks of Centres of
   Excellence of Canada Grant for Graphics, Animation, and New Media (GRAND
   NCE); Canadian NSERC Discovery grant [NSERC-RGPIN227055-09]; NSERC-SB
   IRC
FX Janna-Lynn Weber's work was supported in part by a Canadian Natural
   Sciences and Engineering Research Council (NSERC)-Scotia Bank Industrial
   Research Chair NSERC-IRCPJ365473-05 (hereinafter, the NSERC-SB IRC).
   Edward Lank's work was supported in parts by NSERC Discovery grant
   NSERC-RGPIN327527-12 and by the Networks of Centres of Excellence of
   Canada Grant for Graphics, Animation, and New Media (GRAND NCE). Daniel
   Berry's work was supported in parts by a Canadian NSERC Discovery grant
   NSERC-RGPIN227055-09 and by the NSERC-SB IRC. We thank the participants
   in the study for taking the time to be interviewed. We thank the
   reviewers for their comments on a previous version of this paper, in
   particular for the observation reported at the end of the main part of
   Section C.1.
CR A P.T., 2005, 2005 LATIN AM C HUMA, P277, DOI [DOI 10.1145/1111360.1111388, 10.1145/1111360.1111388]
   Ackerman M., 1999, Proceedings of the 1st ACM conference on electronic commerce, EC '99, P1, DOI [10.1145/336992.336995, DOI 10.1145/336992.336995]
   Acquisti A, 2006, LECT NOTES COMPUT SC, V4258, P36
   Adams A, 1999, COMMUN ACM, V42, P41, DOI 10.1145/322796.322806
   Alexander I, 2004, IEEE SOFTWARE, V21, P23, DOI 10.1109/MS.2004.1259199
   Alexander I. F., 2002, Writing Better Requirements
   Anderson R., 2008, Security engineering, V2nd
   [Anonymous], 1998, Contextual design: defining customer-centered systems
   [Anonymous], 1990, Basics of qualitative research
   [Anonymous], 1990, ARE YOUR LIGHTS FIGU
   Anvari F, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P263, DOI 10.1109/ICSE.2015.155
   Aoyama M, 2005, 13TH IEEE INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P85, DOI 10.1109/RE.2005.50
   Aoyama M, 2007, INT REQUIR ENG CONF, P185, DOI 10.1109/RE.2007.50
   Atzeni A., 2011, 2011 Sixth International Conference on Availability, Reliability and Security, P722, DOI 10.1109/ARES.2011.115
   Axelsson L. -E., 2006, INT J PUBLIC INF SYS, V2006
   Ballejos LC, 2008, REQUIR ENG, V13, P281, DOI 10.1007/s00766-008-0069-1
   Barre J., 2014, P 32 ANN ACM C HUM F
   Berendt B, 2005, COMMUN ACM, V48, P101, DOI 10.1145/1053291.1053295
   Berry D., 2014, COMPUTING HDB, V1
   Berry D. M., 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P311, DOI 10.1109/RE.2010.44
   Berry DM, 2013, GROUNDED THEORY REV, V12, P56
   Boehm B, 2000, COMPUTER, V33, P99, DOI 10.1109/2.869384
   Booch G., 2007, Object-Oriented Analysis and Design with Applications, Vthird
   Braun V., 2006, QUAL RES PSYCHOL, V3, P77, DOI [DOI 10.1191/1478088706QP063OA, 10.1191/1478088706qp063oa]
   Bray I.K., 2002, INTRO REQUIREMENTS E
   Brower RS, 2008, PUBLIC ADM PUBLIC PO, V134, P823
   Bryson J.M., 2004, PUBLIC MANAGEMENT RE, V6, P21, DOI [DOI 10.1080/14719030410001675722, 10.1080/14719030410001675722]
   Castro J. W., 2008, P 1 WORKSH INT US EV
   Castro JW, 2008, MEX INT CONF ARTIF I, P104, DOI 10.1109/ENC.2008.40
   Chang Y., 2008, Proceedings of the 5th Nordic Conference on Human-Computer Interaction: Building Bridges (NordiCHI 08), P439, DOI [DOI 10.1145/1463160.1463214, https://doi.org/10.1145/1463160.1463214]
   Chapman Christopher N., 2008, Proceedings of the Human Factors and Ergonomics Society. 52nd Annual Meeting, P1107, DOI 10.1518/107118108X349214
   Christel M.G., 1992, Issues in requirements elicitation
   Cleland-Huang J, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P364, DOI 10.1145/2591062.2591154
   Cleland-Huang J, 2014, IEEE SOFTWARE, V31, P28, DOI 10.1109/MS.2014.85
   Cleland-Huang J, 2013, IEEE SOFTWARE, V30, P18, DOI 10.1109/MS.2013.80
   Cockburn A, 2001, Writing effective use cases, the crystal collection for software professionals
   Consolvo I. E., 2005, P SIGCHI C HUM FACT, P81, DOI [DOI 10.1145/1054972.1054985, 10.1145/1054972.1054985]
   Conti G., 2007, SOUPS, V7, P112, DOI DOI 10.1145/1280680.1280695
   Cooper A., 2003, About Face 3: The Essentials of Interaction Design
   Cooper A., 2004, The Inmates Are Running the Asylum: Why High Tech Products Drive Us Crazy and How to Restore the Sanity
   DeVries R., TECHNICAL REPORT
   Dick B., 2005, TECHNICAL REPORT
   Dillon A, 1996, INT J HUM-COMPUT ST, V45, P619, DOI 10.1006/ijhc.1996.0071
   Dix A., 2003, HUM FAC ER
   Dotan A, 2009, LECT NOTES COMPUT SC, V5727, P497, DOI 10.1007/978-3-642-03658-3_54
   Dourish P, 2006, HUM-COMPUT INTERACT, V21, P319, DOI 10.1207/s15327051hci2103_2
   Dourish P, 2004, PERS UBIQUIT COMPUT, V8, P391, DOI 10.1007/s00779-004-0308-5
   Dunphy P., 2008, P 4 S USABLE PRIVACY, P24
   Dupree JL, 2016, 34TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, CHI 2016, P5228, DOI 10.1145/2858036.2858214
   Faily S., 2010, P 24 BRIT HCI GROUP, P113
   Faily S, 2011, 29TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P2267
   Fainchtein I., 2002, THESIS
   Fames S., 1992, SOURCE BOOK CREATIVE
   Feiertag R. J., 1979, AFIPS Conference Proceedings, vol.48. 1979 National Computer Conference, P329
   Ferreira B, 2015, 2015 29TH BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, P80, DOI 10.1109/SBES.2015.14
   Florencio D., 2007, Proceedings of the 16th international conference on World Wide Web-WWW'07, P657, DOI DOI 10.1145/1242572.1242661
   Friedman Batya., 2002, CHI 02 EXTENDED ABST, P746, DOI DOI 10.1145/506443.506577
   Gasser Morrie., 1988, Building a Secure Computer System
   Gause D.C., 1989, EXPLORING REQUIREMEN
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Glaser Barney G., 1992, Basic of grounded theory analysis: emergence vs. forcing
   Glinz M, 2007, IEEE SOFTWARE, V24, P18, DOI 10.1109/MS.2007.42
   Goguen J., 1994, REQUIREMENTS ENG SOC
   Greenberg S, 2008, CHI 2008: 26TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS VOLS 1 AND 2, CONFERENCE PROCEEDINGS, P111
   Grudin J., 2002, PDC 2002. Proceedings of the Participatory Design Conference, P144
   Hazzan O, 2005, COMPUTER, V38, P39, DOI 10.1109/MC.2005.200
   Hollis B, 2013, IEEE SOFTWARE, V30, P78, DOI 10.1109/MS.2012.171
   Imperva, 2010, IMP WHIT PAP
   King J., 2014, P WORKSH PRIV PERS S
   Kotonya G., 1998, Requirements engineering: processes and techniques
   Kulak D., 2004, Use cases: requirements in context
   Kumaraguru P., 2005, CMUISRI5138
   Lauesen S., 2005, USER INTERFACE DESIG
   Laueson S., 2002, SOFTWARE REQUIREMENT
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Long F., 2009, P IRISH ERGONOMICS S, P1
   MACIASZEK LA, 2005, REQUIREMENTS ANAL SY
   Martin D, 2001, ECSCW 2001: PROCEEDINGS OF THE SEVENTH EUROPEAN CONFERENCE ON COMPUTER SUPPORTED COOPERATIVE WORK, P39
   Mich L, 2005, REQUIR ENG, V10, P262, DOI 10.1007/s00766-005-0008-3
   Miller G., 2006, TECHNICAL REPORT
   Mowbray M., 2009, P 4 INT ICST C COMMU
   Mulder S., 2006, USER IS ALWAYS RIGHT
   Nielsen L, 2014, 32ND ANNUAL ACM CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS (CHI 2014), P1665, DOI 10.1145/2556288.2557080
   Pacheco C, 2007, LECT NOTES COMPUT SC, V4495, P370
   Pohl K, 2010, REQUIREMENTS ENGINEERING: FUNDAMENTALS, PRINCIPLES, AND TECHNIQUES, P1, DOI 10.1007/978-3-642-12578-2
   Porter C, 2014, INT REQUIR ENG CONF, P374, DOI 10.1109/RE.2014.6912288
   Powell S., 2007, IADIS INT J COMPUTER, V2, P82
   Pruitt J., 2006, The Persona Lifecycle, DOI [DOI 10.1016/B9780125662512/500034, 10.1016/b978-012566251-2/50003-4, DOI 10.1016/B978-012566251-2/50003-4]
   Ramos I, 2005, INFORM SOFTWARE TECH, V47, P479, DOI 10.1016/j.infsof.2004.09.014
   Razali Rozilawati, 2011, Journal of Theoretical and Applied Information Technology, V33, P250
   RITTEL HWJ, 1973, POLICY SCI, V4, P155, DOI 10.1007/BF01405730
   Robertson S, 2001, INT J HUM-COMPUT ST, V55, P405, DOI 10.1006/ijhc.2001.0481
   ROBERTSON S., 2000, PROJECT SOCIOLOGY ID
   Robertson S., 2006, Mastering the Requirements Process
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Sakhnini V, 2012, REQUIR ENG, V17, P171, DOI 10.1007/s00766-011-0133-0
   Sharp H., 1999, Proceedings. Tenth International Workshop on Database and Expert Systems Applications. DEXA 99, P387, DOI 10.1109/DEXA.1999.795198
   Sheehan KB, 2002, INFORM SOC, V18, P21, DOI 10.1080/01972240252818207
   Sommerville I, 1998, THIRD INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING - PROCEEDINGS, P74, DOI 10.1109/ICRE.1998.667811
   Sommerville I., 1993, 1993 P IEEE INT S RE, P165
   Sutcliffe A, 2014, INT REQUIR ENG CONF, P173, DOI 10.1109/RE.2014.6912259
   van Lamsweerde A., 2009, REQUIREMENTS ENG
   Viller S, 1999, IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P6, DOI 10.1109/ISRE.1999.777980
   WALSHAM G, 1995, EUR J INFORM SYST, V4, P74, DOI 10.1057/ejis.1995.9
   WEBER J., 2010, THESIS
   Wessberg M., 2014, REQUIR ENG, V2014
   Wood J., 1995, Joint Application Development
   Wurfel D., 2014, 142 TR FB DEP COMP S
   Zhijun Zhang, 1999, Empirical Software Engineering, V4, P43, DOI 10.1023/A:1009803214692
NR 110
TC 7
Z9 8
U1 1
U2 11
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2018
VL 152
BP 1
EP 37
DI 10.1016/j.scico.2017.08.010
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA FR3OJ
UT WOS:000418975700001
DA 2024-07-18
ER

PT J
AU Selinger, P
AF Selinger, Peter
TI A finite alternation result for reversible boolean circuits
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reversible boolean circuits; Alternation depth; Permutations; Circuit
   synthesis
AB We say that a reversible boolean function on n bits has alternation depth d if it can be written as the sequential composition of d reversible boolean functions, each of which acts only on the top n - 1 bits or on the bottom n - 1 bits. Moreover, if the functions on n 1 bits are even, we speak of even alternation depth. We show that every even reversible boolean function of n >= 4 bits has alternation depth at most 9 and even alternation depth at most 13. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Selinger, Peter] Dalhousie Univ, Dept Math & Stat, Halifax, NS, Canada.
C3 Dalhousie University
RP Selinger, P (corresponding author), Dalhousie Univ, Dept Math & Stat, Halifax, NS, Canada.
EM selinger@mathstat.dal.ca
OI Selinger, Peter/0000-0003-3161-856X
FU Natural Sciences and Engineering Research Council of Canada (NSERC); Air
   Force Office of Scientific Research, Air Force Material Command, USAF
   [FA9550-15-1-0331]
FX This work was supported by the Natural Sciences and Engineering Research
   Council of Canada (NSERC) and by the Air Force Office of Scientific
   Research, Air Force Material Command, USAF under Award No.
   FA9550-15-1-0331. This work was done in part while the author was
   visiting the Simons Institute for the Theory of Computing.
CR [Anonymous], 9732 I MATH LUM
   De Vos A, 2002, J PHYS A-MATH GEN, V35, P7063, DOI 10.1088/0305-4470/35/33/307
   Saeedi M, 2013, ACM COMPUT SURV, V45, DOI 10.1145/2431211.2431220
   Selinger P., 2016, PERMUTATION GAME SOF
   Toffoli T., 1980, Automata, Languages and Programming, Seventh Colloquium, P632
NR 5
TC 2
Z9 3
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2018
VL 151
SI SI
BP 2
EP 17
DI 10.1016/j.scico.2017.08.011
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FP5KV
UT WOS:000417659300002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Abid, R
   Salaün, G
   De Palma, N
AF Abid, Rim
   Salaun, Gwen
   De Palma, Noel
TI Asynchronous synthesis techniques for coordinating autonomic managers in
   the cloud
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Asynchronous coordination; Autonomic managers; Distributed cloud
   applications; Synthesis techniques
ID MODEL
AB Cloud computing allows the delivery of on-demand computing resources over the Internet on a pay-for-use basis. From a technical point of view, cloud applications usually consist of several software components deployed on remote virtual machines. Managing such applications is a challenging problem because manual administration is no longer realistic for these complex distributed systems. Thus, autonomic computing is a promising solution for monitoring and updating these applications automatically. This is achieved through the automation of administration functions and the use of control loops called autonomic managers. An autonomic manager observes the environment, detects changes, and reconfigures dynamically the application. Multiple autonomic managers can be deployed in the same system and must make consistent decisions. Using them without coordination may lead to inconsistencies and error-prone situations. In this article, we first present a simple language for expressing coordination constraints given a set of autonomic managers. Second, given a coordination expression written with that language, we propose new synthesis techniques for automatically generating an asynchronous controller. These synthesis techniques work in two steps by successively generating a model of the controller and a Java object corresponding to this model. This Java code is finally used for deploying the generated controller. As far as evaluation is concerned, we validated our approach by using it for coordinating real-world cloud applications. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Abid, Rim; Salaun, Gwen; De Palma, Noel] Univ Grenoble Alpes, CNRS, LIG, Grenoble, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS)
RP Salaün, G (corresponding author), Univ Grenoble Alpes, CNRS, LIG, Grenoble, France.
EM gwen.salaun@inria.fr
CR Abid Rim, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P178, DOI 10.1007/978-3-319-02444-8_14
   Abid R, 2016, LECT NOTES COMPUT SC, V9539, P48, DOI 10.1007/978-3-319-28934-2_3
   Akroun Lakhdar, 2016, Model-Checking Software. 23rd International Symposium, SPIN 2016, co-located with ETAPS 2016. Proceedings: LNCS 9641, P1, DOI 10.1007/978-3-319-32582-8_1
   [Anonymous], 2014, P 17 INT ACM SIGS S
   [Anonymous], 1979, INTRO AUTOMATA THEOR
   Baude F, 2015, SOFTWARE PRACT EXPER, V45, P1189, DOI 10.1002/spe.2270
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   Brogi A, 2015, CEUR WORKSHOP P, P191
   Champelovier D., 2011, Reference Manual of the LOTOS NT to LOTOS Translator-Version 5.4
   CharronBost B, 1996, DISTRIB COMPUT, V9, P173, DOI 10.1007/s004460050018
   Clarke E.M., 2012, LECT NOTES COMPUT SC, V7682
   de Oliveira Frederico Alvares  Jr., 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P29, DOI 10.1007/978-3-642-30829-1_3
   de Oliveira FA, 2013, INT CONF SELF SELF, P179, DOI 10.1109/SASO.2013.27
   Delaval G, 2010, LCTES 10-PROCEEDINGS OF THE ACM SIGPLAN/SIGBED 2010 CONFERENCE ON LANGUAGES, COMPILERS, & TOOLS FOR EMBEDDED SYSTEMS, P57
   Di Cosmo R, 2014, INFORM COMPUT, V239, P100, DOI 10.1016/j.ic.2014.11.002
   Durán F, 2016, J SYST SOFTWARE, V122, P524, DOI 10.1016/j.jss.2015.09.020
   Etchevers X., 2014, P SAC 2014, P1331
   Fischer J, 2012, ACM SIGPLAN NOTICES, V47, P263, DOI 10.1145/2345156.2254096
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   Gueye Soguy M. K., 2013, Operating Systems Review, V47, P18
   Gueye SMK, 2012, INT CONF UTIL CLOUD, P353, DOI 10.1109/UCC.2012.57
   Hoare CAR., 1985, Communicating Sequential Processes
   Krause C, 2011, SCI COMPUT PROGRAM, V76, P23, DOI 10.1016/j.scico.2009.10.006
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   Milner R., 1989, Communication and concurrency
   Parashar M, 2006, CLUSTER COMPUT, V9, P161, DOI 10.1007/s10586-006-7561-5
   RAMADGE PJG, 1989, P IEEE, V77, P81, DOI 10.1109/5.21072
   Seboui Amine Belhaj, 2011, International Journal of Critical Computer-Based Systems, V2, P246, DOI 10.1504/IJCCBS.2011.042328
   WONHAM WM, 1987, SIAM J CONTROL OPTIM, V25, P637, DOI 10.1137/0325036
NR 29
TC 6
Z9 6
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2017
VL 146
SI SI
BP 87
EP 103
DI 10.1016/j.scico.2017.05.005
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FD2ZE
UT WOS:000407402500005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Códova-Esparza, DM
   Terven, JR
   Jiménez-Hernández, H
   Herrera-Navarro, AM
AF Cordova-Esparza, Diana-Margarita
   Terven, Juan R.
   Jimenez-Hernandez, Hugo
   Herrera-Navarro, Ana-Marcela
TI A multiple camera calibration and point cloud fusion tool for Kinect V2
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Kinect V2; Camera calibration; Toolbox
ID DEPTH CAMERAS; REAL-TIME; OBJECTS
AB This paper introduces a tool for calibrating multiple Kinect V2 sensors. To achieve the calibration, at least three acquisitions are needed from each camera. The method uses the Kinect's coordinate mapping capabilities between the sensors to register data between camera, depth, and color spaces. The method uses a novel approach where it obtains multiple 3D points matches between adjacent sensors, and use them to estimating the camera parameters. Once the cameras are calibrated, the tool can perform point cloud fusion transforming all the 3D points to a single reference. We tested the system with a network of four Kinect V2 sensors and present calibration results. The tool is implemented in MATLAB using the Kinect for Windows SDK 2.0. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Cordova-Esparza, Diana-Margarita; Jimenez-Hernandez, Hugo] CIDESI, Av Playa Pie Cuesta 702, Desarrollo San Pablo 76130, Queretaro, Mexico.
   [Terven, Juan R.] ITM, Corsario 1 203, Mazatlan 82070, Sin, Mexico.
   [Herrera-Navarro, Ana-Marcela] UAQ, Fac Informat, Av Ciencias S-N,Campus Juriguilla, Queretaro 76230, Qro, Mexico.
C3 Universidad Autonoma de Queretaro
RP Terven, JR (corresponding author), ITM, Corsario 1 203, Mazatlan 82070, Sin, Mexico.
EM j.r.terven@ieee.org
RI Cordova, Diana/GQZ-7591-2022; Jiménez-Hernández, Hugo/E-8276-2013;
   Jiménez-Hernández, Hugo/GWC-8171-2022; Terven, Juan Ramon/IAN-0006-2023
OI Cordova, Diana/0000-0002-5657-7752; Jiménez-Hernández,
   Hugo/0000-0003-0827-6645; Jiménez-Hernández, Hugo/0000-0003-0827-6645; 
FU CONACYT [290941]; CIDESI
FX This work was supported by CONACYT through PhD scholarships Grant
   290941. We also want to thank to CIDESI for providing the facilities and
   support during the development of this project.
CR Alexander Samuel., 2012, SSRN ELECT J, P1, DOI [DOI 10.2139/SSRN.2009698, 10.2139/ssrn. 2009698]
   Alexiadis DS, 2013, IEEE T MULTIMEDIA, V15, P339, DOI 10.1109/TMM.2012.2229264
   Almazán EJ, 2013, IEEE COMPUT SOC CONF, P831, DOI 10.1109/CVPRW.2013.124
   Andoni Alexandr, 2009, THESIS
   [Anonymous], 2012, Computer vision: models, learning, and inference
   Asteriadis S., 2013, P 6 INT C COMP VIS C, V3
   Bouguet J.Y., 2016, camera calibration toolbox for matlab
   BROWN DC, 1971, PHOTOGRAMM ENG, V37, P855
   Canessa A, 2014, J VIS COMMUN IMAGE R, V25, P227, DOI 10.1016/j.jvcir.2013.02.011
   Chang WC, 2014, 2014 7TH INTERNATIONAL CONFERENCE ON UBI-MEDIA COMPUTING AND WORKSHOPS (UMEDIA), P121, DOI 10.1109/U-MEDIA.2014.52
   Darom T, 2012, IEEE T IMAGE PROCESS, V21, P2758, DOI 10.1109/TIP.2012.2183142
   Faugeras O., 1993, Three-dimensional computer vision: a geometric viewpoint
   Hartley R., 2003, MULTIPLE VIEW GEOMET
   Herrera CD, 2012, IEEE T PATTERN ANAL, V34, P2058, DOI 10.1109/TPAMI.2012.125
   Jones Brett., 2014, Proceedings of the 27th Annual ACM Symposium on User Interface Software and Technology. UIST'14, P637, DOI DOI 10.1145/10.1145/2642918.2642918.26473832647383
   Li B, 2013, IEEE INT C INT ROBOT, P1301, DOI 10.1109/IROS.2013.6696517
   Maimone Andrew, 2012, P 3DTV C TRUE VIS CA, P1
   Svoboda T, 2005, PRESENCE-VIRTUAL AUG, V14, P407, DOI 10.1162/105474605774785325
   Svoboda T., 2016, MULTICAMERA SELF CAL
   Terven JR, 2016, SCI COMPUT PROGRAM, V130, P97, DOI 10.1016/j.scico.2016.05.009
   Wilson A., 2016, ROOMALIVE TOOLKIT
   Zhang LC, 2012, IEEE INT C INT ROBOT, P2389, DOI 10.1109/IROS.2012.6385968
   Zhang ZY, 2004, IEEE T PATTERN ANAL, V26, P892, DOI 10.1109/TPAMI.2004.21
   ZHANG ZY, 1994, INT J COMPUT VISION, V13, P119, DOI 10.1007/BF01427149
   Zhang ZY, 2000, IEEE T PATTERN ANAL, V22, P1330, DOI 10.1109/34.888718
NR 25
TC 19
Z9 22
U1 4
U2 46
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2017
VL 143
BP 1
EP 8
DI 10.1016/j.scico.2016.11.004
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EW2VV
UT WOS:000402355000001
DA 2024-07-18
ER

PT J
AU Elias, E
   Santos, J
   Bittencourt, II
   Isotani, S
   Holanda, O
   Brito, PHS
AF Elias, Endhe
   Santos, Jario
   Bittencourt, Ig Ibert
   Isotani, Seiji
   Holanda, Olavo
   Brito, Patrick H. S.
TI A semi-automatic system to evaluate the performance and scalability of
   ontology persistent APIs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ontology persistence; Performance; Scalability; Semi-automatic system
ID ARCHITECTURE; SCIENCE
AB The international Semantic Web community has produced several tools, known as API -application programming interfaces, to help development teams to create applications using semantic technologies. One important family of tools developed to date is related to the manipulation of instances in ontology-based applications. There are two main approaches for manipulating ontology instances in currently developed APIs: (a) using RDF (resource description framework) triples or (b) using classes in object-oriented programming (OOP). In APIs based on RDF triples the development teams need to understand how ontology works in the RDF layers in order to manipulate data for each triple in the application code. Such an approach is highly desired to develop clean applications based strongly on Semantic Web Technologies. Nevertheless, it requires development teams to change their programming paradigm and master those technologies. In APIs based on OOP developers can manipulate data at object level in order to make application development simple and flexible using the conventional programming paradigm. Because of that, several developers have shifted from RDF triples to OOP. Although several tools have been developed to manipulate ontologies at object level, many have not been adequately evaluated for performance and scalability. In effect, there is an urgent demand for effective research results regarding metrics and systems to evaluate the performance and scalability of ontology persistent APIs. As a result, these systems should facilitate the evaluation of persistent APIs to developers. This study thus aims to provide a system for developers to evaluate ontology persistent APIs at object level. In order to validate the feasibility of our system, we have conducted an experiment by considering two solutions used by community of ontology persistence. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Elias, Endhe; Santos, Jario; Bittencourt, Ig Ibert; Holanda, Olavo; Brito, Patrick H. S.] Univ Fed Alagoas, NEES, Ctr Excellence Social Technol, Comp Inst, Campus AC Simoes,Cidade Univ, BR-57072970 Maceio, AL, Brazil.
   [Isotani, Seiji] Univ Sao Paulo, Inst Math & Computat Sci, Ave Trabalhador Stio Carlense,400 Ctr, BR-13566590 Sao Carlos, SP, Brazil.
C3 Universidade Federal de Alagoas; Universidade de Sao Paulo
RP Bittencourt, II (corresponding author), Univ Fed Alagoas, NEES, Ctr Excellence Social Technol, Comp Inst, Campus AC Simoes,Cidade Univ, BR-57072970 Maceio, AL, Brazil.
EM endhe.elias@ic.ufal.br; jjsj@ic.ufal.br; ig.ibert@ic.ufal.br;
   sisotani@icmc.usp.br; olavoholanda@ic.ufal.brm; patrick@ic.ufal.br
RI Isotani, Seiji/A-1651-2010; Bittencourt, Ig Ibert/AAU-1882-2021
OI Isotani, Seiji/0000-0003-1574-0784; Bittencourt, Ig
   Ibert/0000-0001-5676-2280
FU CAPES/CNPq; W3C Brasil; Nic.Br
FX CAPES/CNPq, W3C Brasil and Nic.Br provided support for this research. We
   also thank MeuTutor Solucoes Educacionais for technical support of our
   work.
CR ALEXAKI S, 2001, 4 INT WORKSH WEB DAT
   [Anonymous], JASTOR TYPESAFE ONTO
   [Anonymous], 2007, P VLDB
   Basili V.R., 1994, Encyclopedia of Software Engineering, P528532
   Bass L., 1997, SOFTWARE ARCHITECTUR
   BENJAMINI Y, 1995, J R STAT SOC B, V57, P289, DOI 10.1111/j.2517-6161.1995.tb02031.x
   Broekstra J, 2002, LECT NOTES COMPUT SC, V2342, P54
   Cardoso J., 2009, Semantic Web Engineering in the Knowledge Society
   Carroll Jeremy J., 2004, P 13 INT WORLD WID W, P74, DOI [10.1145/, DOI 10.1145/1013367.1013381]
   Gamma Erich., 1994, DESIGN PATTERNS
   Garcia-Castro R., 2005, SEMANTIC WEB ISWC 20
   Georgas J. C., 2006, CROSSROADS, V12
   Guo YB, 2005, J WEB SEMANT, V3, P158, DOI 10.1016/j.websem.2005.06.005
   Hendler J, 2008, COMMUN ACM, V51, P60, DOI 10.1145/1364782.1364798
   HERTEL A, 2009, HDB ONTOLOGIES, P489
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Holanda O, 2013, EXPERT SYST APPL, V40, P6469, DOI 10.1016/j.eswa.2013.05.040
   Kiryakov A, 2005, LECT NOTES COMPUT SC, V3807, P182
   Ledvinka M., 2014, P 13 ANN C ZNAL
   Magkanaraki A., 2002, SEMANTIC WEB ISWC 20
   Menasce D.A., 2004, Performance by design: computer capacity planning by example, DOI DOI 10.5555/995032
   Rothman K J, 1990, Epidemiology, V1, P43, DOI 10.1097/00001648-199001000-00010
   Strand S, 2008, BRIT EDUC RES J, V34, P148
   Terziyan V., 2003, WEB SERVICES ICWS EU
   Theoharis Y., 2005, SEMANTIC WEB ISWC 20
   van Harmelen F., 2006, COOPERATIVE INFORM A
   Zimmermann R, 2005, SOFTWARE PRACT EXPER, V35, P345, DOI 10.1002/spe.639
NR 27
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2017
VL 136
BP 43
EP 59
DI 10.1016/j.scico.2016.10.005
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EK0QV
UT WOS:000393633100003
DA 2024-07-18
ER

PT J
AU Fonseca, VS
   Barcellos, MP
   Falbo, RD
AF Fonseca, Vinicius Soares
   Barcellos, Monalessa Perini
   Falbo, Ricardo de Almeida
TI An ontology-based approach for integrating tools supporting the software
   measurement process
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software measurement; Ontology; Semantic integration; Semantic
   interoperability
ID INFORMATION-SYSTEMS
AB Context: Software measurement is a fundamental practice to support process improvement and project management, since it provides useful data for decision making at both organizational and project levels. Due to the nature of software measurement activities, the use of computational supporting tools is essential. Software measurement can be performed in the context of various software processes and these processes generally have different supporting tools. Thus, it is common to use several tools to allow collecting data regarding the processes. Tools are usually developed at different time, by different teams and without concern for integration. As a result, organizations have to deal with integration issues to enable communication between tools and to properly support the measurement process. A key factor for integration is that tools share a common understanding regarding the meaning of the exchanged terms and services. In other words, it is important to deal with integration not only at the syntactic level, but also at the semantic level. Among the instruments used to address semantics, ontologies have been acknowledged as an important means to address semantic integration. Objective: This paper presents the Ontology-Based Approach for Measurement Systems Integration (OBA-MSI), an approach that uses ontologies as a basis to integrate tools aiming at supporting the software measurement process. Method: OBA-MSI was developed following the Design Science Research paradigm. To evaluate OBA-MSI, we carried out a case study in which we used the approach to integrate tools for a real software development organization. After that, we applied a survey to get feedback from users of the integrated solution. Results: The users stated that the integrated solution obtained from applying OBA-MSI properly supported the software measurement process and added value to the organization, providing more benefits than using the tools in isolation. Conclusions: The use of OBA-MSI to aid tools integration helps deal with semantic conflicts and contributes to obtain a proper support to the software measurement process. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Fonseca, Vinicius Soares; Barcellos, Monalessa Perini; Falbo, Ricardo de Almeida] Univ Fed Espirito Santo, Dept Comp Sci, Ontol & Conceptual Modeling Res Grp NEMO, Vitoria, ES, Brazil.
C3 Universidade Federal do Espirito Santo
RP Barcellos, MP (corresponding author), Univ Fed Espirito Santo, Dept Comp Sci, Ontol & Conceptual Modeling Res Grp NEMO, Vitoria, ES, Brazil.
EM vsfonseca@inf.ufes.br; monalessa@inf.ufes.br; falbo@inf.ufes.br
RI Barcellos, Monalessa/JFJ-4331-2023
OI Barcellos, Monalessa/0000-0002-6225-9478
FU Brazilian Research Funding Agency CNPq [485368/2013-7, 461777/2014-2];
   FAPES [69382549/2014]
FX This research is funded by the Brazilian Research Funding Agency CNPq
   (Processes 485368/2013-7 and 461777/2014-2) and FAPES (Process
   69382549/2014). The authors acknowledge the Software Development
   Extension Laboratory (LEDS) [45] for the opportunity of applying and
   evaluating OBA-MSI.
CR [Anonymous], 2005, Ontological foundations for structural conceptual models
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], 2007, 159392007 ISOIEC
   Barcellos M. P., 2013, P 28 ANN ACM S APPL, P311
   BARCELLOS M.P., 2013, Journal of the Brazilian Computer Society, V19, p445+, DOI [10.1007/s13173-013-0106-x, DOI 10.1007/S13173-013-0106-X]
   Barcellos MP, 2009, LECT NOTES COMPUT SC, V5833, P179, DOI 10.1007/978-3-642-04947-7_22
   Basili Victor, 1994, ENCY SOFTW ENG, P528
   BASILI VR, 1988, IEEE T SOFTWARE ENG, V14, P758, DOI 10.1109/32.6156
   Bertoa M., 2006, Ontologies for Software Engineering and Software Technology, P175, DOI DOI 10.1007/3-540-34518-3_6
   Bringuente A. C., 2011, P 26 BRAZ S DAT BAS
   Caglayan B., 2012, Proceedings of the 8th International Conference on Predictive Models in Software Engineering', PROMISE'12, ACM, P1
   Calhau RF, 2010, IEEE INT ENTERP DIST, P111, DOI 10.1109/EDOC.2010.32
   Chen Liu, 2012, Proceedings of the 2012 IEEE International Conference on Services Economics (SE 2012), P54, DOI 10.1109/SE.2012.16
   Chulani S, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P189, DOI 10.1109/METRIC.2003.1232467
   de Oliveira Barros M., 2011, Relatorios Tecnicos DIA/UNIRIO, V5, P1
   Dumke R., 2007, SOFTWARE MEASUREMENT
   Fenton N., 2000, INT C SOFTWARE ENG, P357, DOI DOI 10.1145/336512.336588
   Florac W.a., 1997, MEASURING SOFTWARE P
   Fonseca V. S., 2015, 27 INT C SOFTW ENG K, P516
   Fonseca V.S., 2015, ISYS INF SYST BRAZ J, V8, P80
   Ghezzi G, 2011, 2011 9TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA), P93, DOI 10.1109/WICSA.2011.21
   Guizzardi G., 2008, P 11 IB WORKSH REQ E, P244
   Guizzardi G, 2007, FR ART INT, V155, P18
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Hevner R., 2007, Scandinavian Journal of Information Systems, V19, P4
   IEEE, 2005, 10611998 IEEE
   Izza S, 2009, ENTERP INF SYST-UK, V3, P1, DOI 10.1080/17517570802521163
   Janus Andre, 2012, 2012 3rd International Workshop on Emerging Trends in Software Metrics (WETSoM), P9, DOI 10.1109/WETSoM.2012.6226998
   Jureczko M., 2012, J THEORETICAL APPL S, V6, P35
   Keser B, 2013, 2013 JOINT CONFERENCE OF THE 23RD INTERNATIONAL WORKSHOP ON SOFTWARE MEASUREMENT AND THE 2013 EIGHTH INTERNATIONAL CONFERENCE ON SOFTWARE PROCESS AND PRODUCT MEASUREMENT (IWSM-MENSURA), P237, DOI 10.1109/IWSM-Mensura.2013.41
   Kitchenham B., 2007, GUIDELINES PERFORMIN
   Komi-Sirvio Seija., 2001, IEEE Seventh International Software Metrics Symposium (METRICS'01), P306
   Lavazza L, 2000, IEEE SOFTWARE, V17, P56, DOI 10.1109/52.896250
   Madeyski L, 2014, FOUND COMPUT DECIS S, V39, P249, DOI 10.2478/fcds-2014-0014
   Martins A. F., 2008, CEUR WORKSH P, V427
   McGarry John., 2002, Practical Software Measurement: Objective Information for Decision Makers
   Moreira G.de Souza Pereira., 2010, Information technology: New generations (itng), 2010 seventh international conference on, P1177, DOI [10.1109/ITNG.2010.85, DOI 10.1109/ITNG.2010.85]
   Nardi JC, 2013, COLLABORATIVE TRUSTE, P238
   Nardi JC, 2013, LECT NOTES BUS INF P, V144, P198
   Park R.E., 1997, PRACTICAL SOFTWARE M
   Park R.E., 1996, GOAL DRIVEN SOFTWARE
   Pokraev S.V., 2009, Model-Driven Semantic Integration of Service-Oriented Applications
   SEI, 2010, CMMI DEV VERS 13
   Solingen R., 1999, PRACT GUID QUAL IMPR, P216
   Themistocleous M, 2004, EUR J OPER RES, V159, P393, DOI 10.1016/j.ejor.2003.08.023
   Tian J, 1997, J SYST SOFTWARE, V39, P165, DOI 10.1016/S0164-1212(96)00170-7
   Vernadat FB, 2007, ANNU REV CONTROL, V31, P137, DOI 10.1016/j.arcontrol.2007.03.004
   Wache H., 2001, P IJCAI 01 WORKSH ON, P108
   Wegner P, 1996, ACM COMPUT SURV, V28, P285, DOI 10.1145/234313.234424
   Wieringa R, 2006, REQUIR ENG, V11, P102, DOI 10.1007/s00766-005-0021-6
   Yan W. J., 2008, 2008 6th IEEE International Conference on Industrial Informatics (INDIN), P774, DOI 10.1109/INDIN.2008.4618206
NR 51
TC 8
Z9 9
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2017
VL 135
SI SI
BP 20
EP 44
DI 10.1016/j.scico.2016.10.004
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EJ5OM
UT WOS:000393267600003
DA 2024-07-18
ER

PT J
AU Manskya, W
   Gunter, EL
   Griffith, D
   Adams, MD
AF Manskya, William
   Gunter, Elsa L.
   Griffith, Dennis
   Adams, Michael D.
TI Specifying and executing optimizations for generalized control flow
   graphs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Optimizing compilers; Program transformations; Temporal logic; SMT
   solvers
ID CORRECTNESS; MODEL
AB Optimizations performed by compilers, usually expressed as rewrites on program graphs, are a core part of modern compilers. However, even production compilers have bugs, and these bugs are difficult to detect and resolve. In this paper we present Morpheus, a domain-specific language for formal specification of program transformations, and describe its executable semantics. The fundamental approach of Morpheus is to describe program transformations as rewrites on control flow graphs with temporal logic side conditions. The syntax of Morpheus allows cleaner, more comprehensible specifications of program optimizations; its executable semantics allows these specifications to act as prototypes for the optimizations themselves, so that candidate optimizations can be tested and refined before going on to include them in a compiler. We demonstrate the use of Morpheus to state, test, and refine the specification of a variety of transformations, including a simple loop peeling transformation for single-threaded code and a redundant store elimination optimization on parallel programs. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Manskya, William] Univ Penn, Dept Comp & Informat Sci, Levine Hall,3330 Walnut St, Philadelphia, PA 19104 USA.
   [Gunter, Elsa L.; Griffith, Dennis] Univ Illinois, Thomas M Siebel Ctr, Dept Comp Sci, 201 N Goodwin, Urbana, IL 61801 USA.
   [Adams, Michael D.] Univ Utah, Sch Comp, 50 S Cent Campus Dr,Room 3190, Salt Lake City, UT 84112 USA.
C3 University of Pennsylvania; University of Illinois System; University of
   Illinois Urbana-Champaign; Utah System of Higher Education; University
   of Utah
RP Manskya, W (corresponding author), Univ Penn, Dept Comp & Informat Sci, Levine Hall,3330 Walnut St, Philadelphia, PA 19104 USA.; Gunter, EL (corresponding author), Univ Illinois, Thomas M Siebel Ctr, Dept Comp Sci, 201 N Goodwin, Urbana, IL 61801 USA.
EM egunter@illinois.edu
RI Adams, Michael/HNQ-4470-2023
OI Mansky, William/0000-0002-5351-895X
FU NSF [CCF 13-18191]; Direct For Computer & Info Scie & Enginr; Division
   of Computing and Communication Foundations [1318191] Funding Source:
   National Science Foundation
FX This material is based upon work supported in part by NSF Grant CCF
   13-18191. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the authors and do not
   necessarily reflect the views of the NSF.
CR [Anonymous], EXPERT F 3 0
   Assmann U., 1996, Compiler Construction. 6th International Conference, CC'96. Proceedings, P121
   ASSmann U., 1999, OPTIMIX - a tool for rewriting and optimizing programs, P307
   Balasubramanian D., ELECT COMMUNICATIONS
   BARENDREGT HP, 1989, PARALLEL COMPUT, V9, P163, DOI 10.1016/0167-8191(89)90126-9
   Bohn J, 1998, LECT NOTES COMPUT SC, V1530, P283
   Ceiss R, 2006, LECT NOTES COMPUT SC, V4178, P383
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   DEGANO P, 1987, J ACM, V34, P411, DOI 10.1145/23005.24038
   ECMA, 2001, ECMA 335 COMM LANG I
   GLAUERT JRW, 1991, LECT NOTES COMPUT SC, V532, P378, DOI 10.1007/BFb0017401
   Gordon AD, 2001, ACM SIGPLAN NOTICES, V36, P248, DOI 10.1145/373243.360228
   He Jifeng, 1994, Formal Aspects of Computing, V6, P643, DOI 10.1007/BF03259390
   Kalvala S, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1516507.1516509
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kundu S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P327, DOI 10.1145/1542476.1542513
   Lacey D, 2002, ACM SIGPLAN NOTICES, V37, P283, DOI 10.1145/565816.503299
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lerner S, 2005, ACM SIGPLAN NOTICES, V40, P364, DOI 10.1145/1047659.1040335
   Lerner S, 2003, ACM SIGPLAN NOTICES, V38, P220, DOI 10.1145/780822.781156
   Lerner S, 2002, ACM SIGPLAN NOTICES, V37, P270, DOI 10.1145/565816.503298
   Leroy X, 2009, J AUTOM REASONING, V43, P363, DOI 10.1007/s10817-009-9155-4
   Mansky W., 2014, OASICS, P15
   Mansky W., 2014, 5 WORKSH SYNT SEM LO
   Mansky W, 2014, ELECTRON P THEOR COM, P58, DOI 10.4204/EPTCS.159.6
   Paulson L.C., CORR
   Rajlich V, 1997, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P84, DOI 10.1109/ICSM.1997.624234
   Ramsey N, 2010, ACM SIGPLAN NOTICES, V45, P121, DOI 10.1145/2088456.1863539
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Schurr Andy., 1994, PROGRES, A Visual Language and Environment for PROgramming with Graph REwriting Systems
   Sevcik J., 2011, SIGPLAN NOTICES, V46, P43
   Tatlock Z, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P111, DOI 10.1145/1806596.1806611
   Whitfield DL, 1997, ACM T PROGR LANG SYS, V19, P1053, DOI 10.1145/267959.267960
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 35
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2016
VL 130
BP 2
EP 23
DI 10.1016/j.scico.2016.06.003
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DY1MQ
UT WOS:000384859500002
OA hybrid
DA 2024-07-18
ER

PT J
AU Montenegro, M
   Peña, R
   Segura, C
AF Montenegro, Manuel
   Pena, Ricardo
   Segura, Clara
TI Shape analysis in a functional language by using regular languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Functional languages; Abstract interpretation; Shape analysis; Points-to
   analysis; Regular languages
ID MEMORY MANAGEMENT; DERIVATIVES
AB Shape analysis is concerned with the compile-time determination of the 'shape' the heap may take at runtime, meaning by this the pointer chains that may happen within, and between, the data structures built by the program. This includes detecting alias and sharing between the program variables.
   Functional languages facilitate somehow this task due to the absence of variable updating. Even though, sharing and aliasing are still possible. We present an abstract interpretation-based analysis computing precise information about these relations. In fact, the analysis gives an information more precise than just the existence of sharing. It informs about the paths through which this sharing takes place. This information is critical in order to get a modular analysis and not to lose precision when calling an already analysed function.
   The motivation for the analysis in our case is the need of knowing at compile time which variables are at risk of containing dangling pointers at runtime, in a language with explicit memory disposal primitives.
   The main innovation with respect to the literature is the use of regular languages to specify the possible pointer paths from a variable to its descendants. This additional information makes the analysis much more precise while still being affordable in terms of efficiency. We have implemented it and give convincing examples of its precision. (C) 2014 Elsevier B.V. All rights reserved.
EM montenegro@fdi.ucm.es; ricardo@sip.ucm.es; csegura@sip.ucm.es
RI PENA MARI, RICARDO VICENTE/L-1886-2017; Montenegro Montes,
   Manuel/F-8773-2016; Segura, Clara/K-9610-2017
OI PENA MARI, RICARDO VICENTE/0000-0001-5387-8931; Montenegro Montes,
   Manuel/0000-0002-9686-465X; Segura, Clara/0000-0003-1403-2997
FU  [TIN2013-44742-C4-3-R];  [TIN2008-06622-C03-01/TIN];  [S2009/TIC-1465]
FX Work partially funded by the projects TIN2013-44742-C4-3-R (CAVI-ART),
   TIN2008-06622-C03-01/TIN (STAMP), and S2009/TIC-1465 (PROMETIDOS).
CR Barendsen E., 1996, Mathematical Structures in Computer Science, V6, P579
   Blanchet B, 2003, ACM T PROGR LANG SYS, V25, P713, DOI 10.1145/945885.945886
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Burn G.L., 1991, GLASG FUNCT PROGR WO, P56
   BURN GL, 1986, LECT NOTES COMPUT SC, V217, P42
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Gustavsson J, 2001, LECT NOTES COMPUT SC, V2011, P140
   Hind M, 2001, ACM SIGPLAN NOTICES, P54
   Hopcroft JE., 2008, Introduction to automata theory, languages, and computation
   Hudak Paul., 1986, LFP 86, P351, DOI 10.1145/319838.319876
   JANSSENS G, 1992, J LOGIC PROGRAM, V13, P205, DOI 10.1016/0743-1066(92)90032-X
   JENSEN TP, 1990, LECT NOTES COMPUT SC, V432, P227
   Jones N. D., 1979, P 6 ACM SIGACT SIGPL, P244
   JONES SLP, 1999, REPORT PROGRAMMING L, V98
   Krauss A, 2012, J AUTOM REASONING, V49, P95, DOI 10.1007/s10817-011-9223-4
   Mazur N., 2001, Logic Programming. 17th International Conference, ICLP 2001. Proceedings (Lecture Notes in Computer Science Vol.2237), P105
   Montenegro M., 2013, 15 INT S PRINC PRACT, P251
   Montenegro M., 2013, TR813 U COMPL MADR D
   Montenegro M., 2008, P 10 INT ACM SIGPLAN, P152
   Montenegro M., 2011, THESIS U COMPLUTENSE
   Montenegro M, 2009, LECT NOTES COMPUT SC, V5438, P135, DOI 10.1007/978-3-642-00515-2_10
   MULKERS A, 1994, ACM T PROGR LANG SYS, V16, P205, DOI 10.1145/174662.174664
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Peña R, 2007, TR FUNCT PROGRAM, V7, P109
   Phan Q, 2006, LECT NOTES COMPUT SC, V4079, P433, DOI 10.1007/11799573_37
   Phan Q, 2013, THEOR PRACT LOG PROG, V13, P959, DOI 10.1017/S1471068412000075
   Raman V., 2004, CS203 UC SANT CRUZ
   Rayside D., 2005, POINTS TO ANAL
   Reps T., 1995, Proceedings of the ACM SIGPLAN Symposium on Partial Evaluation and Semantics- Based Program Manipulation. PEPM'95, P1, DOI 10.1145/215465.215466
   Reynolds JohnC., 1968, Proc. IFIP Congress, P456
   Rutten JJMM, 1998, LECT NOTES COMPUT SC, V1466, P194, DOI 10.1007/BFb0055624
   Saraiva J., 2002, P ACM WORKSH FUNCT D, P133
   Turner D. N., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P1, DOI 10.1145/224164.224168
   VANHENTENRYCK P, 1995, J LOGIC PROGRAM, V22, P179, DOI 10.1016/0743-1066(94)00021-W
   WANSBROUGH K, 1999, 26 ACM SIGPLAN SIGAC
NR 35
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
BP 51
EP 78
DI 10.1016/j.scico.2014.12.006
PN 1
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5MA
UT WOS:000368557000004
DA 2024-07-18
ER

PT J
AU Banach, R
   Butler, M
   Qin, SC
   Verma, N
   Zhu, HB
AF Banach, Richard
   Butler, Michael
   Qin, Shengchao
   Verma, Nitika
   Zhu, Huibiao
TI Core Hybrid Event-B I: Single Hybrid Event-B machines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Event-B; Hybrid systems; Refinement; Formal development
ID ORIENTED SPECIFICATION; SYSTEMS; VERIFICATION; MODEL
AB Faced with the increasing need for correctly designed hybrid and cyber-physical systems today, the problem of including provision for continuously varying behaviour as well as the usual discrete changes of state is considered in the context of Event-B. An extension of Event-B called Hybrid Event-B is presented, that accommodates continuous behaviours (called pliant events) in between familiar discrete transitions (called mode events in this context). The continuous state change can be specified by a combination of indirect specification via ordinary differential equations, or direct specification via assignment of variables to values that depend on time, or indirect specification by demanding that behaviour obeys a time dependent predicate. The syntactic elements of the extension are discussed, and the semantics is described in terms of the properties of time dependent valuations of variables. Refinement is examined in detail, with reference to the notion of refinement inherited from discrete Event-B. A full suite of proof obligations is presented, covering all aspects of the new framework. A selection of examples and case studies is presented. A particular challenge - bearing in mind the desirability of conforming to existing intuitions about discrete Event-B, and the impact on tool support (as embodied in tools for discrete Event-B like Rodin) - is to design the whole framework so as to disturb as little as possible the existing structures for handling discrete Event-B. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Banach, Richard] Univ Manchester, Sch Comp Sci, Manchester M13 9PL, Lancs, England.
   [Butler, Michael] Univ Southampton, Sch Elect & Comp Sci, Southampton SO17 1BJ, Hants, England.
   [Qin, Shengchao] Univ Teesside, Sch Comp, Middlesbrough TS1 3BA, Cleveland, England.
   [Verma, Nitika] Indian Inst Technol, Dept Math, New Delhi 110016, India.
   [Zhu, Huibiao] E China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
C3 University of Manchester; University of Southampton; University of
   Teesside; Indian Institute of Technology System (IIT System); Indian
   Institute of Technology (IIT) - Delhi; East China Normal University
RP Banach, R (corresponding author), Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
EM banach@cs.man.ac.uk; mjb@ecs.soton.ac.uk; s.qin@tees.ac.uk;
   nitika.iitd@gmail.com; hbzhu@sei.ecnu.edu.cn
RI Qin, Shengchao/F-4823-2012
OI Qin, Shengchao/0000-0003-3028-8191; Butler, Michael/0000-0003-4642-5373
FU ECNU; National Natural Science Foundation of China [61361136002,
   61321064]; Shanghai Collaborative Innovation Center of Trustworthy
   Software for Internet of Things [ZF1213]
FX A portion of the work reported in this paper was done while the first
   author was a visiting researcher at the Software Engineering Institute
   at East China Normal University. The support of ECNU is gratefully
   acknowledged.; Huibiao Zhu is supported by National Natural Science
   Foundation of China (No. 61361136002 and No. 61321064) and Shanghai
   Collaborative Innovation Center of Trustworthy Software for Internet of
   Things (ZF1213).
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   [Anonymous], 2009, VERIFICATION CONTROL
   [Anonymous], 1993, Hybrid Systems, DOI [DOI 10.1007/3-540-57318-6_30, DOI 10.1007/3-540, DOI 10.1007/3-540-57318-6, 10.1007/3-540-57318-6_30]
   [Anonymous], IST287563 ADVANCE
   [Anonymous], 2011, TRUSTW CYB STRAT PLA
   [Anonymous], TUM19903
   [Anonymous], BASIC COURSE MEASURE
   [Anonymous], 2010, LOGICAL ANAL HYBRID
   [Anonymous], 1996, HYBRID I O AUTOMATA
   [Anonymous], 2010, REAL ANAL
   Audemard G, 2005, ELECTRON NOTES THEOR, V119, P17, DOI 10.1016/j.entcs.2004.12.022
   Back R.-J., 2001, Nordic Journal of Computing, V8, P2
   Back RJ., LNCS, V1926, P202
   Banach Richard, 2013, Theoretical Aspects of Computing - ICTAC 2013. 10th International Colloquium. Proceedings: LNCS 8049, P76, DOI 10.1007/978-3-642-39718-9_5
   Banach Richard, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P37, DOI 10.1007/978-3-642-39698-4_3
   Banach R., 2014, CCIS, V433, P126
   Barolli L, 2011, J AMB INTEL HUM COMP, V2, P249, DOI 10.1007/s12652-011-0062-2
   Bender K, 2002, LECT NOTES CONTR INF, V279, P37
   Carloni LP, 2006, FOUND TRENDS ELECTRO, V1, P1, DOI 10.1561/1000000001
   Chaochen Z., 1995, International Hybrid Systems Workshop, P511
   Cimatti A, 2009, LECT NOTES COMPUT SC, V5643, P188, DOI 10.1007/978-3-642-02658-4_17
   Clarke E, 2003, LECT NOTES COMPUT SC, V2619, P192
   Clarke EM, 2011, LECT NOTES COMPUT SC, V6996, P1, DOI 10.1007/978-3-642-24372-1_1
   Clarke F., 1997, Nonsmooth Analysis and Control Theory
   CLARKE FH, 1987, OPTIMIZATION NONSMOO
   Deshpande A., 1997, Hybrid Systems IV, P113, DOI 10.1007/BFb0031558
   Frehse G., 2011, COMPUTER AIDED VERIF, P379, DOI [DOI 10.1007/978-3-642-22110-1, 10.1007/978-3-642-22110-1_30]
   Friesen V, 1998, LECT NOTES COMPUT SC, V1493, P328, DOI 10.1007/BFb0056042
   Friesen V, 1999, OBJECT ORIENTED TECH, P1
   Grosu R, 1998, LECT NOTES COMPUT SC, V1486, P75, DOI 10.1007/BFb0055338
   Haggarty R., 1993, FUNDAMENTALS MATH AN
   Henzinger TA, 1996, IEEE S LOG, P278, DOI 10.1109/LICS.1996.561342
   Jifeng H., 1994, CLASSICAL MIND ESSAY, P171
   Kesten Y, 2000, ACTA INFORM, V36, P837, DOI 10.1007/s002360050177
   Krob Marchal, 2013, PROC CSDM 13, P97
   Lang S., 1993, Real and Functional Analysis
   Lynch N, 2003, INFORM COMPUT, V185, P105, DOI 10.1016/S0890-5401(03)00067-1
   Manna Z., 1993, Hybrid Systems, P4
   Mosterman P., COMMUNICATION
   Rudin W., 1976, PRINCIPLES MATH ANAL
   Stehr MO, 2010, LECT NOTES COMPUT SC, V6406, P397, DOI 10.1007/978-3-642-16355-5_32
   Sztipanovits Janos, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, DOI 10.1007/978-3-642-21437-0_1
   Voisin L, 2014, LECT NOTES COMPUT SC, V8477, P1, DOI 10.1007/978-3-662-43652-3_1
   Walter W, 1998, ORDINARY DIFFERENTIA
   White J, 2010, J INTERNET SERV APPL, V1, P45, DOI 10.1007/s13174-010-0004-9
   Willems J., 2007, OPEN DYNAMICAL SYSTE
   Zuhlke D., 2012, Advances in Automation and Robotics, V1, P567
   Zhang LC, 2011, COMM COM INF SC, V206, P391
NR 50
TC 45
Z9 47
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2015
VL 105
BP 92
EP 123
DI 10.1016/j.scico.2015.02.003
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CK4MT
UT WOS:000356198600006
OA Green Submitted, Green Accepted, Green Published
DA 2024-07-18
ER

PT J
AU Maximova, M
   Ehrig, H
   Ermel, C
AF Maximova, Maria
   Ehrig, Hartmut
   Ermel, Claudia
TI Local confluence analysis of hypergraph transformation systems with
   application conditions based on M-functors and AGG
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE M-adhesive transformation system; Graph transformation; AGG; Hypergraph
   transformation; M-functor; Application condition
ID SPATIAL LOGIC; CONSTRAINTS
AB For typed attributed graph transformation systems, the tool environment AGG supports modelling, simulation and analysis of graph transformations. A corresponding tool for analysis of hypergraph transformation systems does not exist up to now. In this paper we establish a formal relationship between the corresponding M-adhesive transformation systems, which allows us the translation of hypergraph transformations into typed attributed graph transformations with equivalent behaviour, and, vice versa, the creation of hypergraph transformations from typed attributed graph transformations. This relationship is based on the general theory of M-functors between different M-adhesive transformation systems which is extended in this paper to rules with application conditions. Our main result shows the creation of local confluence based on F-reachable critical pairs for rules with application conditions, where F is a suitable M-functor. We construct a functor between the M-adhesive categories of hypergraphs and of typed attributed graphs, and show that our construction yields an M-functor with properties required by the general theory. Hence, analysis results for hypergraph transformation systems can be obtained using AGG for analysing the translated typed attributed graph transformation systems. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Maximova, Maria; Ehrig, Hartmut; Ermel, Claudia] Tech Univ Berlin, Inst Softwaretech & Theoret Informat, Berlin, Germany.
C3 Technical University of Berlin
RP Maximova, M (corresponding author), Tech Univ Berlin, Inst Softwaretech & Theoret Informat, Berlin, Germany.
EM m.maximova@tu-berlin.de; hartmut.ehrig@tu-berlin.de;
   claudia.ermel@tu-berlin.de
OI Ermel, Claudia/0000-0001-5448-7289
CR [Anonymous], ECEASST
   [Anonymous], ELECT COMMUN EASST
   Baldan P, 2002, LECT NOTES COMPUT SC, V2505, P14
   Baldan P., 2002, P INT C INT DES 82 P
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Bruggink HJS, 2011, LEIBNIZ INT PR INFOR, V13, P191, DOI 10.4230/LIPIcs.FSTTCS.2011.191
   Bruni R, 2008, LECT NOTES COMPUT SC, V4912, P186
   Bruni R., 1998, IMPLEMENTING TILE SY
   Bruni R, 2009, ELECTRON NOTES THEOR, V238, P45, DOI 10.1016/j.entcs.2009.05.012
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Duran F., 2000, TERMINATION CHECKER
   Durán F, 2010, LECT NOTES COMPUT SC, V6381, P69, DOI 10.1007/978-3-642-16310-4_6
   Ehrig H., 2006, EATCS MONOGR
   Ehrig H, 2006, FUND INFORM, V74, P135
   Ehrig H, 2010, LECT NOTES COMPUT SC, V6372, P330
   Ehrig H, 2010, BULL EUR ASSOC THEOR, P111
   Ferrari GL, 2006, LECT NOTES COMPUT SC, V4111, P22
   Gadducci F, 2007, LECT NOTES COMPUT SC, V4624, P209
   Gadducci F, 2006, ELECTRON NOTES THEOR, V154, P31, DOI 10.1016/j.entcs.2005.03.031
   Ghamarian Amir Hossein, 2012, International Journal on Software Tools for Technology Transfer, V14, P15, DOI 10.1007/s10009-011-0186-x
   Grunske L, 2005, SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERNG, ARTIFICIAL INTELLIGENCE, NETWORKING AND PARALLEL/DISTRIBUTED COMPUTING AND FIRST AICS INTERNATIONAL WORKSHOP ON SELF-ASSEMBLING WIRELESS NETWORKS, PROCEEDINGS, P324, DOI 10.1109/SNPD-SAWN.2005.37
   Habel A, 2005, LECT NOTES COMPUT SC, V3393, P293
   Habel A., 1996, Fundamenta Informaticae, V26, P287
   Hirsch D, 2000, LECT NOTES COMPUT SC, V1906, P148
   Hoare C. A. R., 1980, On the construction of programs, P229
   Khuzayem LA., 2012, OASICS, V28, P1
   Lack S, 2004, LECT NOTES COMPUT SC, V2987, P273
   Liu H, 2013, APPL CATAL B-ENVIRON, V140, P141, DOI 10.1016/j.apcatb.2013.04.009
   Loyall J. P., 1992, Journal of Visual Languages and Computing, V3, P107, DOI 10.1016/1045-926X(92)90012-B
   Maximova M., 2013, 201302 TU BERL
   Maximova M., 2011, ECEASST, V40
   Maximova M., 2012, 201208 TU BERL
   Maximova M., 2013, P 12 INT WORKSH GRAP, V58
   McGuinness D. L., 2004, OWL WEB ONTOLOGY LAN, DOI DOI 10.2004-03
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Minas M, 2002, SCI COMPUT PROGRAM, V44, P157, DOI 10.1016/S0167-6423(02)00037-0
   Minas M, 2000, LECT NOTES COMPUT SC, V1779, P433
   Minas M, 2000, LECT NOTES COMPUT SC, V1764, P281
   Newman MHA, 1942, ANN MATH, V43, P223, DOI 10.2307/1968867
   Plump D., 1993, THESIS U BREMEN
   Varró D, 2007, SCI COMPUT PROGRAM, V68, P214, DOI 10.1016/j.scico.2007.05.004
   W3 Consortium, RESOURCE DESCRIPTION
NR 43
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2015
VL 104
SI SI
BP 44
EP 70
DI 10.1016/j.scico.2014.10.002
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG2BO
UT WOS:000353080100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Ralph, P
AF Ralph, Paul
TI The Sensemaking-Coevolution-Implementation Theory of software design
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Design; General theory; Process theory; Theory development; Coevolution
ID SYSTEMS-DEVELOPMENT METHODOLOGIES; INFORMATION-SYSTEMS;
   ORGANIZATIONAL-CHANGE; MODEL; SUCCESS; PERFORMANCE; CAPABILITY;
   FRAMEWORK; ONTOLOGY; PARADOX
AB Following calls for greater theory development in software engineering, this paper formulates a process theory of software development practice. Sensemaking-Coevolution-Implementation Theory explains how complex software systems are created by cohesive software development teams in organizations. It posits that an independent agent (the development team) creates a software system by alternating between three categories of activities: making sense of an ambiguous context, mutually refining schemas of the context and design space, and manifesting their understanding of the design space in a technological artifact. This theory development paper defines, illustrates and conceptually evaluates Sensemaking-Coevolution-Implementation Theory. It grounds the theory's concepts and relationships in existing software engineering, information systems development and interdisciplinary design literature. (C) 2014 Elsevier B.V. All rights reserved.
C1 Univ Auckland, Auckland 1, New Zealand.
C3 University of Auckland
RP Ralph, P (corresponding author), Univ Auckland, Auckland 1, New Zealand.
EM paul@paulralph.name
RI Ralph, D. Paul/H-4322-2019
OI Ralph, D. Paul/0000-0002-7411-0857
FU National Sciences and Engineering Research Council of Canada
FX Thanks are due to Jeffrey Parsons, Olga Volkoff and the participants of
   the First SEMAT Workshop on General Theory of Software Engineering for
   their constructive comments on SCI, and to the National Sciences and
   Engineering Research Council of Canada for financial support.
CR Aaen I., 2001, Scandinavian Journal of Information Systems, V13, P123
   Alexander C., 1964, Notes on the Synthesis of Form
   Alter S, 2013, J ASSOC INF SYST, V14, P72
   Ambler S., 2008, AGILE ADOPTION RATE
   [Anonymous], P PAC AS C INF SYST
   [Anonymous], 1 INT C DES SCI INF
   [Anonymous], SOFTWARE REUSE EMERG
   [Anonymous], ACM SIGSOFT SOFTW EN
   [Anonymous], 1995, MYTHICAL MAN MONTH
   [Anonymous], 16 INT C ENG DES
   [Anonymous], 2004, The rational unified process: an introduction
   [Anonymous], P 6 MED C INF SYST
   [Anonymous], 2004, GUIDE SOFTWARE ENG B
   [Anonymous], P 14 INT C EV ASS SO
   [Anonymous], DOBBS J
   [Anonymous], 1989, SCAND J INF SYST
   [Anonymous], 2010, THESIS U BRIT COLUMB
   [Anonymous], P 1 SEMAT WORKSH GEN
   [Anonymous], 2006, EMERGING TRENDS CHAL
   [Anonymous], 2005, Extreme programming explained: Embrace change
   [Anonymous], ORG CHANGE INNOCATIO
   [Anonymous], UNIHED SOFTWARE DEV
   [Anonymous], WORKING PAPER
   [Anonymous], MAN SUCC PROJ PRINCE
   Avison D., 2006, Information Systems Development-Methodologies, Techniques & Tools
   Avison D.E., 1999, RETHINKING MANAGEMEN, P250
   Bansler J., 1994, Proceedings of Second European Conference on Information Systems, P707
   BANSLER JP, 1993, ACM T INFORM SYST, V11, P165, DOI 10.1145/130226.148055
   BASKERVILLE R, 1992, IFIP TRANS A, V8, P241
   Baskerville R, 2004, INFORM SYST J, V14, P237, DOI 10.1111/j.1365-2575.2004.00171.x
   Beal DJ, 2003, J APPL PSYCHOL, V88, P989, DOI 10.1037/0021-9010.88.6.989
   BEATH CM, 1994, INFORM SYST RES, V5, P350, DOI 10.1287/isre.5.4.350
   Beck Kent L., 2003, Test Driven Development By Example
   BOEHM BW, 1988, COMPUTER, V21, P61, DOI 10.1145/12944.12948
   Brooks F.P., 2010, Design of Design: Essays from a Computer Scientist
   Butler T., 1997, P 18 INT C INFORM SY, P411
   CARROLL GR, 1989, ADMIN SCI QUART, V34, P411, DOI 10.2307/2393151
   Checkland P., 1999, System Thinking, System Practice, V2e
   Churchman C.W., 1971, The design of inquiring systems
   Clark A, 1998, ANALYSIS, V58, P7, DOI 10.1111/1467-8284.00096
   Colman A., 2008, A dictionary of psychology
   Cross N., 2001, Design Studies, V22, P425, DOI [10.1016/S0142-694X(01)00009-6, DOI 10.1016/S0142-694X(01)00009-6]
   CROSS N., 1992, RES DESIGN THINKING
   Crowston K., 2006, Software Process Improvement and Practice, V11, P123, DOI 10.1002/spip.259
   Crowston K., 2004, "Collaboration, Conflict and Control: The 4th Workshop on Open Source Software Engineering" W8S Workshop - 26th International Conference on Software Engineering, P29, DOI 10.1049/ic:20040261
   CROWSTON K., 2005, SYSTEM SCI, p197a
   Crowston K, 2007, INFORM SOFTWARE TECH, V49, P564, DOI 10.1016/j.infsof.2007.02.004
   CURTIS B, 1992, COMMUN ACM, V35, P75, DOI 10.1145/130994.130998
   CURTIS B, 1988, COMMUN ACM, V31, P1268, DOI 10.1145/50087.50089
   DARDENNE A, 1993, SCI COMPUT PROGRAM, V20, P3, DOI 10.1016/0167-6423(93)90021-G
   DeLone WH, 2003, J MANAGE INFORM SYST, V19, P9, DOI 10.1080/07421222.2003.11045748
   DeLone WH, 1992, INFORM SYST RES, V3, P60, DOI 10.1287/isre.3.1.60
   Dervin B., 1998, Journal of Knowledge Management, V2, P36, DOI 10.1108/13673279810249369
   Eekels J, 2000, J ENG DESIGN, V11, P377, DOI 10.1080/09544820010000962
   Espinosa J., 2001, Shared Mental Models and Coordination in Large-Scale, P513
   Espinosa JA, 2007, ORGAN SCI, V18, P613, DOI 10.1287/orsc.1070.0297
   Ewusi-Mensah K., 2003, Software Development Failures
   Fitzgerald B, 1997, INFORM SYST J, V7, P201, DOI 10.1046/j.1365-2575.1997.d01-18.x
   Fitzgerald B, 1996, INFORM SYST J, V6, P3
   Fitzgerald B, 2006, MIS QUART, V30, P587
   Fitzgerald B, 2006, EUR J INFORM SYST, V15, P200, DOI 10.1057/palgrave.ejis.3000605
   FRANZ CR, 1984, COMMUN ACM, V27, P1202, DOI 10.1145/2135.2138
   Freeman P, 2004, COMMUN ACM, V47, P19, DOI 10.1145/1012037.1012054
   Furnas G., 2005, CHI Extended Abstracts, P2115
   Galle P, 2009, DESIGN STUD, V30, P321, DOI 10.1016/j.destud.2009.02.002
   Gell-Mann M., 1999, COMPLEXITY METAPHORS, P17
   Gero J. S., 1998, Design Studies, V19, P21, DOI 10.1016/S0142-694X(97)00015-X
   Gero JS, 2007, AI EDAM, V21, P379, DOI 10.1017/S0890060407000340
   Gero JS, 2004, DESIGN STUD, V25, P373, DOI 10.1016/j.destud.2003.10.010
   GERO JS, 1990, AI MAG, V11, P26
   Giddens A., 1984, CONSTITUTION SOC OUT
   Gladden G. R., 1982, SIGSOFT Software Engineering Notes, V7, P35, DOI 10.1145/1005937.1005945
   Gregor S, 2006, MIS QUART, V30, P611
   Heineman GeorgeT., 2001, COMPONENT BASED SOFT
   Herbsleb J, 1997, COMMUN ACM, V40, P30, DOI 10.1145/255656.255692
   Herbsleb JD, 2005, PROC INT CONF SOFTW, P524
   Herbsleb JD, 2003, IEEE T SOFTWARE ENG, V29, P481, DOI 10.1109/TSE.2003.1205177
   Herbsleb JD, 2001, PROC INT CONF SOFTW, P81, DOI 10.1109/ICSE.2001.919083
   Herbsleb JD, 2001, IEEE SOFTWARE, V18, P16, DOI 10.1109/52.914732
   HOLLAND JH, 1992, DAEDALUS, V121, P17
   Hunt SD, 2008, ORGAN STUD, V29, P1469, DOI 10.1177/0170840608099521
   Johnson P., 2012, IEEE Software, V29, P94, DOI 10.1109/MS.2012.127
   Johnson P., 2013, ACM SIGSOFT SOFTW EN, V38, P47, DOI DOI 10.1145/2507288.2529923
   Kim Jaegwon., 1999, The Cambridge Dictionary of Philosophy, V2d, P125
   Kimberly John., 1980, ORG LIFE CYCLE
   Kirsch LJ, 1997, INFORM SYST RES, V8, P215, DOI 10.1287/isre.8.3.215
   Kirsch LJ, 2002, MANAGE SCI, V48, P484, DOI 10.1287/mnsc.48.4.484.204
   Kruchten P, 2005, IEEE SOFTWARE, V22, P52, DOI 10.1109/MS.2005.33
   Kuhn T.S., 1962, The structure of scientifc revolutions, V3rd ed.
   Larman C, 2003, COMPUTER, V36, P47, DOI 10.1109/MC.2003.1204375
   Laudon K.C., 2009, MANAGEMENT INFORM SY, V11th
   Law J Hassard J., 1999, Actor network theory and after
   LAWRENCE M, 1993, MIS QUART, V17, P195, DOI 10.2307/249801
   Lewis K, 2005, ORGAN SCI, V16, P581, DOI 10.1287/orsc.1050.0143
   Lewis MW, 2000, ACAD MANAGE REV, V25, P760, DOI 10.2307/259204
   Lowgren J, 2004, THOUGHTFUL INTERACTION DESIGN: A DESIGN PERSPECTIVE ON INFORMATION TECHNOLOGY, P1
   Lyytinen K, 1999, INFORM SYST J, V9, P85, DOI 10.1046/j.1365-2575.1999.00051.x
   Lyytinen K., 1987, CRITICAL ISSUES INFO, P3
   Maher M., 1995, 2 IFIP WG5 2 WORKSH, P1
   March J.G., 1958, ORGANIZATIONS
   MARKUS ML, 1988, MANAGE SCI, V34, P583, DOI 10.1287/mnsc.34.5.583
   Mathiassen L, 2002, INFORM SYST J, V12, P81, DOI 10.1046/j.1365-2575.2002.00122.x
   McCracken D. D., 1982, SIGSOFT Software Engineering Notes, V7, P29, DOI 10.1145/1005937.1005943
   Mockus A, 2002, ACM T SOFTW ENG METH, V11, P309, DOI 10.1145/567793.567795
   Neale M.A., 1991, Research in organizational behavior 13, P147
   NEWMAN M, 1992, MIS QUART, V16, P249, DOI 10.2307/249578
   NIDUMOLU S, 1995, INFORM SYST RES, V6, P191, DOI 10.1287/isre.6.3.191
   Nidumolu SR, 2003, J MANAGE INFORM SYST, V20, P159, DOI 10.1080/07421222.2003.11045774
   Orlikowski W. J., 1993, Information Society, V9, P237, DOI 10.1080/01972243.1993.9960143
   Orlikowski WJ, 2002, ORGAN SCI, V13, P249, DOI 10.1287/orsc.13.3.249.2776
   ORLIKOWSKI WJ, 1993, MIS QUART, V17, P309, DOI 10.2307/249774
   Pahl G., 2007, A Systematic Approach, DOI [10.4324/9780203967461, DOI 10.4324/9780203967461, DOI 10.1007/978]
   Papazoglou M.P., 2003, P 4 INT C WEB INF SY
   PARNAS DL, 1986, IEEE T SOFTWARE ENG, V12, P251, DOI 10.1109/TSE.1986.6312940
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Petter S, 2008, EUR J INFORM SYST, V17, P236, DOI 10.1057/ejis.2008.15
   Polya G., 1957, How to Solve It. A New Aspect of Mathematical Method, V2, DOI DOI 10.1515/9781400828678
   Purao S., 2002, Information and Organization, V12, P249, DOI 10.1016/S1471-7727(02)00006-4
   Ralph P., 2012, P 2012 INT C INF SYS
   Ralph P, 2013, REQUIR ENG, V18, P293, DOI 10.1007/s00766-012-0161-4
   Ralph P, 2010, LECT NOTES COMPUT SC, V6105, P139, DOI 10.1007/978-3-642-13335-0_10
   Ralph P, 2009, LECT NOTES BUS INF P, V14, P103
   Robey D., 2001, Information Technology & Management, V2, P53, DOI 10.1023/A:1009982704160
   ROBEY D, 1982, MANAGE SCI, V28, P73, DOI 10.1287/mnsc.28.1.73
   Robey D, 1996, ACM T INFORM SYST, V14, P30, DOI 10.1145/214174.214178
   Roozenburg N.F. M., 1995, PRODUCT DESIGN FUNDA
   Royce W.W., 1970, P IEEE WESCON IEEE, P1
   RUSSELL DM, 1993, HUMAN FACTORS IN COMPUTING SYSTEMS, P269
   Sambamurthy V, 2000, DECISION SCI, V31, P391, DOI 10.1111/j.1540-5915.2000.tb01628.x
   Scacchi W., 2006, Software Process Improvement and Practice, V11, P95, DOI 10.1002/spip.255
   Scacchi W., 2007, Advances in Computers, V69, P243, DOI [DOI 10.1016/S0065-2458(06)69005-0, 10.1016/S0065-2458(06)69005-0]
   Schon D., 1984, The Reflective Practitioner: How Professionals Think in Action
   Scozzi B., 2008, Proceedings of the 41st Annual Hawaii International Conference on System Sciences (HICSS 2008), P306, DOI [10.1109/HICSS.2008.391., DOI 10.1109/HICSS.2008.391]
   Shenhar AJ, 2001, LONG RANGE PLANN, V34, P699, DOI 10.1016/S0024-6301(01)00097-8
   Sim SK, 2003, RES ENG DES, V14, P200, DOI 10.1007/s00163-003-0037-1
   Simon H.A., 1996, The Sciences of the Artificial, V3rd ed
   SINGER EA, 1959, EXPERIENCE REFLECTIO
   Sober E., 1999, Proceedings and Addresses of the American Philosophical Association, V73, P47, DOI DOI 10.2307/3131087
   Sommerville I., 1996, Software Engineering, V5th
   Stacey P, 2008, COMMUN ACM, V51, P143, DOI 10.1145/1409360.1409387
   Staples M, 2007, J SYST SOFTWARE, V80, P883, DOI 10.1016/j.jss.2006.09.008
   STEVENS WP, 1974, IBM SYST J, V13, P115, DOI 10.1147/sj.132.0115
   Stewart KJ, 2006, MIS QUART, V30, P291
   Sutherland J, 2008, AGILE 2008, PROCEEDINGS, P339, DOI 10.1109/Agile.2008.92
   Truex D., 2000, Accounting, Management and Information Technologies, V10, P53, DOI 10.1016/S0959-8022(99)00009-0
   Truex DP, 1999, COMMUN ACM, V42, P117, DOI 10.1145/310930.310984
   van Lamsweerde A., 2004, Proceedings. 12th IEEE International Requirements Engineering Conference, P4
   VANDEVEN AH, 1995, ACAD MANAGE REV, V20, P510, DOI 10.2307/258786
   Vermaas PE, 2007, DESIGN STUD, V28, P133, DOI 10.1016/j.destud.2006.11.001
   WALZ DB, 1993, COMMUN ACM, V36, P63, DOI 10.1145/163430.163447
   Wand Y, 2002, INFORM SYST RES, V13, P363, DOI 10.1287/isre.13.4.363.69
   Wang D, 2009, DES ISSUES, V25, P5, DOI 10.1162/desi.2009.25.1.5
   Wegner D. M., 1987, THEORIES GROUP BEHAV, P185, DOI [10.1007/978-1-4612-4634-3_9, DOI 10.1007/978-1-4612-4634-3_9]
   Weick K., 1995, SENSEMAKING ORG
   Weick KE, 2005, ORGAN SCI, V16, P409, DOI 10.1287/orsc.1050.0133
   WOLFE RA, 1994, J MANAGE STUD, V31, P405, DOI 10.1111/j.1467-6486.1994.tb00624.x
   Wynekoop JL, 1997, INFORM SYST J, V7, P47, DOI 10.1046/j.1365-2575.1997.00004.x
   Zheng YQ, 2011, INFORM SYST J, V21, P303, DOI 10.1111/j.1365-2575.2010.00360.x
NR 158
TC 31
Z9 32
U1 3
U2 24
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2015
VL 101
BP 21
EP 41
DI 10.1016/j.scico.2014.11.007
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA CC6XZ
UT WOS:000350513600003
OA Green Submitted, Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Abebe, SL
   Tonella, P
AF Abebe, Surafel Lemma
   Tonella, Paolo
TI Extraction of domain concepts from the source code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program understanding; Concept extraction; Domain concept filtering;
   Concept location; Information retrieval
ID COMPREHENSION; EVOLUTION
AB Program understanding involves mapping domain concepts to the code elements that implement them. Such mapping is often implicit and undocumented. However, identifier names contain relevant clues to rediscover the mapping and make it available to programmers.
   In this paper, we present two approaches that exploit structural and linguistic aspects of the source code to extract ontologies. The extracted ontologies are then compared in terms of the concepts they contain and the support they give to program understanding, specifically concept location. Such ontologies are composed of domain and implementation concepts as they come from the source code. To filter domain concepts, we have applied Information Retrieval (IR) based filtering techniques. We have assessed the resulting ontologies against a reference, manually defined, domain ontology.
   The experimentation was carried out using six real world open source programs. Results show that the ontologies extracted using the structural and linguistic aspects of the source code are complementary. We also observed that their union gives a better support to concept location than the individual ontologies. Filtering the ontologies gives a concise representation of the domain knowledge captured in the source code. The filtered ontologies, however, have been found to be less effective in supporting concept location than the unfiltered ontologies. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Abebe, Surafel Lemma; Tonella, Paolo] Fdn Bruno Kessler, I-38123 Povo, Trento, Italy.
C3 Fondazione Bruno Kessler
RP Abebe, SL (corresponding author), Fdn Bruno Kessler, Via Sommarive 18, I-38123 Povo, Trento, Italy.
EM surafel@fbk.eu; tonella@fbk.eu
RI Tonella, Paolo/C-1702-2015
OI Tonella, Paolo/0000-0003-3088-0339; Abebe, Surafel
   Lemma/0000-0002-2137-8673
CR Abebe S. L., 2011, 2011 18th Working Conference on Reverse Engineering, P77, DOI 10.1109/WCRE.2011.19
   Abebe Surafel Lemma, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P156, DOI 10.1109/ICPC.2010.29
   Abebe SL, 2009, EUR CON SFTWR MTNCE, P189, DOI 10.1109/CSMR.2009.61
   [Anonymous], 2012, EXPT SOFTWARE ENG CO
   BIGGERSTAFF TJ, 1993, PROC INT CONF SOFTW, P482, DOI 10.1109/ICSE.1993.346017
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Carey MM, 2007, INT C PROGRAM COMPRE, P27
   Collard M.L., 2002, DocEng '02, P34
   Deissenböck F, 2005, PROG COMPREHEN, P97, DOI 10.1109/WPC.2005.14
   Falleri J.-R, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P4, DOI 10.1109/ICPC.2010.12
   Fellbaum C., 1998, WordNet: An Electronic Lexical Database, V71
   Fry ZP, 2008, IET SOFTW, V2, P27, DOI 10.1049/iet-sen:20070112
   Gay G, 2009, PROC IEEE INT CONF S, P351, DOI 10.1109/ICSM.2009.5306315
   Hill E., 2008, P 2008 INT WORKING C, P79
   Hill E, 2009, PROC INT CONF SOFTW, P232, DOI 10.1109/ICSE.2009.5070524
   Hofmann T, 1999, SIGIR'99: PROCEEDINGS OF 22ND INTERNATIONAL CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P50, DOI 10.1145/312624.312649
   Hsi I, 2003, 10TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P345, DOI 10.1109/WCRE.2003.1287265
   Laitinen K, 1997, J SYST SOFTWARE, V37, P117, DOI 10.1016/S0164-1212(96)00108-2
   Lawrie D, 2007, SEVENTH IEEE INTERNATIONAL WORKING CONFERENCE ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P213, DOI 10.1109/SCAM.2007.17
   Lin D., 1998, P INT WORKSH EV PARS
   Liu Dapeng, 2007, P 22 IEEEACM INT C A, P234, DOI 10.1145/1321631.1321667
   Lukins SK, 2008, WORK CONF REVERSE EN, P155, DOI 10.1109/WCRE.2008.33
   Maletic JI, 2001, PROC INT CONF SOFTW, P103, DOI 10.1109/ICSE.2001.919085
   Marcus A, 2004, 11TH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P214, DOI 10.1109/WCRE.2004.10
   Maskeri Girish, 2008, 1st India Software Engineering Conference. ISEC 2008, P113
   MILANOVA A, 2002, P INT C SOFTW MAINT
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   Nonnen J., 2011, 2011 18th Working Conference on Reverse Engineering, P99, DOI 10.1109/WCRE.2011.21
   Petrenko M, 2008, INT C PROGRAM COMPRE, P13, DOI 10.1109/ICPC.2008.14
   PORTER MF, 1980, PROGRAM-AUTOM LIBR, V14, P130, DOI 10.1108/eb046814
   Poshyvanyk D, 2007, IEEE T SOFTWARE ENG, V33, P420, DOI [10.1109/TSE.2007.1016, 10.1109/TSE.2007.1016.]
   Poshyvanyk D, 2006, PROC IEEE INT CONF S, P334
   Rajlich V, 2002, PROG COMPREHEN, P271, DOI 10.1109/WPC.2002.1021348
   Rajlich V, 2009, INT C PROGRAM COMPRE, P1, DOI 10.1109/ICPC.2009.5090022
   Ratiu D, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P203
   Ricca F, 2008, J SOFTW MAINT EVOL-R, V20, P1, DOI 10.1002/smr.360
   Shepherd David, 2007, P 6 INT C ASP OR SOF, P212
   Tonella Paolo., 2005, REVERSE ENG OBJECT O
   Zhou Xiaoping, 2007, U S Forest Service Pacific Northwest Research Station General Technical Report PNW-GTR, P1
NR 39
TC 13
Z9 14
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 680
EP 706
DI 10.1016/j.scico.2014.09.012
PN 4
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400010
OA hybrid
DA 2024-07-18
ER

PT J
AU Margaris, D
   Vassilakis, C
   Georgiadis, P
AF Margaris, D.
   Vassilakis, C.
   Georgiadis, P.
TI An integrated framework for adapting WS-BPEL scenario execution using
   QoS and collaborative filtering techniques
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE WS-BPEL; Adaptation; Quality of service; Collaborative filtering;
   Metasearch algorithms
AB In this paper, we present a framework which incorporates runtime adaptation for BPEL scenarios. The adaptation is based on (a) the quality of service parameters of available services, allowing for tailoring their execution to the diverse needs of individual users and (b) collaborative filtering techniques, allowing clients to further refine the adaptation process by considering service selections made by other clients, in the context of the same business processes. The proposed framework also caters maintaining the transactional semantics that invocations to multiple services offered by the same provider may bear. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Margaris, D.; Georgiadis, P.] Univ Athens, Dept Informat & Telecommun, GR-15184 Athens, Greece.
   [Vassilakis, C.] Univ Peloponnese, Dept Informat & Telecommun, GR-22100 Tripoli, Greece.
C3 National & Kapodistrian University of Athens; University of Peloponnese
RP Vassilakis, C (corresponding author), Univ Peloponnese, Dept Informat & Telecommun, GR-22100 Tripoli, Greece.
EM costas@uop.gr
RI Costas, Vassilakis/AAH-5948-2019
OI Costas, Vassilakis/0000-0001-9940-1821; Margaris,
   Dionisis/0000-0002-7487-374X
CR A-Masri E, 2007, IEEE IC COMP COM NET, P529
   Al-Masri E., 2007, P 16 INT C WORLD WID, P1257, DOI DOI 10.1145/1242572.1242795
   Al-Masri E., THE QWS DATA SET
   Ali Raian, 2012, Proceedings of the 7th International Conference on Evaluation of Novel Approaches to Software Engineering (ENASE 2012), P75
   Alrifai M, 2009, WHITESTEIN SER SOFTW, V3, P75
   [Anonymous], SIGIR 99 WORKSH REC
   [Anonymous], P ICWS11
   [Anonymous], IEEE 4 INT C NAT LAN
   [Anonymous], 2003, SIGECOM EXCH
   [Anonymous], P IEEE 7 INT C RES C
   Apache Group, 2012, APACH ODE HEAD HANDL
   Arpaci AE, 2005, LECT NOTES COMPUT SC, V3733, P332
   Aslam J. A., 2001, SIGIR Forum, P276
   Balabanovic M, 1997, COMMUN ACM, V40, P66, DOI 10.1145/245108.245124
   Barbosa LS, 2010, PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON COMPLEX, INTELLIGENT AND SOFTWARE INTENSIVE SYSTEMS (CISIS 2010), P1008, DOI 10.1109/CISIS.2010.141
   Basilico J., 2004, P 21 INT C MACH LEAR, P9, DOI DOI 10.1145/1015330.1015394
   Beier R., 2004, P 36 ACM S THEOR COM
   Ben Hassine A, 2006, LECT NOTES COMPUT SC, V4273, P130
   Ben Mabrouk N, 2009, LECT NOTES COMPUT SC, V5896, P123, DOI 10.1007/978-3-642-10445-9_7
   Bisschop J., AIMMS OPTIMIZATION M
   Bramantoro A, 2005, LECT NOTES COMPUT SC, V3807, P217
   Canfora G, 2005, GECCO 2005: GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE, VOLS 1 AND 2, P1069
   Cardellini Valeria, 2010, 2010 IEEE International Conference on Web Services (ICWS), P504, DOI 10.1109/ICWS.2010.77
   Cardellini V, 2012, IEEE T SOFTWARE ENG, V38, P1138, DOI 10.1109/TSE.2011.68
   Cardellini V, 2011, LECT NOTES COMPUT SC, V6994, P167, DOI 10.1007/978-3-642-24755-2_16
   Cardoso J, 2003, J INTELL INF SYST, V21, P191, DOI 10.1023/A:1025542915514
   CARDOSO J, 2002, THESIS U GEORGIA
   Castagna G, 2009, ACM T PROGR LANG SYS, V31, DOI 10.1145/1538917.1538920
   Chothia T, 2007, ELECTRON NOTES THEOR, V175, P153, DOI 10.1016/j.entcs.2007.03.009
   Christos K, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P271, DOI 10.1109/ICWS.2009.80
   Cross V., 2011, 6 INT WORKSHOP ONTOL, P61
   DICE LR, 1945, ECOLOGY, V26, P297, DOI 10.2307/1932409
   Dionisis M., 2013, P 28 ANN ACM S APPL, P1900
   Furnkranz J, 2010, PREFERENCE LEARNING, P1
   Glassfish Community, 2013, METR
   GlassFish Community, 2013, GLASSF
   Herlocker JL, 2004, ACM T INFORM SYST, V22, P5, DOI 10.1145/963770.963772
   Hirst G, 1998, LANG SPEECH & COMMUN, P305
   Hüllermeier E, 2012, IEEE T FUZZY SYST, V20, P546, DOI 10.1109/TFUZZ.2011.2179303
   Hwang C. L., 1981, MULTIPLE CRITERIA DE
   IBM, 2013, US CPLEX EX ALT OPT
   ISO, 2002, 8402 ISO UNI EN
   Kim BM, 2006, J INTELL INF SYST, V27, P79, DOI 10.1007/s10844-006-8771-2
   Kritikos K, 2009, IEEE T SERV COMPUT, V2, P122, DOI 10.1109/TSC.2009.10
   Lécué F, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P469, DOI 10.1109/ICWS.2009.88
   Manikrao US, 2005, International Conference on Next Generation Web Services Practices, P117, DOI 10.1109/NWESP.2005.32
   Mayer W, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P888, DOI 10.1109/ICWS.2009.65
   Melville P, 2002, EIGHTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE (AAAI-02)/FOURTEENTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE (IAAI-02), PROCEEDINGS, P187
   Montague M., 2001, Proceedings of the 2001 ACM CIKM. Tenth International Conference on Information and Knowledge Management, P427, DOI 10.1145/502585.502657
   Moser O., 2008, 17th International Conference of World Wide Web (WWW'08), P815, DOI DOI 10.1145/1367497.1367607
   O'Sullivan J., 2002, PARALLEL DATABASES, V12
   Oracle, 2013, MAN SOAP HEAD BPEL
   Paolucci M, 2002, LECT NOTES COMPUT SC, V2342, P333
   Papazoglou MP, 2007, COMPUTER, V40, P38, DOI 10.1109/MC.2007.400
   Pazzani MJ, 1999, ARTIF INTELL REV, V13, P393, DOI 10.1023/A:1006544522159
   Qi L., 2013, P 5 INT C ADV SERV C, P81
   Rinderle-Ma S, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P501, DOI 10.1109/ICWS.2009.72
   Risse T., 2009, P 18 INT C WORLD WID, P881, DOI DOI 10.1145/1526709.1526828
   Salakhutdinov R., 2007, P 24 INT C MACHINE L, P791
   Schafer J. B., 2007, The Adaptive Web. Methods and Strategies of Web Personalization, P291
   Seidl T., 1998, SIGMOD Record, V27, P154, DOI 10.1145/276305.276319
   Simari G.I., 2006, P 5 INT JOINT C AUTO, P1041
   Srensen T., 1948, K DANSKE VIDENSK SEL, V5, P1, DOI DOI 10.1234/12345678
   StackOverflow, US MIN MAX INT LIN P
   Yanbe Y, 2007, LECT NOTES COMPUT SC, V4607, P343
   Yu J, 2012, DATA KNOWL ENG, V72, P202, DOI 10.1016/j.datak.2011.10.005
   Yu T, 2004, CEC 2004: IEEE INTERNATIONAL CONFERENCE ON E-COMMERCE TECHNOLOGY, PROCEEDINGS, P129
   Zeginis C., 2010, 410 ICS FORTH
   ZENG L, 2004, IEEE T SOFTW ENG, V30
   Zheng Z., WS DREAM WEB SERVICE
   Zheng ZB, 2011, IEEE T SERV COMPUT, V4, P140, DOI 10.1109/TSC.2010.52
   Zheng ZT, 2010, ENTERPRISE GROWS IN SUSTAINING EFFICIENCY AND EFFECTIVENESS, P35
NR 72
TC 12
Z9 13
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 707
EP 734
DI 10.1016/j.scico.2014.10.007
PN 4
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400011
OA Bronze
DA 2024-07-18
ER

PT J
AU Scholliers, C
   Tanter, É
   De Meuter, W
AF Scholliers, Christophe
   Tanter, Eric
   De Meuter, Wolfgang
TI Computational contracts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Higher-order contracts; Languages; Design; Reliability; Theory
ID VERIFICATION; SOUND
AB Software contracts have proven to play an important role for the development of robust software. Contract systems are widely adopted in statically typed languages and are currently finding their entrance in dynamically-typed programming languages. Most research on higher-order contracts has adopted a black-box approach where only input and output are checked. These systems cannot check many interesting concerns about the behaviour of a function. Examples include prohibiting or ensuring that certain functions are called, checking access permissions, time or memory constraints, interaction protocols, etc. To address this need for behavioural runtime validation, while preserving support for higherorder programming, we introduce the notion of computational contracts. Computational contracts is a contract model with blame assignment in a higher-order setting that provides a systematic way to specify temporal contracts over objects and functions and their possibly higher-order arguments. We show various applications of computational contracts, and explain how to assign blame in case of a violation. Computational contracts have been integrated in both Scheme and AmbientTalk, a dynamically-typed object-oriented language built upon the principles of prototype-based programming. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Scholliers, Christophe; De Meuter, Wolfgang] Vrije Univ Brussel, Software Languages Lab, Elsene, Belgium.
   [Tanter, Eric] Univ Chile, Comp Sci Dept DCC, PLELAD Lab, Santiago, Chile.
C3 Vrije Universiteit Brussel; Universidad de Chile
RP Scholliers, C (corresponding author), Vrije Univ Brussel, Software Languages Lab, Pleinlaan 2, Elsene, Belgium.
EM cfscholl@vub.ac.be; etanter@dcc.uchile.cl; wdmeuter@vub.ac.be
RI Tanter, Éric/A-7955-2008; Scholliers, Christophe/F-6280-2015
OI Tanter, Éric/0000-0002-7359-890X; Scholliers,
   Christophe/0000-0002-2837-4763
FU Institute for the Promotion through Science and Technology in Flanders
   (IWTVIaanderen); FONDECYT [1110051]
FX Christophe Scholliers is funded by a doctoral scholarship of the
   Institute for the Promotion through Science and Technology in Flanders
   (IWTVIaanderen)..; Eric Tanter is partially funded by FONDECYT Project
   1110051.
CR Barnett Mike., 2004, SPEC PROGRAMMING SYS, P49, DOI [10.1007/978-3-540-30569-9_3, DOI 10.1007/978-3-540-30569-9_3]
   Beckman NE, 2011, LECT NOTES COMPUT SC, V6813, P2, DOI 10.1007/978-3-642-22655-7_2
   Beugnard A, 1999, COMPUTER, V32, P38, DOI 10.1109/2.774917
   Blume M, 2006, J FUNCT PROGRAM, V16, P375, DOI 10.1017/S0956796806005971
   DAMM W, 1983, ACTA INFORM, V20, P59, DOI 10.1007/BF00264295
   Dedecker J, 2006, LECT NOTES COMPUT SC, V4067, P230
   Dimoulas C, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/2039346.2039348
   Dimoulas C, 2011, ACM SIGPLAN NOTICES, V46, P215, DOI 10.1145/1925844.1926410
   Dinesh N, 2008, LECT NOTES ARTIF INT, V5076, P110, DOI 10.1007/978-3-540-70525-3_10
   Disney T, 2011, ACM SIGPLAN NOTICES, V46, P176, DOI 10.1145/2034574.2034800
   Dutchyn C, 2006, SCI COMPUT PROGRAM, V63, P207, DOI 10.1016/j.scico.2006.01.003
   ERNST GW, 1982, ACTA INFORM, V18, P149, DOI 10.1007/BF00264436
   Felleisen M., 2009, Semantics Engineering with PLT Redex
   Findler RB, 2002, ACM SIGPLAN NOTICES, V37, P48, DOI 10.1145/583852.581484
   FISCHER C, 2000, THESIS U OLDENBURG G
   Heidegger P, 2012, ACM SIGPLAN NOTICES, V47, P111, DOI 10.1145/2103621.2103671
   HELM R, 1990, SIGPLAN NOTICES, V25, P169, DOI 10.1145/97946.97967
   HOLLAND IM, 1992, LECT NOTES COMPUT SC, V615, P287, DOI 10.1007/BFb0053043
   Karaorman M., 1999, TECHNICAL REPORT
   Krishnamurthi S, 2006, J FUNCT PROGRAM, V16, P253, DOI 10.1017/S0956796805005733
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   Meyer B., 1991, PRENTICE HALL OBJECT
   Plosch R., 1999, Proceedings of Technology of Object-Oriented Languages and Systems - TOOLS 30 (Cat. No.PR00278), P248, DOI 10.1109/TOOLS.1999.787553
   RICE HG, 1953, T AM MATH SOC, V74, P358, DOI 10.2307/1990888
   Scholliers C., 2011, WORKSH SCHEM FUNCT P
   Shaner SM, 2007, ACM SIGPLAN NOTICES, V42, P351, DOI 10.1145/1297105.1297053
   Strickland TS, 2010, ACM SIGPLAN NOTICES, V45, P97, DOI 10.1145/1899661.1869642
   Sunshine J, 2011, ACM SIGPLAN NOTICES, V46, P713, DOI 10.1145/2076021.2048122
   Tyler B., 2003, FATES 03, P1
   Van Cutsem T., 2012, VUBSOFTTR1204
NR 30
TC 10
Z9 11
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 360
EP 375
DI 10.1016/j.scico.2013.09.005
PN 3
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LH
UT WOS:000347741200004
DA 2024-07-18
ER

PT J
AU Bianculli, D
   Filieri, A
   Ghezzi, C
   Mandrioli, D
AF Bianculli, Domenico
   Filieri, Antonio
   Ghezzi, Carlo
   Mandrioli, Dino
TI Syntactic-semantic incrementality for agile verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Agile development; Formal verification; Operator-precedence grammars;
   Attribute grammars; Incremental algorithms
ID MODEL; SOFTWARE
AB Modern software systems are continuously evolving, often because systems requirements change over time. Responding to requirements changes is one of the principles of agile methodologies. In this paper we envision the seamless integration of automated verification techniques within agile methodologies, thanks to the support for incrementality. Incremental verification accommodates the changes that occur within the schedule of frequent releases of software agile processes. We propose a general approach to developing families of verifiers that can support incremental verification for different kinds of artifacts and properties. The proposed syntactic-semantic approach is rooted in operator precedence grammars and their support for incremental parsing. Incremental verification procedures are encoded as attribute grammars, whose incremental evaluation goes hand in hand with incremental parsing. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bianculli, Domenico] Univ Luxembourg, SnT Ctr, L-2721 Luxembourg, Luxembourg.
   [Filieri, Antonio] Univ Stuttgart, Inst Software Technol, D-70569 Stuttgart, Germany.
   [Ghezzi, Carlo; Mandrioli, Dino] Politecn Milan, DEEPSE Grp, Dipartimento Elettron Informaz & Bioingn, I-20133 Milan, Italy.
C3 University of Luxembourg; University of Stuttgart; Polytechnic
   University of Milan
RP Bianculli, D (corresponding author), Univ Luxembourg, SnT Ctr, 4 Rue Alphonse Weicker, L-2721 Luxembourg, Luxembourg.
EM domenico.bianculli@uni.lu; antonio.filieri@informatik.uni-stuttgart.de;
   carlo.ghezzi@polimi.it; dino.mandrioli@polimi.it
RI Bianculli, Domenico/AAD-8981-2019
OI Bianculli, Domenico/0000-0002-4854-685X; Filieri,
   Antonio/0000-0001-9646-646X
FU European Community under the IDEAS-ERC grant [227977-SMScom]; National
   Research Fund, Luxembourg [FNR/P10/03]
FX This work has been partially supported by the European Community under
   the IDEAS-ERC grant agreement No. 227977-SMScom and by the National
   Research Fund, Luxembourg (FNR/P10/03).
CR [Anonymous], 2012, P 9 INT S FORM ASP C
   Baresi L, 2006, COMPUTER, V39, P36, DOI 10.1109/MC.2006.362
   Begel Andrew, 2007, 2007 First International Symposium on Empirical Software Engineering and Measurement, P255
   Bianculli D., 2013, SYNTACTIC SEMANTIC A
   Bianculli D, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P501, DOI 10.1145/1985793.1985862
   Black S, 2009, COMPUTER, V42, P37, DOI 10.1109/MC.2009.284
   Cobleigh JM, 2003, LECT NOTES COMPUT SC, V2619, P331
   Conway C., 2005, LECT NOTES COMPUT SC, V3576, P387
   Daws C, 2005, LECT NOTES COMPUT SC, V3407, P280
   DeBosschere K, 1996, SOFTWARE PRACT EXPER, V26, P763, DOI 10.1002/(SICI)1097-024X(199607)26:7<763::AID-SPE33>3.0.CO;2-L
   Demers Alan J., 1981, S PRINCIPLES PROGRAM, P105, DOI DOI 10.1145/567532.567544
   Dwyer MB, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P120, DOI 10.1109/FOSE.2007.6
   Filieri A., 2012, 2012 Proceedings of First International Workshop on Formal Methods in Software Engineering: Rigorous and Agile Approaches (FormSERA 2012), P2, DOI 10.1109/FormSERA.2012.6229785
   Filieri A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P341, DOI 10.1145/1985793.1985840
   Fischer M. J., 1969, STOC 69, P181
   FLOYD RW, 1963, J ACM, V10, P316, DOI 10.1145/321172.321179
   Fowler M., 2001, Software Development, V9, P28
   France R, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P37, DOI 10.1109/FOSE.2007.14
   Ghezzi Carlo, 2012, Large-Scale Complex IT Systems. Development, Operation and Management. 17th Monterey Workshop 2012. Revised Selected Papers, P369, DOI 10.1007/978-3-642-34059-8_19
   Ghezzi C., 1979, ACM Transactions on Programming Languages and Systems, V1, P58, DOI 10.1145/357062.357066
   Ghezzi C, 2013, S VIS LANG HUM CEN C, P62, DOI 10.1109/RE.2013.6636706
   Grune Dick, 2008, Parsing Techniques: A Practical Guide, V2nd, DOI [10.1007/978-0-387-68954-8, DOI 10.1007/978-0-387-68954-8]
   Gruner S., 2010, FM AM 2010 2 INT WOR, V179
   Gruner S., 2012, SIGSOFT SOFTW ENG NO, V37, P28
   Hahn EM, 2010, LECT NOTES COMPUT SC, V6174, P660, DOI 10.1007/978-3-642-14295-6_56
   Henzinger T.A., 2004, LECT NOTES COMPUT SC, V2772, P180
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Krishnamurthi S, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1217295.1217296
   Kwiatkowska M, 2010, LECT NOTES COMPUT SC, V6015, P23, DOI 10.1007/978-3-642-12002-2_3
   Larman C, 2003, COMPUTER, V36, P47, DOI 10.1109/MC.2003.1204375
   Lauterburg S, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P291, DOI 10.1145/1368088.1368128
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Meertens L.G.L.T., 1981, 17381 IW CWI
   Milton D., 1977, THESIS U WISCONSIN M
   Shankar A, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P310, DOI 10.1145/1250734.1250770
   Sistla P., 2006, ACM COMPUT SURV, V28
   Sokolsky O. V., 1994, Computer Aided Verification. 6th International Conference, CAV '94. Proceedings, P351
   Yang GW, 2009, PROC IEEE INT CONF S, P115, DOI 10.1109/ICSM.2009.5306334
NR 39
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 47
EP 54
DI 10.1016/j.scico.2013.11.026
PN 1
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100009
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Nierstrasz, O
   Kurs, J
AF Nierstrasz, Oscar
   Kurs, Jan
TI Parsing for agile modeling
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Parsing; Software modeling; Software analysis
ID LANGUAGE
AB In order to analyze software systems, it is necessary to model them. Static software models are commonly imported by parsing source code and related data. Unfortunately, building custom parsers for most programming languages is a non-trivial endeavor. This poses a major bottleneck for analyzing software systems programmed in languages for which importers do not already exist. Luckily, initial software models do not require detailed parsers, so it is possible to start analysis with a coarse-grained importer, which is then gradually refined. In this paper we propose an approach to "agile modeling" that exploits island grammars to extract initial coarse-grained models, parser combinators to enable gradual refinement of model importers, and various heuristics to recognize language structure, keywords and other language artifacts. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Nierstrasz, Oscar; Kurs, Jan] Univ Bern, Software Composit Grp, CH-3012 Bern, Switzerland.
C3 University of Bern
RP Nierstrasz, O (corresponding author), Univ Bern, Software Composit Grp, CH-3012 Bern, Switzerland.
OI Nierstrasz, Oscar/0000-0002-9975-9791
FU Swiss National Science Foundation (SNSF project) [200020-144126/1];
   Swiss National Science Foundation (SNF) [200020_144126] Funding Source:
   Swiss National Science Foundation (SNF)
FX We gratefully acknowledge the financial support of the Swiss National
   Science Foundation for the project "Agile Software Assessment" (SNSF
   project No. 200020-144126/1, Jan. 1, 2013-Dec. 30, 2015). We also thank
   Niko Schwarz and Erwann Wernli for their helpful comments.
CR de la Higuera C, 2005, PATTERN RECOGN, V38, P1332, DOI 10.1016/j.patcog.2005.01.003
   Erdweg Sebastian., 2012, PROC C SOFTWARE LANG, V7745 of LNCS, P244, DOI DOI 10.1007/978-3-642-36089-3_14
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   FROST R, 1989, COMPUT J, V32, P108, DOI 10.1093/comjnl/32.2.108
   Hindle A, 2008, INT C PROGRAM COMPRE, P133, DOI 10.1109/ICPC.2008.13
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Kraft NA, 2009, IEEE T SOFTWARE ENG, V35, P780, DOI 10.1109/TSE.2009.65
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Langone D., 2008, 2 WORKSH FAMIX MOOS, P32
   LaToza T. D., 2006, 28th International Conference on Software Engineering Proceedings, P492, DOI 10.1145/1134285.1134355
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Nierstrasz O., 2012, 2012 IEEE 20th International Conference on Program Comprehension, P3
   Nierstrasz O., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [DOI 10.1145/1095430, 10.1145/1095430.1081707, DOI 10.1145/1095430.1081707]
   NIERSTRASZ O, 2007, P C SOFTW MAINT REEN, P275
   Renggli L, 2010, LECT NOTES COMPUT SC, V6183, P380, DOI 10.1007/978-3-642-14107-2_19
   Sillito J., 2006, Proc. of the ACM SIGSOFT Int'l Symp. on Foundations of Software Engineering, P23, DOI DOI 10.1145/1181775.1181779
   Visser Eelco., 1997, Scannerless Generalized-LR Parsing
   Zanet S.D., 2009, THESIS U BERN
NR 18
TC 4
Z9 5
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 150
EP 156
DI 10.1016/j.scico.2013.11.011
PN 1
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100025
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU van den Brand, M
   Groote, JF
AF van den Brand, Mark
   Groote, Jan Friso
TI Software engineering: Redundancy is key
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software engineering; Software quality; Redundancy
AB Software engineers are humans and so they make lots of mistakes. Typically 1 out of 10 to 100 tasks go wrong. The only way to avoid these mistakes is to introduce redundancy in the software engineering process. This article is a plea to consciously introduce several levels of redundancy for each programming task. Depending on the required level of correctness, expressed in a residual error probability (typically 10(-3) to 10(-10)), each programming task must be carried out redundantly 4 to 8 times. This number is hardly influenced by the size of a programming endeavour. Training software engineers do have some effect as non-trained software engineers require a double amount of redundant tasks to deliver software of a desired quality. More compact programming, for instance by using domain specific languages, only reduces the number of redundant tasks by a small constant. (C) 2013 Elsevier B.V. All rights reserved.
C1 [van den Brand, Mark; Groote, Jan Friso] Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5612 AZ Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Groote, JF (corresponding author), Eindhoven Univ Technol, Dept Math & Comp Sci, Den Dolech 2, NL-5612 AZ Eindhoven, Netherlands.
EM M.G.j.v.d.Brand@tue.nl; J.F.Groote@tue.nl
OI van den Brand, Mark/0000-0003-3529-6182; Groote, Jan
   Friso/0000-0003-2196-6587
CR Brooks Frederick P., 1995, The mythical man-month
   Christensen B. R., 1975, INT WORLD COMPUT ED, V1, P26
   Clarke E., 2003, Proceedings 2003. Design Automation Conference (IEEE Cat. No.03CH37451), P368
   Cranen S, 2013, LECT NOTES COMPUT SC, V7795, P199, DOI 10.1007/978-3-642-36742-7_15
   Jones C., 2000, Software Assessments, Benchmarks, and Best Practices
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   MCCONNELL S., 1993, CODE COMPLETE
   Schlich Bastian, 2009, International Journal on Software Tools for Technology Transfer, V11, P187, DOI 10.1007/s10009-009-0106-5
   Schroeder B, 2009, PERF E R SI, V37, P193
   Smith JB, 2011, P REL MAINT S
   van den Brand M. G. J., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P365
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   Van Rossum G., 2011, An Introduction to Python
NR 13
TC 3
Z9 3
U1 0
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 75
EP 81
DI 10.1016/j.scico.2013.11.020
PN 1
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100014
OA Green Published, Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU van Deursen, A
   Mesbah, A
   Nederlof, A
AF van Deursen, Arie
   Mesbah, Ali
   Nederlof, Alex
TI Crawl-based analysis of web applications: Prospects and challenges
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Test automation; Web crawling; Software evolution
AB In this paper we review five years of research in the field of automated crawling and testing of web applications. We describe the open source CRAWLJAX tool, and the various extensions that have been proposed in order to address such issues as cross-browser compatibility testing, web application regression testing, and style sheet usage analysis.
   Based on that we identify the main challenges and future directions of crawl-based testing of web applications. In particular, we explore ways to reduce the exponential growth of the state space, as well as ways to involve the human tester in the loop, thus reconciling manual exploratory testing and automated test input generation. Finally, we sketch the future of crawl-based testing in the light of upcoming developments, such as the pervasive use of touch devices and mobile computing, and the increasing importance of cyber-security. (C) 2014 Elsevier B.V. All rights reserved.
C1 [van Deursen, Arie; Nederlof, Alex] Delft Univ Technol, NL-2600 AA Delft, Netherlands.
   [Mesbah, Ali] Univ British Columbia, Vancouver, BC V5Z 1M9, Canada.
C3 Delft University of Technology; University of British Columbia
RP van Deursen, A (corresponding author), Delft Univ Technol, NL-2600 AA Delft, Netherlands.
EM arie.vandeursen@tudelft.nl; amesbah@ece.ubc.ca; alex@nederlof.com
RI Mesbah, Ali/C-3675-2013; van Deursen, Arie/G-3084-2011
OI Mesbah, Ali/0000-0002-8783-7967; van Deursen, Arie/0000-0003-4850-3312
CR Behfarshad Zahra, 2013, Web Engineering. 13th International Conference, ICWE 2013. Proceedings: LNCS 7977, P52, DOI 10.1007/978-3-642-39200-9_7
   Bergman M. K., 2001, Journal of Electronic Publishing, V7, DOI 10.3998/3336451.0007.104
   Bezemer CP, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P81, DOI 10.1145/1595696.1595711
   Choudhary S., 2013, P INT C WEB ENG ICWE
   Choudhary SR, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P702, DOI 10.1109/ICSE.2013.6606616
   Ernst MD, 2007, SCI COMPUT PROGRAM, V69, P35, DOI 10.1016/j.scico.2007.01.015
   Fard Amin Milani, 2013, ISSRE
   Hendrickson Elisabeth, 2013, Explore it!: reduce risk and increase confidence with exploratory testing
   Heydon A., 1999, World Wide Web, V2, P219, DOI 10.1023/A:1019213109274
   Joorabchi M. E., 2013, P ACM IEEE INT S EMP
   Levenshtein V. I., 1966, SOV PHYS DOKL, V10, P707
   Marchetto A, 2011, EMPIR SOFTW ENG, V16, P103, DOI 10.1007/s10664-010-9149-1
   Mesbah Ali, 2008, 2008 8th International Conference on Web Engineering (ICWE), P122, DOI 10.1109/ICWE.2008.24
   Mesbah A., 2009, THESIS DELFT U TECHN
   Mesbah A, 2012, ACM T WEB, V6, DOI 10.1145/2109205.2109208
   Mesbah A, 2012, PROC INT CONF SOFTW, P408, DOI 10.1109/ICSE.2012.6227174
   Mesbah A, 2012, IEEE T SOFTWARE ENG, V38, P35, DOI 10.1109/TSE.2011.28
   Mesbah A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P561, DOI 10.1145/1985793.1985870
   Mesbah A, 2008, J SYST SOFTWARE, V81, P2194, DOI 10.1016/j.jss.2008.04.005
   Mesbah A, 2009, PROC INT CONF SOFTW, P210, DOI 10.1109/ICSE.2009.5070522
   Milani Fard A., 2013, P IEEE INT C SOURC C
   Mirshokraie Shabnam, 2012, Web Engineering. Proceedings 12th International Conference, ICWE 2012, P238, DOI 10.1007/978-3-642-31753-8_18
   Mirshokraie S., 2013, P INT C SOFTW TEST V
   Montoto P, 2011, DATA KNOWL ENG, V70, P269, DOI 10.1016/j.datak.2010.12.001
   Nederlof A, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE COMPANION 2014), P4, DOI 10.1145/2591062.2591170
   Pinkerton B., 1994, P 2 INT WORLD WIDE W, V94, P17
   Roest Danny, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P127, DOI 10.1109/ICST.2010.59
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Yue C, 2013, ACM T WEB, V7, DOI 10.1145/2460383.2460386
NR 29
TC 16
Z9 16
U1 0
U2 25
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 173
EP 180
DI 10.1016/j.scico.2014.09.005
PN 1
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100028
OA Bronze
DA 2024-07-18
ER

PT J
AU Gómez, VU
   Ducasse, S
   Kellens, A
AF Gomez, Veronica Uquillas
   Ducasse, Stephane
   Kellens, Andy
TI Supporting streams of changes during branch integration
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Branch; Source code changes; Stream of changes; Change dependencies;
   Merge
AB When developing large applications, integrators face the problem of integrating changes between branches or forks. While version control systems provide support for merging changes, this support is mostly text-based, and does not take the program entities into account. Furthermore, there exists no support for assessing which other changes a particular change depends on have to be integrated. Consequently, integrators are left to perform a manual and tedious comparison of the changes within the sequence of their branch and to successfully integrate them.
   In this paper, we present an approach that analyzes changes within a sequence of changes (stream of changes): such analysis identifies and characterizes dependencies between the changes. The approach identifies changes as autonomous, only used by others, only using other changes, or both. Such a characterization aims at easing the integrator's work. In addition, the approach supports important queries that an integrator otherwise has to perform manually. We applied the approach to a stream of changes representing 5 years of development work on an open-source project and report our experiences. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Gomez, Veronica Uquillas; Ducasse, Stephane; Kellens, Andy] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
   [Gomez, Veronica Uquillas; Ducasse, Stephane; Kellens, Andy] Inria Lille Nord Europe, RMoD, Lille, France.
   [Gomez, Veronica Uquillas; Ducasse, Stephane; Kellens, Andy] Univ Lille, Lille, France.
C3 Vrije Universiteit Brussel; Universite de Lille
RP Ducasse, S (corresponding author), Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
OI Ducasse, Stephane/0000-0001-6070-6599
CR Andersen J, 2010, AUTOMAT SOFTW ENG, V17, P119, DOI 10.1007/s10515-010-0062-z
   Apel S., 2011, P 19 ACM SIGSOFT S 1, P190, DOI DOI 10.1145/2025113.2025141
   Bergel Alexandre, 2013, Deep Into Pharo
   Brudaru I. I., 2008, P 2008 INT WORKSHOP, P30
   Collard ML, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P217
   DAmbros M., 2008, Software Evolution, P37
   Dragan N., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P520, DOI 10.1109/ICSM.2011.6080822
   Ducasse  S., 2011, TECHNICAL REPORT
   Ebraert P, 2008, WORK CONF REVERSE EN, P319, DOI 10.1109/WCRE.2008.43
   Fritz T., 2010, Proceedings of the 32nd International Conference on Software Engineering - Volume 1, ICSE '10, V1, P175
   German DM, 2009, INFORM SOFTWARE TECH, V51, P1394, DOI 10.1016/j.infsof.2009.04.018
   Gîrba T, 2006, J SOFTW MAINT EVOL-R, V18, P207, DOI 10.1002/smr.325
   Gomez Veronica Uquillas, 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P55, DOI 10.1109/WCRE.2010.15
   Gomez V.U., 2012, THESIS VRIJE U BRUSS
   Gómez VU, 2012, COMPUT LANG SYST STR, V38, P44, DOI 10.1016/j.cl.2011.11.001
   Hattori L., 2009, INT WORK MINING SOFT
   Herzig K, 2011, 22ND IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING (ISSRE), P60, DOI 10.1109/ISSRE.2011.16
   Laval J, 2011, SCI COMPUT PROGRAM, V76, P1177, DOI 10.1016/j.scico.2010.11.014
   Lindhom T., 2001, THESIS HELSINKI U TE
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Padioleau Y, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P247, DOI 10.1145/1357010.1352618
   Ren X, 2006, IEEE T SOFTWARE ENG, V32, P718, DOI 10.1109/TSE.2006.90
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   Robbes R, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P847, DOI 10.1145/1368088.1368219
   Zimmermann T., 2004, Proc. of the 1st Int'lWorkshop onMining Software Repositories (MSR), P2, DOI [DOI 10.1049/IC:20040466, 10.1049/ic:20040466]
NR 25
TC 3
Z9 3
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 84
EP 106
DI 10.1016/j.scico.2014.07.012
PN 1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU James, P
   Moller, F
   Nguyen, HN
   Roggenbach, M
   Schneider, S
   Treharne, H
AF James, Phillip
   Moller, Faron
   Hoang Nga Nguyen
   Roggenbach, Markus
   Schneider, Steve
   Treharne, Helen
TI On modelling and verifying railway interlockings: Tracking train lengths
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Railway verification; CSP parallel to B; Modelling and analysis
ID VERIFICATION
AB The safety analysis of interlocking railway systems involves verifying freedom from collision, derailment and run-through (that is, trains rolling over wrongly-set points). Typically, various unrealistic assumptions are made when modelling trains within networks in order to facilitate their analyses. In particular, trains are invariably assumed to be shorter than track segments; and generally only a very few trains are allowed to be introduced into the network under consideration.
   In this paper we propose modelling methodologies which elegantly dismiss these assumptions. We first provide a framework for modelling arbitrarily many trains of arbitrary length in a network; and then we demonstrate that it is enough with our modelling approach to consider only two trains when verifying safety conditions. That is, if a safety violation appears in the original model with any number of trains of any and varying lengths, then a violation will be exposed in the simpler model with only two trains.
   Importantly, our modelling framework has been developed alongside - and in conjunction with - railway engineers. It is vital that they can validate the models and verification conditions, and - in the case of design errors - obtain comprehensible feedback. We demonstrate our modelling and abstraction techniques on two simple interlocking systems proposed by our industrial partner. As our formalization is, by design, near to their way of thinking, they are comfortable with it and trust it. (C) 2014 Elsevier B.V. All rights reserved.
C1 [James, Phillip; Moller, Faron; Hoang Nga Nguyen; Roggenbach, Markus] Swansea Univ, Swansea, W Glam, Wales.
   [Schneider, Steve; Treharne, Helen] Univ Surrey, Guildford GU2 5XH, Surrey, England.
C3 Swansea University; University of Surrey
RP James, P (corresponding author), Swansea Univ, Swansea, W Glam, Wales.
OI Moller, Faron/0000-0001-9535-8053; Schneider, Steve/0000-0001-8365-6993;
   Treharne, Helen/0000-0003-1835-4803; Roggenbach,
   Markus/0000-0002-3819-2787; James, Phillip/0000-0002-4307-649X
FU EPSRC [EP/I010807/1] Funding Source: UKRI
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J.-R., 2010, MODELING EVENT B
   Cimatti Alessandro, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P378, DOI 10.1007/978-3-642-31424-7_29
   Fantechi Alessandro, 2011, Computer Safety, Reliability, and Security. Proceedings 30th International Conference, SAFECOMP 2011, P383, DOI 10.1007/978-3-642-24270-0_28
   Ferrari A, 2011, FORMS/FORMAT 2010: FORMAL METHODS FOR AUTOMATION AND SAFETY IN RAILWAY AND AUTOMOTIVE SYSTEMS, P107, DOI 10.1007/978-3-642-14261-1_11
   Haxthausen AE, 2000, IEEE T SOFTWARE ENG, V26, P687, DOI 10.1109/32.879808
   Haxthausen AE, 2011, FORM ASP COMPUT, V23, P191, DOI 10.1007/s00165-009-0143-6
   Hoare CAR., 1985, Communicating Sequential Processes
   Isobe Yoshinao, 2012, Integrated Formal Methods. Proceedings 9th International Conference, IFM 2012, P54, DOI 10.1007/978-3-642-30729-4_5
   Jacquart R., 2004, IFIP 18 WORLD COMP C
   James P., 2010, ELECT COMMUN EASST, V35, P17
   Kanso K, 2009, ELECTRON NOTES THEOR, V250, P19, DOI 10.1016/j.entcs.2009.08.015
   Leuschel M, 2011, FORM ASP COMPUT, V23, P683, DOI 10.1007/s00165-010-0172-1
   Moller F., 2012, LECT NOTES COMPUTER, V7857, P193, DOI [10.1007/978-3-642- 39611-3 20, DOI 10.1007/978-3-642-39611-3]
   Moller F., 2012, CS1202 U SURR
   Moller F., 2012, P IFM 12 ABZ 2012 PO, P31
   Moller F., 2012, ELECT COMMUN EASST, V53
   Morgan C., 1990, BEAUTY IS OUR BUSINE, P319, DOI DOI 10.1007/978-1-4612-4476-9_37
   Morley MatthewJ., 1993, 6 INT WORKSHOP HOLTP, P464
   NOCK O.S., 1980, RAILWAY SIGNALLING
   Sabatier Denis, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P369, DOI 10.1007/978-3-642-30885-7_34
   Schneider S, 2005, FORM ASP COMPUT, V17, P390, DOI 10.1007/s00165-005-0076-7
   Simpson A, 1997, SPR S DISC MATH, P223
   Winter K., 2003, 26 AUSTRALASIAN COMP, P309
   Winter K., 2014, AUST COMPUT SCI COMM, V24
NR 25
TC 16
Z9 17
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 315
EP 336
DI 10.1016/j.scico.2014.04.005
PN 3
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KA
UT WOS:000345181100004
OA hybrid, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Büttner, F
   Gogolla, M
AF Buettner, Fabian
   Gogolla, Martin
TI On OCL-based imperative languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Formal Methods (SBMF)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
SP CNPq, Brazilian Sci & Technol Res Council, CAPES, Brazilian Higher Educ Fund Council, FAPESP, Sao Paulo Res Fdn, Google Inc, Univ Sao Paulo, Univ Presbiteriana Mackenzie
DE OCL; Imperative programming language; UML; Embedding
ID MODEL TRANSFORMATION; SEMANTICS; UML
AB The Object Constraint Language (OCL) is a well-accepted ingredient in model-driven engineering and accompanying modeling languages such as UML (Unified Modeling Language) and EMF (Eclipse Modeling Framework) that support object-oriented software development. Among various possibilities, OCL offers the formulation of class invariants and operation contracts in form of pre- and postconditions, and side-effect free query operations. Much research has been done on OCL and various mature implementations are available for it. OCL is also used as the foundation for several modeling-specific programming and transformation languages. However, an intrusive way of embedding OCL into these language hampers us when we want to benefit from the existing achievements for OCL. In response to this shortcoming, we propose the language SOIL (Simple OCL-like Imperative Language), which we implemented in the UML and OCL modeling tool USE to amend its declarative model validation features. The expression sub-language of SOIL is identical to OCL. SOIL adds imperative constructs for programming in the domain of models. Thus by employing OCL and SOIL, it is possible to describe any operation in a declarative way and in an operational way on the modeling level without going into the details of a conventional programming language. In contrast to other similar approaches, the embedding of OCL into SOIL is done in a careful, non-intrusive way so that purity of OCL is preserved. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Buettner, Fabian] Ecole Mines INRIA, AtlanMod, LINA, Nantes, France.
   [Gogolla, Martin] Univ Bremen, Database Syst Group, D-28359 Bremen, Germany.
C3 IMT - Institut Mines-Telecom; IMT Atlantique; University of Bremen
RP Büttner, F (corresponding author), Ecole Mines INRIA, AtlanMod, LINA, Nantes, France.
CR Akehurst David H., 2004, ELECT NOTES THEOR CO, V102, P21, DOI DOI 10.1016/J.ENTCS.2003.09.002
   Anastasakis K, 2007, LECT NOTES COMPUT SC, V4735, P436
   [Anonymous], 2013, USE UML BASED SPECIF
   [Anonymous], 2007, The Definitive ANTLR Reference: Building Domain-Specific Languages
   [Anonymous], P MOD TRANSF PRACT W
   [Anonymous], 2012, MDT ECLIPSE MODEL DE
   [Anonymous], 1996, A Theory of Objects
   Brucker A.D., 2012, P 12 WORKSH OCL TEXT, P19
   Brucker AD, 2009, ACTA INFORM, V46, P255, DOI 10.1007/s00236-009-0093-8
   Büttner F, 2011, LECT NOTES COMPUT SC, V7021, P124, DOI 10.1007/978-3-642-25032-3_9
   Cabot J, 2007, SCI COMPUT PROGRAM, V68, P179, DOI 10.1016/j.scico.2007.05.001
   Cabot Jordi., 2007, Proc. of the 22nd IEEE/ACM International Conference on Automated Software Engineering (ASE'07), P547
   CENGARLE MV, 2004, SOFTW SYST MODEL, V3, P9
   Chiorean D., 2004, ELECTRON NOTES THEOR, V102, P99, DOI DOI 10.1016/J.ENTCS.2003.09.005
   Clark T, 1999, LECT NOTES COMPUT SC, V1723, P503
   Clavel M., 2008, ELECT COMMUN EASST, V15
   Clavel M., 2009, ELECT COMMUN EASST, V24
   Cuadrado J.S., 2008, ELECT COMMUN EASST, V15
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   Gogolla M, 2008, LECT NOTES COMPUT SC, V5301, P446, DOI 10.1007/978-3-540-87875-9_32
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Hussmann H, 2002, SCI COMPUT PROGRAM, V44, P51, DOI 10.1016/S0167-6423(02)00032-1
   Jeanneret C., 2006, SOFTWARE SYSTEMS ENG
   Jiang K., 2008, ELECT COMMUN EASST, V9
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   *KLASS OBJ, 2005, KLASS OBJ OCL CHECK
   Kolovos DS, 2006, LECT NOTES COMPUT SC, V4066, P128
   Krieger M.P., 2008, ELECT COMMUN EASST, V15
   Kyas M, 2005, LECT NOTES COMPUT SC, V3535, P83
   Kyas M, 2005, ELECTRON NOTES THEOR, V115, P39, DOI 10.1016/j.entcs.2004.09.027
   Liang Sheng, 1995, P 22 ACM SIGPLAN SIG, P333, DOI DOI 10.1145/199448.199528
   Markovic S, 2008, SOFTW SYST MODEL, V7, P25, DOI 10.1007/s10270-007-0056-x
   Mellor SJ., 2002, EXECUTABLE UML FDN M
   Mellor StephenJ., 2004, MDA Distilled: Principles of Model-Driven Architecture
   Meyer B., 1992, Eiffel: The Language
   Mika J.P. Siikarla, 2004, ELECT NOTES THEOR CO, V102, P175
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   OMG, 2012, FORMAL20120101 OMG
   OMG, 2011, FORMAL20110101 OMG
   OMG, 2011, PTC20101005 OMG
   OSullivan Bryan, 2008, Real world Haskell: Code you can believe in
   Plotkin G. D., 1981, A structural approach to operational semantics
   Poppe K.-M., 2011, THESIS U BREMEN
   Richters M, 2002, LECT NOTES COMPUT SC, V2263, P42
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 48
TC 26
Z9 26
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
BP 162
EP 178
DI 10.1016/j.scico.2013.10.003
PN B
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK7HA
UT WOS:000338598100005
OA Bronze
DA 2024-07-18
ER

PT J
AU Gil, A
   Segura, J
   Temme, NM
AF Gil, Amparo
   Segura, Javier
   Temme, Nico M.
TI Recent software developments for special functions in the
   Santander-Amsterdam project
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Special functions; Incomplete gamma functions; Marcum's Q-function;
   Zeros of special functions; Numerical software
ID NUMERICALLY SATISFACTORY SOLUTIONS; CYLINDER FUNCTIONS U(A,X); COMPLEX
   AIRY FUNCTIONS; 2 FORTRAN-77 ROUTINES; GAMMA-FUNCTION RATIOS; IMAGINARY
   ORDERS; BESSEL-FUNCTIONS; COMPUTATION; ALGORITHM; ZEROS
AB We give an overview of published algorithms by our group and of current activities and future plans. In particular, we give details on methods for computing special functions and discuss in detail two current lines of research. Firstly, we describe the recent developments for the computation of central and non-central chi-square cumulative distributions (also called Marcum Q-functions), and we present a new quadrature method for computing them. Secondly, we describe the fourth-order methods for computing zeros of special functions recently developed, and we provide an explicit example for the computation of complex zeros of Bessel functions. We end with an overview of published software by our group for computing special functions. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Gil, Amparo] Univ Cantabria, ETSI Caminos, Dept Matemat Aplicada & Ciencias Computac, E-39005 Santander, Spain.
   [Segura, Javier] Univ Cantabria, Dept Matemat Estadist & Computac, E-39005 Santander, Spain.
   [Temme, Nico M.] IAA, NL-1391 VD Abcoude 18, Netherlands.
   [Temme, Nico M.] CWI, NL-1098 XG Amsterdam, Netherlands.
C3 Universidad de Cantabria; Universidad de Cantabria
RP Segura, J (corresponding author), Univ Cantabria, Dept Matemat Estadist & Computac, E-39005 Santander, Spain.
EM amparo.gil@unican.es; javier.segura@unican.es; Nico.Temme@cwi.nl
RI Segura, Javier/K-9657-2014; Gil, Amparo/H-7594-2014
OI Segura, Javier/0000-0002-0841-5636; Gil, Amparo/0000-0002-7449-4205
FU Ministerio de Economia y Competitividad, Spain [MTM2009-11686,
   MTM2012-34787]
FX The authors thank the anonymous referees for helpful comments. The
   authors acknowledge support from Ministerio de Economia y
   Competitividad, Spain, projects MTM2009-11686 and MTM2012-34787.
CR AMOS DE, 1986, ACM T MATH SOFTWARE, V12, P265, DOI 10.1145/7921.214331
   Andras S., 2011, Acta Univ. Sapientiae, Math., V3, P60
   ASHOUR SK, 1990, COMMUN STAT SIMULAT, V19, P1279
   CHIARELLA C, 1968, MATH COMPUT, V22, P137, DOI 10.2307/2004771
   Deaño A, 2004, J APPROX THEORY, V131, P208, DOI 10.1016/j.jat.2004.09.006
   Deaño A, 2008, MATH COMPUT, V77, P2277, DOI 10.1090/S0025-5718-08-02122-4
   Deaño A, 2010, J COMPUT APPL MATH, V233, P1505, DOI 10.1016/j.cam.2008.03.051
   DIDONATO AR, 1987, ACM T MATH SOFTWARE, V13, P318, DOI 10.1145/29380.214348
   DIDONATO AR, 1986, ACM T MATH SOFTWARE, V12, P377, DOI 10.1145/22721.23109
   Dyrting S., 2004, Computational Economics, V24, P35, DOI 10.1023/B:CSEM.0000038840.58451.c9
   Fabijonas BR, 2004, ACM T MATH SOFTWARE, V30, P491, DOI 10.1145/1039813.1039819
   Fabijonas BR, 2004, ACM T MATH SOFTWARE, V30, P471, DOI 10.1145/1039813.1039818
   GAUTSCHI W, 1967, SIAM REV, V9, P24, DOI 10.1137/1009002
   Gautschi W., 1979, ACM Transactions on Mathematical Software, V5, P466, DOI 10.1145/355853.355863
   GAUTSCHI W, 1979, ACM T MATH SOFTWARE, V5, P482
   Gil A, 2006, J COMPUT APPL MATH, V190, P270, DOI 10.1016/j.cam.2005.01.041
   Gil A, 2006, ACM T MATH SOFTWARE, V32, P102, DOI 10.1145/1132973.1132978
   Gil A, 2006, ACM T MATH SOFTWARE, V32, P70, DOI 10.1145/1132973.1132977
   Gil A, 2004, NUMER MATH, V98, P105, DOI 10.1007/s00211-004-0517-x
   Gil A, 2004, ACM T MATH SOFTWARE, V30, P145, DOI 10.1145/992200.992203
   Gil A, 2004, ACM T MATH SOFTWARE, V30, P159, DOI 10.1145/992200.992204
   Gil A, 2003, NUMER ALGORITHMS, V33, P265, DOI 10.1023/A:1025524324969
   Gil A, 2003, J COMPUT APPL MATH, V153, P225, DOI 10.1016/S0377-0427(02)00608-8
   Gil A, 2003, J APPROX THEORY, V120, P253, DOI 10.1016/S0021-9045(02)00022-9
   Gil A, 2002, ACM T MATH SOFTWARE, V28, P436, DOI 10.1145/592843.592847
   Gil A, 2002, NUMER ALGORITHMS, V30, P11, DOI 10.1023/A:1015636825525
   Gil A, 2002, ACM T MATH SOFTWARE, V28, P325, DOI 10.1145/569147.569150
   Gil A, 2001, COMPUT PHYS COMMUN, V139, P186, DOI 10.1016/S0010-4655(01)00188-6
   Gil A, 2001, MATH COMPUT, V70, P1183, DOI 10.1090/S0025-5718-00-01268-0
   Gil A, 1998, COMPUT PHYS COMMUN, V108, P267, DOI 10.1016/S0010-4655(97)00126-4
   Gil A., 2012, MAPLE PACKAGE UNPUB
   Gil A., 2013, ACM T MATH IN PRESS
   Gil A, 2007, MATH COMPUT, V76, P1449, DOI 10.1090/S0025-5718-07-01918-7
   Gil A, 2012, SIAM J SCI COMPUT, V34, pA2965, DOI 10.1137/120872553
   Gil A, 2012, COMPUT PHYS COMMUN, V183, P794, DOI 10.1016/j.cpc.2011.11.025
   Gil A, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049662.2049668
   Gil A, 2011, IMA J NUMER ANAL, V31, P1194, DOI 10.1093/imanum/drq012
   Gil A, 2007, NUMERICAL METHODS FOR SPECIAL FUNCTIONS, P1, DOI 10.1137/1.9780898717822
   Gil A, 2009, SIAM J SCI COMPUT, V31, P1716, DOI 10.1137/070712006
   HELSTROM CW, 1992, IEEE T INFORM THEORY, V38, P1422, DOI 10.1109/18.144731
   Knusel L, 1996, SIAM J SCI COMPUT, V17, P1224, DOI 10.1137/S1064827594263631
   MARCUM JI, 1960, IRE T INFORM THEOR, V6, P59, DOI 10.1109/TIT.1960.1057560
   Olver F. W., 2010, NIST HDB MATH FUNCTI, P193
   Olver F.W.J., 1997, AKP Classics, DOI DOI 10.1201/9781439864548
   ROBERTSON GH, 1976, IEEE T AERO ELEC SYS, V12, P568, DOI 10.1109/TAES.1976.308257
   Ross AHM, 1999, IEEE T INFORM THEORY, V45, P1327, DOI 10.1109/18.761294
   Schneider BI, 2010, COMPUT PHYS COMMUN, V181, P2091, DOI 10.1016/j.cpc.2010.08.038
   Segura J, 2000, COMPUT PHYS COMMUN, V124, P104, DOI 10.1016/S0010-4655(99)00428-2
   Segura J, 2008, NUMER MATH, V111, P109, DOI 10.1007/s00211-008-0175-5
   Segura J, 2013, NUMER MATH, V124, P723, DOI 10.1007/s00211-013-0528-6
   Segura J, 2010, SIAM J NUMER ANAL, V48, P452, DOI 10.1137/090747762
   SHNIDMAN DA, 1989, IEEE T INFORM THEORY, V35, P389, DOI 10.1109/18.32133
   Szego G, 1975, Colloquium Publications, V4th
   TEMME NM, 1993, COMPUT MATH APPL, V25, P55, DOI 10.1016/0898-1221(93)90198-5
NR 54
TC 1
Z9 1
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
SI SI
BP 42
EP 54
DI 10.1016/j.scico.2013.11.004
PN A
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4II
UT WOS:000338387700005
OA Bronze, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Hannukainen, A
   Korotov, S
   Krízek, M
AF Hannukainen, Antti
   Korotov, Sergey
   Krizek, Michal
TI On numerical regularity of the face-to-face longest-edge bisection
   algorithm for tetrahedral partitions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bisection algorithm; Conforming finite element method; Regular family of
   partitions; Nested tetrahedral partitions; Simplicial elements
ID FASTER CONVERGENCE; LOCAL REFINEMENT; TRIANGLES
AB The finite element method usually requires regular or strongly regular families of partitions in order to get guaranteed a priori or a posteriori error estimates. In this paper we examine the recently invented longest-edge bisection algorithm that always produces only face-to-face simplicial partitions. First, we prove that the regularity of the family of partitions generated by this algorithm is equivalent to its strong regularity in any dimension. Second, we present a number of 3d numerical tests, which demonstrate that the technique seems to produce regular (and therefore strongly regular) families of tetrahedral partitions. However, a mathematical proof of this statement is still an open problem. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Hannukainen, Antti] Aalto Univ, Dept Math & Syst Anal, FI-00076 Aalto, Finland.
   [Korotov, Sergey] BCAM Basque Ctr Appl Math, E-48009 Bilbao, Basque Country, Spain.
   [Korotov, Sergey] Basque Fdn Sci, Ikerbasque, E-48011 Bilbao, Spain.
   [Krizek, Michal] Acad Sci Czech Republ, Inst Math, CZ-11567 Prague 1, Czech Republic.
C3 Aalto University; Basque Center for Applied Mathematics (BCAM); Basque
   Foundation for Science; Czech Academy of Sciences; Institute of
   Mathematics of the Czech Academy of Sciences
RP Korotov, S (corresponding author), BCAM Basque Ctr Appl Math, Mazarredo 14, E-48009 Bilbao, Basque Country, Spain.
EM antti.hannukainen@aalto.fi; korotov@bcamath.org; krizek@math.cas.cz
RI Krizek, Michal/D-5137-2014
FU Academy of Finland and by the Alfred Kordelin Foundation [133174];
   MICINN, Spain [MTM2011-24766]; EU [FP7-295217 HPC-GA]; Grant Agency of
   the Czech Republic [P101/14-020675, RVO 67985840]; Academy of Finland
   (AKA) [133174] Funding Source: Academy of Finland (AKA)
FX The authors thank J. Brandts and M.-C. Rivara for spirited discussions.
   The first author was supported by the grant 133174 from the Academy of
   Finland and by the Alfred Kordelin Foundation. The second author was
   supported by Grant MTM2011-24766 of the MICINN, Spain, and EU project
   FP7-295217 HPC-GA. The third author was supported by the Grant
   P101/14-020675 of the Grant Agency of the Czech Republic and Project RVO
   67985840.
CR ADLER A, 1983, MATH COMPUT, V40, P571, DOI 10.2307/2007533
   Arnold DN, 2000, SIAM J SCI COMPUT, V22, P431, DOI 10.1137/S1064827597323373
   Bansch E., 1991, Impact of Computing in Science and Engineering, V3, P181, DOI 10.1016/0899-8248(91)90006-G
   BORNEMANN F, 1993, INT J NUMER METH ENG, V36, P3187, DOI 10.1002/nme.1620361808
   Brandts J, 2008, COMPUT MATH APPL, V55, P2227, DOI 10.1016/j.camwa.2007.11.010
   Brandts J, 2011, APPL MATH-CZECH, V56, P417, DOI 10.1007/s10492-011-0024-1
   Brandts J, 2009, APPL MATH LETT, V22, P1210, DOI 10.1016/j.aml.2009.01.031
   EIGER A, 1984, ACM T MATH SOFTWARE, V10, P367, DOI 10.1145/2701.2705
   Hannukainen A, 2010, J COMPUT APPL MATH, V235, P419, DOI 10.1016/j.cam.2010.05.046
   Hannukainen A, 2010, LECT NOTES COMPUT SC, V5910, P571, DOI 10.1007/978-3-642-12535-5_68
   Horst R, 1997, MATH COMPUT, V66, P691, DOI 10.1090/S0025-5718-97-00809-0
   KEARFOTT B, 1978, MATH COMPUT, V32, P1147, DOI 10.2307/2006341
   Korotov S, 2008, COMP MATH MATH PHYS+, V48, P1687, DOI 10.1134/S0965542508090170
   LIU AW, 1994, MATH COMPUT, V63, P141, DOI 10.1090/S0025-5718-1994-1240660-4
   LIU AW, 1995, SIAM J SCI COMPUT, V16, P1269, DOI 10.1137/0916074
   Maubach J.M., 1992, SIAM J SCI COMPUT, V13, P210
   MUTHUKRISHNAN SN, 1995, AIAA J, V33, P928, DOI 10.2514/3.12386
   Plaza A, 2005, APPL NUMER MATH, V55, P458, DOI 10.1016/j.apnum.2004.12.003
   Plaza A, 2000, APPL NUMER MATH, V32, P195, DOI 10.1016/S0168-9274(99)00022-7
   Plaza A, 2010, APPL MATH COMPUT, V216, P862, DOI 10.1016/j.amc.2010.01.093
   Rivara MC, 2009, APPL NUMER MATH, V59, P2218, DOI 10.1016/j.apnum.2008.12.011
   Rivara MC, 1997, INT J NUMER METH ENG, V40, P3313, DOI 10.1002/(SICI)1097-0207(19970930)40:18<3313::AID-NME214>3.3.CO;2-R
   RIVARA MC, 1992, COMMUN APPL NUMER M, V8, P281, DOI 10.1002/cnm.1630080502
   RIVARA MC, 1984, INT J NUMER METH ENG, V20, P745, DOI 10.1002/nme.1620200412
   Rivara MC, 1996, MATH COMPUT, V65, P1485, DOI 10.1090/S0025-5718-96-00772-7
   RIVARA MC, 1989, INT J NUMER METH ENG, V28, P2889, DOI 10.1002/nme.1620281212
   ROSENBERG IG, 1975, MATH COMPUT, V29, P390, DOI 10.1090/S0025-5718-1975-0375068-5
   SIKORSKI K, 1979, MATH COMPUT, V33, P722, DOI 10.1090/S0025-5718-1979-0521286-6
   STYNES M, 1980, MATH COMPUT, V35, P1195, DOI 10.1090/S0025-5718-1980-0583497-1
   Stynes M., 1980, Numerical Solution of Highly Nonlinear Problems. Fixed Point Algorithms and Complementarity Problems, P93
   STYNES M, 1979, MATH COMPUT, V33, P717, DOI 10.1090/S0025-5718-1979-0521285-4
   Stynes M., 1983, IRISH MATH SOC NEWSL, V8, P38
   zek Kr.i., 1997, NUMER METHODS PARTIA, V13, P201
   ZLAMAL M, 1968, NUMER MATH, V12, P394, DOI 10.1007/BF02161362
NR 34
TC 17
Z9 17
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
SI SI
BP 34
EP 41
DI 10.1016/j.scico.2013.05.002
PN A
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4II
UT WOS:000338387700004
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Classen, A
   Cordy, M
   Heymans, P
   Legay, A
   Schobbens, PY
AF Classen, Andreas
   Cordy, Maxime
   Heymans, Patrick
   Legay, Axel
   Schobbens, Pierre-Yves
TI Formal semantics, modular specification, and symbolic verification of
   product-line behaviour
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product line; Verification; Feature; Language; Specification
ID MODEL CHECKING
AB Formal techniques for specifying and verifying Software Product Lines (SPL) are actively studied. While the foundations of this domain recently made significant progress with the introduction of Featured Transition Systems (FTSs) and associated algorithms, SPL model checking still faces the well-known state explosion problem. Moreover, there is a need for high-level specification languages usable in industry. We address the state explosion problem by applying the principles of symbolic model checking to FTS-based verification of SPLs. In order to specify properties on specific products only, we extend the temporal logic CTL with feature quantifiers. Next, we show how SPL behaviour can be specified with fSMV, a variant of SMV, the specification language of the industry-strength model checker NuSMV. fSMV is a feature-oriented extension of SMV originally introduced by Plath and Ryan. We prove that fSMV and FTSs are expressively equivalent. Finally, we connect these results to a NuSMV extension we developed for verifying SPLs against CTL properties. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Classen, Andreas; Cordy, Maxime; Heymans, Patrick; Schobbens, Pierre-Yves] Univ Namur, PReCISE Res Ctr, Namur, Belgium.
   [Heymans, Patrick] Univ Lille 1, LIFL, CNRS, INRIA Lille Nord Europe, F-59655 Villeneuve Dascq, France.
   [Legay, Axel] INRIA Rennes, Rennes, France.
C3 University of Namur; Universite de Lille; Centre National de la
   Recherche Scientifique (CNRS); Universite de Rennes
RP Cordy, M (corresponding author), Univ Namur, PReCISE Res Ctr, Namur, Belgium.
EM acs@info.fundp.ac.be; mcr@info.fundp.ac.be; phe@info.fundp.ac.be;
   axel.legay@inria.fr; pys@info.fundp.ac.be
RI Cordy, Maxime/O-3328-2019; Schobbens, Pierre-Yves/H-2333-2011
OI Cordy, Maxime/0000-0001-8312-1358; Schobbens,
   Pierre-Yves/0000-0001-8677-4485
FU FNRS [FC 91490]
FX FNRS research fellow, project FC 91490.
CR Apel Sven, 2011, P IEEE INT C AUT SOF
   Asirelli Patrizia, 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P130, DOI 10.1109/SPLC.2011.34
   Asirelli P., 2010, P 4 INT WORKSH VAR M, P37
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Cavada Roberto, NUSMV 2 2 TUTORIAL
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Classen Andreas, 2012, International Journal on Software Tools for Technology Transfer, V14, P589, DOI 10.1007/s10009-012-0234-1
   Classen A., 2010, ICSE 10, V1, P335, DOI DOI 10.1145/1806799.1806850
   Classen A, 2008, LECT NOTES COMPUT SC, V4961, P16, DOI 10.1007/978-3-540-78743-3_2
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Classen A, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P321, DOI 10.1145/1985793.1985838
   Classen A, 2011, SCI COMPUT PROGRAM, V76, P1130, DOI 10.1016/j.scico.2010.10.005
   Classen A, 2009, PROC INT CONF SOFTW, P227, DOI 10.1109/ICSE-COMPANION.2009.5070988
   Classen Andreas, 2010, SPLMC00000001 PCSTR
   Classen Andreas, 2010, SPLMC00000002 PCSTR
   Cordy M., 2012, VAMOS, P183, DOI DOI 10.1145/2110147.2110168
   Cordy M, 2012, PROC INT CONF SOFTW, P672, DOI 10.1109/ICSE.2012.6227150
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Ebert C, 2009, COMPUTER, V42, P42, DOI 10.1109/MC.2009.118
   Fantechi A, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P193, DOI 10.1109/SPLC.2008.45
   Fantechi A., 2007, ESEC FSE 07, P521
   Fischbein D., 2006, ROSATEA 06, P39
   Fisler K., 2001, Software Engineering Notes, V26, P152, DOI 10.1145/503271.503231
   FRANCEZ N, 1990, LECT NOTES COMPUT SC, V458, P232
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Kang Kyo C, 1990, Technical Report
   Krishnamurthi S., 2004, Software Engineering Notes, V29, P137, DOI 10.1145/1041685.1029916
   Lauenroth K, 2009, IEEE INT CONF AUTOM, P269, DOI 10.1109/ASE.2009.16
   Li H., 2002, Software Engineering Notes, V27, P89, DOI 10.1145/605466.605481
   McMillan K. L., 1993, Symbolic model checking
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Papadimitriou C. H., 1994, Computational Complexity
   Plath M, 2001, SCI COMPUT PROGRAM, V41, P53, DOI 10.1016/S0167-6423(00)00018-6
   Plath M, 2000, FEATURE INTERACTIONS IN TELECOMMUNICATIONS AND SOFTWARE SYSTEMS VI, P129
   POST H, 2008, ASE 08
   Schobbens PY, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P139
   ter Beek Maurice H., 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P450, DOI 10.1007/978-3-642-32759-9_36
   Ziadi T, 2004, LECT NOTES COMPUT SC, V3014, P129
NR 41
TC 40
Z9 41
U1 0
U2 12
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 416
EP 439
DI 10.1016/j.scico.2013.09.019
PN B
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100009
OA hybrid
DA 2024-07-18
ER

PT J
AU Chabridon, S
   Conan, D
   Abid, Z
   Taconet, C
AF Chabridon, Sophie
   Conan, Denis
   Abid, Zied
   Taconet, Chantal
TI Building ubiquitous QoC-aware applications through model-driven software
   engineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven software engineering; Context; Quality of context; Domain
   specific language; Ubiquitous computing; Pervasive computing
ID CONTEXT; MIDDLEWARE; CHALLENGES; FRAMEWORK; QUALITY
AB As every-day mobile devices can easily be equipped with multiple sensing capabilities, ubiquitous applications are expected to exploit the richness of the context information that can be collected by these devices in order to provide the service that is the most appropriate to the situation of the user. However, the design and implementation of such context-aware ubiquitous appplications remain challenging as there exist very few models and tools to guide application designers and developers in mastering the complexity of context information. This becomes even more crucial as context is by nature imperfect. One way to address this issue is to associate to context information meta-data representing its quality. We propose a generic and extensible design process for context-aware applications taking into account the quality of context (QoC). We demonstrate its use on a prototype application for sending flash sale offers to mobile users. We present extensive performance results in terms of memory and processing time of both elementary context management operations and the whole context policy implementing the Flash sale application. The cost of adding QoC management is also measured and appears to be limited to a few milliseconds. We show that a context policy with 120 QoC-aware nodes can be processed in less than 100 ms on a mobile phone. Moreover, a policy of almost 3000 nodes can be instantiated before exhausting the resources of the phone. This enables very rich application scenarios enhancing the user experience and will favor the development of new ubiquitous applications. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Chabridon, Sophie; Conan, Denis; Abid, Zied; Taconet, Chantal] TELECOM SudParis, Inst TELECOM, CNRS, UMR Samovar, F-91011 Evry, France.
C3 Centre National de la Recherche Scientifique (CNRS); IMT - Institut
   Mines-Telecom; IMT Atlantique; Institut Polytechnique de Paris; Telecom
   SudParis
RP Chabridon, S (corresponding author), TELECOM SudParis, Inst TELECOM, CNRS, UMR Samovar, 9 Rue Charles Fourier, F-91011 Evry, France.
EM Sophie.Chabridon@telecom-sudparis.eu; Denis.Conan@telecom-sudparis.eu;
   Zied.Abid@telecom-sudparis.eu; Chantal.Taconet@telecom-sudparis.eu
RI ; Chabridon, Sophie/L-4984-2016
OI Denis, Conan/0000-0002-1252-7374; Chabridon, Sophie/0000-0002-1591-6754
CR Abid Z., 2009, LNCS, V5786
   Baldauf M, 2007, INT J AD HOC UBIQ CO, V2, P263, DOI 10.1504/IJAHUC.2007.014070
   Beamon B., 2010, P 9 WORKSH AD REFL M
   Bettini C, 2010, PERVASIVE MOB COMPUT, V6, P161, DOI 10.1016/j.pmcj.2009.06.002
   Bouzeghoub A, 2010, P 5 INT C DIG INF MA
   Buchholz T., 2003, 10 INT WORKSH HP OV
   Chabridon S., 2011, UCAML 11
   Chabridon S., 2011, LNCS, V6723
   Chen H, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS, PROCEEDINGS, P277, DOI 10.1109/PERCOM.2004.1276865
   Conan D, 2007, LECT NOTES COMPUT SC, V4531, P210
   Coutaz J., 2005, COMMUN ACM, V48, P53
   Coutaz Joelle., 2002, Proc. 4th International Conference on Computer-Aided Design of User Interfaces (CADUl 2002), P13
   DAROCHA RCA, 2005, P 3 INT WORKSH MIDDL
   Dey A., 2000, CHI 2000 WORKSHOP WH, P304
   Dey AK, 2001, HUM-COMPUT INTERACT, V16, P97, DOI 10.1207/S15327051HCI16234_02
   Gamez N., 2011, P 5 INT S UB COMP AM
   Gámez N, 2011, PERS UBIQUIT COMPUT, V15, P329, DOI 10.1007/s00779-010-0354-0
   Henricksen K, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS WORKSHOPS, PROCEEDINGS, P33
   Henricksen K, 2006, PERVASIVE MOB COMPUT, V2, P37, DOI 10.1016/j.pmcj.2005.07.003
   Hervás R, 2011, LECT NOTES COMPUT SC, V6882, P296, DOI 10.1007/978-3-642-23863-5_30
   Hoyos J. R., 2010, 3 ISCOTEC WORKSH CON
   Hoyos JR, 2011, ADV INTEL SOFT COMPU, V92, P41
   Huebscher MC, 2006, PERS UBIQUIT COMPUT, V10, P12, DOI 10.1007/s00779-005-0035-6
   Klyne G., 2007, COMPOSITE CAPABILITY
   Krause M, 2005, LECT NOTES COMPUT SC, V3744, P324
   Kulkarni D, 2012, ACM T SOFTW ENG METH, V21, DOI 10.1145/2089116.2089121
   Lange R, 2009, LECT NOTES COMPUT SC, V5786, P76, DOI 10.1007/978-3-642-04559-2_7
   Lange R, 2009, INT CONF PERVAS COMP, P300
   Manzoor A., 2011, WEB MOBILE INFORM SE
   Object Management Group, 2008, SOFTW SYST PROC ENG
   Parra C, 2011, SCI COMPUT PROGRAM, V76, P1247, DOI 10.1016/j.scico.2010.12.005
   Paspallis N, 2008, LECT NOTES COMPUT SC, V5331, P553
   Preuveneers D, 2005, LECT NOTES COMPUT SC, V3543, P14
   Ranganathan A, 2004, LECT NOTES COMPUT SC, V3231, P397
   Ribault J., 2010, P 3 INT ICST C SIM T
   Riboni D, 2011, PERS UBIQUIT COMPUT, V15, P271, DOI 10.1007/s00779-010-0331-7
   Rodríguez MD, 2012, SCI COMPUT PROGRAM, V77, P46, DOI 10.1016/j.scico.2010.12.003
   ROUVOY R, 2008, IEEE DISTRIBUTED SYS, V9
   Samama N., 2008, GLOBAL POSITIONING T
   Senart A, 2006, LECT NOTES COMPUT SC, V4276, P1722
   Sheng Q.Z., 2005, Mobile Business, P206, DOI DOI 10.1109/ICMB.2005.33
   Stevenson G, 2010, IEEE PERVAS COMPUT, V9, P28, DOI 10.1109/MPRV.2009.90
   Taconet Chantal, 2010, Journal of Digital Information Management, V8, P78
   Taconet C, 2009, LECT NOTES COMPUT SC, V5870, P513, DOI 10.1007/978-3-642-05148-7_39
   Vera R, 2011, PERS UBIQUIT COMPUT, V15, P365, DOI 10.1007/s00779-010-0357-x
   Wang XH, 2004, SECOND IEEE ANNUAL CONFERENCE ON PERVASIVE COMPUTING AND COMMUNICATIONS WORKSHOPS, PROCEEDINGS, P18
   Zimmer T., 2006, ADV PERV COMP 2006 A, V2006
NR 47
TC 16
Z9 16
U1 0
U2 18
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1912
EP 1929
DI 10.1016/j.scico.2012.07.019
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300010
OA Bronze
DA 2024-07-18
ER

PT J
AU Grant, S
   Cordy, JR
   Skillicorn, DB
AF Grant, Scott
   Cordy, James R.
   Skillicorn, David B.
TI Using heuristics to estimate an appropriate number of latent topics in
   source code analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Source code analysis; Latent Dirichlet Allocation; Latent topic model;
   Code clusters
ID TRACEABILITY LINKS; SOFTWARE; MODELS
AB Latent Dirichlet Allocation (LDA) is a data clustering algorithm that performs especially well for text documents. In natural-language applications it automatically finds groups of related words (called "latent topics") and clusters the documents into sets that are about the same "topic". LDA has also been applied to source code, where the documents are natural source code units such as methods or classes, and the words are the keywords, operators, and programmer-defined names in the code. The problem of determining a topic count that most appropriately describes a set of source code documents is an open problem. We address this empirically by constructing clusterings with different numbers of topics for a large number of software systems, and then use a pair of measures based on source code locality and topic model similarity to assess how well the topic structure identifies related source code units. Results suggest that the topic count required can be closely approximated using the number of software code fragments in the system. We extend these results to recommend appropriate topic counts for arbitrary software systems based on an analysis of a set of open source systems. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Grant, Scott; Cordy, James R.; Skillicorn, David B.] Queens Univ, Sch Comp, Kingston, ON, Canada.
C3 Queens University - Canada
RP Grant, S (corresponding author), Queens Univ, Sch Comp, Kingston, ON, Canada.
EM scott@cs.queensu.ca
RI Cordy, James R/G-9736-2011
OI Skillicorn, David/0000-0003-0605-4029
FU Natural Sciences and Engineering Research Council of Canada; Ontario
   Graduate Scholarship Program; IBM Canada Centre for Advanced Studies
FX This work is supported in part by the Natural Sciences and Engineering
   Research Council of Canada, by the Ontario Graduate Scholarship Program,
   and by the IBM Canada Centre for Advanced Studies.
CR [Anonymous], 1999, Latent variable models and factor analysis
   [Anonymous], J SOFTWARE MAINTENAN
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Asuncion HU, 2010, 2010 ACM IEEE 32 INT, V1, P95
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   Bollen K.A., 1989, STRUCTURAL EQUATIONS
   Bradford RogerB., 2008, Proceedings of the 17th ACM Conference on Information and Knowledge Management, CIKM '08, P153, DOI DOI 10.1145/1458082.1458105
   COMON P, 1994, SIGNAL PROCESS, V36, P287, DOI 10.1016/0165-1684(94)90029-9
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Gotel O. C. Z., 1994, Proceedings of the First International Conference on Requirements Engineering (Cat. No.94TH0613-0), P94, DOI 10.1109/ICRE.1994.292398
   Grant S., 2011, 2011 18th Working Conference on Reverse Engineering, P87, DOI 10.1109/WCRE.2011.20
   Grant S., 2010, TOPIC ESTIMATE SOURC
   Grant S., 2008, P 2008 WORKSH LINK A, P23
   Grant S., 2010, P 10 IEEE INT WORK C
   Grant S, 2012, EUR CON SFTWR MTNCE, P403, DOI 10.1109/CSMR.2012.51
   Grant S, 2008, WORK CONF REVERSE EN, P138, DOI 10.1109/WCRE.2008.49
   Grant S, 2009, INT C PROGRAM COMPRE, P233, DOI 10.1109/ICPC.2009.5090048
   Griffiths TL, 2004, P NATL ACAD SCI USA, V101, P5228, DOI 10.1073/pnas.0307752101
   Hassan AE, 2004, 7TH INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION, P76, DOI 10.1109/IWPSE.2004.1334771
   Heinrich Gregor., 2004, Parameter estimation for text analysis
   Hindle A., 2011, P 8 WORK C MIN SOFTW, P163, DOI DOI 10.1145/1985441.1985466
   Hindle A, 2009, PROC IEEE INT CONF S, P339, DOI 10.1109/ICSM.2009.5306310
   Kuhn A, 2007, INFORM SOFTWARE TECH, V49, P230, DOI 10.1016/j.infsof.2006.10.017
   Linstead E., 2007, P 22 IEEE ACM INT C, P461, DOI [10.1145/1321631.1321709, DOI 10.1145/1321631.1321709]
   Linstead E, 2008, SEVENTH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS, PROCEEDINGS, P813, DOI 10.1109/ICMLA.2008.47
   Lukins SK, 2008, WORK CONF REVERSE EN, P155, DOI 10.1109/WCRE.2008.33
   Maletic J. I., 1999, 14th IEEE International Conference on Automated Software Engineering, P251, DOI 10.1109/ASE.1999.802296
   Maletic JI, 2000, PROC INT C TOOLS ART, P46, DOI 10.1109/TAI.2000.889845
   Marcus A, 2003, PROC INT CONF SOFTW, P125, DOI 10.1109/ICSE.2003.1201194
   Maskeri Girish, 2008, 1st India Software Engineering Conference. ISEC 2008, P113
   Oliveto Rocco, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P68, DOI 10.1109/ICPC.2010.20
   Phan X.-H., 2013, GIBBSLDA A C C IMPLE
   Roy CK, 2010, J SOFTW MAINT EVOL-R, V22, P165, DOI 10.1002/smr.416
   Roy ChanchalK., 2010, Proceedings of the 4th International Workshop on Software Clones, IWSC '10, P17
   Schölkopf B, 2000, NEURAL COMPUT, V12, P1207, DOI 10.1162/089976600300015565
   Steinwart I, 2003, IEEE T PATTERN ANAL, V25, P1274, DOI 10.1109/TPAMI.2003.1233901
   Thomas SW, 2010, IEEE INT WORK C SO, P55, DOI 10.1109/SCAM.2010.13
   Thomas SW, 2011, 8 WORK C MIN SOFTW R, P173
   Wallach Hanna M., 2009, Advances in neural information processing systems, P1973, DOI DOI 10.1007/S10708-008-9161-9
NR 39
TC 27
Z9 31
U1 0
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1663
EP 1678
DI 10.1016/j.scico.2013.03.015
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100023
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Goodloe, AE
   Muñoz, CA
AF Goodloe, Alwyn E.
   Munoz, Cesar A.
TI Compositional verification of a communication protocol for a remotely
   operated aircraft
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Protocol verification; Interactive theorem proving; Compositional
   reasoning
ID OWICKI/GRIES
AB This paper presents the formal specification and verification of a communication protocol between a ground station and a remotely operated aircraft. The protocol can be seen as the vertical composition of protocol layers, where each layer performs input and output message processing, and the horizontal composition of different processes concurrently inhabiting the same layer, where each process should satisfy a distinct delivery requirement. A compositional technique is used to formally prove that the protocol satisfies these requirements. Although the protocol itself is not novel, the methodology employed in its verification extends existing techniques by automating the tedious and usually cumbersome part of the proof, thereby making the iterative design process of protocols feasible. Published by Elsevier B.V.
C1 [Goodloe, Alwyn E.; Munoz, Cesar A.] NASA, Langley Res Ctr, Hampton, VA 23681 USA.
C3 National Aeronautics & Space Administration (NASA); NASA Langley
   Research Center
RP Goodloe, AE (corresponding author), NASA, Langley Res Ctr, Hampton, VA 23681 USA.
EM a.goodloe@nasa.gov; Cesar.A.Munoz@nasa.gov
FU National Aeronautics and Space Administration under the NASA
   [NNX08AE37A]; NASA [NNX08AE37A, 102954] Funding Source: Federal RePORTER
FX This work was supported by the National Aeronautics and Space
   Administration under the NASA Cooperative Agreement NNX08AE37A awarded
   to the National Institute of Aerospace (NIA) while the authors were
   resident at the NIA. Authors are listed in alphabetical order.
CR Archer M., P DES APPL STRAT TAC, P16
   Badban B, 2005, FORM ASP COMPUT, V17, P342, DOI 10.1007/s00165-004-0070-0
   Bailey R., P AIAA GUID NAV CONT
   BROWN GM, 1991, IEEE T COMMUN, V39, P524, DOI 10.1109/26.81740
   Brunekreff J., 1993, CAMBRIDGE TRACTS THE, V36, P71
   Cardell-Oliver R.M., 1992, THESIS U CAMBRIDGE
   Charpentier M, 2006, SCI COMPUT PROGRAM, V60, P221, DOI 10.1016/j.scico.2005.08.001
   Chkliaev D, 2003, LECT NOTES COMPUT SC, V2619, P113
   Gouda MohamedG., 1998, ELEMENTS NETWORK PRO
   Holzmann G. J., 1991, Design and Validation of Comp. Protocols, V512
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Hoogerwoord R., 2006, FORMAL DERVIATION SL
   Jones C., 1983, ACM T PROGR LANG SYS, V5, P596
   Jordan T., P 25 AIAA AER MEAS T
   Kaivola R, 1997, LECT NOTES COMPUT SC, V1254, P48
   Koudijs J., 2006, THESIS TU EINDHOVEN
   Lensink L., 2009, NASATM2009215943 LAN
   Mooij AJ, 2005, LECT NOTES COMPUT SC, V3785, P390
   Murch A., 2008, AIAA GUIDANCE NAVIGA, DOI [https://doi.org/10.2514/6.2008-6990, DOI 10.2514/6.2008-6990]
   Nieto LP, 2003, LECT NOTES COMPUT SC, V2618, P348
   Nipkow T, 1999, LECT NOTES COMPUT SC, V1577, P188
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   OWRE S, 1992, LECT NOTES ARTIF INT, V607, P748
   Paliwoda K., 1991, DISTRIBUTED COMPUTIN
   Qiwen Xu, 1997, Formal Aspects of Computing, V9, P149, DOI 10.1007/BF01211617
   Rushby J., 2001, Technical Report
   Rusu V, 2001, INT FED INFO PROC, V69, P251
   SHANKAR AU, 1990, LECT NOTES COMPUT SC, V430, P669
   Stahl K., LECT NOTES COMPUTER, V1680, P57
   Stenning N. V., 1976, Computer Networks, V1, P99, DOI 10.1016/0376-5075(76)90015-5
   Tannenbaum A., 1996, COMPUTER NETWORKS
   Vaandrager F., 1986, TECHNICAL REPORT
   Vafeiadis V, 2007, LECT NOTES COMPUT SC, V4703, P256
   Van de Snepscheut J. L. A., 1995, Formal Aspects of Computing, V7, P3, DOI 10.1007/BF01214620
NR 34
TC 1
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 813
EP 827
DI 10.1016/j.scico.2011.10.011
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700004
OA Bronze
DA 2024-07-18
ER

PT J
AU Chin, WN
   David, C
   Nguyen, HH
   Qin, SC
AF Chin, Wei-Ngan
   David, Cristina
   Huu Hai Nguyen
   Qin, Shengchao
TI Automated verification of shape, size and bag properties via
   user-defined predicates in separation logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automated verification; Separation logic; Entailment checking; Inductive
   shape predicates with size and bag properties
ID ALGORITHM; POINTERS; MODEL
AB Despite their popularity and importance, pointer-based programs remain a major challenge for program verification. In recent years, separation logic has emerged as a contender for formal reasoning of pointer-based programs. Recent works have focused on specialized provers that are mostly based on fixed sets of predicates. In this paper, we propose an automated verification system for ensuring the safety of pointer-based programs, where specifications handled are concise, precise and expressive. Our approach uses user-definable predicates to allow programmers to describe a wide range of data structures with their associated shape, size and bag (multi-set) properties. To support automatic verification, we design a new entailment checking procedure that can handle well-founded predicates (that may be recursively defined) using unfold/fold reasoning. We have proven the soundness and termination of our verification system and built a prototype system to demonstrate the viability of our approach. (c) 2010 Elsevier B.V. All rights reserved.
C1 [Qin, Shengchao] Univ Teesside, Sch Comp, Middlesbrough, Cleveland, England.
   [Chin, Wei-Ngan; David, Cristina; Huu Hai Nguyen] Natl Univ Singapore, Dept Comp Sci, Singapore 117548, Singapore.
C3 University of Teesside; National University of Singapore
RP Qin, SC (corresponding author), Univ Teesside, Sch Comp, Middlesbrough, Cleveland, England.
EM S.Qin@tees.ac.uk
RI Qin, Shengchao/F-4823-2012
OI Qin, Shengchao/0000-0003-3028-8191
FU MoE Tier-2 [R-252-000-411-112]; EPSRC [EP/E021948/1, EP/G042322/1];
   EPSRC [EP/G042322/1, EP/E021948/1, EP/G042322/2] Funding Source: UKRI
FX This work was supported by the MoE Tier-2 project R-252-000-411-112 and
   the EPSRC projects EP/E021948/1 and EP/G042322/1.
CR [Anonymous], 1978, PROC STOC 1978, DOI DOI 10.1145/800133.804361
   [Anonymous], 2003, Technical Report HPL-2003-148
   [Anonymous], 1936, Theorie der endlichen und unendlichen Graphen
   BARNETT M, 2004, LNCS, V3362, P49, DOI [DOI 10.1007/978-3-540-30569-9_3, 10.1007]
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2006, LECT NOTES COMPUT SC, V4111, P115
   Bingham J, 2006, LECT NOTES COMPUT SC, V3855, P207
   BURSTALL RM, 1977, J ACM, V24, P44, DOI 10.1145/321992.321996
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Chen CY, 2005, ACM SIGPLAN NOTICES, V40, P66, DOI 10.1145/1090189.1086375
   Chin WN, 2007, IEEE INT C ENG COMP, P307, DOI 10.1109/ICECCS.2007.17
   Chin WN, 2005, PROC INT CONF SOFTW, P186, DOI 10.1145/1062455.1062500
   Cok DR, 2005, J OBJECT TECHNOL, V4, P77, DOI 10.5381/jot.2005.4.8.a4
   Cok DR, 2005, LECT NOTES COMPUT SC, V3362, P108
   de Moura L, 2007, LECT NOTES ARTIF INT, V4603, P183
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Elgaard J, 1998, LECT NOTES COMPUT SC, V1427, P516, DOI 10.1007/BFb0028773
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Gotsman A, 2006, LECT NOTES COMPUT SC, V4134, P240
   Harwood W, 2008, LECT NOTES COMPUT SC, V5160, P141, DOI 10.1007/978-3-540-85762-4_10
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare CAR, 1999, LECT NOTES COMPUT SC, V1628, P1
   Hoare T, 2003, J ACM, V50, P63, DOI 10.1145/602382.602403
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Ishtiaq S, 2001, ACM SIGPLAN NOTICES, V36, P14, DOI 10.1145/373243.375719
   Jia LM, 2006, LECT NOTES COMPUT SC, V3924, P131
   Jones C, 2006, COMPUTER, V39, P93, DOI 10.1109/MC.2006.145
   Kassios IT, 2006, LECT NOTES COMPUT SC, V4085, P268
   Klarlund N., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P196, DOI 10.1145/158511.158628
   KLARLUND N, 2001, BRICS NOTES SERIES
   Kuncak V, 2005, LECT NOTES ARTIF INT, V3632, P260
   KUNCAK V, 2007, THESIS MIT
   Kuncak V, 2006, IEEE T SOFTWARE ENG, V32, P988, DOI 10.1109/TSE.2006.125
   Lahiri SK, 2006, ACM SIGPLAN NOTICES, V41, P115, DOI 10.1145/1111320.1111048
   Lam P., 2007, THESIS MIT
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Lee O, 2005, LECT NOTES COMPUT SC, V3444, P124
   Leino K.R.M., 2008, LECT NOTES MARKTOBER
   Meyer B., 1992, Eiffel: The Language
   Moller A, 2001, ACM SIGPLAN NOTICES, V36, P221, DOI 10.1145/381694.378851
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Nguyen HH, 2007, LECT NOTES COMPUT SC, V4349, P251
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   O'Hearn PW., 2001, Local reasoning about programs that alter data structures, volume 2142 of LNCS, V2142, P1
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   PUGH W, 1990, COMMUN ACM, V33, P668, DOI 10.1145/78973.78977
   PUGH W, 1992, COMMUN ACM, V35, P102, DOI 10.1145/135226.135233
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Rugina R, 2004, LECT NOTES COMPUT SC, V3148, P228
   Sagiv M, 2002, ACM T PROGR LANG SYS, V24, P217, DOI 10.1145/514188.514190
   Sims ÉJ, 2006, THEOR COMPUT SCI, V351, P258, DOI 10.1016/j.tcs.2005.09.071
   Spivey J. M., 1989, The Z Notation: A Reference Manual
   Stump A., 2002, LNCS, V2404, P500
   Tinelli C, 2010, INT WORKSH SAT MOD T
   Tschannen J., 2009, THESIS ETH ZURICH
   Walker D., 2000, TYP COMP 3 INT WORKS, V2071, P177, DOI [10.1007/3-540-45332-6\_7, DOI 10.1007/3-540-45332-6]
   Wies T, 2006, LECT NOTES COMPUT SC, V3855, P157
   XI H, 1998, THESIS CARNEGIE MELL
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
   [No title captured]
NR 61
TC 86
Z9 93
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2012
VL 77
IS 9
BP 1006
EP 1036
DI 10.1016/j.scico.2010.07.004
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 967RD
UT WOS:000305924600004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Codur, KB
   Dogru, AH
AF Codur, K. Burak
   Dogru, Ali H.
TI Regulations and software evolution: An example from the military domain
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software development standard; Software evolution; IEEE/EIA 12207;
   MIL-STD-498; DOD-STD-2167; MIL-STD-1679
AB In this article, the impact of regulatory changes on software development is assessed in the context of military standards. A previously conducted experiment incorporating three standards is further investigated for this purpose, outlining the characteristics of the evolution in standards and its effects. In addition to this experiment that was designed with projects conducted as graduate class work, a real project from the industry is utilized, to demonstrate the similar effects of the evolution as discovered in the earlier experiment. Finally, the results of the assessment are generalized and a forecast is presented for the next potential regulation change, the IEEE Std 12207-2008. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Codur, K. Burak] Turkish Mil Acad, Def Sci Inst, TR-06654 Bakanliklar Ankara, Turkey.
   [Dogru, Ali H.] Middle E Tech Univ, Dept Comp Engn, TR-06531 Ankara, Turkey.
C3 Milli Savunma University; Middle East Technical University
RP Codur, KB (corresponding author), Turkish Mil Acad, Def Sci Inst, TR-06654 Bakanliklar Ankara, Turkey.
EM kbcodur@yahoo.com; dogru@ceng.metu.edu.tr
RI Dogru, Ali/ABA-4664-2020; DOGRU, ALI HIKMET/N-5918-2017
OI DOGRU, ALI HIKMET/0000-0003-0992-7024
CR Alexander I. F., 2002, Writing Better Requirements
   [Anonymous], 1992, RTCADO178
   [Anonymous], 1995, 1220701996 IEEEEIA
   [Anonymous], 1998, 9 INT S SOFTW REL EN
   [Anonymous], 1985, DODSTD2167
   [Anonymous], 2008, 122072008 IEEE
   [Anonymous], 1978, MILSTD1679 US DEP DE
   Codur KB, 2009, IWPSE-EVOL 09: ERCIM WORKSHOP ON SOFTWARE EVOLUTION (EVOL) AND INTERNATIONAL WORKSHOP ON PRINCIPLES OF SOFTWARE EVOLUTION (IWPSE), P41
   Cowhey PF, 2009, TRANSFORMING GLOBAL INFORMATION AND COMMUNICATION MARKETS: THE POLITICAL ECONOMY OF INNOVATION, P1
   Goth G, 2005, IEEE SOFTWARE, V22, P83, DOI 10.1109/MS.2005.41
   Kasser J. E., 2004, Systems Engineering, V7, P243, DOI 10.1002/sys.20005
   McDonald C, 2010, IEEE ANN HIST COMPUT, V32, P32, DOI 10.1109/MAHC.2009.58
   Moore JW, 1996, COMMUN ACM, V39, P17, DOI 10.1145/232014.232020
   Royce W.E., 1998, AW OBJ TECHNOL S
   *US DEP DEF, 1994, MILSTD498 US DEP DEF
   Valerdi R., P CSER 2005 MARCH 23
NR 16
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2012
VL 77
IS 5
BP 636
EP 643
DI 10.1016/j.scico.2011.12.001
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917OQ
UT WOS:000302188000004
DA 2024-07-18
ER

PT J
AU da Costa, SA
   Ribeiro, L
AF da Costa, Simone Andre
   Ribeiro, Leila
TI Verification of graph grammars using a logical approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE (Attributed) graph grammars; Relational structures; Theorem proving
ID ATTRIBUTED GRAPHS; MODEL CHECKING; TRANSFORMATIONS
AB Graph grammars may be used as specification technique for different kinds of systems, specially in situations in which states are complex structures that can be adequately modeled as graphs (possibly with an attribute data part) and in which the behavior involves a large amount of parallelism and can be described as reactions to stimuli that can be observed in the state of the system. The verification of properties of such systems is a difficult task due to many aspects: the systems in many situations involve an infinite number of states; states themselves are complex and large; there are a number of different computation possibilities due to the fact that rule applications may occur in parallel. There are already some approaches to verification of graph grammars based on model checking, but in these cases only finite state systems can be analyzed. Other approaches propose over- and/or under-approximations of the state space, but in this case it is not possible to check arbitrary properties. This work proposes a relational and logical approach to graph grammars that allows formal verification of systems using mathematical induction. We use relational structures to define graph grammars and first-order logic to model graph transformations. This approach allows proving properties of systems with infinite state spaces. In this paper we first consider the case of simple (typed) graphs, and then we extend the approach to the non-trivial case of attributed graphs, that are graphs in which values are associated to vertices. Attributed graph grammars are very interesting from a practical point of view, since it is possible to use variables and terms when specifying the behavior expressed by rules. These values (or terms) come from algebras specified as abstract data types. The use of attributed graphs gives the specifier a language that is more suitable for specification, merging the advantages of the graphical representation with the standard representation of classical data types. We show that attributes can be smoothly integrated in our representation of graph grammars, giving rise to a framework to reason about attributed graph grammars. (C) 2010 Elsevier B.V. All rights reserved.
C1 [da Costa, Simone Andre] Univ Fed Pelotas, Dept Informat, BR-96010900 Pelotas, Brazil.
   [Ribeiro, Leila] Univ Fed do Rio Grande, Inst Informat, BR-9150090 Porto Alegre, RS, Brazil.
C3 Universidade Federal de Pelotas
RP da Costa, SA (corresponding author), Univ Fed Pelotas, Dept Informat, Campus Univ S-N, BR-96010900 Pelotas, Brazil.
EM scosta@inf.ufrgs.br; leila@inf.ufrgs.br
FU CNPq
FX The second author's work was partially supported by CNPq.
CR ABDULLA PA, REGULAR MODEL CHECKI, P348
   Alur R., 2004, COMPUTER AIDED VERIF, V3114
   [Anonymous], 1997, Handbook of Graph Grammars and Computing by Graph Transformation
   Baldan P, 2002, LECT NOTES COMPUT SC, V2505, P14
   Baldan P, 2008, INFORM COMPUT, V206, P869, DOI 10.1016/j.ic.2008.04.002
   Baldan P, 2007, INFORM COMPUT, V205, P733, DOI 10.1016/j.ic.2006.11.004
   Baresi L, 2006, LECT NOTES COMPUT SC, V4178, P306
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   BOUAJJANI A, ABSTRACT REGULAR MOD, P372
   Clarke E, 2001, LECT NOTES COMPUT SC, V2000, P176
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Courcelle B, 2004, LECT NOTES COMPUT SC, V3340, P1
   COURCELLE B, 1994, THEOR COMPUT SCI, V126, P53, DOI 10.1016/0304-3975(94)90268-2
   Courcelle B., EXPRESSION GRAPH PRO, P313
   da Costa SA, 2009, ELECTRON NOTES THEOR, V240, P43, DOI 10.1016/j.entcs.2009.05.044
   Delzanno G., 2000, Computer Aided Verification, V1855, P53
   Dotti FL, 2003, LECT NOTES COMPUT SC, V2884, P261
   Dwyer MB, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P120, DOI 10.1109/FOSE.2007.6
   Ehrig H., 1997, ALGEBRAIC APPROACH 2, P247
   Ehrig H., 1999, Handbook of Graph Grammars and Computing by Graph Transformation: Applications, Languages and Tools, V2
   Ehrig H, 2006, FUND INFORM, V74, P31
   Fisher M., 2005, NATO SECURITY SCI SE, V1, P91
   Gurevich Yuri., 1985, MODEL THEORETIC LOGI, P479
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Kastenberg H, 2006, ELECTRON NOTES THEOR, V154, P47, DOI 10.1016/j.entcs.2005.03.030
   Kesten Y, 2001, THEOR COMPUT SCI, V256, P93, DOI 10.1016/S0304-3975(00)00103-1
   König B, 2008, LECT NOTES COMPUT SC, V5214, P305, DOI 10.1007/978-3-540-87405-8_21
   LOWE M, 1993, ALGEBRAIC FRAMEWORK, P185
   Michelon L., 2006, BRAZ S SOFTW ENG, P97
   Rensink A, 2004, LECT NOTES COMPUT SC, V3256, P226
   Robinson JA, 2001, Handbook of automated reasoning
   Strecker M, 2008, ELECTRON NOTES THEOR, V203, P135, DOI 10.1016/j.entcs.2008.03.039
   Taentzer G, 2000, LECT NOTES COMPUT SC, V1779, P481
   Tanenbaum A.S., 2002, COMPUT NETW, VFourth
NR 34
TC 8
Z9 8
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2012
VL 77
IS 4
SI SI
BP 480
EP 504
DI 10.1016/j.scico.2010.02.006
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 906ER
UT WOS:000301328200004
OA Bronze
DA 2024-07-18
ER

PT J
AU López, C
   Codocedo, V
   Astudillo, H
   Cysneiros, LM
AF Lopez, Claudia
   Codocedo, Victor
   Astudillo, Hernan
   Cysneiros, Luiz Marcio
TI Bridging the gap between software architecture rationale formalisms and
   actual architecture documents: An ontology-driven approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Design rationale; Software architecture; Ontology; Semantic indexing;
   Rationale recovering
ID MODEL
AB Documenting software architecture rationale is essential to reuse and evaluate architectures, and several modeling and documentation guidelines have been proposed in the literature. However, in practice creating and updating these documents rarely is a primary activity in most software projects, and rationale remains hidden in casual and semi-structured records, such as e-mails, meeting notes, wikis, and specialized documents. This paper describes the TREx (Toeska Rationale Extraction) approach to recover, represent and explore rationale information from text documents, combining: (1) pattern-based information extraction to recover rationale; (2) ontology-based representation of rationale and architectural concepts; and (3) facet-based interactive exploration of rationale. Initial results from TREx's application suggest that some kinds of architecture rationale can be semiautomatically extracted from a project's unstructured text documents, namely decisions, alternatives and requirements. The approach and some tools are illustrated with a case study of rationale recovery for a financial securities settlement system. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Lopez, Claudia; Codocedo, Victor; Astudillo, Hernan] Univ Tecn Federico Santa Maria, Valparaiso, Chile.
   [Cysneiros, Luiz Marcio] York Univ, Toronto, ON M3J 2R7, Canada.
C3 Universidad Tecnica Federico Santa Maria; York University - Canada
RP López, C (corresponding author), Univ Tecn Federico Santa Maria, Valparaiso, Chile.
EM clopez@inf.utfsm.cl; vcodocedo@inf.utfsm.cl; hernan@inf.utfsm.cl;
   cysneiro@yorku.ca
RI Lopez, Claudia/AAZ-2276-2020; López, Claudia/C-8554-2017; Lopez,
   Claudia/GXN-1686-2022; Astudillo, Hernan/B-7521-2012
OI Lopez, Claudia/0000-0003-1699-1999; López, Claudia/0000-0003-1699-1999;
   Astudillo, Hernan/0000-0002-6487-5813
FU FONDEF [CONTEXTA D05110286]; UTFSM [DGIP 24.08.58]; STIC-Amsud; NSERC
   [262148-05]
FX This work was partially funded by FONDEF (project CONTEXTA D05110286),
   UTFSM (project DGIP 24.08.58), STIC-Amsud (project SECODE - Semantic
   Based Support for Collaborative Design), and NSERC (grant number
   262148-05).
CR Akerman A, 2006, IBM SYST J, V45, P813, DOI 10.1147/sj.454.0813
   [Anonymous], SOFTW ENG NOTES
   [Anonymous], ADDISONWESLEY OBJECT
   [Anonymous], 2000, IEEE STD, V1471-2000, P1
   [Anonymous], 2002, 40 ANN M ASS COMP LI
   Babar Muhammad Ali, 2007, Second Workshop on Sharing and Reusing architectural Knowledge Architecture, Rationale, and Design Intent (SHARK/ADI'07: ICSE Workshops 2007), DOI 10.1109/SHARK-ADI.2007.1
   BABU L, 2007, SHARK ADI 07, P5
   Bachmann F., 2000, CMUSEI2000SR004
   Bass L., 2013, SOFTWARE ARCHITECTUR
   *CARN MELL SOFTW E, SEI SOFTW ARCH DOC T
   *CARN MELL SOFTW E, COMP AID SOFTW ENG C
   Christiaens S, 2006, LECT NOTES COMPUT SC, V4277, P199
   Chung L., 1999, NONFUNCTIONAL REQUIR
   Clements P., 2002, DOCUMENTING SOFTWARE
   CONKLIN J, 1987, HYPERTEXT 87, P247
   Cunningham H, 2005, INFORM EXTRACTION AU, P665
   Cysneiros L.M., 2003, P REAA WORKSHOP 11 R, P13
   Gorton I., 2006, ESSENTIAL SOFTWARE A
   Gruber T.R., 1991, DESIGN KNOWLEDGE DES
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   GUY M, D LIB MAGAZINE, V12, P1
   Horner J, 2006, RATIONAL MANAGEMENT IN SOFTWARE ENGINEERING, P73
   Jansen A, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P109
   Kao A., 2005, SIGKDD Explor. Newsl, V7, P1
   Klyne G, 2004, Resource description framework (RDF): Concepts and abstract syntax
   Kornilakis H, 2004, IEEE INTERNATIONAL CONFERENCE ON ADVANCED LEARNING TECHNOLOGIES, PROCEEDINGS, P600, DOI 10.1109/ICALT.2004.1357485
   Kruchten P., 2004, 2nd Groningen workshop on software variability, P54
   KRUCHTEN PB, 1995, IEEE SOFTWARE, V12, P42, DOI 10.1109/52.469759
   Kruchten P, 2006, LECT NOTES COMPUT SC, V4214, P43
   Kruchten P, 2009, IEEE SOFTWARE, V26, P36, DOI 10.1109/MS.2009.52
   LEE J, 1991, HUMAN COMPUTER INTER, V6, P251
   Li BL, 2007, DOCENG'07: PROCEEDINGS OF THE 2007 ACM SYMPOSIUM ON DOCUMENT ENGINEERING, P205
   LIANG P, 2009, RUGSEARCH09L01 U GRO
   LOPEZ C, 2008, MARK 2008
   López C, 2008, LECT NOTES COMPUT SC, V5333, P324
   MacLean A., 1991, Human-Computer Interaction, V6, P201, DOI 10.1207/s15327051hci0603&4_2
   McCall R.J., 1991, DESIGN STUD, V12, P30
   McGuinness D.L., 2004, W3C RECOMMENDATION, V10
   Noll MG, 2007, DOCENG'07: PROCEEDINGS OF THE 2007 ACM SYMPOSIUM ON DOCUMENT ENGINEERING, P177
   PETERS I, 2007, P 70 ANN M AM SOC IN
   POTTS C, 1988, ICSE 88, P418
   PRIETODIAZ R, 1991, COMMUN ACM, V34, P88, DOI 10.1145/103167.103176
   RAMBABU D, 2006, SEMANTIC MATCHMAKING
   Ranganathan S.R., 1967, Prolegomena to Library Classification
   Reeve Lawrence., 2005, SAC 05, P1634, DOI DOI 10.1145/1066677.1067049
   RITTEL H, 1970, 131 U CAL BERK I URB
   RUIZCASADO M, 2006, P 1 WORKSH SEM WIK W
   SANCHO PP, 2007, WOSP 07, P125
   SHUM SB, 1994, INT J HUM-COMPUT ST, V40, P603, DOI 10.1006/ijhc.1994.1029
   Simon H.A., 1996, The Sciences of the Artificial, V3rd ed
   Tang A, 2007, J SYST SOFTWARE, V80, P918, DOI 10.1016/j.jss.2006.08.040
   Tang A, 2006, J SYST SOFTWARE, V79, P1792, DOI 10.1016/j.jss.2006.04.029
   Tyree J, 2005, IEEE SOFTWARE, V22, P19, DOI 10.1109/MS.2005.27
   VOSSEN P, 2008, LREC 08
   WHITING MA, 2005, DOCENG 05, P23
   Wu H., 2006, HYPERTEXT 06, P111
   Yakovlev Ilya V., 2007, IT Professional, V9, P43, DOI 10.1109/MITP.2007.123
   YANG HC, 2005, WIRI 05, P186
NR 58
TC 28
Z9 31
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2012
VL 77
IS 1
SI SI
BP 66
EP 80
DI 10.1016/j.scico.2010.06.009
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 834JQ
UT WOS:000295956000005
DA 2024-07-18
ER

PT J
AU van der Spek, P
   Klusener, S
AF van der Spek, Pieter
   Klusener, Steven
TI Applying a dynamic threshold to improve cluster detection of LSI
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Feature extraction; Clustering; Reverse engineering; Software
   architecture; Latent Semantic Indexing
ID RECOVERING TRACEABILITY LINKS; INFORMATION; RETRIEVAL; SYSTEMS; CODE
AB Latent Semantic Indexing (LSI) is a standard approach for extracting and representing the meaning of words in a large set of documents. Recently it has been shown that it is also useful for identifying concerns in source code. The tree cutting strategy plays an important role in obtaining the clusters, which identify the concerns. In this contribution the authors compare two tree cutting strategies: the Dynamic Hybrid cut and the commonly used fixed height threshold. Two case studies have been performed on the source code of Philips Healthcare to compare the results using both approaches. While some of the settings are particular to the Philips-case, the results show that applying a dynamic threshold, implemented by the Dynamic Hybrid cut, is an improvement over the fixed height threshold in the detection of clusters representing relevant concerns. This makes the approach as a whole more usable in practice. (C) 2010 Elsevier B.V. All rights reserved.
C1 [van der Spek, Pieter; Klusener, Steven] Vrije Univ Amsterdam, Fac Sci, Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP van der Spek, P (corresponding author), Vrije Univ Amsterdam, Fac Sci, Amsterdam, Netherlands.
EM pvdspek@cs.vu.nl; steven@cs.vu.nl
FU Dutch Ministry of Economic Affairs
FX This work has been carried out as a part of the DARWIN project at
   Philips Healthcare under the responsibilities of the Embedded Systems
   Institute. This project is partially supported by the Dutch Ministry of
   Economic Affairs under the BSIK program.
CR Adnan Rahmat, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P383, DOI 10.1109/ASE.2008.54
   AHO AV, 1980, FORMAL LANGUAGE THEO, P325
   Andreopoulos B, 2007, INFORM SOFTWARE TECH, V49, P244, DOI 10.1016/j.infsof.2006.10.010
   [Anonymous], 2000, Icml, DOI DOI 10.1007/3-540-44491-2_3
   [Anonymous], P C SOFTW MAINT REEN
   [Anonymous], 2009, INTRO INFORM RETRIEV
   Antoniol G, 2002, IEEE T SOFTWARE ENG, V28, P970, DOI 10.1109/TSE.2002.1041053
   Baldi PF, 2008, ACM SIGPLAN NOTICES, V43, P543, DOI 10.1145/1449955.1449807
   Binkley D., 2010, ENCY SOFTWARE ENG
   Blei DM, 2007, ANN APPL STAT, V1, P17, DOI 10.1214/07-AOAS114
   Blei David M, 2009, Text mining, P101, DOI DOI 10.1201/9781420059458.CH4
   Blei DM, 2003, J MACH LEARN RES, V3, P993, DOI 10.1162/jmlr.2003.3.4-5.993
   De Lucia A, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1276933.1276934
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Dotan-Cohen D, 2009, BIOINFORMATICS, V25, P1789, DOI 10.1093/bioinformatics/btp327
   Ducasse S, 2006, PROC IEEE INT CONF S, P203
   DUMAIS ST, 1991, BEHAV RES METH INS C, V23, P229, DOI 10.3758/BF03203370
   DUMAIS ST, 1992, SIGIR 92 : PROCEEDINGS OF THE FIFTEENTH ANNUAL INTERNATIONAL ACM SIGIR CONFERENCE ON RESEARCH AND DEVELOPMENT IN INFORMATION RETRIEVAL, P233
   Enslen E, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P71, DOI 10.1109/MSR.2009.5069482
   Glorie M, 2009, J SOFTW MAINT EVOL-R, V21, P113, DOI 10.1002/smr.401
   Hamerly G, 2004, ADV NEUR IN, V16, P281
   Hayes JH, 2006, IEEE T SOFTWARE ENG, V32, P4, DOI 10.1109/TSE.2006.3
   Jain A. K., 1988, Algorithms for Clustering Data, P446
   Kettenring JR, 2006, J CLASSIF, V23, P3, DOI 10.1007/s00357-006-0002-6
   Kuhn A, 2007, INFORM SOFTWARE TECH, V49, P230, DOI 10.1016/j.infsof.2006.10.017
   Kuhn A, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P175, DOI 10.1109/MSR.2009.5069499
   Landauer TK, 1998, DISCOURSE PROCESS, V25, P259, DOI 10.1080/01638539809545028
   Langfelder P, 2008, BIOINFORMATICS, V24, P719, DOI 10.1093/bioinformatics/btm563
   LEHMAN MM, 1980, P IEEE, V68, P1060, DOI 10.1109/PROC.1980.11805
   Lethbridge TC, 2002, ADVANCES IN SOFTWARE ENGINEERING, P137
   Likert R., 1932, TECHNIQUE MEASUREMEN, DOI 1933-01885-001
   Liu YX, 2009, PROC IEEE INT CONF S, P233, DOI 10.1109/ICSM.2009.5306318
   Maletic J. I., 1999, 14th IEEE International Conference on Automated Software Engineering, P251, DOI 10.1109/ASE.1999.802296
   Maletic JI, 2001, PROC INT CONF SOFTW, P103, DOI 10.1109/ICSE.2001.919085
   Maletic JI, 2000, PROC INT C TOOLS ART, P46, DOI 10.1109/TAI.2000.889845
   Marcus A, 2005, PROC IEEE INT CONF S, P133
   Marcus A, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P107, DOI 10.1109/ASE.2001.989796
   Maskeri Girish, 2008, 1st India Software Engineering Conference. ISEC 2008, P113
   Mitchell BS, 2001, PROC IEEE INT CONF S, P744, DOI 10.1109/ICSM.2001.972795
   Poshyvanyk D, 2007, IEEE T SOFTWARE ENG, V33, P420, DOI [10.1109/TSE.2007.1016, 10.1109/TSE.2007.1016.]
   Poshyvanyk D, 2007, INT C PROGRAM COMPRE, P37
   Poshyvanyk D, 2006, PROC IEEE INT CONF S, P469
   R Development Core Team, 2008, R PROGR ENV DAT AN G
   Stuetzle W, 2003, J CLASSIF, V20, P25, DOI 10.1007/s00357-003-0004-6
   Tian K, 2009, 2009 6TH IEEE INTERNATIONAL WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES, P163, DOI 10.1109/MSR.2009.5069496
   van der Spek P, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P253
   van Deursen A., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P246, DOI 10.1109/ICSE.1999.841014
   WALZ DB, 1993, COMMUN ACM, V36, P63, DOI 10.1145/163430.163447
   Wiggerts TA, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P33, DOI 10.1109/WCRE.1997.624574
   Wild F., 2005, P 9 INT COMP ASS ASS, P485
   Wu JW, 2005, PROC IEEE INT CONF S, P525
   Xinrong Xie, 2006, 28th International Conference on Software Engineering Proceedings, P839
   Xu J. Qian, 2005, ACM SIGSOFT Software Engineering Notes, V30, P1, DOI [10.1145/1050849.1050865.36Y, DOI 10.1145/1050849.1050865]
   Xu R, 2005, IEEE T NEURAL NETWOR, V16, P645, DOI 10.1109/TNN.2005.845141
   Yin R.K., 2014, Applications of case study research, V2nd
NR 55
TC 5
Z9 6
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1261
EP 1274
DI 10.1016/j.scico.2010.12.004
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900013
DA 2024-07-18
ER

PT J
AU Lei, B
   Li, XD
   Liu, ZM
   Morisset, C
   Stolz, V
AF Lei, Bin
   Li, Xuandong
   Liu, Zhiming
   Morisset, Charles
   Stolz, Volker
TI Robustness testing for software components
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on Formal Aspects of Component Software
   (FACS)
CY SEP 10-12, 2008
CL Malaga, SPAIN
DE Robustness testing; Component; Contract; State machine
AB Component-based development allows one to build software from existing components and promises to improve software reuse and reduce costs. For critical applications, the user of a component must ensure that it fits the requirements of the application. To achieve this, testing is a well-suited means when the source code of the components is not available. Robustness testing is a testing methodology to detect the vulnerabilities of a component under unexpected inputs or in a stressful environment. As components may fail differently in different states, we use a state machine based approach to robustness testing. First, a set of paths is generated to cover transitions of the state machine, and it is used by the test cases to bring the component into a specific control state. Second, method calls with invalid inputs are fed to the component in different states to test the robustness. By traversing the paths, the test cases cover more states and transitions compared to stateless API testing. We apply our approach to several components, including open source software, and compare our results with existing approaches. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Lei, Bin; Li, Xuandong] Nanjing Univ, Dept Comp Sci & Technol, Nanjing, Peoples R China.
C3 Nanjing University
EM bl@iist.unu.edu; lxd@nju.edu.cn; lzm@iist.unu.edu; cm@iist.unu.edu;
   vs@iist.unu.edu
CR Ali S, 2007, INFORM SOFTWARE TECH, V49, P1087, DOI 10.1016/j.infsof.2006.11.002
   [Anonymous], SIGSOFT SOFTW ENG NO
   [Anonymous], COMPUTER J
   [Anonymous], 1999, Testing Object-Oriented Systems: Models, Patterns, and Tools
   [Anonymous], OCTOPUS OPEN SOURCE
   [Anonymous], 1997, COMPONENT SOFTWARE O
   [Anonymous], 1996, STANDARDVIEW, DOI DOI 10.1145/230871.230883
   [Anonymous], 1990, IEEE Std 610.12-1990, V42, P112, DOI [10.1109/IEEESTD.1990.101064, DOI 10.1109/IEEESTD.1990.101064]
   [Anonymous], MOD DEV TOOLS MDT UM
   BECK K, 2000, MORE JAVA GEMS, P357
   Bouquet F., 2007, Proceedings of the 3rd International Workshop on Advances in Modelbased Testing, P95
   *CCRA, COMM CRIT INF TECHN
   Chen X, 2007, LECT NOTES COMPUT SC, V4767, P191
   CHEN Z, 2008, LECT NOTES COMPUTER, V5153, pCH3
   Csallner C, 2004, SOFTWARE PRACT EXPER, V34, P1025, DOI 10.1002/spe.602
   DOWSON M, 1997, SIGSOFT SOFTW ENG NO, V84
   DRUSINSKY D, 2006, RUNTIME MONITORING E
   HARROLD M, 1999, P 1 INT ICSE WORKSH
   He JF, 2006, THEOR COMPUT SCI, V365, P109, DOI 10.1016/j.tcs.2006.07.034
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Kropp NP, 1998, DIG PAP INT SYMP FAU, P230, DOI 10.1109/FTCS.1998.689474
   Ledru Y, 2004, LECT NOTES COMPUT SC, V2984, P281
   Lei B, 2010, ELECTRON NOTES THEOR, V260, P173, DOI 10.1016/j.entcs.2009.12.037
   LIU Z, 2009, LECT NOTES COMPUTER, V5961
   LIU Z, 2009, LECT NOTES IN PRESS
   MARTIN E, 2007, WEB SERV 2007 ICWS 2, P647
   MEYER B, 1992, COMPUTER, V25, P40, DOI 10.1109/2.161279
   MILLER BP, 1990, COMMUN ACM, V33, P32, DOI 10.1145/96267.96279
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Pfenning Frank, 2005, THESIS CARNEGIE MELL
   RAUSCH A, 2008, LECT NOTES COMPUTER, V5153
   *SUN, 2008, REFL API
   Tretmans J, 1996, SOFTWARE-CONC TOOL, V17, P103
   WU Y, 2001, ENG COMPL COMP SYST, P222
   Zheng WQ, 2007, 6TH IEEE/ACIS INTERNATIONAL CONFERENCE ON COMPUTER AND INFORMATION SCIENCE, PROCEEDINGS, P891, DOI 10.1109/ICIS.2007.136
NR 36
TC 13
Z9 16
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2010
VL 75
IS 10
SI SI
BP 879
EP 897
DI 10.1016/j.scico.2010.02.005
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 638SZ
UT WOS:000280917600005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Hallett, JJ
   Luchangco, V
   Ryu, S
   Steele, GL
AF Hallett, J. J.
   Luchangco, Victor
   Ryu, Sukyoung
   Steele, Guy L., Jr.
TI Integrating coercion with subtyping and multiple dispatch
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd Annual ACM Symposium on Applied Computing
CY MAR 16-20, 2008
CL Fortaleza, BRAZIL
SP ACM SIGAC, Univ Fortaleza, Federal Univ Ceara
DE Coercion; Subtyping; Overloading; Multiple dispatch
AB Coercion can greatly improve the readability of programs, especially in arithmetic expressions. However, coercion interacts with other features of programming languages, particularly subtyping and overloaded functions and operators, in ways that can produce surprising behavior. We study examples of such surprising behavior in existing languages. This study informs the design of the coercion mechanism of Fortress, an object-oriented language with multiple dynamic dispatch, multiple inheritance and user-defined coercion. We describe this design and show how its restrictions on overloaded declarations prevent ambiguous calls due to coercion. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Luchangco, Victor; Ryu, Sukyoung; Steele, Guy L., Jr.] Sun Microsyst Inc, Santa Clara, CA USA.
C3 Sun Microsystems, Inc.
RP Ryu, S (corresponding author), Sun Microsyst Labs, 35 Network Dr, Burlington, MA 01803 USA.
EM jhallett@cs.bu.edu; victor.luchangco@sun.com; sukyoung.ryu@sun.com;
   guy.steele@sun.com
RI Ryu, Sukyoung/C-2080-2011; Ryu, Sukyoung/A-8543-2015
OI Ryu, Sukyoung/0000-0002-0019-9772
CR ALLEN E, 2007, 22 S APPL COMP SAC 0
   Allen Eric., 2008, FORTRESS LANGUAGE SP
   [Anonymous], 15391991E ISOIEC
   [Anonymous], 2007, C LANGUAGE SPECIFICA
   Ducasse S, 2006, ACM T PROGR LANG SYS, V28, P331, DOI 10.1145/1119479.1119483
   Gosling J., 2005, Java Language Specification, Vthird
   *ISO IEC, 1998, 148821998 ISOIEC
   Kernighan B.W., 1988, The C Programming Language
   PETERSON KE, 1995, VISUAL BASIC PROGRAM, P148
   STEELE GL, 1998, COMMUNICATION
   Vick P., 2007, MICROSOFT VISUAL BAS
   2005, ENTERPRISE PL I LANG
NR 12
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2010
VL 75
IS 9
SI SI
BP 787
EP 795
DI 10.1016/j.scico.2009.04.005
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 627NG
UT WOS:000280045900004
OA hybrid
DA 2024-07-18
ER

PT J
AU Jung, G
   Hatcliff, J
AF Jung, Georg
   Hatcliff, John
TI A type-centric framework for specifying heterogeneous, large-scale,
   component-oriented, architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on Generative Programming and Component
   Engineering
CY OCT 01-03, 2007
CL Salzburg, AUSTRIA
SP ACM SIGPLAN, ACM SIGSOFT
DE Component-oriented development; Meta-modeling; Middleware; Model-driven
   development; Software architecture; Type systems
AB Maintaining integrity and consistency, and effecting conformance in architectures of large-scale systems require specification and enforcement of many different forms of structural constraints. While type systems have proved effective for enforcing structural constraints in programs and data structures, most architectural modeling frameworks include only weak notions of typing or rely on first order logic constraint languages that have steep learning curves associated with them and that become unwieldy when scaling to large systems.
   We present the CADENA Architecture Language with Meta-modeling (CALM) - that uses multi-level type systems to specify and enforce a variety of architectural constraints relevant to the development of large-scale component-based systems. CADENA is a robust and extensible tool that has been used to specify a number of industrial strength component models and applied in multiple industrial research projects on model-driven development and software product lines. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Jung, Georg] Univ Potsdam, Inst Informat, D-14482 Potsdam, Germany.
   [Hatcliff, John] Kansas State Univ, Manhattan, KS 66506 USA.
C3 University of Potsdam; Kansas State University
RP Jung, G (corresponding author), Univ Potsdam, Inst Informat, D-14482 Potsdam, Germany.
EM georgjung@acm.org; hatcliff@cis.ksu.edu
CR Abowd G., 1993, SIGSOFT Software Engineering Notes, V18, P9, DOI 10.1145/167049.167055
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   [Anonymous], COMP 19 ANN ACM SIGP
   BARBER G, SERVICE COMPONENT AR
   BARR M, 1990, INT SERIES COMPUTER
   Binns P, 1996, INT J SOFTW ENG KNOW, V6, P201, DOI 10.1142/S0218194096000107
   Blair G, 2009, ANN TELECOMMUN, V64, P1, DOI 10.1007/s12243-009-0086-1
   Bruneton E, 2006, SOFTWARE PRACT EXPER, V36, P1257, DOI 10.1002/spe.767
   Childs A, 2006, COMPUTER, V39, P42, DOI 10.1109/MC.2006.51
   Clements P., 2002, Software product lines
   Dashofy EM, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P266, DOI 10.1109/ICSE.2002.1007974
   di Nitto E., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P13, DOI 10.1109/ICSE.1999.840991
   EDWARDS G, 2007, P 2007 S BRAS COMP A, P147
   Feiler P., 2007, CMUSEI2007TN047
   Feiler PH, 2004, INT FED INFO PROC, V176, P3
   FEILER PH, 2004, CMUSEI2006TN011
   GARLAN D, 1997, P CASCON 97 TOR ONT, P169
   Gay D., 2003, NESC 1 1 LANGUAGE RE
   Gay David., 2003, PLDI 03, P1
   Hatcliff J, 2003, PROC INT CONF SOFTW, P160, DOI 10.1109/ICSE.2003.1201197
   International Organization for Standardization (ISO), 749811994 ISOIEC
   JUNG G, 2007, THESIS KANSAS STATE
   Karsai G, 2004, IEEE T CONTR SYST T, V12, P263, DOI 10.1109/TCST.2004.824311
   Kompanek A., MODELING SYSTEM ACME
   Lau KK, 2007, IEEE T SOFTWARE ENG, V33, P709, DOI 10.1109/TSE.2007.70726
   Ledeczi A, 2001, PROCEEDINGS OF THE 2001 IEEE INTERNATIONAL CONFERENCE ON CONTROL APPLICATIONS (CCA'01), P756, DOI 10.1109/CCA.2001.973959
   LEDECZI A., 2001, P WORKSH INT SIGN PR
   Leger M., 2007, P 6 INT WORKSH AD RE, P3, DOI 10.1145/1376780.1376783
   Magee J., 1996, Software Engineering Notes, V21, P3, DOI 10.1145/250707.239104
   Margaria T, 2006, COMPUTER, V39, P45, DOI 10.1109/MC.2006.355
   Matena V, 2003, APPL ENTERPRISE JAVA
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   MEDVIDOVIC N, 1998, UCIICS9814 DEP INF C
   MEDVIDOVIC N, 1996, JOINT P 2 INT SOFTW, P24, DOI [10.1145/243327.243340, DOI 10.1145/243327.243340]
   MONROE R, 2000, CMUCS98163
   Object Management Group, MET FAC
   Ogden C.K., 1946, MEANING MEANING
   *OMG, 2006, OMG FORM 06 04 01 CO
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   Stanícek Z, 2004, KYBERNETIKA, V40, P365
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
   XADL 2 0 SCHEMAS
NR 43
TC 2
Z9 2
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2010
VL 75
IS 7
SI SI
BP 615
EP 637
DI 10.1016/j.scico.2009.12.008
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 603YE
UT WOS:000278243200008
DA 2024-07-18
ER

PT J
AU Klüppelholz, S
   Baier, C
AF Klueppelholz, Sascha
   Baier, Christel
TI Alternating-time stream logic for multi-agent systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Coordination Models and Languages
   (COORDINATION 2008)
CY JUN 04-06, 2008
CL Oslo, NORWAY
DE Alternating-time temporal logic; Data streams; Coordination; Automata;
   Concurrent games; Model checking
ID COMPONENT CONNECTORS; TEMPORAL LOGIC; MODEL; REO
AB Constraint automata have been introduced to provide a uniform operational model for specifying service interfaces of components, the network that yields the glue code for the components, and the operational behavior of the composite system. Constraint automata have been used as the basis for equivalence checking and model checking temporal logical properties. This paper presents a multi-player semantics for constraint automata which serves to reason about controllability, interaction and cooperation facilities of individual components or coalitions of components in a given network. We introduce a temporal logic framework, called alternating-time stream logic, that combines classical features of alternating-time logic (ATL) for concurrent games with special operators for specifying regular conditions on the data streams in the network and on the write and read operations at the I/O-ports of the components. Since constraint automata support any kind of synchronous and asynchronous peer-to-peer communication, the resulting game structure is non-standard and requires a series of nontrivial adaptations to the semantics and verification algorithms for classical alternating-time approaches. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Klueppelholz, Sascha; Baier, Christel] Tech Univ Dresden, Inst Theoret Informat, Dresden, Germany.
C3 Technische Universitat Dresden
RP Klüppelholz, S (corresponding author), Tech Univ Dresden, Inst Theoret Informat, Dresden, Germany.
EM klueppel@tcs.inf.tu-dresden.de; baier@tcs.inf.tu-dresden.de
OI Kluppelholz, Sascha/0000-0003-1724-2586
CR Alur R, 2002, J ACM, V49, P672, DOI 10.1145/585265.585270
   [Anonymous], 1986, Fairness
   [Anonymous], 1989, CWI Q.
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P198, DOI 10.1109/SEFM.2004.1347521
   ARBAB F, 2005, LNCS, V3454
   AZHAR S, 1991, MULTIPLAYER NONCOO 1
   AZHAR S, 1991, MULTIPLAYER NONCOO 2
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   BLECHMANN T, 2008, VEREOFY
   CHADHA R, 2008, P 23 IEEE S LOG COMP, P18
   CHATTERJEE K, 2007, ABS07062619 CORR
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   De Wulf M, 2006, LECT NOTES COMPUT SC, V3927, P153
   DEALFARO L, 2001, FSE, P109
   FISCHER MJ, 1979, J COMPUT SYST SCI, V18, P194, DOI 10.1016/0022-0000(79)90046-1
   Fitoussi D, 2000, ARTIF INTELL, V119, P61, DOI 10.1016/S0004-3702(00)00006-0
   Grosu R., 1995, TUM19533
   Klüppelholz S, 2009, SCI COMPUT PROGRAM, V74, P688, DOI 10.1016/j.scico.2008.09.020
   REIF JH, 1984, J COMPUT SYST SCI, V29, P274, DOI 10.1016/0022-0000(84)90034-5
   Schneider JG, 2001, COORDINATION OF INTERNET AGENTS: MODELS, TECHNOLOGIES AND APPLICATIONS, P153
   SCHOBBENS PY, 2004, ENTCS, V85, P1
   van der Hoek W., 2003, Studia Logica, V75, P125, DOI 10.1023/A:1026185103185
   VANDERHOEK W, 2005, AAMAS, P674
   Wolper P., 1982, Proc. 9th ACM Symp. on Principles of Programming Languages, P20
   WOOLDRIDGE M, 2004, DEON, P2
NR 26
TC 4
Z9 4
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2010
VL 75
IS 6
SI SI
BP 398
EP 425
DI 10.1016/j.scico.2009.07.007
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 590MT
UT WOS:000277231300003
OA Bronze
DA 2024-07-18
ER

PT J
AU de Freitas, R
   Viana, P
AF de Freitas, Renata
   Viana, Petrudo
TI A note on proofs with graphs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Relational calculus; Graphs; Graphical reasoning; Completeness;
   Decidability
ID NORMAL FORMS; CALCULI
AB Curtis and Lowe (S. Curtis, G. Lowe, Proofs with graphs, Sci. Comput. Program. 26 (1996) 197-216) presented a graphical calculus to prove inclusions between relations, leaving completeness of the system as an open question. Here we recast their system, excluding complementation and union, by presenting a low complexity decision algorithm to decide its valid inclusions. Completeness follows as a corollary. (C) 2008 Elsevier B.V. All rights reserved.
C1 [de Freitas, Renata; Viana, Petrudo] Univ Fed Fluminense, Inst Math, BR-24220000 Niteroi, RJ, Brazil.
C3 Universidade Federal Fluminense
RP de Freitas, R (corresponding author), Rua Mario Santos Braga,S-N,Campus Valonguinho, BR-24020140 Niteroi, RJ, Brazil.
EM naborges@cos.ufrj.br
CR [Anonymous], 1987, A Formalization Of Set Theory Without Variables
   [Anonymous], VORLESUNGEN ALGEBRA
   [Anonymous], 1880, American Journal of Mathematics
   Bird Richard, 1997, Algebra of Programming
   BROWN C, 1994, IEEE S LOG, P372, DOI 10.1109/LICS.1994.316052
   Curtis S, 1996, SCI COMPUT PROGRAM, V26, P197, DOI 10.1016/0167-6423(95)00025-9
   CURTIS S, 1995, LNCS, V947, P214
   De Bakker J. W., 1973, Proceedings of a Symposium on Automata, Languages and Programming, P167
   de Freitas R, 2008, LECT NOTES ARTIF INT, V5110, P298
   De Freitas R, 2007, LOG J IGPL, V15, P577, DOI 10.1093/jigpal/jzm054
   de Freitas RP, 2006, ELECTRON NOTES THEOR, V165, P201, DOI 10.1016/j.entcs.2006.05.046
   De Morgan A., 1860, Transactions of the Cambridge Philosophical Society, V10, P331
   Dougherty D, 2000, LECT NOTES COMPUT SC, V1833, P95
   Dougherty DJ, 2006, THEOR COMPUT SCI, V360, P228, DOI 10.1016/j.tcs.2006.03.023
   Freyd P, 1990, North-Holland Mathematical Library, V39
   GUTIERREZ C, 1999, THESIS WESLEYAN U
   Kahl W, 1999, INFORM SCIENCES, V119, P253, DOI 10.1016/S0020-0255(99)00018-3
   KAHL W, 1992, LNCS, V1197, P224
   KAHL W, 1998, LOG J IGPL, V6, P259
   Sanderson J. G., 1980, LNCS, V82
   SCHMIDT G, 1993, EACTS MONOGRAPHS THE
   TAKAMIZAWA K, 1982, J ACM, V29, P623, DOI 10.1145/322326.322328
   TARSKI A, 1941, J SYMBOLIC LOGIC, V6, P73, DOI DOI 10.2307/2268577
   Valdes J., 1979, Proceedings of the Eleventh Annual ACM Symposium on Theory of Computing, P1
NR 24
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2008
VL 73
IS 2-3
BP 129
EP 135
DI 10.1016/j.scico.2008.08.002
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 369MW
UT WOS:000260699600004
DA 2024-07-18
ER

PT J
AU Hesselink, WH
AF Hesselink, Wim H.
TI A challenge for atomicity verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE atomicity; safe variables; regular variables; refinement; theorem
   proving
ID CRITERION
AB An unpublished algorithm of Haldar and Vidyasankar implements an atomic variable of an arbitrary type T for one writer and one reader by means of 4 unsafe variables of type T, three two-valued safe variables, and one three-valued regular variable. We present this algorithm, and prove its correctness by means of a refinement towards a known specification of an atomic variable. The refinement is a composition of refinement functions and a forward simulation. The correctness proof requires many nontrivial invariants. In its construction, we relied on the proof assistant PVS for the administration of invariants and proofs and the preservation of consistency. (c) 2008 Elsevier B.V. All rights reserved.
C1 Univ Groningen, Dept Math & Comp Sci, NL-9700 AK Groningen, Netherlands.
C3 University of Groningen
RP Hesselink, WH (corresponding author), Univ Groningen, Dept Math & Comp Sci, POB 407, NL-9700 AK Groningen, Netherlands.
EM w.h.hesselink@rug.nl
OI Hesselink, Wim/0000-0002-1413-4320
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   BLOOM B, 1988, IEEE T COMPUT, V37, P1506, DOI 10.1109/12.9729
   HALDAR S, 1994, LNCS, V857, P116
   Hesselink WH, 2004, FORM ASP COMPUT, V16, P387, DOI 10.1007/s00165-004-0038-5
   Hesselink WH, 2002, ACTA INFORM, V38, P343, DOI 10.1007/s002360200080
   Hesselink WH, 2007, ACTA INFORM, V44, P123, DOI 10.1007/s00236-007-0044-1
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   LAMPORT L, 1986, DISTRIB COMPUT, V1, P77, DOI 10.1007/BF01786227
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Owre S., 2001, PVS VERSION 2 4 SYST
   Vitanyi P. M. B., 1986, 27th Annual Symposium on Foundations of Computer Science (Cat. No.86CH2354-9), P233, DOI 10.1109/SFCS.1986.11
NR 11
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2008
VL 71
IS 1
BP 57
EP 72
DI 10.1016/j.scico.2008.01.001
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 283MX
UT WOS:000254641400003
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Merz, M
AF Merz, Matthias
TI Enabling declarative security through the use of Java Data Objects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Conference on Principles and Practices of Programming in
   Java
CY 2006
CL Mannheim, GERMANY
DE Java Data Objects; declarative security; persistence
AB The concept of declarative security allows the separation of security concerns from business logic and enables the development of highly flexible and secure applications. Whereas Hibernate and the Enterprise Java Beans specification provide sufficient authentication and authorization functionalities in the context of object persistence, the Java Data Objects (JDO) specification designed as a lightweight persistence approach doesn't provide any declarative security capabilities.
   The novel security approach, JDOSecure, introduces a role-based permission system to the JDO persistence layer, which is based on the Java Authentication and Authorization Service (JAAS). JDOSecure is based on the dynamic proxy approach and ensures the collaboration with any JDO implementation. It comprises a management solution for users, roles, and permissions and allows storing the authentication and authorization information in any arbitrary JDO resource. Furthermore, a Java-based administration utility with a graphical user interface simplifies the maintenance of security privileges and permissions. (C) 2007 Elsevier B.V. All rights reserved.
C1 Univ Mannheim, Dept Informat Syst 3, D-6800 Mannheim 1, Germany.
C3 University of Mannheim
RP Merz, M (corresponding author), Univ Mannheim, Dept Informat Syst 3, D-6800 Mannheim 1, Germany.
EM merz@uni-mannheim.de
CR Blosser Jeremy., 2000, Explore the Dynamic Proxy API." from
   Ferraiolo D. F., 2001, ACM Transactions on Information and Systems Security, V4, P224, DOI 10.1145/501978.501980
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   *HIB, 2006, HIB REF DOC
   *HIB HIB SEC, 2006, DEC PERM US JAAS INT
   *JAV COMM PROC, 2004, JSR012 JAV COMM PROC
   *JAV COMM PROC, 2003, JSR153 JAV COMM PROC
   *JAV COMM PROC, 2006, JSR243 JAV COMM PROC
   *JAV COMM PROC, 2006, JSR220 JAV COMM PROC
   KORTHAUS A, 2003, INT C SOFTW ENG RES, V1, P34
   MERZ M, 2006, 15 INT C SOFTW ENG D
   MERZ M, 2006, 18 INT C SOFTW ENG K
   MERZ M, 2006, INT C PRINC PRACT PR
   MERZ M, 2006, 17 INT C DAT EXP SYS
   *SERVERSIDE COM, 2001, C RUSS RESP ROG SESS
   *SERVERSIDE COM, 2003, CRIT JAV DAT OBJ JDO
NR 16
TC 2
Z9 2
U1 1
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2008
VL 70
IS 2-3
BP 208
EP 220
DI 10.1016/j.scico.2007.07.005
PG 13
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 278EJ
UT WOS:000254266600008
DA 2024-07-18
ER

PT J
AU Jouault, F
   Kurtevc, I
AF Jouault, Frederic
   Kurtevc, Ivan
TI On the interoperability of model-to-model transformation languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Model Transformation Track held at the 21st Annual ACM Symposium on
   Applied Computing
CY APR   23, 2006-APR 27, 5006
CL Dijon, FRANCE
SP ACM
DE model engineering; model transformations; transformation languages;
   interoperability
AB Transforming models is a crucial activity in Model Driven Engineering (MDE). With the adoption of the OMG QVT standard for model transformation languages, it is anticipated that the experience in applying model transformations in various domains will increase. However, the QVT standard is just one possible approach for solving model transformation problems. In parallel with the QVT activity, many research groups and companies have been working on their own model transformation approaches and languages. It is important for software developers to be able to compare and select the most suitable languages and tools for a particular problem. This paper compares several model-to-model transformation languages as a step in the direction of gathering knowledge about the existing model transformation approaches. The focus is on the major language components (sublanguages and their features, execution tools, etc.) and how they are related. The major goal is to motivate the need for language interoperability and to explore options and obstacles for such interoperability. We propose a set of heuristics to reason about the problems that must be addressed when translators between languages have to be developed. These heuristics are applied on several examples. The experience from these examples shows that achieving a large degree of interoperability is difficult since some languages expose incompatible features. We managed to identify, however, cases where the interoperability between languages is feasible and brings certain benefits. (c) 2007 Elsevier B.V All rights reserved.
C1 [Jouault, Frederic] Univ Nantes, Atlas Grp, INRIA & LINA, Nantes, France.
   [Jouault, Frederic] Univ Alabama, Dept Comp & Informat Sci, Birmingham, AL 35294 USA.
   [Kurtevc, Ivan] Univ Twente, Software Engn Grp, Enschede, Netherlands.
C3 Nantes Universite; University of Alabama System; University of Alabama
   Birmingham; University of Twente
RP Jouault, F (corresponding author), Univ Nantes, Atlas Grp, INRIA & LINA, Nantes, France.
EM frederic.jouault@univ-nantes.fr; kurtev@ewi.utwente.nl
CR Abouzahra A., 2005, P BEST PRACT MOD DRI
   AGRAWAL A, 2003, ASE IEEE COMPUTER SO
   [Anonymous], 1990, IEEE STAND COMP DICT
   [Anonymous], 1 INT WORKSH MET MDA
   BORGER E, 2003, ABSTRACT STATE MECH
   Bruel J. -M., 2006, LECT NOTES COMPUTER, V3844
   BUDINSKY F, 2003, ECLIPS MODELING FRAM
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   *ECL FDN, GEN MOD TRANSF GMT
   FABRO MDD, 2005, APPLYING GENERIC MOD
   HADDAD H, 2006, P 2006 ACM S APPL CO
   JOUAULT F, 2006, LECT NOTES COMPUTER, V4037
   Karsai G, 2003, J UNIVERS COMPUT SCI, V9, P1296
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   MAES P, 1987, OOPSLA 87 C P OBJ OR
   *NETB, MET DAT REP
   OMG, 2005, AD20050701 OMG
   *OMG DSTC IBM CBOP, 2004, AD20040106 OMG DSTC
   *OMG OCL, 2003, PTC031014 OMG OCL
   *OMG QVT MOF, 2002, AD20020410 OMG QVT M
   RENSINK A, 2006, GT VMT WORKSH COLL E
   TAENTZER G, 2003, LECT NOTES COMPUTER
   Taentzer G., 2005, P WORKSH MOD TRANSF, P1
   TAENTZER G, 2006, LECT NOTES COMPUTER, V3922
   VARRO D, 2004, UML
   Varro D., 2003, Journal of Software and Systems Modeling, V2, P187, DOI [DOI 10.1007/S10270-003-0028-8, 10.1007/s10270-003-0028-8]
   WATKINS D, 2000, HANDLING LANGUAGE IN
NR 27
TC 25
Z9 31
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2007
VL 68
IS 3
BP 114
EP 137
DI 10.1016/j.scico.2007.05.005
PG 24
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 243BZ
UT WOS:000251771200002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Van Wyk, E
AF Van Wyk, Eric
TI Implementing aspect-oriented programming constructs as modular language
   extensions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd Workshop on Language Descriptions, Tools and Applications (LDTA '03)
CY APR 06, 2003
CL Warsaw, POLAND
DE extensible languages; extensible compilers; attribute grammars;
   forwarding; aspect-oriented programming
ID ATTRIBUTE GRAMMARS
AB Extensible programming languages and their compilers are experimental systems that use highly modular specifications of languages and language extensions in order to allow a variety of language features to be easily imported, by the programmer, into his or her programming environment. Our framework for extensible languages is based on higher-order attribute grammars extended with a mechanism called "forwarding" that mimics a simple rewriting process. Forwarding is designed such that no additional attribute definitions need to be written when combining a "host" language with language extensions (specified as attribute grammars), thus allowing for the modular composition of language features. This means that programmers can remain unaware of the underlying attribute grammars when building customized languages by importing language extensions. This paper shows how aspects and the aspect weaving process from aspect-oriented programming can be specified as a modular language extension and imported into an extensible host language. This paper also illustrates how an extensible compiler framework exposes its underlying semantic analyses and how this can provide a convenient arena in which researchers can explore new aspect-oriented language features. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
C3 University of Minnesota System; University of Minnesota Twin Cities
RP Van Wyk, E (corresponding author), Univ Minnesota, Dept Comp Sci & Engn, Minneapolis, MN 55455 USA.
EM evw@cs.umn.ed
CR Adams S. R., 1993, THESIS U SOUTHAMPTON
   AKSIT M, 2003, P 2 INT C ASP OR SOF
   Alexandrescu A., 2001, Modern C++ Design: Generic Programming and Design Patterns Applied
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   ARCH D, 2001, P 2001 JOINT ACM ISC, P1
   ASSMAN U, 1999, LECT NOTES COMPUTER, V1779, P24
   AUGUSTEIJN A, 1993, THESIS EINDHOVEN TEC
   AVIDCAUSEVIC E, 2001, ASPECTCOOL EXPT DESI, V36, P84
   AVIDCAUSEVIC E, 2002, P 2002 ACM S APPL CO, P943
   BACHRACH J, 2001, OOPSLA 2001 C P, P31, DOI DOI 10.1145/504311.504285
   Baker Jason., 2002, PLDI 02, P270
   Baker Jason., 2002, AOSD 02, P86, DOI DOI 10.1145/508386.508396
   Batory D, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P143, DOI 10.1109/ICSR.1998.685739
   BAXTET IRA, 2004, 5 INT C SOFTW ENG, P625
   BRABRAND C, 2002, P 2002 ACM SIGPLAN W, P31
   BRACHA G, 1998, MAKING FUTURE SAFE P, P183
   BRYANT A., 2002, P 1 INT C ASP OR SOF, P10
   CHIBA S, 1995, P ACM C OBJ OR PROGR, P285
   Doh KG, 2003, SCI COMPUT PROGRAM, V47, P3, DOI 10.1016/S0167-6423(02)00107-7
   DUECK GDP, 1990, COMPUT J, V33, P164, DOI 10.1093/comjnl/33.2.164
   FARROW R, 1992, 19 ANN ACM SIGACT SI, P223
   FGABRI A, 1996, P WORKSH APPL COMP G
   Filman R., 2004, ASPECT ORIENTED SOFT
   Fradet P, 1998, LECT NOTES COMPUT SC, V1543, P394
   GANZINGER H, 1984, SIGPLAN NOTICES, V19, P157, DOI 10.1145/502949.502890
   GANZINGER H, 1983, SCI COMPUT PROGRAM, V3, P223, DOI 10.1016/0167-6423(83)90021-7
   Gray JE, 2004, SE SYM SYS THRY, P36, DOI 10.1145/976270.976277
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   Hedin G., 2000, Informatica, V24, P301
   HEDIN G, 1989, P EUR C OBJ OR PROGR
   JOHNSSON T, 1987, LECT NOTES COMPUT SC, V274, P154
   Johnstone A, 2004, LECT NOTES COMPUT SC, V2985, P89
   Johnstone A, 2003, LECT NOTES COMPUT SC, V2622, P232
   KASTENS U, 1994, ACTA INFORM, V31, P601, DOI 10.1007/BF01177548
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales G., 1991, The Art of the Metaobject Protocol
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   Krishnamurthi S, 2000, LECT NOTES COMPUT SC, V1799, P105
   KUIPER M, 1987, COMPUTING SCI NETHER, P87
   LIANG S, 1996, LECT NOTES COMPUTER, V1058, P219
   MADDOX W, 1989, THESIS U CALIFORNIA
   McPeak S, 2004, LECT NOTES COMPUT SC, V2985, P73
   Mernik M., 2000, Informatica, V24, P319
   MERNIK M, 1995, SIGPLAN NOTICES, V30, P71, DOI 10.1145/202176.202185
   MEYERS A, 1999, P 26 ACM SIGPLAN SIG, P228
   Odersky Martin., 1997, P 24 ACM S PRINCIPLE, P146
   Saraiva J., 1999, P 2 WORKSHOP ATTRIBU, P185
   SIMONYI C, 1999, IEEE COMPUT, V32, P56
   STEELE GL, 1999, GROWING LANGUAGE HIG, V12, P221
   SWIERSTRA D, 1991, LECT NOTES COMPUT SC, V545, P256
   TASTSUBORI M, 1999, THESIS U TSUKUBA IBA
   Tatsubori M, 2000, LECT NOTES COMPUT SC, V1826, P117
   TEITELBAUM T, 1990, ACM SIGPLAN 90 C PRO, P197
   Thai ThuanL., 2002, NET FRAMEWORK ESSENT, V2nd
   Tomita Masaru, 1986, INT SERIES ENG COMPU
   TZILLA E, 2001, ASPECT ORIENTED PROG
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   Van Deursen Arie., 1996, LANGUAGE PROTOTYPING, VV.
   Van Wyk E, 2002, LECT NOTES COMPUT SC, V2304, P128
   VANWYK E, 2001, PRGRR0121 COMP LAB
   VOGT H, 1990, C PROGR LANG DES IMP, V24, P131
   WAND M, 2002, 9 WORKSH FDN OBJ OR, P67
   WHITE S, 1999, JDBC API TUTORIAL RE
   [No title captured]
NR 65
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2007
VL 68
IS 1
BP 38
EP 61
DI 10.1016/j.scico.2005.06.006
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 206LT
UT WOS:000249185700004
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Colman, A
   Han, J
AF Colman, Alan
   Han, Jun
TI Using role-based coordination to achieve software adaptability
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Coordination Models and Languages
   (COORDINATION 2005)
CY APR 20-23, 2005
CL Univ Namur, Inst Informat, Namur, BELGIUM
HO Univ Namur, Inst Informat
DE adaptive software; contracts; roles; software organisations
ID BEHAVIOR
AB Software systems are becoming more open, distributed, pervasive, and connected. In such systems, the relationships between loosely-coupled application elements become non-deterministic. Coordination can be viewed as a way of making Such loosely coupled systems more adaptable. In this paper we show how coordination-systems, which are analogous to nervous systems, can be defined independently from the functional systems they regulate. Such coordination-systems are a network of organisers and contracts. We elaborate how contracts can be used to monitor, regulate and configure the interactions between clusters of software entities called roles. Abstract management contracts regulate the flow of control through the roles and provide monitoring interception points. Concrete contracts are domain specific and allow the specification of performance conditions. These contracts bind clusters of roles into self-managed composites - each composite with its own organiser role. The organiser roles can control, create, abrogate and reassign contracts. Adaptive systems are built from a recursive structure of such self-managed composites. A prototype framework has been built from which adaptive applications can be derived. This framework uses association-aspects as a mechanism to implement contracts. (c) 2006 Elsevier B.V. All rights reserved.
C1 Swinburne Univ Technol, Fac Informat & Commun Technol, Melbourne, Vic, Australia.
C3 Swinburne University of Technology
RP Colman, A (corresponding author), Swinburne Univ Technol, Fac Informat & Commun Technol, Melbourne, Vic, Australia.
EM acolman@swin.edu.au; jhan@swin.edu.au
RI , Jun/Q-7503-2019
OI Colman, Alan/0000-0003-0264-9965
CR Andrade L, 2002, J SOFTW MAINT EVOL-R, V14, P353, DOI 10.1002/smr.260
   ANDRADE L, 2000, LNCS, V1906
   [Anonymous], J OBJECT TECHNOL
   ARBAB F, 1998, B DUCTH ASS THEORETI
   BALDONI M, 2005, P PROMAS WORKSH AAMA
   BARROS A, 2005, FITR200502 QUT
   Baumer Dirk., 2000, Pattern Languages of Program Design 4, P15
   Bracciali A, 2002, LECT NOTES COMPUT SC, V2315, P88
   Collet P, 2005, LECT NOTES COMPUT SC, V3489, P187
   Colman A, 2005, 2005 Australian Software Engineering Conference, Proceedings, P170, DOI 10.1109/ASWEC.2005.34
   Colman A., 2005, P 1 INT WORKSH COORD
   COLMAN A, 2005, P 1 INT WORKSH ENG S
   COLMAN A, 2005, P 38 HAW INT C SYST
   COLMAN AW, 2005, P AAAI FALL S ROL IN, P55
   Emmerich W., 2000, ENG DISTRIBUTED OBJE
   Garlan D, 2004, COMPUTER, V37, P46, DOI 10.1109/MC.2004.175
   Han J, 2003, ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P436, DOI 10.1109/APSEC.2003.1254399
   Herrmann S., 2002, NET OBJECT DAYS 2002
   HORVITZ E, 1999, CHI 99 PITTSB PA US
   Juan T., 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P3
   KENDALL EA, 1999, P ACM C OBJ OR SYST, P353
   KICZALES G, 1997, 11 EUR C OBJ OR PROG
   KRISTENSEN BB, 1996, SUBJECTIVITY OBJECT
   Lee JS, 2002, SOFTWARE PRACT EXPER, V32, P1317, DOI 10.1002/spe.483
   LINH DP, 2005, SUTCECSESTR009
   Meyer B., 1988, Object-Oriented Software Construction
   ODELL J, 2005, METAMODEL AGENTS ROL
   Plasil F, 2002, IEEE T SOFTWARE ENG, V28, P1056, DOI 10.1109/TSE.2002.1049404
   Riehle D, 1998, SOFTW PATT S, P163
   Ross Ashby W., 1957, An Introduction to Cybernetics
   Sakurai Kouhei., 2004, AOSD 04, P16
   SULLIVAN K, 2002, P 1 INT C ASP OR SOF, P19
   Wermelinger M., 2001, P OOPSLA 2001 WORKSH
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
   Zambonelli F, 2003, ACM T SOFTW ENG METH, V12, P317, DOI 10.1145/958961.958963
   Zambonelli F., 2000, WORKSH AG OR SOFTW E
NR 36
TC 22
Z9 23
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2007
VL 64
IS 2
BP 223
EP 245
DI 10.1016/j.scico.2006.06.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 121IA
UT WOS:000243150100004
OA Bronze
DA 2024-07-18
ER

PT J
AU Ligatti, J
   Walker, D
   Zdancewic, S
AF Ligatti, Jay
   Walker, David
   Zdancewic, Steve
TI A type-theoretic interpretation of pointcuts and advice
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE aspects; aspect-oriented programming languages; operational semantics;
   type theory
AB This article defines the semantics of MinAML, an idealized aspect-oriented programming language, by giving a type-directed translation from a user-friendly external language to a compact, well-defined core language. We argue that our framework is an effective way to give semantics to aspect-oriented programming languages in general because the translation eliminates shallow syntactic differences between related constructs and permits definition of an elegant and extensible core language.
   The core language extends the simply-typed lambda calculus with two central new abstractions: explicitly labeled program points and first-class advice. The labels serve both to trigger advice and to mark continuations that the advice may return to. These constructs are defined orthogonally to the other features of the language and we show that our abstractions can be used in both functional and object-oriented contexts. We prove Preservation and Progress lemmas for our core language and show that the translation from MinAML source into core is type-preserving. Together these two results imply that the source language is type safe. We also consider several extensions to our basic framework including a general mechanism for analyzing the current call stack. (c) 2006 Elsevier B.V. All rights reserved.
C1 Princeton Univ, Dept Comp Sci, Princeton, NJ 08540 USA.
   Univ Penn, Dept Comp & Informat Sci, Philadelphia, PA 19104 USA.
C3 Princeton University; University of Pennsylvania
RP Ligatti, J (corresponding author), Princeton Univ, Dept Comp Sci, Princeton, NJ 08540 USA.
EM jligatti@cs.princeton.edu; dpw@cs.princeton.edu; stevez@cis.upenn.edu
RI Zdancewic, Steve/JXL-6845-2024
OI Walker, David/0000-0003-3681-149X
CR Abadi M., 1996, MONOGRAPHS COMPUTER
   ALDRICH J, 2004, P SOFTW ENG PROP LAN
   ALDRICH J, 2004, WORKSH FDN ASP OR LA
   [Anonymous], 21 S PRINC PROGR LAN
   BAUER L, 2005, ACM SIGPLAN INT C PR
   BAUER L, 2002, INT S SOFTW SEC TOK
   BRUNS G, 2004, INT C CONC THEOR CON, P209
   Clements J, 2001, LECT NOTES COMPUT SC, V2028, P320
   CLIFTON C, 2005, WORKSH FDN ASP OR LA
   CLIFTON C, 2003, TR0313 IOW STAT U
   DANTAS DS, 2004, WORKSH FDN OBJ OR LA
   DANTAS DS, 2005, INT C FUNCT PROGR
   DOUENCE R, 2002, 4435 INR
   DOUENCE R, 2004, COMPOSITION REUSE IN, P141
   Douence R., 2001, LECT NOTES COMPUTER, V2192, P170, DOI DOI 10.1007/3-540-45429-2_13
   ELRAD T, 2001, COMMUNICATIONS ACM, V40
   FILMAN R, 2005, ASPECT ORIENTED SOFT
   HARPER R, 1998, PROOF LANGUAGE INTER
   JAGADEESAN R, 2003, EUR C OBJ OR PROGR D
   JAGADEESAN R, 2003, UNPUB CALCULUS TYPED
   JOHNSON R, 2005, SPRING JAVA J2EE APP
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   KICZALES G, 2001, EUR C OBJ OR PROGR
   LEE B, 2005, DYNAOP MANUAL
   Lieberherr K, 2003, COMPUT J, V46, P542, DOI 10.1093/comjnl/46.5.542
   MASUHARA H, 2002, FDN ASPECT ORIENTED, P17
   MORRISETT G, 1995, ACM C FUNCT PROGR CO, P66
   Ossher H., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P734, DOI 10.1109/ICSE.2000.870483
   OVLINGER J, 2003, THESIS NE U
   Tucker D.B., 2003, P 2 INT C ASPECT ORI, P158
   WALKER D, 2003, ACM INT C FUNCT PROG, P127
   WAND M, 2002, FDN ASPECT ORIENTED, P17
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
NR 33
TC 8
Z9 10
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2006
VL 63
IS 3
SI SI
BP 240
EP 266
DI 10.1016/j.scico.2006.01.004
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 110CL
UT WOS:000242355800003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Maurer, WD
AF Maurer, WD
TI A theory of computer instructions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE mathematical models; computer instructions; input region; output region;
   mathematical machines
AB Just as there is a theory of groups, or rings, or fields, or topological spaces. so there is presented here a theory of computer instructions. These are functions from 6 to S, where S is the set of states of a computer. Here S is a set of functions from M to B, where M is the memory (the set of variables) and B is a set of values; or alternatively, S is a cartesian product, over M as an index set, of the sets of values of all variables in M. For each instruction I there are defined the input region IR(1) and the output region OR(l); these are subsets of M. An instruction takes data from its input region and places data in its output region. Here OR(l) may be decomposed further into regions affected by subsets of M, which may be defined in either of two alternative ways. The theory presented here includes theorems concerning composition of instructions, decomposition of instructions, and the existence of instructions with specified regions. Many examples are given. (c) 2005 Elsevier B.V. All rights reserved.
C1 George Washington Univ, Dept Comp Sci, Washington, DC 20052 USA.
C3 George Washington University
RP Maurer, WD (corresponding author), George Washington Univ, Dept Comp Sci, Washington, DC 20052 USA.
EM maurer@gwu.edu
CR [Anonymous], 1962, INTRO MATH MACHINE T
   MAURER WD, 1966, J ACM, V13, P226, DOI 10.1145/321328.321334
   MAURER WD, 1965, AIM89 MIT ART INT PR
NR 3
TC 11
Z9 11
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2006
VL 60
IS 3
BP 244
EP 273
DI 10.1016/j.scico.2005.09.001
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 037QA
UT WOS:000237160600002
OA Bronze
DA 2024-07-18
ER

PT J
AU Franz, M
   Chandra, D
   Gal, A
   Haldar, V
   Probst, CW
   Reig, F
   Wang, N
AF Franz, M
   Chandra, D
   Gal, A
   Haldar, V
   Probst, CW
   Reig, F
   Wang, N
TI A portable virtual machine target for proof-carrying code
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st Workshop on Interpreters, Virtual Machines and Emulators (IVME 03)
CY JUN 12, 2003
CL San Diego, CA
DE virtual machines; proof-carrying code; safe mobile code; dynamic
   (just-in-time) compilation
AB Virtual machines and proof-carrying code provide two techniques that have been used independently to provide safety for mobile code. Both these techniques have strengths and limitations. Existing virtual machines, such as the Java VM, have several drawbacks. First, the effort required for safety verification is considerable. Second, and more subtly, the need to provide such verification by the code consumer inhibits the amount of optimization that can be performed by the code producer. This in turn makes just-in-time compilation surprisingly expensive. Proof-carrying code, on the other hand, has its own set of limitations, among which are the size of proofs and the fact that the certified code is no longer machine independent. By combining the two techniques, we are able to overcome these limitations. Our hybrid safe-code solution uses a virtual machine that has been designed specifically to support proof-carrying code, while simultaneously providing efficient just-in-time compilation and target-machine independence. In particular, our approach reduces the complexity of the required proofs, resulting in fewer proof obligations that need to be discharged at the target machine. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Calif Irvine, Donald Bren Sch Informat & Comp Sci, Irvine, CA 92697 USA.
   Univ Nottingham, Sch Comp Sci, Nottingham NG7 2RD, England.
C3 University of California System; University of California Irvine;
   University of Nottingham
RP Franz, M (corresponding author), Univ Calif Irvine, Donald Bren Sch Informat & Comp Sci, Irvine, CA 92697 USA.
EM franz@uci.edu
OI Probst, Christian W/0000-0001-5089-9155; Probst, Christian
   W./0000-0002-4947-355X
CR ADLTABATABAI SLA, 1996, P ACM SIGPLAN 1996 C, P128
   Amme W, 2001, ACM SIGPLAN NOTICES, V36, P137, DOI 10.1145/381694.378825
   AMME W, 2001, DARPA INF SURV C EXP
   [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   Appel AW, 2001, IEEE S LOG, P247, DOI 10.1109/LICS.2001.932501
   DIWAN A, 1992, SIGPLAN NOTICES, V27, P273, DOI 10.1145/143103.143140
   GAL A, 2003, 0323 U CAL SCH INF C
   GAL A, 2003, 0324 U CAL SCH INF C
   HALDAR V, 2002, 2002 NEW SEC PAR WOR
   *ISO IEC, 2002, 23271 ISOIEC
   LATTNER C, 2000, THESIS U ILLINOIS UR
   LINDHOLM T, 1999, JAVA SERIES
   MORRISETT KCG, 1998, ACM S PRINC PROGR LA, P85
   NECULA G, 1997, ACM S PRINC PROGR LA, P106
   Necula GC, 2001, ACM SIGPLAN NOTICES, V36, P142, DOI 10.1145/373243.360216
   *SUN MICR INC, 2000, CONN LTD DEV CONF
   WINTERBOTTOM P, 1997, HOT CHIPS, V9
NR 17
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2005
VL 57
IS 3
BP 275
EP 294
DI 10.1016/j.scico.2004.09.001
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 957YP
UT WOS:000231409800003
DA 2024-07-18
ER

PT J
AU Paleri, VK
   Srikant, YN
   Shankar, P
AF Paleri, VK
   Srikant, YN
   Shankar, P
TI Partial redundancy elimination: a simple, pragmatic, and provably
   correct algorithm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE computational optimality; data-flow analysis; flow graphs; lifetime
   optimality; partial redundancy elimination
ID GLOBAL OPTIMIZATION; CODE MOTION
AB We propose a new algorithm for partial redundancy elimination based on the new concepts of safe partial availability and safe partial anticipability. These new concepts are derived by the integration of the notion of safety into the definitions of partial availability and partial anticipability. The algorithm works on flow graphs whose nodes are basic blocks. It is both computationally and lifetime optimal and requires four unidirectional analyses. The most important feature of the algorithm is its simplicity; the algorithm evolves naturally from the new concept of safe partial availability. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Indian Inst Sci, Dept Comp Sci & Automat, Bangalore 560012, Karnataka, India.
C3 Indian Institute of Science (IISC) - Bangalore
RP Srikant, YN (corresponding author), Indian Inst Sci, Dept Comp Sci & Automat, Bangalore 560012, Karnataka, India.
RI Paleri, Vineeth/J-1751-2019
OI Paleri, Vineeth/0000-0002-3394-1558
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   CHOW F, 1983, 83254 STANF U COMP S
   DHAMDHERE DM, 1992, SIGPLAN NOTICES, V27, P212, DOI 10.1145/143103.143135
   DHAMDHERE DM, 1988, SIGPLAN NOTICES, V23, P172, DOI 10.1145/51607.51621
   DHAMDHERE DM, 1993, ACM T PROGR LANG SYS, V15, P312, DOI 10.1145/169701.169684
   DHAMDHERE DM, 1991, ACM T PROGR LANG SYS, V13, P291, DOI 10.1145/103135.214520
   DHANESHWAR VM, 1995, J PROGRAM LANG, V3, P95
   DRESHLER KH, 1993, ACM SIGPLAN NOTICES, V28, P29
   KNOOP J, 1992, SIGPLAN NOTICES, V27, P224, DOI 10.1145/143103.143136
   KNOOP J, 1994, ACM T PROGR LANG SYS, V16, P1117, DOI 10.1145/183432.183443
   MOREL E, 1979, COMMUN ACM, V22, P96, DOI 10.1145/359060.359069
   Paleri VK, 1998, ACM SIGPLAN NOTICES, V33, P35, DOI 10.1145/307824.307851
   [No title captured]
NR 13
TC 8
Z9 12
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2003
VL 48
IS 1
BP 1
EP 20
AR PII S0167-6423(02)00083-7
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 690VN
UT WOS:000183571300001
DA 2024-07-18
ER

PT J
AU Hirata, M
   Minamide, Y
   Sato, T
AF Hirata, Michikazu
   Minamide, Yasuhiko
   Sato, Tetsuya
TI Program logic for higher-order probabilistic programs in Isabelle/HOL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Higher-order probabilistic programming; language; Program logic; Formal
   verification; Quasi -Borel spaces; Isabelle; HOL
AB The verification framework PPV (Probabilistic Program Verification) verifies functional probabilistic programs supporting higher-order functions, continuous distributions, and conditional inference. PPV is based on the theory of quasi-Borel spaces which is introduced to give a semantics of higher-order probabilistic programming languages with continuous distributions. In this paper, we formalize a theory of quasi-Borel spaces and a core part of PPV in Isabelle/HOL. We first construct a probability monad on quasi-Borel spaces based on the Giry monad in the Isabelle/HOL library. Our formalization of PPV is extended so that integrability of functions can be discussed formally. Finally, we prove integrability and convergence of the Monte Carlo approximation in our mechanized PPV.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Hirata, Michikazu; Minamide, Yasuhiko; Sato, Tetsuya] Tokyo Inst Technol, Sch Comp, Meguro ku 2-12-1, Tokyo 1528550, Japan.
C3 Tokyo Institute of Technology
RP Hirata, M (corresponding author), Tokyo Inst Technol, Sch Comp, Meguro ku 2-12-1, Tokyo 1528550, Japan.
EM hirata.m.ac@m.titech.ac.jp
OI Hirata, Michikazu/0009-0007-7643-0145
FU JSPS Research Fellowships for Young Scientists; JSPS KAKENHI [23KJ0905,
   19K11899, 20K19775]
FX Hirata was supported by JSPS Research Fellowships for Young Scientists
   and JSPS KAKENHI Grant Number 23KJ0905, Minamide was supported by JSPS
   KAKENHI Grant Number 19K11899, and Sato was supported by JSPS KAKENHI
   Grant Number 20K19775.
CR Aguirre A, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110265
   [Anonymous], Mathematical Components
   Audebaud P, 2006, LECT NOTES COMPUT SC, V4014, P49, DOI 10.1007/11783596_6
   Aumann Robert J., 1961, Illinois Journal of Mathematics, V5, P614
   Avigad J, 2017, J AUTOM REASONING, V59, P389, DOI 10.1007/s10817-017-9404-x
   Bagnall A, 2019, AAAI CONF ARTIF INTE, P2662
   Bertot Yves, 2013, Interactive theorem proving and program development: Coq'Art: the calculus of inductive constructions
   Blanchette J, 2020, CPP '20: PROCEEDINGS OF THE 9TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, P367, DOI 10.1145/3372885.3373824
   Boldo S., 2021, RR9401 INR
   BRUIJN NGD, 1972, P K NED AKAD A MATH, V75, P381
   Cock D, 2012, ELECTRON P THEOR COM, P167, DOI 10.4204/EPTCS.102.15
   de Moura L, 2015, LECT NOTES ARTIF INT, V9195, P378, DOI 10.1007/978-3-319-21401-6_26
   Eberl M, 2015, LECT NOTES COMPUT SC, V9032, P80, DOI 10.1007/978-3-662-46669-8_4
   Fric R, 2010, STUD LOGICA, V94, P215, DOI 10.1007/s11225-010-9232-z
   Goodman ND., 2008, UAI, P220
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   Harrison J, 2013, J AUTOM REASONING, V50, P173, DOI 10.1007/s10817-012-9250-9
   Heunen C, 2017, IEEE S LOG
   Hirata M., 2022, QUASIBOREL SPACES AR
   Hirata M., 2023, INTERACTIVE THEOREM, V268
   Hölz J, 2017, PROCEEDINGS OF THE 6TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS, CPP'17, P100, DOI 10.1145/3018610.3018628
   Holzl Johannes, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P135, DOI 10.1007/978-3-642-22863-6_12
   Huffman B, 2013, LECT NOTES COMPUT SC, V8307, P131, DOI 10.1007/978-3-319-03545-1_9
   Hurd J, 2005, THEOR COMPUT SCI, V346, P96, DOI 10.1016/j.tcs.2005.08.005
   Lester D.R., 2007, 2 WORKSHOP AUTOMATED, P11
   Lochbihler A, 2016, LECT NOTES COMPUT SC, V9632, P503, DOI 10.1007/978-3-662-49498-1_20
   Mhamdi T, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2406336.2406349
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Nipkow T., 2002, ISABELLE HOL PROOF A, DOI DOI 10.1007/3-540-45949-9
   Sato T, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290351
   Scibior A, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3158148
   Tristan JB, 2020, Arxiv, DOI arXiv:2007.06776
   Wood F, 2014, JMLR WORKSH CONF PRO, V33, P1024
NR 33
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102993
DI 10.1016/j.scico.2023.102993
EA JUL 2023
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA O9VJ4
UT WOS:001047218800001
DA 2024-07-18
ER

PT J
AU Ueda, Y
   Ishio, T
   Matsumoto, K
AF Ueda, Yuki
   Ishio, Takashi
   Matsumoto, Kenichi
TI DevReplay: Linter that generates regular expressions for repeating code
   changes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coding rule; Static analysis tool; Regular expression; Code editor
AB Coding rules automatically exclude language-specific anti-patterns in the source code. However, developers still need to validate project-specific anti-patterns manually. We present a novel static analysis tool DEVREPLAY that generates coding rules as regular expressions from real-time source code editing. The generated regular expressions automatically repeat the same changes to the source code. Hence, users can share their own coding rules with inter-project members to keep source code consistency. As a field study, we submitted patches to the most popular open-source projects implemented by different languages, and project reviewers accepted 80% (8 of 10) of our patches. ?? 2022 Elsevier B.V. All rights reserved.
C1 [Ueda, Yuki; Ishio, Takashi; Matsumoto, Kenichi] Nara Inst Sci & Technol, Nara, Japan.
C3 Nara Institute of Science & Technology
RP Ueda, Y (corresponding author), Nara Inst Sci & Technol, Nara, Japan.
EM ueda.yuki.un7@is.naist.jp
OI Ishio, Takashi/0000-0003-4106-699X
CR [Anonymous], 2021, TREE SITTER
   [Anonymous], 2022, DEVREPLAY BUILT IN R
   [Anonymous], 2022, DEVREPLAY GITHUB ACT
   Bader J, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360585
   Bavishi R, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P613, DOI 10.1145/3338906.3338952
   Baxter ID, 2004, PROC INT CONF SOFTW, P625, DOI 10.1109/ICSE.2004.1317484
   Britton T., 2013, REVERSIBLE DEBUGGING, V1
   Collard ML, 2011, IEEE INT WORK C SO, P173, DOI 10.1109/SCAM.2011.19
   Cordy J.R., 2006, P 2006 ACM SIGPLAN S, P1, DOI [10.1145/1111542.1111544, DOI 10.1145/1111542.1111544]
   Cordy JR, 2002, INFORM SOFTWARE TECH, V44, P827, DOI 10.1016/S0950-5849(02)00104-0
   Higo Y, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P222, DOI 10.1109/ICSM.2012.6405275
   Jiang JJ, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P298, DOI 10.1145/3213846.3213871
   Johnson B, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P672, DOI 10.1109/ICSE.2013.6606613
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Koyuncu A, 2020, EMPIR SOFTW ENG, V25, P1980, DOI 10.1007/s10664-019-09780-z
   Lawall J, 2018, PROCEEDINGS OF THE 2018 USENIX ANNUAL TECHNICAL CONFERENCE, P601
   Liu K, 2021, IEEE T SOFTWARE ENG, V47, P165, DOI 10.1109/TSE.2018.2884955
   Meng N, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P502, DOI 10.1109/ICSE.2013.6606596
   Molderez T, 2017, IEEE WORK CONF MIN S, P248, DOI 10.1109/MSR.2017.12
   Monperrus M., 2020, HAL ARCH OUVERTES, Vhal-01956501, P16
   Newman C., 2017, THESIS KENT STATE U
   Panichella S, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P161, DOI 10.1109/SANER.2015.7081826
   Pournelle G. H., 1953, Journal of Mammalogy, V34, P133, DOI 10.1890/0012-9658(2002)083[1421:SDEOLC]2.0.CO;2
   Pylint, 2020, US
   Sadowski C, 2018, COMMUN ACM, V61, P58, DOI 10.1145/3188720
   Sakkas G, 2020, PROCEEDINGS OF THE 41ST ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION (PLDI '20), P16, DOI 10.1145/3385412.3386005
   Undo Software, 2014, INCR SOFTW DEV PROD
   Zakas N.C., 2020, ESLINT PLUGGABLE JAV
NR 28
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102857
DI 10.1016/j.scico.2022.102857
EA SEP 2022
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4V5MH
UT WOS:000859520500001
DA 2024-07-18
ER

PT J
AU Xu, SL
   Wang, YJ
AF Xu, Shenglin
   Wang, Yongjun
TI Defending against Return-Oriented Programming attacks based on return
   instruction using static analysis and binary patch techniques
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Return-oriented programming; Static analysis; Binary patch; Parameter
   registers
AB Return-Oriented Programming (ROP) is one of the most common software vulnerability exploitation techniques. Although many solutions have been proposed to defend against ROP attacks, they still have various drawbacks, such as requiring source code, increasing run-time overhead of the binary, and making the binary unstable. In this paper, we propose a method: using static analysis and binary patch techniques to defend against ROP attacks based on return instruction. It eliminates the parameter registers by adding extra instructions before the ret instruction, so that ROP attacks cannot chain short snippets of existing code to perform arbitrary command execution on the target binary. Evaluations on real software show that it can make the binary have the ability to defend against ROP attacks based on return instruction. In addition, evaluations on SPEC INT2006 benchmark show that it can eliminate 95.40% of the effective gadgets and only introduce 2% run-time overhead and 10.75% increase in size. (c) 2022 Published by Elsevier B.V.
C1 [Xu, Shenglin; Wang, Yongjun] Natl Univ Def Technol, Sch Comp, Changsha, Peoples R China.
C3 National University of Defense Technology - China
RP Wang, YJ (corresponding author), Natl Univ Def Technol, Sch Comp, Changsha, Peoples R China.
EM xushenglin@nudt.edu.cn; wangyongjun@nudt.edu.cn
CR Aleph O., 1996, Smashing the stack for fun and profit
   [Anonymous], 2003, PaX address space layout randomization (ASLR)
   Bletsch T., 2011, P 6 ACM S INF COMP C, P30
   Bletsch T, 2011, 27TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2011), P353, DOI 10.1145/2076732.2076783
   Carlini N, 2014, PROCEEDINGS OF THE 23RD USENIX SECURITY SYMPOSIUM, P385
   Checkoway S, 2010, PROCEEDINGS OF THE 17TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY (CCS'10), P559, DOI 10.1145/1866307.1866370
   Chen P, 2009, LECT NOTES COMPUT SC, V5905, P163, DOI 10.1007/978-3-642-10772-6_13
   Cheng YQ, 2014, 21ST ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2014), DOI 10.14722/ndss.2014.23156
   Conover M., 2008, US Patent, Patent No. [7,328,323, 7328323]
   Davi Lucas., 2011, P 6 ACM S INFORM COM, P40, DOI DOI 10.1145/1966913.1966920
   Dietz W, 2015, ACM T SOFTW ENG METH, V25, DOI 10.1145/2743019
   Fratrie I., 2012, ROPGUARD RUNTIME PRE
   Gao Y., 2013, INF SECUR COMMUN PRI
   Gupta A, 2013, Network and System Security-7th International Conference, NSS 2013, Madrid, Spain, June 3-4, 2013. Proceedings, P293, DOI [DOI 10.1007/978-3-642-38631-2_22, 10.1007/978-3-642-38631-2_22]
   Hiser J, 2012, P IEEE S SECUR PRIV, P571, DOI 10.1109/SP.2012.39
   Hubicka J., 2003, P GCC DEV SUMM CIT, P79
   Junod P, 2015, 2015 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON SOFTWARE PROTECTION (SPRO), P3, DOI 10.1109/SPRO.2015.10
   Koo H, 2016, ASIA CCS'16: PROCEEDINGS OF THE 11TH ACM ASIA CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P23, DOI 10.1145/2897845.2897863
   Li JK, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P195
   McGraw G, 2004, IEEE SECUR PRIV, V2, P80, DOI 10.1109/MSECP.2004.1281254
   Miller B.P., 2006, NC STAT U COMP SCI D
   Newsham Tim., 2000, Format string attacks
   Onarlioglu K, 2010, 26TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2010), P49
   Pappas V., 2013, USENIX SEC S, P447
   Pappas V, 2012, P IEEE S SECUR PRIV, P601, DOI 10.1109/SP.2012.41
   Prasad M, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P211
   Qin P, 2019, IEEE GLOB COMM CONF
   Rongwu Zhu, 2018, 2018 IEEE Power & Energy Society General Meeting (PESGM), DOI 10.1109/PESGM.2018.8585761
   Salwan Jonathan, 2011, ROPGADGET GADGETS FI
   Schmich C.P., 2012, US Patent App., Patent No. [12/975,363, 12975363]
   Shacham H, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P552
   Shoshitaishvili Y, 2016, P IEEE S SECUR PRIV, P138, DOI 10.1109/SP.2016.17
   Thomas Romain, 2017, LIEF-Library to Instrument Executable Formats
   Xu SL, 2020, 2020 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2020), P209, DOI 10.1109/TASE49443.2020.00036
   Zhijun Huang, 2012, 2012 International Conference on Systems and Informatics (ICSAI 2012), P1072, DOI 10.1109/ICSAI.2012.6223219
NR 35
TC 2
Z9 2
U1 2
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2022
VL 217
AR 102768
DI 10.1016/j.scico.2022.102768
EA FEB 2022
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 0D6NG
UT WOS:000776109200002
DA 2024-07-18
ER

PT J
AU Mao, X
   Zhang, YL
   Shi, JQ
   Huang, YH
   Li, Q
AF Mao, Xia
   Zhang, Yueling
   Shi, Jianqi
   Huang, Yanhong
   Li, Qin
TI A refinement development approach for enhancing the safety of PLC
   programs with Event-B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Event-B; Industrial control systems; Programmable Logic Controller; IEC
   61131
ID FORMAL METHODS; GENERATION
AB Programmable Logic Controllers (PLC) are widely used in Industrial Control Systems (ICS) with strict safety assurance requirements. Unfortunately, traditional techniques for debugging prefer to use post-development approaches, such as simulation and black box testing, rather than enhancing safety before programing. In this paper, we propose a refinement-based approach to model and verify PLC systems, aiming to assure safety properties by construction. It uses the Event-B formalism and focuses on the levels of requirement analysis, specification refinement, and system development. This approach takes a three-layer framework stepwise to specify the behaviors and properties of PLC programs, thereby reducing the modeling complexity. The basic firmware layer models the general mechanisms of PLC firmware, such as periodical instruction execution and centralized I/O scanning, which are application-independent models with fundamental safety properties at an abstract level. The middle layer establishes configuration models. These models correspond to the PLC settings and interactive environments of a specific system, such as I/O addresses and peripheral devices. The business layer models business logic with more specific system-level safety requirements. With our approach, the safety properties of PLC systems can be verified throughout the modeling and refinement process. In addition, rules are proposed to convert the most concrete Event-B model into PLC code satisfying the IEC 61131-3 standard. We demonstrate this approach with a real-world running example of a pump control system for gas transmission. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Mao, Xia; Zhang, Yueling; Shi, Jianqi; Huang, Yanhong; Li, Qin] East China Normal Univ, Natl Trusted Embedded Software Engn Technol Res C, Shanghai, Peoples R China.
   [Huang, Yanhong; Li, Qin] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
   [Shi, Jianqi] East China Normal Univ, Hardware Software Codesign Technol & Applicat Eng, Shanghai, Peoples R China.
C3 East China Normal University; East China Normal University; East China
   Normal University
RP Li, Q (corresponding author), East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
EM qli@sei.ecnu.edu.cn
RI huang, yan/GWM-4747-2022; Zhang, yueling/HZH-7176-2023; Huang,
   YQ/JOK-7580-2023
OI Li, Qin/0000-0001-7476-4079; Zhang, Yueling/0000-0002-2542-2619
FU NKRDP [2019YFB2102600, 2019YFB2102602]; STCSM Projects [18QB1402000,
   18ZR1411600]; SHEITC Project [2018-GYHLW-02012]
FX This work is partially supported by NKRDP (2019YFB2102600,
   2019YFB2102602) , STCSM Projects (No. 18QB1402000 and No. 18ZR1411600) ,
   SHEITC Project (2018-GYHLW-02012) .
CR ABADI M, 1992, LECT NOTES COMPUT SC, V600, P1, DOI 10.1007/BFb0031985
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 2010, MODELING EVENT B SYS
   Abrial J.-R., 1996, The B-Book: Assigning Programs to Meanings, V1
   Abrial JR, 2007, J UNIVERS COMPUT SCI, V13, P619
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], 2000, DISCRETE EVENT SYSTE
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Barbosa Haniel, 2012, Formal Methods: Foundations and Applications. Proceedings 15th Brazilian Symposium, SBMF 2012, P19, DOI 10.1007/978-3-642-33296-8_4
   Butler M, 2020, LECT NOTES COMPUT SC, V12327, P189, DOI 10.1007/978-3-030-58298-2_8
   Cheng CH, 2014, LECT NOTES COMPUT SC, V8559, P541, DOI 10.1007/978-3-319-08867-9_36
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Darvas D., 2017, Periodica Polytechnica Elect. Eng. Comput. Sci., V61, P151, DOI DOI 10.3311/PPEE.9743
   Darvas D., 2019, P 17 INT C ACC LARG, P21
   Edmunds Andrew, 2012, Reliable Software Technologies - Ada-Europe 2012. Proceedings 17th Ada-Europe International Conference on Reliable Software Technologies, P119, DOI 10.1007/978-3-642-30598-6_9
   Enoiu EP, 2013, IEEE ICST WORKSHOP, P158, DOI 10.1109/ICSTW.2013.27
   Frey G, 2000, IEEE SYS MAN CYBERN, P2431, DOI 10.1109/ICSMC.2000.884356
   Fu KM, 2016, CHIN CONT DECIS CONF, P3690, DOI 10.1109/CCDC.2016.7531625
   Furst A, 2014, LECT NOTES COMPUT SC, V8739, P323, DOI 10.1007/978-3-319-10181-1_20
   International Electrotechnical Commission, 2013, 618501 IEC
   Krings S, 2015, LECT NOTES COMPUT SC, V9276, P199, DOI 10.1007/978-3-319-22969-0_15
   Kuzmin EV, 2016, AUTOM CONTROL COMPUT, V50, P510, DOI 10.3103/S0146411616070130
   [Кузьмин Егор Владимирович Kuzmin E.V.], 2012, [Моделирование и анализ информационных систем, Modelirovanie i analiz informatsionnykh sistem], V19, P25
   Kuzmin EV, 2014, AUTOM CONTROL COMPUT, V48, P602, DOI 10.3103/S0146411614070256
   Kuzmin EV, 2014, AUTOM CONTROL COMPUT, V48, P554, DOI 10.3103/S0146411614070244
   Li JQ, 2017, IEEE COMMUN SURV TUT, V19, P1504, DOI 10.1109/COMST.2017.2691349
   Liu S, 1998, IEEE T SOFTWARE ENG, V24, P24, DOI 10.1109/32.663996
   Lu Y, 2017, J IND INF INTEGR, V6, P1, DOI 10.1016/j.jii.2017.04.005
   Mery D., 2011, P 2 S INF COMM TECHN, P179, DOI DOI 10.1145/2069216.2069252
   MILLS HD, 1987, IEEE SOFTWARE, V4, P19, DOI 10.1109/MS.1987.231413
   Roussel J.-M., 2002, APII-JESA Journal Europeen des Systemes Automatises, V36, P905
   Sarshogh M.R., 2012, ELECT COMMUN EASST, V46
   Sinha R, 2019, IEEE T IND INFORM, V15, P3772, DOI 10.1109/TII.2019.2908665
   Sulskus G, 2015, LECT NOTES COMPUT SC, V9392, P292, DOI 10.1007/978-3-319-24644-4_20
   Zhang M, 2019, P IEEE S SECUR PRIV, P522, DOI 10.1109/SP.2019.00034
   Zhu C., 2020, SCI COMPUT PROGRAM, V189
   Zhu CY, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102513
   Zhu CY, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P150, DOI 10.1109/TASE.2018.00028
NR 38
TC 2
Z9 2
U1 3
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2022
VL 215
AR 102763
DI 10.1016/j.scico.2021.102763
EA DEC 2021
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA YN9RV
UT WOS:000747588600004
DA 2024-07-18
ER

PT J
AU Huang, RB
   Chen, HB
   Sun, WF
   Towey, D
AF Huang, Rubing
   Chen, Haibo
   Sun, Weifeng
   Towey, Dave
TI Candidate test set reduction for adaptive random testing: An overheads
   reduction technique
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software testing; Random testing; Adaptive random testing; FSCS; Test
   set reduction
ID PROPORTIONAL SAMPLING STRATEGY; GENERATION; ALGORITHMS
AB Adaptive Random Testing (ART) is a family of testing techniques that were proposed as an enhancement of random testing (RT). ART achieves better failure-detection capability than RT by more evenly distributing test cases throughout the input domain. However, this process of selecting more diverse test cases incurs a heavy computational cost. In this paper, we propose a new ART method that improves on the efficiency of Fixed-Size-Candidate-Set ART (FSCS) by applying a test set reduction strategy. The proposed method, FSCS by Candidate Test Set Reduction (FSCS-CTSR), reduces the number of randomly generated candidate test cases, but supplements them with earlier, unused candidates that have lower similarity to the executed test cases. Simulations and experimental studies were conducted to examine the effectiveness and efficiency of the method, with the experimental results showing a comparable failure-detection effectiveness to FSCS, but with lower computational costs. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Huang, Rubing] Macau Univ Sci & Technol, Fac Informat Technol, Macau 999078, Peoples R China.
   [Chen, Haibo] Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
   [Sun, Weifeng] Chongqing Univ, Sch Big Data & Software Engn, Chongqing 401331, Peoples R China.
   [Towey, Dave] Univ Nottingham Ningbo China, Sch Comp Sci, Ningbo 315100, Zhejiang, Peoples R China.
C3 Macau University of Science & Technology; Jiangsu University; Chongqing
   University; University of Nottingham Ningbo China
RP Chen, HB (corresponding author), Jiangsu Univ, Sch Comp Sci & Commun Engn, Zhenjiang 212013, Jiangsu, Peoples R China.
EM rbhuang@must.edu.mo; 2221808034@stmail.ujs.edu.cn;
   weifeng.sun@cqu.edu.cn; dave.towey@nottingham.edu.cn
RI ; Towey, Dave/K-3160-2014
OI Huang, Rubing/0000-0002-1769-6126; Sun, Weifeng/0000-0001-6013-1369;
   Towey, Dave/0000-0003-0877-4353
FU National Natural Science Foundation of China [61872167, 61502205];
   Science and Technology Program of the Ministry of Housing and
   Urban-Rural Development of China [2020-S-001]
FX This work is partly supported by the National Natural Science Foundation
   of China, under grant nos. 61872167 and 61502205. This work is also in
   part supported by the Science and Technology Program of the Ministry of
   Housing and Urban-Rural Development of China, under grant no.
   2020-S-001.
CR AMMANN PE, 1988, IEEE T COMPUT, V37, P418, DOI 10.1109/12.2185
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], 2017, INTRO JAVA PROGRAMMI
   [Anonymous], 2005, P 17 INT C SOFTW ENG
   Arcuri A, 2014, SOFTW TEST VERIF REL, V24, P219, DOI 10.1002/stvr.1486
   Arcuri A, 2012, IEEE T SOFTWARE ENG, V38, P258, DOI 10.1109/TSE.2011.121
   Arcuri Andrea., 2011, ISSTA
   Beaumont O, 2007, LECT NOTES COMPUT SC, V4878, P315
   Chan FT, 1996, INFORM SOFTWARE TECH, V38, P775, DOI 10.1016/0950-5849(96)01103-2
   Chan KP, 2002, LECT NOTES COMPUT SC, V2349, P321
   Chan KP, 2006, P INT COMP SOFTW APP, P485
   Chan KP, 2006, INT J SOFTW ENG KNOW, V16, P553, DOI 10.1142/S0218194006002926
   Chen TY, 2006, LECT NOTES COMPUT SC, V4006, P155
   Chen T. Y., 2007, P 9 INT C SOFTW ENG, P141
   Chen T. Y., 2006, P 1 INT WORKSH RAND, P64
   Chen TY, 2008, INT CONF QUAL SOFTW, P145, DOI 10.1109/QSIC.2008.23
   Chen TY, 2007, INT J SOFTW ENG KNOW, V17, P805, DOI 10.1142/S0218194007003501
   Chen TY, 2007, IEEE T RELIAB, V56, P562, DOI 10.1109/TR.2007.903293
   Chen TY, 2006, J SYST SOFTWARE, V79, P591, DOI 10.1016/j.jss.2005.05.029
   Chen TY, 2015, SCI CHINA INFORM SCI, V58, DOI 10.1007/s11432-015-5314-x
   Chen TY, 2013, IEEE T RELIAB, V62, P226, DOI 10.1109/TR.2013.2240898
   Chen TY, 2008, ACM T SOFTW ENG METH, V17, DOI 10.1145/1363102.1363107
   Chen TY, 2010, J SYST SOFTWARE, V83, P60, DOI 10.1016/j.jss.2009.02.022
   Chen TY, 2009, J SYST SOFTWARE, V82, P1419, DOI 10.1016/j.jss.2009.05.017
   Chen TY, 2004, LECT NOTES COMPUT SC, V3321, P320
   Chen TY, 2004, QSIC 2004: PROCEEDINGS OF THE FOURTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P146
   Chen TY, 2003, THIRD INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, PROCEEDINGS, P4, DOI 10.1109/QSIC.2003.1319079
   Chen TY, 2001, J SYST SOFTWARE, V58, P65, DOI 10.1016/S0164-1212(01)00028-0
   Ciupa I, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P71, DOI 10.1145/1368088.1368099
   Collected, 1980, ALGORITHMS
   Cotroneo D, 2016, IEEE T SOFTWARE ENG, V42, P452, DOI 10.1109/TSE.2015.2491931
   DURAN JW, 1984, IEEE T SOFTWARE ENG, V10, P438, DOI 10.1109/TSE.1984.5010257
   Ferrer J, 2012, SOFTWARE PRACT EXPER, V42, P1331, DOI 10.1002/spe.1135
   Flannery B. P., 1992, NUMERICAL RECIPES C, DOI DOI 10.2277/052143064X
   Huang RB, 2020, IEEE INT CONF SOFTW, P406, DOI 10.1109/ICST46399.2020.00049
   Huang RB, 2021, IEEE T SOFTWARE ENG, V47, P2052, DOI 10.1109/TSE.2019.2942921
   Huang RB, 2015, INFORM SOFTWARE TECH, V67, P13, DOI 10.1016/j.infsof.2015.06.003
   Huang RB, 2012, P INT COMP SOFTW APP, P52, DOI 10.1109/COMPSAC.2012.15
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Kuo FC, 2009, INT CONF QUAL SOFTW, P51, DOI 10.1109/QSIC.2009.15
   Liu H, 2016, IEEE T COMPUT, V65, P1896, DOI 10.1109/TC.2015.2455981
   Lv JP, 2014, IEEE T SYST MAN CY-S, V44, P1649, DOI 10.1109/TSMC.2014.2318019
   MAK IK, 1997, THESIS U MELBOURNE A
   Mao CY, 2019, IEEE T RELIAB, V68, P1444, DOI 10.1109/TR.2019.2892230
   Mayer J., 2006, P 5 ACM IEEE INT S E, P105
   Nikravan E, 2020, INT J COMPUT SCI MAT, V11, P209
   Orso A., 2014, P FUTURE SOFTWARE EN, P117, DOI [10.1145/2593882.2593885, DOI 10.1145/2593882.2593885]
   Sabor KK, 2015, 10TH INTERNATIONAL WORKSHOP ON AUTOMATION OF SOFTWARE TEST AST 2015, P28, DOI 10.1109/AST.2015.13
   Schneckenburger C., 2007, P 4 INT WORKSH SOFTW, P90
   Seung-Hun Shin, 2010, IEEE 34th Annual Computer Software and Applications Conference Workshops (COMPSACW 2010), P335, DOI 10.1109/COMPSACW.2010.65
   Shahbazi A, 2013, IEEE T SOFTWARE ENG, V39, P163, DOI 10.1109/TSE.2012.18
   Towey, 2005, P 17 INT C SOFTW ENG, P292
   WHITE LJ, 1980, IEEE T SOFTWARE ENG, V6, P247, DOI 10.1109/TSE.1980.234486
   Xu SY, 2010, ASIAN TEST SYMPOSIUM, P21, DOI 10.1109/ATS.2010.13
   Yoo S, 2012, SOFTW TEST VERIF REL, V22, P67, DOI [10.1002/stv.430, 10.1002/stvr.430]
NR 55
TC 4
Z9 4
U1 4
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102730
DI 10.1016/j.scico.2021.102730
EA OCT 2021
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000011
DA 2024-07-18
ER

PT J
AU Hu, K
   Zhang, T
   Ding, Y
   Zhu, J
   Talpin, JP
AF Hu, Kai
   Zhang, Teng
   Ding, Yi
   Zhu, Jian
   Talpin, Jean-Pierre
TI Verification of concurrent code from synchronous specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Synchronous specifications; SIGNAL; Parallel programming; OpenMP; Code
   generation
AB The synchronous language SIGNAL is a formal specification formalism for developing safety-critical real-time systems. It is a multi-clocked data-flow modeling language suitable for specifying deterministic concurrent behaviors. Its model of computation and communication very well matches recent trends to utilize multi-core processors for executing real-time systems, by taking advantage of its concurrent semantics. The SIGNAL compiler generates code from data-flow specifications while analyzing and verifying safety properties of the system under design: deadlock-freedom, determinism. However, most of recent works have focused on generating sequential code from SIGNAL. Choosing the parallel library OpenMP as the target, this paper proposes a methodology to generate and verify concurrent code automatically from SIGNAL specifications. This is done by first exploring clock relations among signals by application of a so-called clock calculus. Then, specifications are translated into EDGs (Equation-Dependency Graphs) to analyze global data-dependency relations. An EDG is then partitioned into concurrent tasks to help explore parallelism in the original specification while preserving its semantic. Combined with clock relations, parallel tasks are finally mapped onto the OpenMP structures. The proposed approach is illustrated by a realistic case study. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Hu, Kai; Zhang, Teng; Zhu, Jian] Beihang Univ, State Key Lab Software Dev Environm, Beijing, Peoples R China.
   [Zhang, Teng] Univ Penn, Philadelphia, PA 19104 USA.
   [Ding, Yi] Beijing Wuzi Univ, Sch Informat, Beijing, Peoples R China.
   [Talpin, Jean-Pierre] INRIA Rennes, Campus Beaulieu, Rennes, France.
C3 Beihang University; University of Pennsylvania; Beijing Wuzi University;
   Universite de Rennes
RP Ding, Y (corresponding author), Beijing Wuzi Univ, Sch Informat, Beijing, Peoples R China.
EM dingyi@bwu.edu.cn
RI Yichen, Ding/R-5036-2019; hu, kai/HSG-5888-2023
FU Project of National Key Research and Development of China
   [2018YFB1402702]; National Natural Science Foundation of China
   [61672074, 61672075]; Ministry of Education and China Mobile
   [MCM20180104]; State Key Laboratory of Software Development Environment
   [SKLSDE2020ZX21]
FX This work was partially supported by the Project of National Key
   Research and Development of China under Grant 2018YFB1402702, National
   Natural Science Foundation of China under Grant 61672074, 61672075,
   Funding of Ministry of Education and China Mobile MCM20180104, State Key
   Laboratory of Software Development Environment (No. SKLSDE2020ZX21) .
CR AMAGBEGNON P, 1995, SIGPLAN NOTICES, V30, P163, DOI 10.1145/223428.207134
   Amagbegnon T.P., 1994, RR2290 INRIA
   [Anonymous], 2009, MPI MESSAGE PASSING
   Baudisch D, 2010, DES AUT TEST EUROPE, P949
   BENVENISTE A, 1991, P IEEE, V79, P1270, DOI 10.1109/5.97297
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Benveniste A, 2000, INFORM COMPUT, V163, P125, DOI [10.1006/inco.2000.9999, 10.1006/inco.2000.2898]
   Berry G, 2000, FOUNDAT COMPUT, P425
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Besnard L., CODE GENERATION STRA
   Besnard L., 2009, RR6894 INRIA
   Besnard L, SIGNAL V4 INRIA VERS
   Gamati A., 2009, DESIGNING EMBEDDED S
   Gamatie A., 2006, SYNCHRONOUS LANGUAGE
   Gonnord L, 2013, ENHANCING COMPILATIO
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hu K, 2015, SIMUL MODEL PRACT TH, V51, P69, DOI 10.1016/j.simpat.2014.10.010
   Hu K, 2013, FRONT COMPUT SCI-CHI, V7, P617, DOI 10.1007/s11704-013-3906-4
   Jantsch A, 2005, IEE P-COMPUT DIG T, V152, P114, DOI 10.1049/ip-cdt:20045098
   Jose BA, 2008, MEMOCODE'08: SIXTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P129
   Kirsch CM, 2002, LECT NOTES COMPUT SC, V2491, P61
   Knight JC, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P547, DOI 10.1109/ICSE.2002.1007998
   Le Guernic P, 2003, J CIRCUIT SYST COMP, V12, P261, DOI 10.1142/S0218126603000763
   LEGUERNIC P, 1991, P IEEE, V79, P1321, DOI 10.1109/5.97301
   Maffeis O., 1993, Static Analysis. Third International Workshop Proceedings, P99
   Nebut M, 2004, FORM ASP COMPUT, V16, P263, DOI 10.1007/s00165-004-0039-4
   Potop-Butucaru D, 2006, FORM METHOD SYST DES, V28, P111, DOI 10.1007/s10703-006-7844-8
   Potop-Butucaru D, 2011, FUND INFORM, V108, P91, DOI 10.3233/FI-2011-415
   Schneider K, 2009, 375 U KAIS SLAUT DEP
   Talpin J.P, 2005, SYNCHRONOUS HYPOTHES
   Talpin JP, 2012, SCI COMPUT PROGRAM, V77, P113, DOI 10.1016/j.scico.2010.06.006
   Talpin Jean-Pierre, 2005, EMB SOFTW C
   Yang ZB, 2013, FRONT COMPUT SCI-CHI, V7, P673, DOI 10.1007/s11704-013-3908-2
   Zhao YW, 2016, IEEE T IND INFORM, V12, P1321, DOI 10.1109/TII.2016.2569414
NR 34
TC 0
Z9 0
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102625
DI 10.1016/j.scico.2021.102625
EA FEB 2021
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400002
DA 2024-07-18
ER

PT J
AU Törnblom, J
   Nadjm-Tehrani, S
AF Tornblom, John
   Nadjm-Tehrani, Simin
TI Formal verification of input-output mappings of tree ensembles
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Workshop on Formal Techniques for Safety-Critical
   Systems (FTSCS)
CY NOV 16, 2018
CL Gold Coast, AUSTRALIA
DE Formal verification; Decision tree; Tree ensemble; Random forest;
   Gradient boosting machine
ID NEURAL-NETWORKS
AB Recent advances in machine learning and artificial intelligence are now being considered in safety-critical autonomous systems where software defects may cause severe harm to humans and the environment. Design organizations in these domains are currently unable to provide convincing arguments that their systems are safe to operate when machine learning algorithms are used to implement their software.
   In this paper, we present an efficient method to extract equivalence classes from decision trees and tree ensembles, and to formally verify that their input-output mappings comply with requirements. The idea is that, given that safety requirements can be traced to desirable properties on system input-output patterns, we can use positive verification outcomes in safety arguments. This paper presents the implementation of the method in the tool VoTE (Verifier of Tree Ensembles), and evaluates its scalability on two case studies presented in current literature. We demonstrate that our method is practical for tree ensembles trained on low-dimensional data with up to 25 decision trees and tree depths of up to 20. Our work also studies the limitations of the method with high-dimensional data and preliminarily investigates the trade-off between large number of trees and time taken for verification. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Tornblom, John] Saab AB, Broderna Ugglas Gata, Linkoping, Sweden.
   [Nadjm-Tehrani, Simin] Linkoping Univ, Dept Comp & Informat Sci, Linkoping, Sweden.
C3 Saab Group; Linkoping University
RP Törnblom, J (corresponding author), Saab AB, Broderna Ugglas Gata, Linkoping, Sweden.
EM simin.nadjm-tehrani@liu.se
OI Tornblom, John/0000-0002-4073-0417
FU Wallenberg AI, Autonomous Systems and Software Program (WASP) - Knut and
   Alice Wallenberg Foundation
FX This work was partially supported by the Wallenberg AI, Autonomous
   Systems and Software Program (WASP) funded by the Knut and Alice
   Wallenberg Foundation.
CR [Anonymous], AUTOMATIC VERIFICATI
   [Anonymous], DAGSTUHL SEMINAR
   [Anonymous], P AM PROGRAM LANG
   [Anonymous], 2016, 2016 IEEEAIAA 35 DIG
   [Anonymous], FORMAL TECHNIQUES SA
   [Anonymous], ARXIV181111373
   [Anonymous], INT C LEARN REPR ICL
   [Anonymous], 2017, PROPERTIES SOFTMAX F
   [Anonymous], DO333 RTCA INC
   Bastani O, 2018, ADV NEUR IN, V31
   Breiman L, 1998, BIOMETRICS, DOI [10.1201/9781315139470, DOI 10.2307/2530946]
   Breiman L., 2001, Mach. Learn., V45, P5
   Burton Simon, 2017, Computer Safety, Reliability and Security, SAFECOMP 2017: Workshops ASSURE, DECSoS, SASSUR, TELERISE and TIPS. Proceedings: LNCS 10489, P5, DOI 10.1007/978-3-319-66284-8_1
   Dutta S, 2018, LECT NOTES COMPUT SC, V10811, P121, DOI 10.1007/978-3-319-77935-5_9
   Ehlers R, 2017, LECT NOTES COMPUT SC, V10482, P269, DOI 10.1007/978-3-319-68167-2_19
   Esteva A, 2017, NATURE, V542, P115, DOI 10.1038/nature21056
   Friedman JH, 2001, ANN STAT, V29, P1189, DOI 10.1214/aos/1013203451
   Huang XW, 2017, LECT NOTES COMPUT SC, V10426, P3, DOI 10.1007/978-3-319-63387-9_1
   Irsoy O, 2012, INT C PATT RECOG, P1819
   Ivanov R, 2019, PROCEEDINGS OF THE 2019 22ND ACM INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL (HSCC '19), P169, DOI 10.1145/3302504.3311806
   Katz G, 2017, LECT NOTES COMPUT SC, V10426, P97, DOI 10.1007/978-3-319-63387-9_5
   Kurd Z, 2007, NEURAL COMPUT APPL, V16, P11, DOI 10.1007/s00521-006-0039-9
   Lecun Y, 1998, P IEEE, V86, P2278, DOI 10.1109/5.726791
   Liu YZ, 2018, IEEE INT SYMP SIGNAL, P276, DOI 10.1109/ISSPIT.2018.8642779
   Mirman M., 2018, INT C MACH LEARN, P3578
   Narodytska N, 2018, AAAI CONF ARTIF INTE, P6615
   Pedregosa F, 2011, J. Mach. Learn. Res., V12, P2825
   Prokhorenkova L, 2018, ADV NEUR IN, V31
   Pulina L, 2012, AI COMMUN, V25, P117, DOI 10.3233/AIC-2012-0525
   Russell S, 2015, AI MAG, V36, P105, DOI 10.1609/aimag.v36i4.2577
   Silver D, 2016, NATURE, V529, P484, DOI 10.1038/nature16961
   Tseng D, 2018, IEEE INT CON AUTO SC, P284, DOI 10.1109/COASE.2018.8560431
   Wang SQ, 2018, ADV NEUR IN, V31
NR 33
TC 16
Z9 17
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2020
VL 194
AR 102450
DI 10.1016/j.scico.2020.102450
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LG6ET
UT WOS:000528192400002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Sabahi-Kaviani, Z
   Ghassemi, F
AF Sabahi-Kaviani, Zeynab
   Ghassemi, Fatemeh
TI Behavioral model identification and classification of multi-component
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Passive automata learning; State-merge condition; Behavioral equivalence
   relation; Traffic classification; Runtime verification
AB Learning model from the execution traces has been considered in several domains such as traffic classification, malware detection, and software engineering since it distinguishes which processes actually executed through their traces. Behavioral model learning and classification (in terms of learned models) are taken into accounts to eliminate the shortages of models derived based on non-behavioral features and improve the resulting classifications. So far, no general method has been proposed to automatically derive behavioral models. To this aim, we assume that the models of applications can be abstractly defined in terms of how they execute their depending components, well-known in the domain. To automatically derive such models, we extend the passive automata learning by considering the behavior of the depending components in addition to the observed behaviors. The state merging algorithm of the learning process is equipped with a new equivalence relation which aggregate states modulo counter abstraction of symmetric reduction. To improve the generated model to cover unobserved behaviors, we leverage the technique of complex event processing to complete the model with the unseen interleaving of actions due to the concurrent execution of components. The derived models, specified by parametrized transition systems, can distinguish different executions of instances of each component by assigning a unique symbolic identifier to each instantiation and parameterizing actions with such identifiers.
   The learned models are used to distinguish the executions of applications in an interleaved execution trace of different systems. The detection procedure is more complicated for parametric models because of the need for relating the information of the trace to symbolic identifiers as the parameters. We utilize runtime verification techniques in a three-step novel approach so as to enhance the performance of the matching process for a trace.
   To illustrate the applicability of our approach, we have employed it for traffic classification in the network domain and then applied it on some real applications. To demonstrate the effectiveness of our approach in this domain, we compare it to related approaches in terms of their true positive rate, false positive rate, and test time. Our results indicate that our technique prevents including invalid traces so that unobserved behaviors are covered with an acceptable precision. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Sabahi-Kaviani, Zeynab; Ghassemi, Fatemeh] Univ Tehran, Coll Engn, Sch Elect & Comp Engn, Tehran, Iran.
C3 University of Tehran
RP Ghassemi, F (corresponding author), Univ Tehran, Coll Engn, Sch Elect & Comp Engn, Tehran, Iran.
EM z.sabahi@ut.ac.ir; fghassemi@ut.ac.ir
RI Ghassemi, Fatemeh/W-8386-2018
CR Aarts F, 2010, LECT NOTES COMPUT SC, V6435, P188, DOI 10.1007/978-3-642-16573-3_14
   Aceto  L, 2017, P FSTTCS
   Aceto  L., 2018, P FOSSACS
   Alshammari R., 2009, International Conference on Computational Intelligence for Security and Defense Applications (CISDA), P289
   ANGLUIN D, 1987, INFORM COMPUT, V75, P87, DOI 10.1016/0890-5401(87)90052-6
   [Anonymous], P 2010 IEEE C EV COM
   Antunes J., 2011, 2011 18th Working Conference on Reverse Engineering, P169, DOI 10.1109/WCRE.2011.28
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Barringer Howard, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P68, DOI 10.1007/978-3-642-32759-9_9
   Basler G, 2009, LECT NOTES COMPUT SC, V5643, P64, DOI 10.1007/978-3-642-02658-4_9
   Bermolen P, 2011, COMPUT NETW, V55, P1394, DOI 10.1016/j.comnet.2010.12.004
   Beschastnikh Ivan., 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering, ESEC/FSE '11, P448, DOI 10.1145/2025113.2025188
   Cook J. E., 1998, ACM Transactions on Software Engineering and Methodology, V7, P215, DOI 10.1145/287000.287001
   de Caso G, 2012, IEEE T SOFTWARE ENG, V38, P141, DOI 10.1109/TSE.2010.98
   Emerson EA, 1999, LECT NOTES COMPUT SC, V1703, P142
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Fall Kevin R, 2011, TCP IP ILLUSTRATED, V1
   Francalanza  A., 2017, P RV
   Francalanza A, 2017, FORM METHOD SYST DES, V51, P87, DOI 10.1007/s10703-017-0273-z
   GOLD EM, 1967, INFORM CONTROL, V10, P447, DOI 10.1016/S0019-9958(67)91165-5
   Groote JF, 2014, MODELING AND ANALYSIS OF COMMUNICATING SYSTEMS, P1
   Havelund K, 2015, INT J SOFTW TOOLS TE, V17, P143, DOI 10.1007/s10009-014-0309-2
   Heule MJH, 2010, LECT NOTES ARTIF INT, V6339, P66, DOI 10.1007/978-3-642-15488-1_7
   Kinable J, 2011, J COMPUT VIROL HACKI, V7, P233, DOI 10.1007/s11416-011-0151-y
   Krka I, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P178, DOI 10.1145/2635868.2635890
   Lang K. J., 1998, Grammatical Inference. 4th International Colloquium, ICGI-98. Proceedings, P1, DOI 10.1007/BFb0054059
   Leucker M, 2009, J LOGIC ALGEBR PROGR, V78, P293, DOI 10.1016/j.jlap.2008.08.004
   Lorenzoli D, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P501, DOI 10.1145/1368088.1368157
   Margara A., 2014, P 8 ACM INT C DISTRI, P47, DOI [DOI 10.1145/2611286.2611289, 10.1145/2611286.2611289]
   Mariani L, 2007, IEEE SOFTWARE, V24, P76, DOI 10.1109/MS.2007.138
   McGregor A, 2004, LECT NOTES COMPUT SC, V3015, P205
   Meredith Patrick, 2012, International Journal on Software Tools for Technology Transfer, V14, P249, DOI 10.1007/s10009-011-0198-6
   Milner R., 1989, Communication and concurrency
   Moore A. W., 2005, Performance Evaluation Review, V33, P50, DOI 10.1145/1071690.1064220
   Moore AW, 2005, LECT NOTES COMPUT SC, V3431, P41, DOI 10.1007/978-3-540-31966-5_4
   Pnueli A., 2002, International Conference on Computer Aided Verification (CAV), P107
   Reger G, 2014, THESIS
   Reger G., 2015, ACM SIGSOFT SOFTWARE, V40, P1
   Reiss SP, 2001, PROC INT CONF SOFTW, P221, DOI 10.1109/ICSE.2001.919096
   Sabahi-Kaviani Z, 2017, LECT NOTES COMPUT SC, V10522, P212, DOI 10.1007/978-3-319-68972-2_14
   SCHIEBER B, 1988, SIAM J COMPUT, V17, P1253, DOI 10.1137/0217079
   Sen Subhabrata., 2004, WWW
   Ubik Sven, 2010, Proceedings of the Fifth International Conference on Systems and Networks Communications (ICSNC 2010), P387, DOI 10.1109/ICSNC.2010.66
   Valenti Silvio, 2013, Data Traffic Monitoring and Analysis. From Measurement, Classification, and Anomaly Detection to Quality of Experience, P123, DOI 10.1007/978-3-642-36784-7_6
   van der Aalst WMP, 2011, PROCESS MINING: DISCOVERY, CONFORMANCE AND ENHANCEMENT OF BUSINESS PROCESSES, P1, DOI 10.1007/978-3-642-19345-3
   Van der Aalst WMP, 1998, J CIRCUIT SYST COMP, V8, P21, DOI 10.1142/S0218126698000043
   van Dongen BF, 2005, LECT NOTES COMPUT SC, V3536, P444
   VANGLABBEEK RJ, 1990, LECT NOTES COMPUT SC, V458, P278
   Verwer Sicco, 2010, PhD thesis
   Walkinshaw N, 2009, LECT NOTES COMPUT SC, V5850, P305, DOI 10.1007/978-3-642-05089-3_20
   Wang Y, 2011, INT CONF ACOUST SPEE, P1, DOI 10.1109/PLASMA.2011.5993071
   Williams N, 2006, ACM SIGCOMM COMP COM, V36, P7, DOI 10.1145/1163593.1163596
   Xu K, 2005, ACM SIGCOMM COMP COM, V35, P169, DOI 10.1145/1090191.1080112
   1972, IEEE T COMPUT, V21, P592
NR 54
TC 1
Z9 1
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 15
PY 2019
VL 177
BP 41
EP 66
DI 10.1016/j.scico.2019.03.003
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HV5YO
UT WOS:000466061200003
OA Bronze
DA 2024-07-18
ER

PT J
AU Santiago, R
   Bedregal, B
   Madeira, A
   Martins, MA
AF Santiago, Regivan
   Bedregal, Benjamin
   Madeira, Alexandre
   Martins, Manuel A.
TI On interval dynamic logic: Introducing quasi-action lattices
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Intervals; Fuzzy logic; Dynamic logic
ID T-NORMS; REPRESENTATIONS; EXTENSION
AB In this paper we discuss the incompatibility between the notions of validity and impreciseness in the context of Dynamic Logics. To achieve that we consider the Lukasiewicz action lattice and its interval counterpart, we show how some validities fail in the context of intervals. In order to capture the properties of action lattices that remain valid for intervals we propose a new structure called Quasi-action Lattices which generalizes action lattices and is able to model both: The Lukasiewicz action lattice, L, and its interval counterpart, (sic).
   The notion of graded satisfaction relation is extended to quasi-action lattices. We demonstrate that, in the case of intervals, the relation of graded satisfaction is correct (cf. Theorem 3) with respect to the graded satisfaction relation on the Lukasiewicz action lattice. Although this theorem guarantees that satisfiability is preserved on intervals, we show that validity is not. We propose, then, to weaken the notion of validity on action lattices to designated validity on quasi-action lattices. In this context, Theorem 4 guarantees that the dynamic formula which are valid with respect to L will be designated valid with respect to (sic). (C) 2019 Elsevier B.V. All rights reserved.
C1 [Santiago, Regivan; Bedregal, Benjamin] Univ Fed Rio Grande Norte UFRN, Dept Informat & Matemat Aplicada DIMAp, Grp Log Language Informat Theory & Applicat LoLIT, Natal, RN, Brazil.
   [Madeira, Alexandre; Martins, Manuel A.] Univ Aveiro, CIDMA Dept, Aveiro, Portugal.
   [Madeira, Alexandre] Univ Minho, QuantaLab, Braga, Portugal.
C3 Universidade Federal do Rio Grande do Norte; Universidade de Aveiro;
   Universidade do Minho
RP Santiago, R (corresponding author), Univ Fed Rio Grande Norte UFRN, Dept Informat & Matemat Aplicada DIMAp, Grp Log Language Informat Theory & Applicat LoLIT, Natal, RN, Brazil.
EM regivan@dimap.ufrn.br
RI Madeira, Alexandre/AAF-4147-2021; Santiago, Regivan Hugo
   Nunes/N-1132-2019; Martins, Manuel A./A-8821-2010
OI Madeira, Alexandre/0000-0002-0646-2017; Santiago, Regivan Hugo
   Nunes/0000-0002-4991-9603; Martins, Manuel A./0000-0002-5109-8066;
   Bedregal, Benjamin/0000-0002-6757-7934
FU Marie Curie Foundation; Marie Curie project - EU FP7
   [PIRsEs-GA-2012-318986]; Brazilian National Council for Scientific and
   Technological Development (CNPq, Portuguese: Conselho Nacional de
   Desenvolvimento Cientlfico e Tecnologico) [304597/2015-5,
   307681/2012-2]; ERDF - European Regional Development Fund through the
   Operational Programme for Competitiveness and Internationalisation -
   COMPETE; National Funds through the Portuguese funding agency, FCT -
   Fundacao para a Ciencia e a Tecnologia [FOCI-01-0145-FEDER-016692,
   57/2016]
FX This paper is a result of the cooperation between UFRN (Brazil) and
   Aveiro University (Portugal) supported by Marie Curie Foundation. R.
   Santiago and B. Bedregal are supported by Marie Curie project
   PIRsEs-GA-2012-318986 GetFun funded by EU-FP7 and by the Brazilian
   National Council for Scientific and Technological Development (CNPq,
   Portuguese: Conselho Nacional de Desenvolvimento Cientlfico e
   Tecnologico) under the Projects 304597/2015-5 and 307681/2012-2. This
   work is also financed by the ERDF - European Regional Development Fund
   through the Operational Programme for Competitiveness and
   Internationalisation - COMPETE 2020 and by National Funds through the
   Portuguese funding agency, FCT - Fundacao para a Ciencia e a Tecnologia
   within project FOCI-01-0145-FEDER-016692. A. Madeira and M. Martins are
   also supported in the scope of the framework contract foreseen in the
   numbers 4, 5 and 6 of the article 23, of the Decree - Law 57/2016, of
   August 29, changed by Portuguese Law 57/2017, of July 19 and
   UID/MAT/04106/2019 at CIDMA, respectively.
CR [Anonymous], 1962, INTERVAL ARITHMETIC
   [Anonymous], 1959, LMSD285875
   [Anonymous], 2010, LOGICAL ANAL HYBRID
   Baltag A, 2011, SYNTHESE, V179, P285, DOI 10.1007/s11229-010-9783-6
   Bedregal B, 2017, INT J APPROX REASON, V90, P1, DOI 10.1016/j.ijar.2017.07.001
   Bedregal B, 2013, COMPUT APPL MATH, V32, P435, DOI 10.1007/s40314-013-0049-z
   Bedregal BC, 2006, IEEE INT CONF FUZZY, P1981, DOI 10.1109/FUZZY.2006.1681975
   Bedregal BC, 2013, INFORM SCIENCES, V221, P192, DOI 10.1016/j.ins.2012.09.022
   Bou F, 2011, J LOGIC COMPUT, V21, P739, DOI 10.1093/logcom/exp062
   Bustince H, 2016, IEEE T FUZZY SYST, V24, P179, DOI 10.1109/TFUZZ.2015.2451692
   Bedregal BRC, 2006, FUZZY SET SYST, V157, P3220, DOI 10.1016/j.fss.2006.06.013
   Cignoli  R., 1999, TRENDS LOGIC
   Conway J.H., 1971, Regular Algebra and Finite Machines
   Cornelis C, 2006, FUZZY SET SYST, V157, P622, DOI 10.1016/j.fss.2005.10.007
   Dimuro GP, 2011, INFORM SCIENCES, V181, P3898, DOI 10.1016/j.ins.2011.05.003
   Fitting M., 1992, Fundamenta Informaticae, V17, P55
   Fitting M. C., 1991, Fundamenta Informaticae, V15, P235
   HAREL D, 2000, FOUNDAT COMPUT, P3
   Hickey T, 2001, J ACM, V48, P1038, DOI 10.1145/502102.502106
   Hughes J., 2006, J LOGIC LANG INFORM, V15, P83
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   KOZEN D, 1985, J COMPUT SYST SCI, V30, P162, DOI 10.1016/0022-0000(85)90012-1
   Kozen  D., 1991, LOGIC FLOW INF UNPUB
   Liau CJ, 1999, LECT NOTES ARTIF INT, V1711, P294
   Madeira A, 2016, J LOG ALGEBR METHODS, V85, P1011, DOI 10.1016/j.jlamp.2016.03.004
   Madeira A, 2015, LECT NOTES COMPUT SC, V8941, P130, DOI [10.1007/978-3-319-15075-8_9, 10.1007/978-3-319-15075-8-9]
   Mundici D., 2011, TRENDS LOGIC
   Palmeira ES, 2012, COMPUT MATH APPL, V63, P1026, DOI 10.1016/j.camwa.2011.12.007
   Palmeira ES, 2014, FUZZY SET SYST, V240, P66, DOI 10.1016/j.fss.2013.07.023
   PRATT V, 1991, LECT NOTES ARTIF INT, V478, P97, DOI 10.1007/BFb0018436
   Pratt V.R., 1976, 17 ANN S FDN COMPUTE, P109, DOI [10.1109/SFCS.1976.27, DOI 10.1109/SFCS.1976.27]
   Santiago Regivan H. N., 2016, Formal Methods: Foundations and Applications. 19th Brazilian Symposium, SBMF 2016. Proceedings: LNCS 10090, P129, DOI 10.1007/978-3-319-49815-7_8
   Santiago R. H. N., 2016, FORMAL METHODS FDN A
   Santiago RHN, 2006, FORM ASP COMPUT, V18, P231, DOI 10.1007/s00165-006-0089-x
   Sunaga T., 1958, RAAG Mem, V2, P209, DOI [10.1007/BF03186528, DOI 10.1007/BF03186528]
   Xu  Y., 2012, STUDIES FUZZINESS SO
NR 36
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 15
PY 2019
VL 175
BP 1
EP 16
DI 10.1016/j.scico.2019.01.007
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HQ5AF
UT WOS:000462421700001
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Duarte, RM
   Du Bois, AR
   Pilla, ML
   Cavalheiro, GGH
   Reiser, RHS
AF Duarte, Rodrigo Medeiros
   Du Bois, Andre Rauber
   Pilla, Mauricio Lima
   Cavalheiro, Gerson Geraldo H.
   Sander Reiser, Renata Hax
TI Comparing the the performance of concurrent hash tables implemented in
   Haskell
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Programing Languages (SBLP)
CY SEP 22-23, 2016
CL Maringa, BRAZIL
DE Software transactional memory; Haskell; Concurrent programming
AB This paper presents seven concurrent hash table implementations in Haskell, ranging from low-level synchronization mechanisms to high-level ones such as transactional memories. The hash tables were compared using different initial sizes, load factors, data types and hash functions. We also present a case study on implementing a color palette algorithm using the hash tables. The result of the comparison between the algorithms shows that the implementation using the STM Haskell transactional memory library and fine-grain synchronization provides the best performance and good scalability, followed by the implementation using lock striping and MVars. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Duarte, Rodrigo Medeiros; Du Bois, Andre Rauber; Pilla, Mauricio Lima; Cavalheiro, Gerson Geraldo H.; Sander Reiser, Renata Hax] Univ Fed Pelotas, PPGC, Gomes Carneiro 1, BR-96010610 Pelotas, RS, Brazil.
C3 Universidade Federal de Pelotas
RP Duarte, RM (corresponding author), Univ Fed Pelotas, PPGC, Gomes Carneiro 1, BR-96010610 Pelotas, RS, Brazil.
EM rmduarte@inf.ufpel.edu.br; dubois@int.ufpel.edu.br;
   pilla@inf.ufpel.edu.br; gerson.cavalheiro@inf.ufpel.edu.br;
   reiser@inf.ufpel.edu.br
RI Reiser, Renata/AAG-1156-2019; Reiser, Renata H. S./E-7027-2011
OI Reiser, Renata/0000-0001-9934-3115; 
FU CAPES/Brasil (Programa Nacional de Cooperacao Academica da Coordenacao
   de Aperfeicoamento de Pessoal de Nivel Superior) [88882.151433/2017-01]
FX This work was supported by CAPES/Brasil (Programa Nacional de Cooperacao
   Academica da Coordenacao de Aperfeicoamento de Pessoal de Nivel
   Superior) 88882.151433/2017-01.
CR [Anonymous], 2001, INTRO ALGORITHMS
   Castor F., 2011, Proceedings of the compilation of the co-located workshops on DSM'11, TMC'11, AGERE! 2011, AOOPES'11, NEAT'11, VMIL'11, P117
   Drozdek A., 2012, Data Structures and algorithms in C
   Duarte RM, 2016, LECT NOTES COMPUT SC, V9889, P110, DOI 10.1007/978-3-319-45279-1_8
   Harris T, 2008, COMMUN ACM, V51, P91, DOI 10.1145/1378704.1378725
   Harris Tim., 2010, Synthesis Lectures on Computer Architecture, V2nd
   Herlihy Maurice, 2012, The Art of Multiprocessor Programming, V1st
   Jones S. P., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P295, DOI 10.1145/237721.237794
   Marlow S, 2009, ICFP'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P65
   Marlow S, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P11
   Marlow Simon, 2013, Parallel and Concurrent Programming in Haskell
   Newton  R., 2011, MITCSAILTR2011015
   O'Sullivan B., 2008, Real world haskell
   Peyton Jones S., 2002, ENG THEORIES SOFTWAR, P47
   Pu W, 2016, IEEE J EM SEL TOP C, V6, P420, DOI 10.1109/JETCAS.2016.2605661
   Shalev O, 2006, J ACM, V53, P379, DOI 10.1145/1147954.1147958
   Sonmez  N., 2007, 8 S TRENDS FUNCT PRO
   Sonmez Xehir., 2007, Trends in Functional Programming, V8, P89
   Sulzmann M., 2009, P 4 WORKSH DECL ASP, P37
NR 19
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2019
VL 173
BP 56
EP 70
DI 10.1016/j.scico.2018.06.004
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA HO3WK
UT WOS:000460853500005
OA hybrid
DA 2024-07-18
ER

PT J
AU Benzmüller, C
AF Benzmueller, Christoph
TI Universal (meta-)logical reasoning: Recent successes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Computational metaphysics; Classical higher-order logic; Non-classical
   logics; Automated reasoning
ID CUT-ELIMINATION; OMEGA-MEGA; LOGIC; AUTOMATION; PROOF
AB Classical higher-order logic, when utilized as a meta-logic in which various other (classical and non-classical) logics can be shallowly embedded, is suitable as a foundation for the development of a universal logical reasoning engine. Such an engine may be employed, as already envisioned by Leibniz, to support the rigorous formalisation and deep logical analysis of rational arguments on the computer. A respective universal logical reasoning framework is described in this article and a range of successful first applications in philosophy, artificial intelligence and mathematics are surveyed. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Benzmueller, Christoph] Free Univ Berlin, FB Math & Informat, D-14195 Berlin, Germany.
   [Benzmueller, Christoph] Univ Luxembourg, Fac Sci Technol & Commun, L-4365 Esch Sur Alzette, Luxembourg.
C3 Free University of Berlin; University of Luxembourg
RP Benzmüller, C (corresponding author), Free Univ Berlin, FB Math & Informat, D-14195 Berlin, Germany.
OI Benzmuller, Christoph/0000-0002-3392-3093
FU German National Research Foundation (DFG) [BE 2501/9];
   VolkswagenStiftung [CRAP 93678]
FX This research was funded by the German National Research Foundation
   (DFG) under Heisenberg grant BE 2501/9 (Studies in Computational
   Metaphysics) and by VolkswagenStiftung under grant CRAP 93678
   (Consistent Rational Argumentation in Politics).
CR Alama J, 2015, LECT NOTES ARTIF INT, V9195, P73, DOI 10.1007/978-3-319-21401-6_4
   Anderson  C., 1990, FAITH PHILOS, V7
   Anderson C. A., 1996, GODEL 96 LOGICAL FDN, P167
   Andreka  H., 2017, STUDIES UNIVERSAL LO
   Andrews P., 2018, STANFORD ENCY PHILOS
   [Anonymous], APPL LOGIC SERIES
   [Anonymous], 1986, Introduction to higher-order categorical logic
   [Anonymous], 1910, PRINCIPIA MATH, DOI DOI 10.1017/CBO9780511623585
   [Anonymous], 1962, Principia mathematica
   [Anonymous], 2002, Types, Tableaus, and Godel's God
   [Anonymous], 1879, Begriffsschrift
   [Anonymous], 1927, PRINCIPIA MATH
   [Anonymous], 2012, MERE POSSIBILITIES M
   [Anonymous], 2004, REASONING KNOWLEDGE, DOI DOI 10.7551/MITPRESS/5803.001.0001
   [Anonymous], 1912, Principia mathematica (Vol. 2)
   Autexier S, 2010, COGN TECHNOL, P389, DOI 10.1007/978-3-540-89408-7_17
   Baldoni  M., 2003, THESIS
   Baltag A, 2016, The Stanford Encyclopedia of Philosophy
   Bentert Matthias, 2016, DEATH ANTIDEATH, V14
   Benzmüller C, 2017, LOG UNIVERSALIS, V11, P139, DOI 10.1007/s11787-017-0160-9
   Benzmüller C, 2018, LECT NOTES COMPUT SC, V10936, P60, DOI 10.1007/978-3-319-94418-0_6
   Benzmüller C, 2016, LECT NOTES COMPUT SC, V9725, P43, DOI 10.1007/978-3-319-42432-3_6
   Benzmüller C, 2015, J AUTOM REASONING, V55, P389, DOI 10.1007/s10817-015-9348-y
   Benzmüller C, 2015, LECT NOTES COMPUT SC, V9203, P32, DOI 10.1007/978-3-319-21768-0_2
   Benzmüller C, 2014, FRONT ARTIF INTEL AP, V263, P93, DOI 10.3233/978-1-61499-419-0-93
   Benzmüller C, 2012, FRONT ARTIF INTEL AP, V242, P163, DOI 10.3233/978-1-61499-098-7-163
   Benzmüller C, 2013, LOG UNIVERSALIS, V7, P7, DOI 10.1007/s11787-012-0052-y
   Benzmüller C, 2012, J WEB SEMANT, V12-13, P104, DOI 10.1016/j.websem.2011.11.008
   Benzmüller C, 2011, ANN MATH ARTIF INTEL, V62, P103, DOI 10.1007/s10472-011-9249-7
   Benzmüller C, 2010, COGN TECHNOL, P291, DOI 10.1007/978-3-540-89408-7_13
   Benzmueller C, 2010, LOG J IGPL, V18, P881, DOI 10.1093/jigpal/jzp080
   Benzmüller C, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(1:6)2009
   Benzmüller C, 2004, J SYMBOLIC LOGIC, V69, P1027, DOI 10.2178/jsl/1102022211
   Benzmuller Christoph, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P127, DOI 10.1007/978-3-642-45221-5_9
   Benzmüller C, 2002, SYNTHESE, V133, P203, DOI 10.1023/A:1020840027781
   Benzmuller  C., 2016, TECH REP
   Benzmuller C., 2018, TECH REP
   Benzmuller C., 2013, 23 INT JOINT C ART I, P746
   Benzmuller C., 2008, FESTSCHRIFT HONOR PB, P386
   Benzmuller C, 2016, P 25 INT JOINT C ART, P936
   Benzmuller C., 2017, KALPA PUBLICATIONS C, V1, P11
   Benzmuller  C., 2017, TECH REP
   Benzmuller  C., 2016, STUDIES IN UNIVERSAL, P307
   Benzmuller C., 2014, Handbook of the History of Logic, Volume 9, Computational Logic, P215
   Benzmuller  C., 2015, COMPUTATIONAL METAPH
   Benzmüller C, 2017, J PHILOS LOGIC, V46, P333, DOI 10.1007/s10992-016-9403-0
   Benzmuller Christoph, 2018, ARCH FORMAL PROOFS
   Benzmuller Christoph, 2016, LNCS, P244
   Bertot Y., 2004, TEXT THEORET COMP S
   Bjordal F., 1999, LOGICA YB 1998, P214
   Blanchette Jasmin Christian, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P345, DOI 10.1007/978-3-642-32347-8_24
   Blanchette JC, 2013, J AUTOM REASONING, V51, P109, DOI 10.1007/s10817-013-9278-5
   Blanchette JC, 2010, LECT NOTES COMPUT SC, V6172, P131, DOI 10.1007/978-3-642-14052-5_11
   Boolos G., 1993, LOGIC PROVABILITY
   Bostrom N, 2003, PHILOS QUART, V53, P243, DOI 10.1111/1467-9213.00309
   Brown Chad E., 2012, Automated Reasoning. Proceedings 6th International Joint Conference, IJCAR 2012, P111, DOI 10.1007/978-3-642-31365-3_11
   Carmo JMCLM, 2013, J LOGIC COMPUT, V23, P585, DOI 10.1093/logcom/exs009
   CHELLAS BF, 1975, J PHILOS LOGIC, V4, P133, DOI 10.1007/BF00693270
   Church A., 1940, J. Symbolic Logic, V5, P56, DOI [10.2307/2266170, DOI 10.2307/2266170]
   Claus  M., 2015, THESIS
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Delgrande JP, 1998, ARTIF INTELL, V105, P105, DOI 10.1016/S0004-3702(98)00088-5
   DELGRANDE JP, 1987, ARTIF INTELL, V33, P105, DOI 10.1016/0004-3702(87)90053-1
   Deters Morgan, 2014, 2014 Formal Methods in Computer-Aided Design (FMCAD), DOI 10.1109/FMCAD.2014.6987586
   Fitelson B, 2007, J PHILOS LOGIC, V36, P227, DOI 10.1007/s10992-006-9038-7
   Foster S, 2015, J AUTOM REASONING, V54, P165, DOI 10.1007/s10817-014-9318-9
   Freyd P.J., 1990, Categories, Allegories
   Friedman N., 2000, ACM Transactions on Computational Logic (TOCL), V1, P175, DOI 10.1145/359496.359500
   Fuenmayor  D., 2017, THESIS
   Fuenmayor  D., 2017, TABLEAUS GODELS GOD
   Fuenmayor  D., 2017, COMPUTER ASSISTED RE
   Fuenmayor  D., 2018, J APPL LOG, V5
   Fuenmayor D, 2017, LECT NOTES ARTIF INT, V10505, P114, DOI 10.1007/978-3-319-67190-1_9
   G?del Kurt., 1970, LOGIC THEISM ARGUMEN, P144, DOI DOI 10.1017/CBO9780511497988
   Gabbay D., 2013, HDB DEONTIC LOGIC NO
   Gleiβner T., 2017, EPIC SERIES COMPUTIN, P14, DOI DOI 10.29007/JSB9
   Gleissner  T., 2017, THESIS
   Guttmann W, 2011, LECT NOTES COMPUT SC, V6991, P617, DOI 10.1007/978-3-642-24559-6_41
   Hajek P., 2002, Studia Logica, V71, P149, DOI 10.1023/A:1016583920890
   Hajek P, 1996, LECT NOTES PURE APPL, V180, P125
   Hajek Petr, 2001, WAHRHEIT BEWEISBARKE, P325
   JACOBS B, 1999, STUDIES LOGIC FDN MA, V141
   Kirchner  D., 2017, THESIS
   Kirchner  D., 2017, ABS171106542 CORR
   Kirchner Daniel, 2017, ARCH FORMAL PROOFS
   Kovacs Laura, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P1, DOI 10.1007/978-3-642-39799-8_1
   Lambert K., 2002, FREE LOGIC SELECTED
   Lambert K., 1960, INT C LOG METH PHIL
   Link  G., 2008, 1000 YEARS RUSSELLS
   Makarenko  I., 2016, THESIS
   Makinson D, 2000, J PHILOS LOGIC, V29, P383, DOI 10.1023/A:1004748624537
   Moss LS, 1999, ANN PURE APPL LOGIC, V96, P277, DOI 10.1016/S0168-0072(98)00042-6
   Nipkow  T., 2002, LNCS, V2283
   Nolt John, 2018, STANFORD ENCY PHILOS
   OHLBACH HJ, 2001, HDB AUTOMATED REASON, P1403
   Oppenheimer PE, 2011, AUSTRALAS J PHILOS, V89, P333, DOI 10.1080/00048401003674482
   Oppenheimer PE, 2011, J LOGIC COMPUT, V21, P351, DOI 10.1093/logcom/exq017
   Otten J, 2016, CEUR WORKSHOP P, V1770, P51
   Pattinson D, 2011, LOG METH COMPUT SCI, V7, DOI 10.2168/LMCS-7(1:4)2011
   Rasga J, 2007, ANN PURE APPL LOGIC, V149, P81, DOI 10.1016/j.apal.2007.08.001
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Schulz Stephan, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P735, DOI 10.1007/978-3-642-45221-5_49
   Schutz  F., 2017, THESIS
   Scott D., 1967, BERTRAND RUSSELL PHI, P181
   Scott D., 1972, LOGIC THEISM ARGUMEN, P145
   SCOTT DS, 1979, LECT NOTES MATH, V753, P660, DOI DOI 10.1007/BFB0061839
   Sergot M., 2008, LECT COURSE NOTES
   Siekmann J, 2003, APPL LOG SER, V28, P271
   Siekmann J., 2006, J APPL LOGIC, V4, P533, DOI DOI 10.1016/J.JAL.2005.10.008
   SOBEL Jordan H., 2004, Logic and Theism. Arguments For and Against Beliefs in God
   Stalnaker R., 1968, STUDIES LOGICAL THEO, P41, DOI [DOI 10.1007/978-94-009-9117-0_2, 10.1007/978-94-009-9117-02, DOI 10.1007/978-94-009-9117-02]
   Steen  A., 2017, KALPA PUBLICATIONS C, V1, P100
   Steen A, 2018, LECT NOTES ARTIF INT, V10900, P108, DOI 10.1007/978-3-319-94205-6_8
   Steen A, 2016, LOG LOG PHILOS, V25, P535, DOI 10.12775/LLP.2016.021
   Steen A, 2016, LECT NOTES COMPUT SC, V9725, P75, DOI 10.1007/978-3-319-42432-3_10
   Steen Alexander, 2016, Commentarii informaticae didacticae, V10, P81
   Sutcliffe G, 2010, J FORMALIZ REASON, V3, P1
   Thomson, 1987, BEING SAYING ESSAYS, P241
   Whitehead A.N., 1927, Principia mathematica, V2nd
   Whitehead A.N., 1925, PRINCIPIA MATH, VI
   Whitehead AlfredNorth., 1913, Principia Mathematica, V2nd
   Williamson Timothy., 2013, MODAL LOGIC METAPHYS
   Wisniewski  M., 2014, EASYCHAIR P COMPUTIN, V33, P59
   Woltzenlogel Paleo B., 2017, J BHAKTIVEDANTA I, V9, P43
   Zalta E. N., 2018, PREPRINT
   Zalta E. N., 1988, INTENSIONAL LOGIC ME
   Zalta Edward., 1983, Abstract Objects: An Introduction to Axiomatic Metaphysics
NR 127
TC 22
Z9 23
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 48
EP 62
DI 10.1016/j.scico.2018.10.008
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000003
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Parra, O
   España, S
   Panach, JI
   Pastor, O
AF Parra, Otto
   Espana, Sergio
   Ignacio Panach, Jose
   Pastor, Oscar
TI An empirical comparative evaluation of gestUI to include gesture-based
   interaction in user interfaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven method; Human-computer interaction; Code-centric method;
   Gesture-based interaction; Comparative empirical evaluation
ID MODEL-DRIVEN; MAINTAINABILITY
AB Currently there are tools that support the customisation of users' gestures. In general, the inclusion of new gestures implies writing new lines of code that strongly depend on the target platform where the system is run. In order to avoid this platform dependency, gestUI was proposed as a model-driven method that permits (i) the definition of custom touch-based gestures, and (ii) the inclusion of the gesture-based interaction in existing user interfaces on desktop computing platforms. The objective of this work is to compare gestUI (a MDD method to deal with gestures) versus a code-centric method to include gesture-based interaction in user interfaces. In order to perform the comparison, we analyse usability through effectiveness, efficiency and satisfaction. Satisfaction can be measured using the subjects' perceived ease of use, perceived usefulness and intention to use. The experiment was carried out by 21 subjects, who are computer science M.Sc. and Ph.D. students. We use a crossover design, where each subject applied both methods to perform the experiment. Subjects performed tasks related to custom gesture definition and modification of the source code of the user interface to include gesture-based interaction. The data was collected using questionnaires and analysed using non-parametric statistical tests. The results show that gestUI is more efficient and effective. Moreover, results conclude that gestUI is perceived as easier to use than the code-centric method. According to these results, gestUI is a promising method to define custom gestures and to include gesture-based interaction in existing user interfaces of desktop-computing software systems. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Parra, Otto] Univ Cuenca, Dept Comp Sci, Cuenca, Ecuador.
   [Parra, Otto; Pastor, Oscar] Univ Politecn Valencia, PROS Res Ctr, Valencia, Spain.
   [Espana, Sergio] Univ Utrecht, Dept Informat & Comp Sci, Utrecht, Netherlands.
   [Ignacio Panach, Jose] Univ Valencia, Dept Informat, Escola Tecn Super Engn, Valencia, Spain.
C3 Universidad de Cuenca; Universitat Politecnica de Valencia; Utrecht
   University; University of Valencia
RP Parra, O (corresponding author), Univ Cuenca, Dept Comp Sci, Cuenca, Ecuador.; Parra, O (corresponding author), Univ Politecn Valencia, PROS Res Ctr, Valencia, Spain.
EM otto.parra@ucuenca.edu.ec; s.espana@uu.nl; joigpana@uv.es;
   opastor@dsic.upv.es
RI Panach, Jose Ignacio/ABF-2099-2020; España, Sergio/B-1171-2010; Pastor
   Lopez, Oscar/S-4216-2016
OI Panach, Jose Ignacio/0000-0002-7043-6227; España,
   Sergio/0000-0001-7343-4270; Parra, Otto/0000-0003-3004-1025; Pastor
   Lopez, Oscar/0000-0002-1320-8471
FU Department of Computer Science of the Universidad de Cuenca; SENESCYT of
   Ecuador; Generalitat Valenciana [PROMETEOII/2014/039]; Spanish Ministry
   of Science and Innovation [TIN2016-80811-P]
FX This work has been supported by Department of Computer Science of the
   Universidad de Cuenca and SENESCYT of Ecuador, and received financial
   support from the Generalitat Valenciana under "Project IDEO
   (PROMETEOII/2014/039)" and the Spanish Ministry of Science and
   Innovation through the "DataMe Project (TIN2016-80811-P)".
CR [Anonymous], 2003, Proceedings of the 7th International Conference on Empirical Assessment in Software Engineering
   [Anonymous], 2006, ISC7 ISOIECJTC
   [Anonymous], 1983, The Psychology of Human-Computer Interaction
   Anthony L., 2010, Proc. of Graphics Interface 2010, P245
   ASUS, 2018, SMART GEST INTR ASUS
   Boone H.N., 2012, J EXT, V50
   Bunse C, 2009, LECT NOTES COMPUT SC, V5421, P66, DOI 10.1007/978-3-642-01648-6_8
   Cervera M, 2015, INFORM SYST, V50, P36, DOI 10.1016/j.is.2015.01.006
   Condori-Fernández N, 2013, SCI COMPUT PROGRAM, V78, P2245, DOI 10.1016/j.scico.2012.07.017
   Farrell  J., 2013, OBJECT ORIENTED APPR
   Faul F, 2007, BEHAV RES METHODS, V39, P175, DOI 10.3758/BF03193146
   Forward A., 2008, Proc. 2008 Int. Work. onModels Softw. Eng, P27, DOI DOI 10.1145/1370731.1370738
   Hamid B, 2018, COMPUT SECUR, V77, P315, DOI 10.1016/j.cose.2018.03.016
   Hesenius M, 2014, PROCEEDINGS OF THE 16TH ACM INTERNATIONAL CONFERENCE ON HUMAN-COMPUTER INTERACTION WITH MOBILE DEVICES AND SERVICES (MOBILEHCI'14), P213, DOI 10.1145/2628363.2628391
   ISO/IEC, 2010, ERG HUM SYST INT
   Jamieson Susan, 2004, Med Educ, V38, P1217, DOI 10.1111/j.1365-2929.2004.02012.x
   Juristo N., 2013, BASICS SOFTWARE ENG
   Kane SK, 2011, 29TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, P413
   Kapteijns T., 2009, CODE CENTRIC MODEL C, P22
   Khandkar S. H., 2010, ACM INT C INT TABL S
   Kieras D., 2001, USING KEYSTROKE LEVE
   Kim J. H., 2009, 6 8136 6 831 USER IN
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   Kolb J, 2013, INT J INF SYST MODEL, V4, P48, DOI 10.4018/ijismd.2013100103
   Kotrlik J. W., 2003, Information Technology, Learning, and Performance Journal, V21, P1
   Krugler K., 2013, Finding Source Code on the Web for Remix and Reuse, P103
   Lakens D, 2013, FRONT PSYCHOL, V4, DOI 10.3389/fpsyg.2013.00863
   Li  F., 2018, J PHYS C SER, V1060, P1
   Long A. C., 2009, QUILL GESTURE DESIGN
   Lu H., 2012, CHI, P2875
   Martinez Yulkeidi, 2012, Web Engineering. Proceedings 12th International Conference, ICWE 2012, P223, DOI 10.1007/978-3-642-31753-8_17
   Martínez Y, 2014, EMPIR SOFTW ENG, V19, P1887, DOI 10.1007/s10664-013-9269-5
   Martínez Y, 2013, INFORM SOFTWARE TECH, V55, P189, DOI 10.1016/j.infsof.2012.07.004
   Maxwell  K., 2011, APPL STAT SOFTWARE M
   Microsoft, 2015, TOUCHME GEST STUD
   Milicevic  A., 2013, ONWARD 2013
   Moody D.L, 2003, ECIS 2003 P, P79
   Neto R, 2017, EXPERT SYST APPL, V72, P293, DOI 10.1016/j.eswa.2016.10.059
   Oliveira A, 2018, COMPUT IND, V96, P86, DOI 10.1016/j.compind.2018.01.002
   Panach JI, 2015, INFORM SOFTWARE TECH, V62, P164, DOI 10.1016/j.infsof.2015.02.012
   Papotti Paulo Eduardo, 2013, Advanced Information Systems Engineering. 25th International Conference, CAiSE 2013. Proceedings: LNCS 7908, P321, DOI 10.1007/978-3-642-38709-8_21
   Parra  O., 2016, LECT NOTES COMPUTER
   Parra  O., 2017, 11 INT C RES CHALL I
   Parra O., 2016, COMPLEX SYST INFORM, V6, P73
   Parra  O., 2015, P CAISE 2015 FOR 27
   Parra  O., 2015, P 16 INT C HUM COMP
   Ricca F, 2018, EMPIR SOFTW ENG, V23, P1743, DOI 10.1007/s10664-017-9563-8
   Safdar SA, 2015, LECT NOTES COMPUT SC, V9153, P33, DOI 10.1007/978-3-319-21151-0_3
   Santos F, 2018, SIMUL MODEL PRACT TH, V83, P162, DOI 10.1016/j.simpat.2017.11.006
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Signer B, 2007, PROC INT CONF DOC, P954
   Sim  S., 2013, FINDING SOURCE CODE, P348
   Svahnberg M, 2008, ESEM'08: PROCEEDINGS OF THE 2008 ACM-IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT, P288
   Truica CO, 2015, I C CONTR SYS COMP S, P191, DOI 10.1109/CSCS.2015.32
   Vanderdonckt  J., 2018, PROCEEDINGS OF THE 2
   Vatavu  R., 2012, ICMI 12
   Vatavu RD, 2018, 20TH INTERNATIONAL CONFERENCE ON HUMAN-COMPUTER INTERACTION WITH MOBILE DEVICES AND SERVICES (MOBILEHCI 2018), DOI 10.1145/3229434.3229465
   Vogel Lars., 2015, ECLIPSE RICH CLIENT
   Wobbrock JO, 2007, UIST 2007: PROCEEDINGS OF THE 20TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P159
   Wohlin C., 2012, Experimentation in Software Engineering
NR 60
TC 2
Z9 2
U1 4
U2 19
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 232
EP 263
DI 10.1016/j.scico.2018.12.001
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000011
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Dobrikov, I
   Leuschel, M
AF Dobrikov, Ivaylo
   Leuschel, Michael
TI Enabling analysis for Event-B
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model comprehension; Static analysis; Event-B; Model checking;
   Constraint-based analysis
ID MODEL; SPECIFICATIONS; SYMMETRY; PROB; TOOL
AB In this paper we present a static analysis to determine how events influence each other in Event-B and classical B models. The analysis, called an enabling analysis, uses syntactic and constraint-based techniques to compute the effect of executing one event on the guard of another event. We describe the foundations of the approach along with the realization in PRoB. The output of the analysis can help a user to understand the control flow of a formal model. Additionally, we discuss how the information of the enabling analysis can be used to obtain a new optimized model checking algorithm. We evaluate both the performance of the enabling analysis and the new model checking technique on a variety of models. The technique can also be applied to TLA(+) and Z using the PRoB capabilities for translating both formalisms to classical B. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Dobrikov, Ivaylo; Leuschel, Michael] Univ Dusseldorf, Univ Str 1, D-40225 Dusseldorf, Germany.
C3 Heinrich Heine University Dusseldorf
RP Dobrikov, I (corresponding author), Univ Dusseldorf, Univ Str 1, D-40225 Dusseldorf, Germany.
EM dobrikov@cs.uni-duesseldorf.de; leuschel@cs.uni-duesseldorf.de
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial Jean-Raymond, 2014, AIRCRAFT LANDING GEA, P19
   [Anonymous], 1992, THESIS
   [Anonymous], 1996, LNCS, DOI DOI 10.1007/3-540-60761-7
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Bendisposto J, 2011, LECT NOTES COMPUT SC, V6603, P50, DOI 10.1007/978-3-642-19811-3_5
   Bendisposto J, 2009, LECT NOTES COMPUT SC, V5885, P504, DOI 10.1007/978-3-642-10373-5_26
   Bert D, 2005, LECT NOTES COMPUT SC, V3455, P299
   Bert D, 2000, LECT NOTES COMPUT SC, V1945, P235
   Clarke E. M., 1999, International Journal on Software Tools for Technology Transfer, V2, P279, DOI 10.1007/s100090050035
   Clarke EM, 1996, FORM METHOD SYST DES, V9, P77, DOI 10.1007/BF00625969
   Dill D. L., 1996, LNCS, P390, DOI DOI 10.1007/3-540-61474-586
   Dobrikov Ivaylo, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P220, DOI 10.1007/978-3-319-10431-7_16
   Dobrikov I., 2016, TECH REP
   Dobrikov I, 2016, LECT NOTES COMPUT SC, V9675, P102, DOI 10.1007/978-3-319-33600-8_6
   Dobrikov I, 2016, FORM ASP COMPUT, V28, P295, DOI 10.1007/s00165-015-0351-1
   Donaldson AF, 2006, LECT NOTES COMPUT SC, V4085, P541
   Fathabadi AS, 2015, FORM ASP COMPUT, V27, P499, DOI 10.1007/s00165-014-0311-1
   Fekih H., 2006, Applied Computing 2006. 21st Annual ACM Symposium on Applied Computing, P1840, DOI 10.1145/1141277.1141709
   Hammad A, 2002, LECT NOTES COMPUT SC, V2495, P511
   Hansen D., 2012, LNCS, V7321, P24, DOI 10.1007/978-3-642-30729-43
   Hansen D., 2014, ABZ 2014 CCIS, V433, P66, DOI DOI 10.1007/978-3-319-07512-9
   Idani A, 2006, INFORM SOFTWARE TECH, V48, P154, DOI 10.1016/j.infsof.2005.03.003
   Idani A, 2015, LECT NOTES COMPUT SC, V8938, P54, DOI 10.1007/978-3-319-15201-1_4
   Kant G., 2015, LTSMIN HIGH PERFORMA, P692
   Ladenberger Lukas, 2015, Formal Methods and Software Engineering. 17th International Conference on Formal Engineering Methods (ICFEM 2015). Proceedings: LNCS 9407, P153, DOI 10.1007/978-3-319-25423-4_10
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Legeard B., 2002, FME 2002: Formal Methods-Getting IT Right. International Symposium of Formal Methods Europe (Lecture Notes in Computer Science Volume 2391), P21
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Leuschel M., 2005, LNCS, V3455, P13
   Mashkoor A, 2011, REQUIR ENG, V16, P191, DOI 10.1007/s00766-011-0120-5
   Plagge D, 2007, LECT NOTES COMPUT SC, V4591, P480
   Savary A, 2015, LECT NOTES COMPUT SC, V9276, P132, DOI 10.1007/978-3-319-22969-0_10
   Snook C, 2006, ACM T SOFTW ENG METH, V15, P92, DOI 10.1145/1125808.1125811
   Snook C., 2000, UML 2000 WORKSH DYN
   Spivey J. M., 1989, The Z Notation: A Reference Manual
   Turner E, 2007, TASE 2007: FIRST JOINT IEEE/IFIP SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P25, DOI 10.1109/TASE.2007.50
NR 39
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2018
VL 158
BP 81
EP 99
DI 10.1016/j.scico.2017.08.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GE4CX
UT WOS:000431163000006
DA 2024-07-18
ER

PT J
AU Schellhorn, G
   Ernst, G
   Pfähler, J
   Bodenmüller, S
   Reif, W
AF Schellhorn, Gerhard
   Ernst, Gidon
   Pfaehler, Joerg
   Bodenmueller, Stefan
   Reif, Wolfgang
TI Symbolic execution for a clash-free subset of ASMs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Abstract state machines; Symbolic execution; Synchronous parallelism;
   Clashes
ID ABSTRACT STATE MACHINES; THESIS; LOGIC
AB Providing efficient theorem proving support for general ASM rules that update proper functions, use sequential and parallel composition, nondeterministic choice and recursion is difficult, since it is not easy to find a predicate logic formula that describes the transition relation of an ASM rule. One important obstacle to achieving this goal is that executing rules may result in a clash, that aborts the ASM run. This paper contributes three results towards this goal.
   First, it shows that it is possible to compute a first-order formula for each rule that implies clash-freedom when provable. The derived formula is not a precise characterization, but is provable for many ASMs that are used in practice.
   Second, we give axioms that describe the transition relation for clash-free ASM rules as formulas of predicate logic that can be used to verify pre/post-condition assertions using automated theorem provers.
   Third, we show that the relational encoding can be used to justify a calculus for clash-free ASM rules based on symbolic execution. Such a calculus is useful for interactive theorem provers such as our tool KIV. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Schellhorn, Gerhard; Ernst, Gidon; Pfaehler, Joerg; Bodenmueller, Stefan; Reif, Wolfgang] Univ Augsburg, Inst Software & Syst Engn, Augsburg, Germany.
C3 University of Augsburg
RP Schellhorn, G (corresponding author), Univ Augsburg, Inst Software & Syst Engn, Augsburg, Germany.
EM schellhorn@isse.de; ernst@isse.de; pfaehler@isse.de;
   bodenmueller@isse.de; reif@isse.de
OI Ernst, Gidon/0000-0002-3289-5764; Reif, Wolfgang/0000-0002-4086-0043;
   Bodenmuller, Stefan/0000-0002-4596-2305
FU Deutsche Forschungsgemeinschaft (DFG) [RE828/13-1]
FX This work is partly sponsored by the Deutsche Forschungsgemeinschaft
   (DFG), grant number RE828/13-1 ("Verifikation von Flash-Dateisystemen").
CR [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   Blass A., 2003, ACM Transactions on Computational Logic, V4, P578, DOI 10.1145/937555.937561
   Blass A, 2008, ACM T COMPUT LOG, V9, DOI 10.1145/1352582.1352587
   Börger E, 2012, J COMPUT SYST SCI, V78, P939, DOI 10.1016/j.jcss.2011.08.004
   Borger E., 1995, LOGIC PROGRAMMING FO, P20
   Borger E., 2003, ABSTRACT STATE MACHI
   Börger E, 2016, ACTA INFORM, V53, P469, DOI 10.1007/s00236-015-0249-7
   Burstall R. M., 1974, INF PROCESS, V74, P309
   DEROEVER WP, 1998, CAMBRIDGE TRACTS THE, V47
   Ernst G, 2015, INT J SOFTW TOOLS TE, V17, P677, DOI 10.1007/s10009-014-0308-3
   Ferrarotti F, 2017, LOG J IGPL, V25, P700, DOI 10.1093/jigpal/jzx021
   Ferrarotti F, 2016, THEOR COMPUT SCI, V649, P25, DOI 10.1016/j.tcs.2016.08.013
   Ferrarotti F, 2016, LECT NOTES COMPUT SC, V9616, P334, DOI 10.1007/978-3-319-30024-5_18
   Harel D., 2000, J TIURYN DYNAMIC LOG
   Leuschel M., 2016, LNCS, P119
   Meng J, 2008, J AUTOM REASONING, V40, P35, DOI 10.1007/s10817-007-9085-y
   Nipkow Tobias, 2002, Hoare Logics in Isabelle/HOL, P341, DOI [10.1007/978-94-010-0413-8_11, DOI 10.1007/978-94-010-0413-8_11]
   Schellhorn G, 2001, J UNIVERS COMPUT SCI, V7, P952
   Schellhorn G, 1998, APPL LOG SER, V10, P165
   Schellhorn G, 2016, LECT NOTES COMPUT SC, V9675, P237, DOI 10.1007/978-3-319-33600-8_15
   Schellhorn G, 2014, ANN MATH ARTIF INTEL, V71, P131, DOI 10.1007/s10472-013-9389-z
   Schellhorn G, 2014, LECT NOTES COMPUT SC, V8477, P9, DOI 10.1007/978-3-662-43652-3_2
   Schewe K.-D., 2017, P AUSTRALASIAN COMPU
   Schewe KD, 2010, ACTA CYBERN, V19, P765
   Stärk RF, 2001, J UNIVERS COMPUT SCI, V7, P980
   Tarski A., 1955, PAC J MATH, V5, P285, DOI DOI 10.2140/PJM.1955.5.285
NR 26
TC 1
Z9 1
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2018
VL 158
BP 21
EP 40
DI 10.1016/j.scico.2017.08.014
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GE4CX
UT WOS:000431163000003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Laibinis, L
   Pereverzeva, I
   Troubitsyna, E
AF Laibinis, L.
   Pereverzeva, I.
   Troubitsyna, E.
TI Formal reasoning about resilient goal-oriented multi-agent systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Workshop on Automated Verification of Critical
   Systems (AVoCS)
CY SEP, 2015
CL Heriot Watt Univ, Edinburgh, SCOTLAND
SP Altran, D RisQ, Formal Methods Europe, Scottish Informat & Comp Sci Alliance
HO Heriot Watt Univ
DE Formal reasoning; Multi-agent systems; Goal-oriented development; System
   resilience; Event-B
ID REQUIREMENTS; VERIFICATION; ENVIRONMENT; DESIGN
AB In this paper we present our formalisation of a resilient goal-oriented multi-agent system and its essential properties. The formalisation covers the notions of system goals and agents, various formal structures (functions and relations) defining different interrelationships between these notions, as well as constraints on the system dynamics allowing a multi-agent system to become more reconfigurable and thus resilient in order to achieve the system goals. The formalisation results in establishing connections between goals at different levels of abstraction, system architecture and agent responsibilities. The proposed formal systematisation of the involved concepts can be seen as generic guidelines for formal development of reconfigurable systems. Moreover, we demonstrate how such guidelines can be interpreted within the Event-B framework. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Laibinis, L.] Vilnius Univ, Dept Comp Sci, Didlaukio 47, LT-08303 Vilnius, Lithuania.
   [Pereverzeva, I.; Troubitsyna, E.] Abo Akad Univ, Informat Technol, Vesilinnantie 3, FIN-20520 Turku, Finland.
C3 Vilnius University; Abo Akademi University
RP Laibinis, L (corresponding author), Vilnius Univ, Dept Comp Sci, Didlaukio 47, LT-08303 Vilnius, Lithuania.
EM linas.laibinis@mif.vu.lt; inna.pereverzeva@abo.fi;
   elena.troubitsyna@abo.fi
RI Troubitsyna, Elena/AAY-2172-2021; Laibinis, Linas/H-1695-2016
OI Laibinis, Linas/0000-0002-1200-0847
CR Alechina Natasha, 2016, PURSUIT UNIVERSAL
   [Anonymous], MODELING IN EVENT B
   [Anonymous], 1993, Markov Decision Processes
   Aziz B., 2009, 1 NFM S 2009, P96
   Baier C, 2010, FORM METHOD SYST DES, V36, P1, DOI 10.1007/s10703-009-0088-7
   Ball E, 2009, LECT NOTES COMPUT SC, V5454, P104
   Bordini Rafael H, 2003, P 2 INT JOINT C AUTO, P409, DOI [10.1145/860575.860641, DOI 10.1145/860575.860641]
   Bordini RH, 2006, AUTON AGENT MULTI-AG, V12, P239, DOI 10.1007/s10458-006-5955-7
   Bresciani P, 2004, AUTON AGENT MULTI-AG, V8, P203, DOI 10.1023/B:AGNT.0000018806.20944.ef
   Crespi V, 2008, AUTON ROBOT, V24, P303, DOI 10.1007/s10514-007-9080-5
   Darimont R, 1997, PROC INT CONF SOFTW, P612, DOI 10.1145/253228.253499
   De Landtsheer R, 2004, REQUIR ENG, V9, P104, DOI 10.1007/s00766-004-0189-1
   DeLoach S. A., 2010, HDB AGENT ORIENTED D, V4, P244
   DeLoach SA, 2004, MU S ART SOC SIM ORG, P107
   Ferrari GL, 2003, ACM T SOFTW ENG METH, V12, P440, DOI 10.1145/990010.990013
   Heitmeyer C, 1998, LECT NOTES COMPUT SC, V1427, P526, DOI 10.1007/BFb0028775
   Jianye Hao, 2012, PRIMA 2012: Principles and Practice of Multi-Agent Systems. Proceedings 15th International Conference, P16, DOI 10.1007/978-3-642-32729-2_2
   Kwiatkowska M., 2010, 2010 48th Annual Allerton Conference on Communication, Control, and Computing (Allerton), P1691, DOI 10.1109/ALLERTON.2010.5707120
   Laibinis Linas, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P363, DOI 10.1007/978-3-319-10431-7_29
   Laibinis L., 2007, P WORKSH METH MOD TO, P24
   Laibinis L, 2006, LECT NOTES COMPUT SC, V4157, P261
   Laprie J.-C., 2008, DSN 2008 DEPENDABLE
   Letier E, 2008, AUTOMAT SOFTW ENG, V15, P175, DOI 10.1007/s10515-008-0027-7
   Lomuscio A, 2009, LECT NOTES COMPUT SC, V5643, P682, DOI 10.1007/978-3-642-02658-4_55
   Lyn MR, 2004, IEEE INTELL SYST, V19, P32, DOI 10.1109/MIS.2004.40
   Matoussi A, 2008, LECT NOTES COMPUT SC, V5238, P338
   Matoussi A, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P139, DOI 10.1109/ICECCS.2011.21
   Mclver A.K., 2005, ABSTRACTION REFINEIN
   Morandini M., 2008, P 2008 INT WORKSH SO, P9, DOI [10.1145/1370018.1370021, DOI 10.1145/1370018.1370021]
   Norman G., 2014, TECHNICAL REPORT
   Pereverzeva Inna, 2012, Reliable Software Technologies - Ada-Europe 2012. Proceedings 17th Ada-Europe International Conference on Reliable Software Technologies, P147, DOI 10.1007/978-3-642-30598-6_11
   Pereverzeva I., 2012, Proceedings of the International Conference on Software Engineering for Resilient Systems, P16, DOI [10.1007/978-3-642-33176-3, DOI 10.1007/978-3-642-33176-3]
   Pereverzeva I, 2012, 2012 NINTH EUROPEAN DEPENDABLE COMPUTING CONFERENCE (EDCC 2012), P156, DOI 10.1109/EDCC.2012.24
   Ponsard C, 2008, ERCIM NEWS, P22
   Ponsard Christophe, 2006, CEUR WORKSHOP P, V241
   Roman G.-C., 1997, ACM Transactions on Software Engineering and Methodology, V6, P250, DOI 10.1145/258077.258079
   Roman GC, 2004, LECT NOTES COMPUT SC, V2984, P12
   Roman GC, 2002, FORM METHOD SYST DES, V20, P47, DOI 10.1023/A:1012908529306
   Roman GC, 2007, THEOR COMPUT SCI, V376, P185, DOI 10.1016/j.tcs.2007.02.025
   Tarasyuk A, 2015, FORM ASP COMPUT, V27, P53, DOI 10.1007/s00165-014-0305-z
   Tarasyuk A, 2013, LECT NOTES COMPUT SC, V8166, P109, DOI 10.1007/978-3-642-40894-6_9
   van Lamsweerde A, 2003, LECT NOTES COMPUT SC, V2804, P25
   van Lamsweerde A, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P249
   van Lamsweerde A., 2009, REQUIREMENTS ENG SYS
   Weyns D., 2012, CAN C COMP SCI SOFTW, P67, DOI 10.1145/2347583.2347592
   Weyns D, 2012, ACM T AUTON ADAP SYS, V7, DOI 10.1145/2168260.2168268
NR 46
TC 9
Z9 11
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 66
EP 87
DI 10.1016/j.scico.2017.05.008
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100005
OA hybrid
DA 2024-07-18
ER

PT J
AU Ernst, E
   Moller, A
   Schwarz, M
   Strocco, F
AF Ernst, Erik
   Moller, Anders
   Schwarz, Mathias
   Strocco, Fabio
TI Message safety in Dart
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type systems; Optional types
AB Unlike traditional static type checking, the type system in the Dart programming language is unsound by design, even for fully annotated programs. The rationale has been that this allows compile-time detection of likely errors and enables code completion in integrated development environments, without being restrictive on programmers.
   Despite unsoundness, judicious use of type annotations can ensure useful properties of the runtime behavior of Dart programs. We present a formal model of a core of Dart with a focus on its type system, which allows us to elucidate the causes of unsoundness. Our main contribution is a characterization of message-safe programs and a theorem stating that such programs will never encounter 'message-not-understood' errors at runtime. Message safety is less restrictive than traditional type soundness, and we argue that it forms a natural intermediate point between dynamically typed and statically typed Dart programs. (C) 2016 The Author(s). Published by Elsevier B.V.
C1 [Ernst, Erik; Moller, Anders; Schwarz, Mathias; Strocco, Fabio] Aarhus Univ, Dept Comp Sci, Aabogade 34, DK-8200 Aarhus, Denmark.
   [Ernst, Erik] Google Inc, Mountain View, CA 94043 USA.
C3 Aarhus University; Google Incorporated
RP Ernst, E (corresponding author), Aarhus Univ, Dept Comp Sci, Aabogade 34, DK-8200 Aarhus, Denmark.; Ernst, E (corresponding author), Google Inc, Mountain View, CA 94043 USA.
EM eernst@cs.au.dk; amoeller@cs.au.dk; mro.schwarz@gmail.com;
   fstrocco@cs.au.dk
OI Moller, Anders/0000-0003-1333-2314
FU Danish Research Council for Technology and Production; Google Faculty
   Research Award grants; European Research Council (ERC) under the
   European Union's Horizon 2020 research and innovation program [647544]
FX We appreciate the comments and suggestions from Gianluca Mezzetti,
   Thomas Heinze, and the anonymous reviewers. This work was supported by
   the Danish Research Council for Technology and Production, by Google
   Faculty Research Award grants, and by the European Research Council
   (ERC) under the European Union's Horizon 2020 research and innovation
   program (grant agreement No 647544).
CR Abelson H., 1991, ACM LISP POINTERS, V3, P1
   [Anonymous], 1996, A Theory of Objects
   Bierman G, 2014, LECT NOTES COMPUT SC, V8586, P257
   BRACHA G, 1993, SIGPLAN NOTICES, V28, P215, DOI 10.1145/167962.165893
   Bracha Gilad, 2004, OOPSLA WORKSH REV DY
   CARTWRIGHT R, 1991, SIGPLAN NOTICES, V26, P278, DOI 10.1145/113446.113469
   Cook W. R., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P57
   Dimoulas C, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P215, DOI 10.1145/1926385.1926410
   Ecma International, 2014, ECMA408
   Ecma International, 2011, ECMA262, V5.1
   Ecma International, 2006, ECMA334
   Ernst E., 2015, P 11 DYN LANG S DLS
   Flanagan C, 2006, ACM SIGPLAN NOTICES, V41, P245, DOI 10.1145/1111320.1111059
   Gosling J., 2013, The Java Language Specification, V7
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Lindahl T., 2006, PPDP 2006. Proceedings of the Eighth ACM SIGPLAN Symposium on Principles and Practice of Declarative Programming, P167, DOI 10.1145/1140335.1140356
   Mackay J., 2012, TECHNICAL REPORT
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Politz Joe Gibbs, 2012, ONWARD, P55, DOI [10.1145/2384592.2384599, DOI 10.1145/2384592.2384599]
   Siek J, 2007, LECT NOTES COMPUT SC, V4609, P2
   Siek JG, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P365, DOI 10.1145/1706299.1706342
   Tobin-Hochstadt S, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P395, DOI 10.1145/1328438.1328486
   Wadler P, 2009, LECT NOTES COMPUT SC, V5502, P1, DOI 10.1007/978-3-642-00590-9_1
   Walrath K., 2014, DART STANDALONE VM
   Winther J, 2011, LECT NOTES COMPUT SC, V6813, P434, DOI 10.1007/978-3-642-22655-7_21
   Wright AK, 1997, ACM T PROGR LANG SYS, V19, P87, DOI 10.1145/239912.239917
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
NR 27
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
BP 51
EP 73
DI 10.1016/j.scico.2016.06.006
PN 1
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EE2CJ
UT WOS:000389391000003
OA hybrid, Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Pardo, A
   Fernandes, JP
   Saraiva, J
AF Pardo, Alberto
   Fernandes, Joao Paulo
   Saraiva, Joao
TI Multiple intermediate structure deforestation by shortcut fusion
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Shortcut fusion; Circular programming; Deforestation; Functional
   programming
ID CIRCULAR PROGRAMS
AB Shortcut fusion is a well-known optimization technique for functional programs. Its aim is to transform multi-pass algorithms into single pass ones, achieving deforestation of the intermediate structures that multi-pass algorithms need to construct. Shortcut fusion has already been extended in several ways. It can be applied to monadic programs, maintaining the global effects, and also to obtain circular and higher-order programs. The techniques proposed so far, however, only consider programs defined as the composition of a single producer with a single consumer. In this paper, we analyse shortcut fusion laws to deal with programs consisting of an arbitrary number of function compositions. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Pardo, Alberto] Univ Republica, Inst Computac, Montevideo, Uruguay.
   [Fernandes, Joao Paulo] Univ Beira Interior, LISP Release Reliable & Secure Computat Grp, Covilha, Portugal.
   [Fernandes, Joao Paulo; Saraiva, Joao] Univ Minho, HASLab INESC TEC, P-4719 Braga, Portugal.
C3 Universidad de la Republica, Uruguay; Universidade da Beira Interior;
   Universidade do Minho; INESC TEC
RP Pardo, A (corresponding author), Univ Republica, Inst Computac, Montevideo, Uruguay.
EM pardo@fing.edu.uy; jpf@di.ubi.pt; jas@di.uminho.pt
RI Fernandes, Joao Paulo/A-1929-2013; Saraiva, Joao/L-6113-2015
OI Fernandes, Joao Paulo/0000-0002-1952-9460; Saraiva,
   Joao/0000-0002-5686-7151
FU ERDF - European Regional Development Fund through the COMPETE Programme
   (operational programme for competitiveness); National Funds through the
   FCT - Fundacao para a Ciencia e a Tecnologia (Portuguese Foundation for
   Science and Technology) [FCOMP-01-0124-FEDER-020532,
   FCOMP-01-0124-FEDER-022701]
FX We would like to thank the anonymous reviewers for their detailed and
   helpful comments. This work was partially funded by ERDF - European
   Regional Development Fund through the COMPETE Programme (operational
   programme for competitiveness) and by National Funds through the FCT -
   Fundacao para a Ciencia e a Tecnologia (Portuguese Foundation for
   Science and Technology) within projects FCOMP-01-0124-FEDER-020532 and
   FCOMP-01-0124-FEDER-022701.
CR ALLISON L, 1989, SOFTWARE PRACT EXPER, V19, P99, DOI 10.1002/spe.4380190202
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 1971, Math. Syst. Theory, DOI DOI 10.1007/BF01702865
   Bird R., 1997, PRENTICE HALL INT SE, V100
   BIRD RS, 1984, ACTA INFORM, V21, P239, DOI 10.1007/BF00264249
   Chitil O., 2000, THESIS
   Cockett J.R.B., 1991, INT M CATEGORY THEOR, V13, P141
   Dijkstra A., 2004, UUCS2004037
   Fernandes J.P., 2007, PARTIAL EVALUATION P
   Fernandes J.P., 2011, PARTIAL EVALUATION P
   Fernandes J.P., 2009, THESIS
   Fernandes JP, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P95
   Ghani N., 2009, TRENDS FUNCTIONAL PR, V9, P113
   Gibbons J, 2002, LECT NOTES COMPUT SC, V2297, P149
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Hinze Ralf., 2002, Summer School on Generic Programming
   Johann P, 2004, ACM SIGPLAN NOTICES, V39, P99, DOI 10.1145/982962.964010
   JOHNSSON T, 1987, LECT NOTES COMPUT SC, V274, P154
   KASTENS U, 1980, ACTA INFORM, V13, P229, DOI 10.1007/BF00288644
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Kuiper M., 1987, COMPUTING SCI NETHER
   Launchbury J., 1995, FUNCTIONAL PROGRAMMI
   Manzino C, 2008, J UNIVERS COMPUT SCI, V14, P3431
   Marlow S., 1999, NEW GHC HUGS RUNTIME
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Okasaki C, 2000, ACM SIGPLAN NOTICES, V35, P131, DOI 10.1145/357766.351253
   Onoue Y, 1997, ALGORITHMIC LANGUAGES AND CALCULI, P76
   Pardo Alberto, 2011, Higher-Order and Symbolic Computation, V24, P115, DOI 10.1007/s10990-011-9076-x
   Pardo A., 2002, IFIP WG2 1 WORK C GE
   Pardo Alberto., 2009, Proceedings of the 2009 ACM SIGPLAN Symposium on Partial Evaluation and Semantics-based Program Manipulation, PEPM 2009, Savannah, GA, USA, January 19-20, 2009, P81, DOI DOI 10.1145/1480945.1480958
   Pettorossi A., 1989, Fundamenta Informaticae, V12, P541
   Swierstra SD, 2009, J FUNCT PROGRAM, V19, P1, DOI 10.1017/S0956796808006990
   Takano A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P306, DOI 10.1145/224164.224221
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V4989, P163
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
NR 35
TC 1
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
BP 77
EP 95
DI 10.1016/j.scico.2016.07.004
PN 1
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC3YB
UT WOS:000388061900005
OA hybrid, Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Kakkad, V
   Santosa, AE
   Fekete, A
   Scholz, B
AF Kakkad, Vasvi
   Santosa, Andrew E.
   Fekete, Alan
   Scholz, Bernhard
TI Computing end-to-end delays in stream query processing
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Stream data processing; Distributed environment; End-to-end delay
ID WIRELESS SENSOR NETWORK; CLOCK SYNCHRONIZATION; MANAGEMENT; MODEL
AB Real-time data processing is essential in many stream-based applications including disaster area monitoring, health monitoring, and intrusion detection. In this work, we propose an approach that measures time delays in stream query processing. We represent a stream query as a graph consisting of operators that process data and channels that transport data tokens between operators. Our model establishes a causality relationship between consumed and produced data tokens at each operator and their corresponding occurrence times. The total time taken for the computation from the input to the output of a query, i.e., end-to-end delay, is computed by the causality relationships and periodic schedules for stream queries. Experiments are conducted to validate the proposed technique. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Kakkad, Vasvi; Santosa, Andrew E.; Fekete, Alan; Scholz, Bernhard] Univ Sydney, Sch Informat Technol, Sydney, NSW 2006, Australia.
C3 University of Sydney
RP Kakkad, V (corresponding author), Univ Sydney, Sch Informat Technol, Sydney, NSW 2006, Australia.
EM vasvibhatt@gmail.com
OI Santosa, Andrew/0000-0003-0396-0894
FU Australian Research Council (ARC) [DP 102-96-445]
FX This work is supported by Australian Research Council (ARC) grant
   Computing with Nearly Consistent Data No. DP 102-96-445.
CR Abadi D.J., 2005, CIDR, P277
   Abadi DJ, 2003, VLDB J, V12, P120, DOI 10.1007/s00778-003-0095-z
   Abdelzaher TF, 2004, REAL TIM SYST SYMP P, P359, DOI 10.1109/REAL.2004.37
   Amato G, 2010, SOFTWARE PRACT EXPER, V40, P431, DOI 10.1002/spe.965
   [Anonymous], 2008, Proceedings of the 2008 ACM SIGMOD international conference on Management of data, SIGMOD'08, ACM
   [Anonymous], 2010, SUN SPORT PROGR MAN
   [Anonymous], P 2 EUR WORKSH WIR S
   [Anonymous], 2013, Storm: Distributed and fault-tolerant realtime computation
   [Anonymous], 1974, PROC IFIP C 74
   Biem A, 2010, INT CONF ACOUST SPEE, P1654, DOI 10.1109/ICASSP.2010.5495521
   Burchard A, 2006, IEEE T INFORM THEORY, V52, P4105, DOI 10.1109/TIT.2006.880019
   Chandrasekaran Sirish, 2003, ACM SIGMOD INT C MAN, P668, DOI 10.1145/872757.872857
   Cherniack M., 2003, CIDR, P257
   Datar M., 2004, 200420 STANF INFOLAB
   David A, 2011, LECT NOTES COMPUT SC, V6919, P80, DOI 10.1007/978-3-642-24310-3_7
   Dennis J. B., 1974, Programming Symposium, P362
   Diallo O, 2012, J NETW COMPUT APPL, V35, P1013, DOI 10.1016/j.jnca.2011.12.006
   Golab L., 2010, Data Stream Management
   Huang XJ, 2010, PROCEEDINGS OF THE 5TH INTERNATIONAL ACADEMIC CONFERENCE ON ENVIRONMENTAL AND OCCUPATIONAL MEDICINE, P77
   Jafari R, 2005, PROCEEDINGS OF MOBIQUITOUS 2005, P479
   Jain A., 1996, Introduction to biometrics
   Kakkad V., 2012, SOFTW PRACT EXP
   LAM KY, 2001, REAL TIME DATABASE S
   Lee E. A., 1997, M973 UCBERL
   LEE EA, 1987, P IEEE, V75, P1235, DOI 10.1109/PROC.1987.13876
   Li Q, 2006, IEEE T COMPUT, V55, P214, DOI 10.1109/TC.2006.25
   Luckham David., 2002, THE POWER OF EVENTS, V204
   McInnes AI, 2009, IEEE INT CONF CON AU, P422, DOI 10.1109/ICCA.2009.5410508
   Naughton, 2001, IEEE DATA ENG B, V24, P27
   Neuts MF, 2005, IEEE T COMMUN, V53, P1522, DOI 10.1109/TCOMM.2005.855014
   Oliver R. S., 2010, P 9 INT WORKSH REAL
   RAMAMRITHAM K, 1993, DISTRIB PARALLEL DAT, V1, P199, DOI 10.1007/BF01264051
   Schmitt JB, 2007, RTSS 2007: 28TH IEEE INTERNATIONAL REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P193, DOI 10.1109/RTSS.2007.17
   Stephens R, 1997, ACTA INFORM, V34, P491, DOI 10.1007/s002360050095
   Stonebraker M, 2005, SIGMOD REC, V34, P42, DOI 10.1145/1107499.1107504
   Thies W, 2002, LECT NOTES COMPUT SC, V2304, P179
   Wang YB, 2012, IEEE ACM T NETWORK, V20, P305, DOI 10.1109/TNET.2011.2159845
   Werner-Allen G, 2006, IEEE INTERNET COMPUT, V10, P18, DOI 10.1109/MIC.2006.26
   Wu YC, 2011, IEEE SIGNAL PROC MAG, V28, P124, DOI 10.1109/MSP.2010.938757
   Yao Y, 2002, SIGMOD REC, V31, P9, DOI 10.1145/601858.601861
   Yeung SN, 2001, 22ND IEEE REAL-TIME SYSTEMS SYMPOSIUM, PROCEEDINGS, P299, DOI 10.1109/REAL.2001.990628
   Zhang FL, 2013, ELECTRON NOTES THEOR, V296, P261, DOI 10.1016/j.entcs.2013.09.001
   Zhang Yongguang., 2000, MOBICOM 00 P 6 ANN I, P275
   Zhou Y, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347382
NR 44
TC 0
Z9 0
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2015
VL 105
BP 124
EP 144
DI 10.1016/j.scico.2015.04.003
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CK4MT
UT WOS:000356198600007
OA Bronze
DA 2024-07-18
ER

PT J
AU Fadlisyah, M
   Ölveczky, PC
   Abrahám, E
AF Fadlisyah, Muhammad
   Olveczky, Peter Csaba
   Abraham, Erika
TI Formal modeling and analysis of interacting hybrid systems in HI-Maude:
   What happened at the 2010 Sauna World Championships?
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Simulation; Rewriting logic; Hybrid systems; Object-oriented
   specification; Human thermoregulatory system
ID REWRITING LOGIC
AB In this paper we use HI-Maude to model and analyze the human thermoregulatory system and the effect of extreme heat exposure to the human body. The case study is motivated by the 2010 Sauna World Championships, which ended in a tragedy when the last two finalists were severely burnt in surprisingly short time (one of them died the next day). HI-Maude is a rewriting-logic-based formal modeling language and analysis tool for complex hybrid systems whose components influence each others' continuous dynamics. One distinguishing feature of HI-Maude is that the user only needs to describe the continuous dynamics of single components and interactions, instead of having to explicitly define the continuous dynamics of the entire system. HI-Maude analyses are based on numerical approximations of the system's continuous behaviors. We use HI-Maude to analyze how long the human body can survive when experiencing extreme conditions such as those encountered in the Sauna World Championships. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Fadlisyah, Muhammad; Olveczky, Peter Csaba] Univ Oslo, N-0316 Oslo, Norway.
   [Abraham, Erika] Rhein Westfal TH Aachen, Aachen, Germany.
C3 University of Oslo; RWTH Aachen University
RP Ölveczky, PC (corresponding author), Univ Oslo, N-0316 Oslo, Norway.
RI Ölveczky, Peter C/B-1797-2008; Abraham, Erika/G-5259-2012
OI Abraham, Erika/0000-0002-5647-6134
FU Research Council of Norway through the Rhytm project; Research Council
   of Norway; German Academic Exchange Service through the DAAD ppp project
   HySmart
FX We would like to thank the reviewers for very helpful comments on
   earlier versions of this paper. We gratefully acknowledge financial
   support for this work by The Research Council of Norway through the
   Rhytm project and by The Research Council of Norway and the German
   Academic Exchange Service through the DAAD ppp project HySmart.
CR ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   American Society of Heating Refrigerating and Air Conditionning Engineers (ASHRAE), 2005, ASHRAE HDB FUND
   [Anonymous], 1993, SUBSURFACE VENTILATI
   [Anonymous], THINGS WORK PHYS EVE
   [Anonymous], 2007, LECT NOTES COMPUTER
   [Anonymous], MED EXPT HOLOCAUST N
   [Anonymous], 2001, VIKINGS TACKLE STRIN
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   David R, 2001, DISCRETE EVENT DYN S, V11, P9, DOI 10.1023/A:1008330914786
   Fadlisyah Muhammad, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P322, DOI 10.1007/978-3-642-40206-7_25
   Fadlisyah Muhammad, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P139, DOI 10.1007/978-3-642-34005-5_8
   Fadlisyah M., 2011, 2011 CSI International Symposium on Computer Science and Software Engineering (CSSE 2011), P1, DOI 10.1109/CSICSSE.2011.5963989
   Fadlisyah M., 2011, LECT NOTES COMPUTER, V7041
   Fadlisyah M., 2012, TECHNICAL REPORT
   Fadlisyah M., 2010, P RTRTS 10, V36
   Fadlisyah M, 2011, ELECTRON NOTES THEOR, V274, P17, DOI 10.1016/j.entcs.2011.07.004
   Gagge A.P., 1971, ASHRAE Transactions, V77, P247
   HANCOCK PA, 1981, MED SCI SPORT EXER, V13, P31
   Hensel H., 1981, MONOGR PHYSL SOC, V38
   Henzinger T. A., 1995, Proceedings of the Twenty-Seventh Annual ACM Symposium on the Theory of Computing, P373, DOI 10.1145/225058.225162
   Herman I., 2007, PHYS HUMAN BODY
   Huizenga C, 2001, BUILD ENVIRON, V36, P691, DOI 10.1016/S0360-1323(00)00061-5
   HWANG CL, 1977, IEEE T BIO-MED ENG, V24, P309, DOI 10.1109/TBME.1977.326137
   Kurmazenko EA, 1997, ESA SP PUBL, V400, P815
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J., 1993, Research Directions in Concurrent Object-Oriented Programming, P314
   Miller T., 2011, P 41 INT C ENV SYST, V2, P1076
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Ölveczky PC, 2008, LECT NOTES COMPUT SC, V4963, P332, DOI 10.1007/978-3-540-78800-3_23
   Owen M.S., 2005, 2005 ASHRAE HDB
   Parsons K., 2003, EFFECTS HOT MODERATE, V2nd, DOI 10.1201/B16750
   Pisacane V.L., 2007, 20070022493 NASA JOH
   Plantadosi C.A., 2003, BIOL HUMAN SURVIVAL
   Reilly R., 2010, POINT NO RETURN
   Reilly R., 2010, SPORTS HELL MY SEARC
   Swedish Standard Institute, 2007, 110792007 ISO
   Tipton CharlesM., 2006, ACSMS ADV EXERCISE P
   Viry P, 2002, THEOR COMPUT SCI, V285, P487, DOI 10.1016/S0304-3975(01)00366-8
   Wellstead P, 1979, INTRO PHYS SYSTEM MO
   Winkeljohn M., 2010, HEAT INJURIES FORCIN
NR 41
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 7
PY 2015
VL 99
BP 95
EP 127
DI 10.1016/j.scico.2014.06.010
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5PI
UT WOS:000348959900005
OA Bronze
DA 2024-07-18
ER

PT J
AU van der Storm, T
   Vinju, JJ
AF van der Storm, Tijs
   Vinju, Jurgen J.
TI Towards multilingual programming environments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming environments; Language interoperability; Metaprogramming
ID DOMAIN-SPECIFIC LANGUAGE
AB Software projects consist of different kinds of artifacts: build files, configuration files, markup files, source code in different software languages, and so on. At the same time, however, most integrated development environments (IDEs) are focused on a single (programming) language. Even if a programming environment supports multiple languages (e.g., Eclipse), IDE features such as cross-referencing, refactoring, or debugging, do not often cross language boundaries. What would it mean for programming environment to be truly multilingual? In this short paper we sketch a vision of a system that integrates IDE support across language boundaries. We propose to build this system on a foundation of unified source code models and metaprogramming. Nevertheless, a number of important and hard research questions still need to be addressed. (C) 2014 Elsevier B.V. All rights reserved.
C1 [van der Storm, Tijs; Vinju, Jurgen J.] CWI, NL-1009 AB Amsterdam, Netherlands.
RP Vinju, JJ (corresponding author), CWI, NL-1009 AB Amsterdam, Netherlands.
EM storm@cwi.nl; jurgenv@cwi.nl
RI Vinju, Jurgen/AAC-8760-2022; van der Storm, Tijs/HGB-8960-2022
OI Vinju, Jurgen/0000-0002-2686-7409; 
CR [Anonymous], 2012, P 2012 INT S SOFTW T
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   Charles P, 2009, ACM SIGPLAN NOTICES, V44, P191, DOI 10.1145/1639949.1640104
   Cleve A, 2006, WORK CONF REVERSE EN, P157
   de Jong H, 2003, LECT NOTES COMPUT SC, V2852, P220
   Erdweg S, 2011, ACM SIGPLAN NOTICES, V46, P391, DOI 10.1145/2076021.2048099
   Eysholdt M., 2010, P ACM INT C COMPANIO, P307, DOI DOI 10.1145/1869542.1869625
   Gomez V.U., 2012, THESIS VRIJE U BRUSS
   HEERING J, 1985, ACM T PROGR LANG SYS, V7, P183, DOI 10.1145/3318.3321
   Hills M., 2013, Proceedings of ISSTA 2013, P325, DOI DOI 10.1145/2483760.2483786
   Hirzel M, 2007, ACM SIGPLAN NOTICES, V42, P19, DOI 10.1145/1297105.1297030
   Holt RC, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P162, DOI 10.1109/WCRE.2000.891463
   Holt RC, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P210, DOI 10.1109/WCRE.1998.723191
   Jensen S.H., 2011, P 19 ACM SIGSOFT S 1, P59
   Kästner C, 2011, ACM SIGPLAN NOTICES, V46, P805, DOI 10.1145/2076021.2048128
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Klint P, 2008, ELECTRON NOTES THEOR, V203, P3, DOI 10.1016/j.entcs.2008.03.041
   Klint P, 2011, LECT NOTES COMPUT SC, V6491, P222, DOI 10.1007/978-3-642-18023-1_6
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Lammel R., 2004, WORKSH SOFTW TRANSF
   Muller H. A., 1988, Proceedings of the 10th International Conference on Software Engineering (Cat. No.88CH2554-4), P80, DOI 10.1109/ICSE.1988.93690
   Nierstrasz O., 2005, ACM SIGSOFT SOFTWARE, V30, P1, DOI [DOI 10.1145/1095430, 10.1145/1095430.1081707, DOI 10.1145/1095430.1081707]
   Perin F., 2012, Ph.D. thesis
   Renggli L., 2010, PhD thesis
   Simonyi C, 2006, ACM SIGPLAN NOTICES, V41, P451, DOI 10.1145/1167515.1167511
   Spinellis D, 2010, SCI COMPUT PROGRAM, V75, P216, DOI 10.1016/j.scico.2009.09.003
   Thummalapenta S, 2010, EMPIR SOFTW ENG, V15, P1, DOI 10.1007/s10664-009-9108-x
   Tobin-Hochstadt S, 2011, ACM SIGPLAN NOTICES, V46, P132, DOI 10.1145/1993316.1993514
   van den Brand M. G. J., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P365
   van den Brand MGJ, 2005, ELECTRON NOTES THEOR, V141, P161, DOI 10.1016/j.entcs.2005.02.056
   van der Meulen E., 1994, THESIS U AMSTERDAM
   VANDENBRAND M, 2006, CSMR 06 P C SOFTW MA, P103
   Verbaere Mathieu., 2007, 22nd ACM SIGPLAN Conference on Object-Oriented Programming, Systems, Languages, and Applications, P880
   Voelter M, 2012, PROC INT CONF SOFTW, P1449, DOI 10.1109/ICSE.2012.6227070
   Wong K., 2005, THESIS U BRIT COLUMB
   Yazdanshenas Amir Reza, 2012, 2012 IEEE 20th International Conference on Program Comprehension, P143
   Yazdanshenas A.R., 2011, 2011 27 IEEE INT C S, P193
NR 38
TC 3
Z9 3
U1 1
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 143
EP 149
DI 10.1016/j.scico.2013.11.041
PN 1
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100024
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Mateescu, R
   Wijs, A
AF Mateescu, Radu
   Wijs, Anton
TI Property-dependent reductions adequate with divergence-sensitive
   branching bisimilarity
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Divergence-sensitive branching bisimulation; Labeled transition system;
   Modal mu-calculus; Model checking; On-the-fly verification
ID PROPOSITIONAL DYNAMIC LOGIC; MODEL-CHECKING; CHARACTERISTIC FORMULAS;
   TEMPORAL LOGIC; SYSTEMS; CONFLUENCE; LANGUAGE
AB When analyzing the behavior of finite-state concurrent systems by model checking, one way of fighting state space explosion is to reduce the model as much as possible whilst preserving the properties under verification. We consider the framework of action-based systems, whose behaviors can be represented by labeled transition systems (LTSS), and whose temporal properties of interest can be formulated in modal mu-calculus (L-mu). First, we determine, for any L-mu the maximal set of actions that can be hidden in the LTS without changing the interpretation of the formula. Then, we define L-mu(dsbr), a fragment of L-mu which is adequate w.r.t divergence-sensitive branching bisimilarity. This enables us to apply the maximal hiding and to reduce the LTS on-the-fly using divergencesensitive tau-confluence during the verification of any L-mu(dsbr) formula. The experiments that we performed on various examples of communication protocols and distributed systems show that this reduction approach can significantly improve the performance of on-the-fly verification. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Mateescu, Radu] Inria Grenoble, Rhone Alpes & LIG CONVECS Team, F-38330 Montbonnot St Martin, France.
   [Wijs, Anton] Tech Univ Eindhoven, Fac Informat, MDSE Sect, NL-5612 AZ Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Mateescu, R (corresponding author), Inria Grenoble, Rhone Alpes & LIG CONVECS Team, 655 Av Europe, F-38330 Montbonnot St Martin, France.
EM Radu.Mateescu@inria.fr; A.J.Wijs@tue.nl
RI Wijs, Anton/A-9694-2019
OI Wijs, Anton/0000-0002-2071-9624
FU CNRS; RENATER
FX We are grateful to the anonymous referees for their insightful comments,
   which allowed us to correct an error and to improve the text
   accordingly. We also thank Wendelin Serwe for carrying out the reduction
   experiments and gracefully providing the results concerning the DTD
   case-study. These experiments were carried out using the Grid'5000
   experimental testbed<SUP>5</SUP> built by Inria with support from CNRS,
   RENATER, several Universities, and other funding bodies.
CR Aceto L, 2009, ELECTRON P THEOR COM, P1, DOI 10.4204/EPTCS.8.1
   ANDERSEN HR, 1994, THEOR COMPUT SCI, V126, P3, DOI 10.1016/0304-3975(94)90266-6
   [Anonymous], 1952, INTRO METAMATHEMATIC
   [Anonymous], 2001, Modal and Temporal properties of processes
   Baeten JCM, 2005, THEOR COMPUT SCI, V335, P131, DOI 10.1016/j.tcs.2004.07.036
   Barbuti R, 1999, J COMPUT SYST SCI, V59, P537, DOI 10.1006/jcss.1999.1660
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke EM, 1999, MODEL CHECKING, P1
   CLEAVELAND R, 1993, FORM METHOD SYST DES, V2, P121, DOI 10.1007/BF01383878
   Coste N, 2010, LECT NOTES COMPUT SC, V6416, P128, DOI 10.1007/978-3-642-16561-0_18
   DAM M, 1994, THEOR COMPUT SCI, V126, P77, DOI 10.1016/0304-3975(94)90269-0
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Emerson E. A., 1986, Proceedings of the Symposium on Logic in Computer Science (Cat. No.86CH2321-8), P267
   Fantechi A, 1999, LECT NOTES COMPUT SC, V1641, P228
   Fantechi A., 1992, P ERCIM WORKSH THEOR, P3
   Fantechi A., 1995, TR005 ICICNR
   FERNANDEZ JC, 1992, LECT NOTES COMPUT SC, V575, P181
   FISCHER MJ, 1979, J COMPUT SYST SCI, V18, P194, DOI 10.1016/0022-0000(79)90046-1
   Garavel H, 2001, INT FED INFO PROC, V69, P377, DOI 10.1007/0-306-47003-9_24
   GRAF S, 1984, LECT NOTES COMPUT SC, V172, P222
   Graravel H, 2013, SOFTWARE TOOLS TECHN, V15, P89
   Groote JF, 1996, THEOR COMPUT SCI, V170, P47, DOI 10.1016/S0304-3975(96)80702-X
   KOZEN D, 1983, THEOR COMPUT SCI, V27, P333, DOI 10.1016/0304-3975(82)90125-6
   Lantreibecq E, 2014, SCI COMPUT PROGRAM, V80, P130, DOI 10.1016/j.scico.2013.01.003
   Mateescu Radu, 2011, Model Checking Software. Proceedings 18th International SPIN Workshop, P2, DOI 10.1007/978-3-642-22306-8_2
   Mateescu R, 2003, SCI COMPUT PROGRAM, V46, P255, DOI 10.1016/S0167-6423(02)00094-1
   Mateescu R., 2006, International Journal on Software Tools for Technology Transfer, V8, P37, DOI 10.1007/s10009-005-0194-9
   Mateescu R., 2009, RR7000 INRIA
   Mateescu R., 2005, P 10 INT WORKSH FORM, P80
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   Mateescu R, 2012, SCI COMPUT PROGRAM, V77, P1075, DOI 10.1016/j.scico.2011.07.004
   Milner R., 1989, Communication and concurrency
   Muller-Olm M., 1998, ELECT NOTES THEOR CO, V18, P159, DOI DOI 10.1016/S1571-0661(05)80257-9
   Nicola R.D., 1990, LECT NOTES COMPUTER, V469, P407
   Pace GJ, 2003, LECT NOTES COMPUT SC, V2725, P446
   QUEILLE JP, 1983, ACTA INFORM, V19, P195, DOI 10.1007/BF00265555
   STEFFEN B, 1994, INFORM COMPUT, V110, P149, DOI 10.1006/inco.1994.1028
   STREETT RS, 1982, INFORM CONTROL, V54, P121, DOI 10.1016/S0019-9958(82)91258-X
   van Glabbeek R, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(4:5)2009
   van Glabbeek R, 2009, FUND INFORM, V93, P371, DOI 10.3233/FI-2009-109
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
   Wijs A., 2007, THESIS VU U AMSTERDA
NR 42
TC 9
Z9 9
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 354
EP 376
DI 10.1016/j.scico.2014.04.004
PN 3
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KA
UT WOS:000345181100006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Nobakht, B
   de Boer, FS
   Bonsangue, MM
   de Gouw, S
   Jaghoori, MM
AF Nobakht, B.
   de Boer, F. S.
   Bonsangue, M. M.
   de Gouw, S.
   Jaghoori, M. M.
TI Monitoring method call sequences using annotations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Workshop on Formal Aspects of Component Software
   (FACS)
CY OCT 14-16, 2010
CL Guimaraes, PORTUGAL
DE Object monitoring; Runtime verification; Method call sequence
   specification; Code annotation; Component-based testing
ID RUNTIME VERIFICATION; JAVA PROGRAMS; ASPECTJ; MOP
AB In this paper we introduce JMSeq, a Java-based tool for monitoring sequences of method calls. JMSeq provides a simple but expressive language to specify the observables of a Java program in terms of sequences of possibly nested method calls. Similar to many monitoring-oriented environments, verification in JMSeq is done at runtime; unlike all other approaches based on aspect-oriented programming, JMSeq uses code annotation rather than instrumentation, and therefore is suitable for component-based software verification. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Nobakht, B.; de Boer, F. S.; Bonsangue, M. M.; de Gouw, S.] Leiden Univ, Leiden Inst Adv Comp Sci, NL-2300 RA Leiden, Netherlands.
   [Nobakht, B.] SDL Fredhopper, Amsterdam, Netherlands.
   [de Boer, F. S.; Bonsangue, M. M.; de Gouw, S.; Jaghoori, M. M.] Ctr Wiskunde & Informat, Amsterdam, Netherlands.
C3 Leiden University; Leiden University - Excl LUMC
RP Nobakht, B (corresponding author), Leiden Univ, Leiden Inst Adv Comp Sci, NL-2300 RA Leiden, Netherlands.
EM bnobakht@liacs.nl; frb@cwi.nl; marcello@liacs.nl; cdegouw@cwi.nl;
   jaghoori@cwi.nl
OI de Gouw, Stijn/0000-0003-2964-6844; Bonsangue,
   Marcello/0000-0003-3746-3618
CR Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   [Anonymous], THESIS RWTH AACHEN U
   [Anonymous], ELECT NOTES THEOR CO
   Barringer H, 2004, LECT NOTES COMPUT SC, V2937, P44
   Bartetzko D., 2001, Electronic Notes in Theoretical Computer Science, V55, DOI 10.1016/S1571-0661(04)00247-6
   Chen F, 2005, LECT NOTES COMPUT SC, V3440, P546
   Chen F, 2007, ACM SIGPLAN NOTICES, V42, P569, DOI 10.1145/1297105.1297069
   Cheon Y, 2007, SOFTWARE QUAL J, V15, P7, DOI 10.1007/s11219-006-9001-4
   de Boer FS, 2009, ELECTRON NOTES THEOR, V243, P33, DOI 10.1016/j.entcs.2009.07.004
   Havelund K., 2001, Electronic Notes in Theoretical Computer Science, V55, DOI 10.1016/S1571-0661(04)00253-1
   Kiczales G, 2001, COMMUN ACM, V44, P59, DOI 10.1145/383845.383858
   Kim M, 2004, FORM METHOD SYST DES, V24, P129, DOI 10.1023/B:FORM.0000017719.43755.7c
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Martin M, 2005, ACM SIGPLAN NOTICES, V40, P365, DOI 10.1145/1103845.1094840
   Meyer B., 2000, OBJECT ORIENTED SOFT, V2nd
   Pike L., COPILOT STREAM LANGU
   Rebelo H., 2008, P 1 INT C SOFTW TEST, P541
   Shore J, 2004, IEEE SOFTWARE, V21, P21, DOI 10.1109/MS.2004.1331296
   Vinju J., 2010, P 12 WORKSH FORM TEC
NR 21
TC 2
Z9 2
U1 1
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
BP 362
EP 378
DI 10.1016/j.scico.2013.11.030
PN 3
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS1JY
UT WOS:000344038700006
OA Green Submitted, Green Published
DA 2024-07-18
ER

PT J
AU Braga, C
   Santos, C
   da Silva, VT
AF Braga, Christiano
   Santos, Cassio
   da Silva, Viviane Torres
TI Consistency of model transformation contracts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Formal Methods (SBMF)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
SP CNPq, Brazilian Sci & Technol Res Council, CAPES, Brazilian Higher Educ Fund Council, FAPESP, Sao Paulo Res Fdn, Google Inc, Univ Sao Paulo, Univ Presbiteriana Mackenzie
DE Mathematical aspects of software engineering
ID SECURITY
AB Model-driven development is a generative software development process with increasing relevance both in industry and academia. Model transformations are the generative components in a model-driven development process. As such, their analysis is an important task. We have been developing a technique to specify, validate and implement model transformations. Our technique is based on the concept of transformation contracts, a specification that relates two modeling languages and declares properties that must be fulfilled in such a relation. Since a transformation contract is a model, the verification and validation of a transformation contract use the same techniques that are used to verify and validate any given model. This paper describes our technique, discusses consistency of model transformations and reports on its application to a non-trivial model transformation from access control models to Java security. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Braga, Christiano; Santos, Cassio; da Silva, Viviane Torres] Univ Fed Fluminense, Inst Comp, BR-24220000 Niteroi, RJ, Brazil.
   [Braga, Christiano; Santos, Cassio] Univ Fed Fluminense, ADDLabs, BR-24220000 Niteroi, RJ, Brazil.
C3 Universidade Federal Fluminense; Universidade Federal Fluminense
RP Braga, C (corresponding author), Univ Fed Fluminense, Inst Comp, BR-24220000 Niteroi, RJ, Brazil.
EM cbraga@ic.uff.br; cfernando@ic.uff.br; viviane.silva@ic.uff.br
CR Akehurst D., 2002, "UML" 2002 - Unified Modeling Language. Model Engineering, Concepts, and Tools. 5th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2460), P243
   [Anonymous], 2009, ELECT COMMUN EUR ASS
   [Anonymous], 1997, Object-oriented software construction
   Baader F., 2003, DESCRIPTION LOGIC HD
   Basin D, 2006, ACM T SOFTW ENG METH, V15, P39, DOI 10.1145/1125808.1125810
   Basin D, 2009, INFORM SOFTWARE TECH, V51, P815, DOI 10.1016/j.infsof.2008.05.011
   Berardi D, 2005, ARTIF INTELL, V168, P70, DOI 10.1016/j.artint.2005.05.003
   Bézivin J, 2006, LECT NOTES COMPUT SC, V4199, P440
   Braga C, 2012, IET SOFTW, V6, P16, DOI 10.1049/iet-sen.2011.0013
   Braga C., 2011, P 2 BRAZ WORKSH MOD, P34
   Braga C., 2010, J SOFTWARE SYSTEMS M, V10, P395, DOI DOI 10.1007/S10270-010-0156-X
   Braga C, 2011, LECT NOTES COMPUT SC, V7021, P108, DOI 10.1007/978-3-642-25032-3_8
   Braga C, 2010, INNOV SYST SOFTW ENG, V6, P115, DOI 10.1007/s11334-009-0107-2
   Buttner Fabian, 2012, Model Driven Engineering Languages and Systems. Proceedings 15th International Conference, MODELS 2012, P432, DOI 10.1007/978-3-642-33666-9_28
   Cabot J., P IEEE SOFT TEST VER, P73
   Cariou Eric., 2004, Workshop of OCL and Model Driven Engineering, V12, P69
   Clavel M., 2008, ECEASST, V15
   Comicio T., 2011, THESIS U FEDERAL FLU
   Fiorentini C, 2010, LECT NOTES COMPUT SC, V6142, P77, DOI 10.1007/978-3-642-13688-7_6
   Gorp P.V., 2005, TRANSFORMATION TECHN
   Hermann Frank, 2010, P 1 INT WORKSH MOD D, P22, DOI [10.1145/1866272.1866277, DOI 10.1145/1866272.1866277]
   Kleppe A., 2003, MDA EXPLAINED
   Menezes R., 2011, THESIS U FEDERAL FLU
   Object Management Group (OMG), 2005, PTC051101 OMG
   Petter A, 2009, LECT NOTES COMPUT SC, V5563, P132, DOI 10.1007/978-3-642-02408-5_10
   Queralt A, 2012, DATA KNOWL ENG, V73, P1, DOI 10.1016/j.datak.2011.09.004
   Ribeiro L, 2009, LECT NOTES COMPUT SC, V5791, P95
   Schurr Andy., 1995, P 20 WORKSHOP GRAPH, V903, P151
   Sen S, 2009, LECT NOTES COMPUT SC, V5563, P148, DOI 10.1007/978-3-642-02408-5_11
   Steinberg D., 2008, ECLIPSE SERIES
NR 30
TC 1
Z9 2
U1 0
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
BP 86
EP 104
DI 10.1016/j.scico.2013.08.013
PN B
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK7HA
UT WOS:000338598100002
DA 2024-07-18
ER

PT J
AU Dias, D
   Iyoda, J
AF Dias, Diego
   Iyoda, Juliano
TI Compositionality and correctness of fault tolerant patterns in HOL4
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 14th Brazilian Symposium on Formal Methods (SBMF)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
SP CNPq, Brazilian Sci & Technol Res Council, CAPES, Brazilian Higher Educ Fund Council, FAPESP, Sao Paulo Res Fdn, Google Inc, Univ Sao Paulo, Univ Presbiteriana Mackenzie
DE Redundancy management; Fault tolerance; Behavioural preservation;
   Theorem proving; HOL
AB In the development of critical systems, it is common practice to make use of redundancy in order to achieve higher levels of reliability. There are well established design patterns that introduce redundancy and that are widely documented and adopted by the industry. However there have been few attempts to formally verify them. In this work, we modelled in the HOL4 system such design patterns, which we call here fault tolerant patterns. We illustrate our approach by modelling three classical fault tolerant patterns: Homogeneous Redundancy, Heterogeneous Redundancy and Triple Modular Redundancy. Our model takes into account that the original system (without redundancy) computes a certain function with some delay and is amenable to random failures.
   We proved that our fault tolerant patterns preserve the behaviour of its replicated subsystems. The notion of correctness adopted makes use of interval arithmetic and is restricted to functional behaviour. Timing is not regarded as part of the functional behaviour in this work. Therefore, real-time systems are not the focus of our approach. We also proved that our fault tolerant patterns are compositional in the sense that we can apply fault tolerant patterns consecutively and for an arbitrary number of times. The consecutive application of our patterns still results in a system that computes a certain function with some delay and amenable to random failures. We developed a case study that verifies that a fault tolerant pattern applied to a simplified avionic Elevator Control System preserves its original behaviour. This work was done in collaboration with the Brazilian aircraft manufacturer Embraer. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Dias, Diego; Iyoda, Juliano] Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
C3 Universidade Federal de Pernambuco
RP Iyoda, J (corresponding author), Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
EM dmd@cin.ufpe.br; jmi@cin.ufpe.br
OI Iyoda, Juliano Manabu/0000-0001-7137-8287
CR [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1996, ARP4761 SAE
   Armoush A., 2010, Design patterns for safety-critical embedded systems
   Bremond-Gregoire P., 1993, LECT NOTES COMPUTER, V715
   Butler R.W., 1994, FORMAL DESIGN VERIFI
   Camilleri A., 1987, P IFIP WG 10 2 WORK, P43
   Cofer Darren, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P126, DOI 10.1007/978-3-642-28891-3_13
   Dajani-Brown S., 2004, LECT NOTES COMPUTER, V3253, P381
   Dias D.M., 2012, THESIS FEDERAL U PER
   Dias DM, 2011, LECT NOTES COMPUT SC, V7021, P156, DOI 10.1007/978-3-642-25032-3_11
   Douglass B.P., 2002, REAL TIME DESIGN PAT
   GORDON M, 1986, FORMAL ASPECTS VLSI
   GORDON M, 1985, 68 U CAMBR COMP LAB
   Gordon M.J.C., 1993, Introduction to HOL: A theorem proving environment for higher order logic
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   Hanna K., 1986, FORMAL ASPECTS VLSI
   Jesus J.B. de Junior, 2009, THESIS U FEDERAL PER
   Joyce JeffreyJ., 1990, More Reasons Why Higher-Order Logic is a Good Formalism for Specifying and Verifying Hardware
   Keith L., 1988, ADVISORY CIRCULAR SY
   Koren Israel, 2007, Fault-Tolerant Systems
   Melliar-Smith M., 1985, SIGSOFT Software Engineering Notes, V10, P41, DOI 10.1145/1012497.1012511
   Norrish M., 1988, HOL SYSTEM LOGIC HOL
   Norrish M., 1988, HOL SYSTEM DESCRIPTI
   Ogata K., 2001, Modern Control Engineering, V4th
   OWRE S, 1995, IEEE T SOFTWARE ENG, V21, P107, DOI 10.1109/32.345827
   Sokolsky O, 1998, FOURTH IEEE REAL-TIME TECHNOLOGY AND APPLICATIONS SYMPOSIUM - PROCEEDINGS, P220, DOI 10.1109/RTTAS.1998.683206
   Sokolsky O., SPECIFICATION ANAL R
   Zarowski C.J., 2004, An Introduction to Numerical Analysis for Electrical and Computer Engineers, DOI DOI 10.1002/0471650412
NR 28
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2014
VL 92
BP 105
EP 128
DI 10.1016/j.scico.2013.07.009
PN B
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK7HA
UT WOS:000338598100003
OA Bronze
DA 2024-07-18
ER

PT J
AU Almeida, JB
   Barbosa, M
   Filliatre, JC
   Pinto, JS
   Vieira, B
AF Almeida, Jose Bacelar
   Barbosa, Manuel
   Filliatre, Jean-Christophe
   Pinto, Jorge Sousa
   Vieira, Barbara
TI CAOVerif: An open-source deductive verification platform for
   cryptographic software implementations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal verification; Program verification; Cryptographic software;
   Deductive verification
ID CERTIFICATION; SECURITY; SYSTEM; PROVER; TOOL
AB CAO is a domain-specific imperative language for cryptography, offering a rich mathematical type system and crypto-oriented language constructions. We describe the design and implementation of a deductive verification platform for CAO and demonstrate that the development time of such a complex verification tool could be greatly reduced by building on the Jessie plug-in included in the Frama-C framework. We discuss the interesting challenges raised by the domain-specific characteristics of CAO, and describe how we tackle these problems in our design. We base our presentation on real-world examples of CAO code, extracted from the open-source code of the NaCl cryptographic library, and illustrate how various cryptography-relevant security properties can be verified. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Almeida, Jose Bacelar; Barbosa, Manuel; Pinto, Jorge Sousa; Vieira, Barbara] HASLab INESC TEC, Braga, Portugal.
   [Almeida, Jose Bacelar; Barbosa, Manuel; Pinto, Jorge Sousa; Vieira, Barbara] Univ Minho, Braga, Portugal.
   [Filliatre, Jean-Christophe] INRIA Saclay Ile de France, ProVal, Orsay, France.
   [Filliatre, Jean-Christophe] Univ Paris 11, CNRS, LRI, F-91405 Orsay, France.
C3 Universidade do Minho; INESC TEC; Universidade do Minho; Centre National
   de la Recherche Scientifique (CNRS); Universite Paris Saclay
RP Barbosa, M (corresponding author), HASLab INESC TEC, Braga, Portugal.
EM jba@di.uminho.pt; mbb@di.uminho.pt; Jean-Christophe.Filliatre@lri.fr;
   jsp@di.uminho.pt; barbarasv@di.uminho.pt
RI Pinto, Jorge Sousa/P-4312-2019; Pinto, Jorge S/B-9851-2008; Bacelar
   Almeida, Jose/I-8105-2015; Barbosa, Manuel/C-3095-2008
OI Pinto, Jorge Sousa/0000-0002-0892-3577; Bacelar Almeida,
   Jose/0000-0003-0011-7455; Barbosa, Manuel/0000-0002-6848-5564
CR Abadi M., 2007, J. Cryptol, V20, P395, DOI DOI 10.1007/S00145-007-0203-0
   Affeldt R, 2007, LECT NOTES COMPUT SC, V4435, P346
   Affeldt R, 2012, SCI COMPUT PROGRAM, V77, P1058, DOI 10.1016/j.scico.2011.07.003
   Aizatulin M, 2011, PROCEEDINGS OF THE 18TH ACM CONFERENCE ON COMPUTER & COMMUNICATIONS SECURITY (CCS 11), P331
   Almeida JB, 2010, INNOV SYST SOFTW ENG, V6, P203, DOI 10.1007/s11334-010-0127-y
   Almeida JB, 2009, LECT NOTES COMPUT SC, V5825, P37, DOI 10.1007/978-3-642-04570-7_5
   [Anonymous], 2009, C D1 1 DET CAO QHASM
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], COQ PROOF ASS REF MA
   [Anonymous], 2003, High Integrity Software: The SPARK Approach to Safety and Security
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Barbosa Manuel, 2012, Fundamentals of Software Engineering. 4th IPM International Conference, FSEN 2011. Revised Selected Papers, P316, DOI 10.1007/978-3-642-29320-7_21
   Barbosa M., 2011, DICCTC1101 U MINH
   Barbosa Manuel., 2010, ECEASST, V33
   BARNETT M, 2004, LNCS, V3362, P49, DOI [DOI 10.1007/978-3-540-30569-9_3, 10.1007]
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barnett M, 2011, COMMUN ACM, V54, P81, DOI 10.1145/1953122.1953145
   Barthe G, 2007, LECT NOTES COMPUT SC, V4709, P152
   Barthe G, 2011, LECT NOTES COMPUT SC, V6841, P71, DOI 10.1007/978-3-642-22792-9_5
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Baudin Patrick, 2008, ACSL ANSI ISO C SPEC
   Berghofer S., 2011, OASICS, V24, P15
   Bernstein D. J., 2009, CRYPTOGRAPHY NACI
   Bhargavan K, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P459
   BLUM L, 1986, SIAM J COMPUT, V15, P364, DOI 10.1137/0215025
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Conchon S., 2011, ALT ERGO AUTOMATIC T
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dierks T., 2006, 4346 IETF RFC
   DOLEV D, 1983, IEEE T INFORM THEORY, V29, P198, DOI 10.1109/TIT.1983.1056650
   Erica L, 2009, P 5 ANN WORKSH CYB S
   Filliâtre JC, 2004, LECT NOTES COMPUT SC, V3308, P15
   Filliâtre JC, 2007, LECT NOTES COMPUT SC, V4590, P173
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Fournet C, 2009, CCS'09: PROCEEDINGS OF THE 16TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P432
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   Jhala R., ACM COMPUTING SURVEY, V41
   Leavens G.T., 2000, OBJECT ORIENTED PROG, P105
   Lewis J, 2007, FMSE'07: PROCEEDINGS OF THE 2007 ACM WORKSHOP ON FORMAL METHODS IN SECURITY ENGINEERING, P41
   Manuel Barbosa, 2010, CACE DELIVERABLE 5 2
   Marché C, 2004, J LOGIC ALGEBR PROGR, V58, P89, DOI 10.1016/j.jlap.2003.07.006
   Marche Claude., 2010, Jessie Plugin Tutorial
   Nowak D., 2008, LECT NOTES COMPUTER, V4861, P319
NR 44
TC 1
Z9 1
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 216
EP 233
DI 10.1016/j.scico.2012.09.019
PN B
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4NO
UT WOS:000338401600005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Breuer, PT
   Pickin, S
AF Breuer, Peter T.
   Pickin, Simon
TI Open source verification in an anonymous volunteer network
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal methods; Software verification; Static analysis; Open source;
   Distributed computation
ID DEADLOCK
AB An 'open' certification process is characterised here that is not based on any central agency, but rather on the option for any party to confirm any part of the certification process at will. The model for this paradigm has been a distributed, piece-wise, semantic audit carried out on the Linux kernel source code using a lightweight formal method.
   Our goal is a technology that allows open source developers to receive formally backed certifications for their project, in quid pro quo exchanges of resources and expertise with other developers within an amorphous and anonymous cloud of volunteers. To help ensure the integrity of the results, identifying details such as subroutine and variable names are not included in the data sent for analysis, each part of the computation is repeated many times at different sites, and checkpoint information is generated that enables independent checks to be carried out without starting from scratch each time. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Breuer, Peter T.] Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
   [Pickin, Simon] Univ Complutense Madrid, Fac Inf, Dpto Sist Inf & Comp, Madrid, Spain.
C3 University of Birmingham; Complutense University of Madrid
RP Breuer, PT (corresponding author), Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
EM ptb@inv.it.uc3m.es; spickin@fdi.ucm.es
RI ; Breuer, Peter/V-3357-2018
OI Pickin, Simon James/0000-0002-5506-3602; Breuer,
   Peter/0000-0003-2296-6175
FU Spanish MEC project ESTuDIo [TIN2012-36812-C02-01]
FX Simon Pickin would like to thank the Spanish MEC project ESTuDIo
   (TIN2012-36812-C02-01) for partial support during research for this
   article.
CR Abujarad F., 2009, P PDMC 2009 8 INT WO
   *AM NAT STAND I, 1989, X31591989 ANSI
   Anderson D.P., 2005, P 1 IEEE INT C ESC G
   [Anonymous], IEEE SOFTWARE
   [Anonymous], P 5 IEEE ACM INT WOR
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Ball T., 2002, P POPL02 ACM SIGPLAN
   BARNETT M, 2004, LNCS, V3362
   Bobko P.K., 2001, RUTGERS COMPUTER TEC, V51
   Breuer P., 1995, AS PAC C HARDW DEF L, P99
   Breuer P. T., 1996, Proceedings of the Eighth Euromicro Workshop on Real-Time Systems, P200, DOI 10.1109/EMWRTS.1996.557891
   Breuer P.T., 2006, P LEV APPL FORM METH, P408
   Breuer P.T., 2009, INNOVATIONS SYSTEMS
   Breuer PT, 2007, IEEE ANNU SOFTW ENG, P246, DOI 10.1109/SEW.2007.37
   Breuer PT, 2006, 30TH ANNUAL IEEE/NASA SOFTWARE ENGINEERING WORKSHOP, PROCEEDINGS, P223
   Breuer PT, 2006, LECT NOTES COMPUT SC, V4006, P56
   Breuer PT, 2006, LECT NOTES COMPUT SC, V3994, P765
   Breuer PT, 2012, LECT NOTES COMPUT SC, V7159, P22, DOI 10.1007/978-3-642-28166-2_3
   Breuer PT, 2006, INNOV SYST SOFTW ENG, V2, P147, DOI 10.1007/s11334-006-0010-z
   Breuer PT, 2004, LECT NOTES COMPUT SC, V3063, P52
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cunsolo VD, 2009, LECT NOTES COMPUT SC, V5754, P423, DOI 10.1007/978-3-642-04070-2_48
   Douglas K, 2005, POSTGRE SQL
   Engler D, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE FOURTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P1
   Foster JS, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/543552.512531
   Gomulkiewicz R.W., 1999, HOUSTON LAW REV, V179
   Griffith A., 2002, GCC COMPLETE REFEREN
   Guttag JV, INTRO LCL LARCH C IN
   Heien EM, 2012, IEEE T PARALL DISTR, V23, P977, DOI 10.1109/TPDS.2011.251
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Holzmann G.J., 2008, AUTOMATED SOFTWARE E, V15
   Holzmann GJ, 2008, P ASE 2008 23 IEEE A
   Johnson R., 2004, P 13 USENIX SEC S AU
   Lázaro D, 2012, J PARALLEL DISTR COM, V72, P281, DOI 10.1016/j.jpdc.2011.10.007
   Mac Lane S, 1998, GRAD TEXT M, V5
   Necula GC, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P229, DOI 10.1145/248155.238781
   Raymond E.S., 2001, MAGIC CAULDRON
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Segal B, 2010, P 13 INT WORKSH ADV, P4
   Tews H., 2004, TECHNICAL REPORT
   Wagner D., 2000, P NETWORK DISTRIBUTE
   [No title captured]
NR 43
TC 1
Z9 1
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 161
EP 187
DI 10.1016/j.scico.2013.08.010
PN B
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4NO
UT WOS:000338401600003
OA hybrid
DA 2024-07-18
ER

PT J
AU Abate, P
   Di Cosmo, R
   Treinen, R
   Zacchiroli, S
AF Abate, Pietro
   Di Cosmo, Roberto
   Treinen, Ralf
   Zacchiroli, Stefano
TI Learning from the future of component repositories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Component repository; Quality assurance; Software evolution; Speculative
   analysis; Open source
ID SOFTWARE EVOLUTION
AB An important aspect of the quality assurance of large component repositories is to ensure the logical coherence of component metadata, and to this end one needs to identify incoherences as early as possible. Some relevant classes of problems can be formulated in term of properties of the future repositories into which the current repository may evolve. However, checking such properties on all possible future repositories requires a way to construct a finite representation of the infinite set of all potential futures. A class of properties for which this can be done is presented in this work.
   We illustrate the practical usefulness of the approach with two quality assurance applications: (i) establishing the amount of "forced upgrades" induced by introducing new versions of existing components in a repository, and (ii) identifying outdated components that are currently not installable and need to be upgraded in order to become installable again. For both applications we provide experience reports obtained on the Debian free software distribution. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Paris Diderot, Sorbonne Paris Cite, PPS, UMR 7126,CNRS, F-75205 Paris, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite Paris
   Cite
RP Zacchiroli, S (corresponding author), Univ Paris Diderot, Sorbonne Paris Cite, PPS, UMR 7126,CNRS, F-75205 Paris, France.
EM abate@pps.univ-paris-diderot.fr; roberto@dicosmo.org;
   treinen@pps.univ-paris-diderot.fr; zack@pps.jussieu.fr
OI Zacchiroli, Stefano/0000-0002-4576-136X
CR Abate P., 2012, DOSE DEBCHECK PRIMER
   Abate P., 2012, 15 INT ACM SIGSOFT S, P51
   Abate P., 2011, 3 ACM WORKSH HOT TOP
   Abate P, 2012, J SYST SOFTWARE, V85, P2228, DOI 10.1016/j.jss.2012.02.018
   Abate P, 2009, INT SYMP EMP SOFTWAR, P89, DOI 10.1109/ESEM.2009.5316017
   [Anonymous], OCAML SYSTEM RELEASE
   [Anonymous], 1997, COMPONENT SOFTWARE O
   Brun Y., 2010, Proceedings of the FSE/SDP workshop on Future of software engineering research, P59, DOI DOI 10.1145/1882362
   Danelutto M, 2012, PROCEDIA COMPUT SCI, V9, P1837, DOI 10.1016/j.procs.2012.04.202
   Gonzalez-Barahona JM, 2009, EMPIR SOFTW ENG, V14, P262, DOI 10.1007/s10664-008-9100-x
   Graves TL, 2000, IEEE T SOFTWARE ENG, V26, P653, DOI 10.1109/32.859533
   HANNEMAN R. A., 2005, Introduction to social network methods
   Jackson I., 2012, DEBIAN POLICY MANUAL
   Kagdi H, 2007, J SOFTW MAINT EVOL-R, V19, P77, DOI 10.1002/smr.344
   Lau KK, 2007, IEEE T SOFTWARE ENG, V33, P709, DOI 10.1109/TSE.2007.70726
   Lehman M. M., 1985, Program Evolution: Processes of Software Change
   Mancinelli F, 2006, IEEE INT CONF AUTOM, P199
   NAGAPPAN N, 2007, INT S EMP SOFTW ENG, P364
   Neuhaus S, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P529
   Treinen R., 2008, P 9 C DEB PROJ DEBCO, V8
   Whitehead J., 2010, MSR 2010 7 INT WORK
   Zimmermann T, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P531, DOI 10.1145/1368088.1368161
NR 22
TC 3
Z9 4
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
BP 93
EP 115
DI 10.1016/j.scico.2013.06.007
PN B
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4IK
UT WOS:000338387900003
OA hybrid
DA 2024-07-18
ER

PT J
AU Haitzer, T
   Zdun, U
AF Haitzer, Thomas
   Zdun, Uwe
TI Semi-automated architectural abstraction specifications for supporting
   software evolution
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Architectural abstraction; Architectural component and connector views;
   Software evolution; UML; Model transformation
ID CLASS DIAGRAMS; MODELS; RECONSTRUCTION; CHECKING
AB In this paper we present an approach for supporting the semi-automated architectural abstraction of architectural models throughout the software life-cycle. It addresses the problem that the design and implementation of a software system often drift apart as software systems evolve, leading to architectural knowledge evaporation. Our approach provides concepts and tool support for the semi-automatic abstraction of architecture component and connector views from implemented systems and keeping the abstracted architecture models up-to-date during software evolution. In particular, we propose architecture abstraction concepts that are supported through a domain-specific language (DSL). Our main focus is on providing architectural abstraction specifications in the DSL that only need to be changed, if the architecture changes, but can tolerate non-architectural changes in the underlying source code. Once the software architect has defined an architectural abstraction in the DSL, we can automatically generate architectural component views from the source code using model-driven development (MDD) techniques and check whether architectural design constraints are fulfilled by these models. Our approach supports the automatic generation of traceability links between source code elements and architectural abstractions using MOD techniques to enable software architects to easily link between components and the source code elements that realize them. It enables software architects to compare different versions of the generated architectural component view with each other. We evaluate our research results by studying the evolution of architectural abstractions in different consecutive versions of five open source systems and by analyzing the performance of our approach in these cases. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Haitzer, Thomas; Zdun, Uwe] Univ Vienna, Software Architecture Grp, Fac Comp Sci, Vienna, Austria.
C3 University of Vienna
RP Haitzer, T (corresponding author), Univ Vienna, Software Architecture Grp, Fac Comp Sci, Vienna, Austria.
EM thomas.haitzer@univie.ac.at; uwe.zdun@univie.ac.at
RI Zdun, Uwe/AFR-2161-2022
CR Ajila SA, 2009, 2009 IEEE THIRD INTERNATIONAL CONFERENCE ON SEMANTIC COMPUTING (ICSC 2009), P390, DOI 10.1109/ICSC.2009.19
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   [Anonymous], 2012, P ACM 4 ANN WORKSH E
   [Anonymous], P CSMR 2006 10 EUR C
   [Anonymous], 1976, 41 CSTR BELL LAB
   Beydeda S., 2005, MODEL DRIVEN SOFTWAR
   Bittencourt RA, 2009, EUR CON SFTWR MTNCE, P251, DOI 10.1109/CSMR.2009.28
   Brito e Abreu F., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P13, DOI 10.1109/CSMR.2000.827300
   Brosig F., 2009, P 4 INT ICST C PERF
   Brown S., 2013, SOFTWARE ARCHITECTUR
   Corazza A, 2010, EUR CON SFTWR MTNCE, P88, DOI 10.1109/CSMR.2010.36
   De Lucia A, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1276933.1276934
   de Moor O, 2008, LECT NOTES COMPUT SC, V5235, P78, DOI 10.1007/978-3-540-88643-3_3
   DEERWESTER S, 1990, J AM SOC INFORM SCI, V41, P391, DOI 10.1002/(SICI)1097-4571(199009)41:6<391::AID-ASI1>3.0.CO;2-9
   Dietrich J, 2008, SOFTVIS 2008: PROCEEDINGS OF THE 4TH ACM SYMPOSIUM ON SOFTWARE VISUALIZATION, P91
   Ducasse S, 2009, IEEE T SOFTWARE ENG, V35, P573, DOI 10.1109/TSE.2009.19
   Eclipse Foundation, 2011, XTEXT
   Eclipse-Foundation, 2011, EMF COMP
   Efftinge S, 2013, ACM SIGPLAN NOTICES, V48, P112, DOI 10.1145/2480361.2371419
   Egyed A, 2004, LECT NOTES COMPUT SC, V2984, P37
   Eiglsperger M., 2003, Soft Vis 2003: Proceedings of the 2003 ACM Symposium on Software Visualization, P189, DOI DOI 10.1145/774833.774860
   Feilkas M, 2009, INT C PROGRAM COMPRE, P188, DOI 10.1109/ICPC.2009.5090042
   Feng T, 2006, SNPD 2006: SEVENTH ACIS INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING ARTIFICIAL INTELLIGENCE, NETWORKING, AND PARALLEL/DISTRIBUTED COMPUTING, PROCEEDINGS, P43
   Fowler M., 2010, Domain-specific languages
   Gronback R. C., 2009, ECLIPSE MODELING PRO
   Guo GYB, 1999, INT FED INFO PROC, V12, P15
   Haitzer T., 2012, P 8 INT ACM SIGSOFT, P61, DOI DOI 10.1145/2304696.2304709
   Hajiyev E, 2006, LECT NOTES COMPUT SC, V4067, P2
   HARRIS DR, 1995, PROC INT CONF SOFTW, P186, DOI 10.1145/225014.225032
   Hassan AE, 2004, PROG COMPREHEN, P183, DOI 10.1109/WPC.2004.1311060
   Hevner AR, 2004, MIS QUART, V28, P75, DOI 10.2307/25148625
   Holt RC, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P210, DOI 10.1109/WCRE.1998.723191
   Ivers J., 2004, CMUSEI2004TR008 CARN
   Ivkovic I, 2004, PROC IEEE INT CONF S, P252, DOI 10.1109/ICSM.2004.1357809
   Jansen A., 2007, WORKING IEEEIFIP C S, P4
   Kazman R., 1999, Automated Software Engineering, V6, P107, DOI 10.1023/A:1008781513258
   Kleinberg JM, 1999, J ACM, V46, P604, DOI 10.1145/324133.324140
   Knodel J, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P277
   Kofman M., METADIFF MODEL COMP
   Könemann P, 2010, LECT NOTES COMPUT SC, V6285, P246, DOI 10.1007/978-3-642-15114-9_19
   Koschke R, 2003, J SOFTW MAINT EVOL-R, V15, P87, DOI 10.1002/smr.270
   Lau KK, 2007, IEEE T SOFTWARE ENG, V33, P709, DOI 10.1109/TSE.2007.70726
   Li QS, 2005, WCRE: 12TH WORKING CONFERENCE ON REVERSE ENGINEERING 2005, PROCEEDINGS, P57
   Linwood Jeff., 2010, Beginning Hibernate, Second Edition, VSecond
   Maletic JI, 2001, PROC INT CONF SOFTW, P103, DOI 10.1109/ICSE.2001.919085
   Maqbool O, 2007, IEEE T SOFTWARE ENG, V33, P759, DOI 10.1109/TSE.2007.70732
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Mens K., 2002, P 14 INT C SOFTWARE, P289
   Murphy G. C., 1995, SIGSOFT Software Engineering Notes, V20, P18, DOI 10.1145/222132.222136
   Object Management Group, 2010, OCL 2 2 SPEC
   Object Management Group, 2010, UML 2 3 SUP
   Passos L, 2010, IEEE SOFTWARE, V27, P82, DOI 10.1109/MS.2009.117
   Pinzger M, 2005, ELECTRON NOTES THEOR, V127, P183, DOI 10.1016/j.entcs.2004.08.043
   Richner T., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P13, DOI 10.1109/ICSM.1999.792487
   Riva C, 2002, SIXTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P47, DOI 10.1109/CSMR.2002.995789
   Rozanski N., 2005, SOFTWARE SYSTEMS ARC
   Sabetzadeh M, 2007, INT REQUIR ENG CONF, P221, DOI 10.1109/RE.2007.18
   Sangal N, 2005, ACM SIGPLAN NOTICES, V40, P167, DOI 10.1145/1103845.1094824
   Sartipi K, 2003, PROC IEEE INT CONF S, P293, DOI 10.1109/ICSM.2003.1235434
   Scanniello Giuseppe, 2010, P 2010 ACM S APPL CO, P2198
   Soyatec, 2011, EUML2
   Spanoudakis George., 2005, Handbook of Software Engineering and Knowledge Engineering, V3
   Steyaert P, 1996, ACM SIGPLAN NOTICES, V31, P268, DOI 10.1145/236338.236363
   Sun D, 2005, PROG COMPREHEN, P317
   Tekinerdogan B, 2007, J OBJECT TECHNOL, V6, P7, DOI 10.5381/jot.2007.6.7.a1
   Tichelaar S, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P296, DOI 10.1109/WCRE.2000.891485
   von Detten Markus., 2011, Proceedings of the joint ACM SIGSOFT conference - QoSA and ACM SIGSOFT symposium - ISARCS on Quality of software architectures - QoSA and architecting critical systems - ISARCS, QoSA-ISARCS '11, P23
   Wheeler David., 2009, Sloccount
   Winkler S, 2010, SOFTW SYST MODEL, V9, P529, DOI 10.1007/s10270-009-0145-0
   Zdun U., 2011, FRAG LANGUAGE
   Zdun U, 2008, INFORM SOFTWARE TECH, V50, P1003, DOI 10.1016/j.infsof.2007.09.003
   Zhao JJ, 2002, J SOFTW MAINT EVOL-R, V14, P317, DOI 10.1002/smr.258
   Zimmerman O, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P157, DOI 10.1109/WICSA.2008.19
NR 73
TC 9
Z9 9
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
BP 135
EP 160
DI 10.1016/j.scico.2013.10.004
PN B
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4IK
UT WOS:000338387900005
DA 2024-07-18
ER

PT J
AU El-Fakih, K
   Yevtushenko, N
   Simao, A
AF El-Fakih, Khaled
   Yevtushenko, Nina
   Simao, Adenilso
TI A practical approach for testing timed deterministic finite state
   machines with single clock
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Conformance testing; Finite state machine testing; Timed finite state
   machines
AB Finite State Machines (FSMs) are widely used for verification and testing of many reactive systems and many methods are proposed for generating tests from FSMs with the guaranteed fault coverage. However, some systems can only be properly described when time constraints are considered, advocating the adoption of models with the notion of time. In this paper, a method for deriving conformance tests with the guaranteed fault coverage from a Timed FSM (TFSM) with a single clock is presented. Test derivation is based on a given fault domain that allows the derivation of test suites with reasonable length. More precisely, the fault domain includes every possible faulty TFSM implementation with the known largest time constraints boundaries and minimal duration of time guards. Given a deterministic possibly partial TFSM specification, a complete test suite that guarantees the detection of all faulty implementations with respect to the above fault domain is derived. Experiments with randomly generated timed FSMs are conducted to determine length of obtained test suites and assess the impact of varying the TFSM specification parameters on length of obtained test suites. Further, experiments with both untimed and timed machines are conducted and these experiments show that similar patterns for timed and untimed machines are obtained with respect to varying the number of states, inputs, and outputs of machines. (C) 2013 Elsevier B.V. All rights reserved.
C1 [El-Fakih, Khaled] Amer Univ Sharjah, Sharjah, U Arab Emirates.
   [Yevtushenko, Nina] Tomsk State Univ, Tomsk, Russia.
   [Simao, Adenilso] Univ Sao Paulo, BR-05508 Sao Paulo, Brazil.
C3 American University of Sharjah; Tomsk State University; Universidade de
   Sao Paulo
RP El-Fakih, K (corresponding author), Amer Univ Sharjah, POB 26666, Sharjah, U Arab Emirates.
EM kelfakih@aus.edu; ninayevtushenko@yahoo.com; adenilso@icmc.usp.br
RI Yevtushenko, Nina V./R-6494-2016; Simao, Adenilso S/E-9620-2011
OI Simao, Adenilso/0000-0002-1454-2607
FU AUS FRG-III
FX Partially supported by AUS 2012 FRG-III.
CR Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Bohnenkamp H, 2006, IEEE T SOFTWARE ENG, V32, P812, DOI 10.1109/TSE.2006.104
   Bozga M, 2012, DES AUT TEST EUROPE, P370
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Dorofeeva R, 2005, LECT NOTES COMPUT SC, V3731, P204
   Dorofeeva R, 2010, INFORM SOFTWARE TECH, V52, P1286, DOI 10.1016/j.infsof.2010.07.001
   El-Fakih K, 2009, LECT NOTES COMPUT SC, V5826, P66, DOI 10.1007/978-3-642-05031-2_5
   En-Nouaary A, 2002, IEEE T SOFTWARE ENG, V28, P1023, DOI 10.1109/TSE.2002.1049402
   Friedenthal S., 2009, PRACTICAL GUIDE SYSM
   FUJIWARA S, 1991, IEEE T SOFTWARE ENG, V17, P591, DOI 10.1109/32.87284
   Gromov M, 2009, LECT NOTES COMPUT SC, V5522, P137, DOI 10.1007/978-3-642-02138-1_9
   Hessel Anders, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P77, DOI 10.1007/978-3-540-78917-8_3
   Hierons RM, 2009, J LOGIC ALGEBR PROGR, V78, P98, DOI 10.1016/j.jlap.2008.06.001
   Krichen M, 2009, FORM METHOD SYST DES, V34, P238, DOI 10.1007/s10703-009-0065-1
   Larsen K.G., 2005, Proceedings of the 5th ACM international conference on Embedded software, P299, DOI DOI 10.1145/1086228.1086283
   Luo G., 1994, IEEE T SOFTW ENG, V20
   Merayo MG, 2008, COMPUT NETW, V52, P432, DOI 10.1016/j.comnet.2007.10.002
   Petrenko A, 2005, IEEE T COMPUT, V54, P1154, DOI 10.1109/TC.2005.152
   Petrenko A., 1993, IFIP Transactions C (Communication Systems), VC-19, P363
   PETRENKO A, 1991, P 4 INT WORKSH PROT, P83
   Rumbaugh J., 2004, UNIFIED MODELING LAN, V2nd
   Rutz Carsten, 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P39, DOI 10.1109/ICSTW.2011.92
   Schmaltz J, 2008, LECT NOTES COMPUT SC, V5215, P250, DOI 10.1007/978-3-540-85778-5_18
   Simao A, 2009, IET SOFTW, V3, P91, DOI 10.1049/iet-sen.2008.0018
   Simao A, 2009, LECT NOTES COMPUT SC, V5826, P129, DOI 10.1007/978-3-642-05031-2_9
   Springintveld J, 2001, THEOR COMPUT SCI, V254, P225, DOI 10.1016/S0304-3975(99)00134-6
   Vasilevskii M. P., 1973, Cybernetics, V9, P653, DOI 10.1007/BF01068590
   Vuong SonT., 1989, PROC 2 IFIP INT WORK, P161
   YANNAKAKIS M, 1995, J COMPUT SYST SCI, V50, P209, DOI 10.1006/jcss.1995.1019
   Yevtushenko N., 1990, AUTOM CONTROL COMPUT, V5
   Zhigulin M., 2011, 11 INT C QUAL SOFTW
NR 31
TC 11
Z9 11
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 343
EP 355
DI 10.1016/j.scico.2013.09.008
PN B
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100006
OA hybrid
DA 2024-07-18
ER

PT J
AU Ubayashi, N
   Nakajima, S
   Hirayama, M
AF Ubayashi, Naoyasu
   Nakajima, Shin
   Hirayama, Masayuki
TI Context-dependent product line engineering with lightweight formal
   approaches
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Product line engineering; Context analysis; Formal methods
AB This paper proposes a new style of product line engineering methods. It focuses on constructing embedded systems that take into account the contexts such as the external physical environments. In current product line development projects, Feature Analysis is mainly conducted from the viewpoint of system configurations: how hardware and software components are configured to constitute a system. In most cases, contexts are not considered explicitly. As a result, unexpected and unfavorable behavior might emerge in a system if a developer does not recognize any possible conflicting combinations between the system and contexts. To deal with this problem, this paper provides the notion of a context-dependent product line, which is composed of the system and context lines. The former is obtained by analyzing a family of systems. The latter is obtained by analyzing features of contexts associated to the systems. The system and context lines contain reusable core assets. The configuration of selected system components and contexts can be formally checked at the specification level. In this paper, we show a development process that includes the creation of both product line assets as well as context assets. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Ubayashi, Naoyasu] Kyushu Univ, Fukuoka 812, Japan.
   [Nakajima, Shin] Natl Inst Informat, Tokyo, Japan.
   [Hirayama, Masayuki] Nihon Univ, Tokyo, Japan.
C3 Kyushu University; Research Organization of Information & Systems
   (ROIS); National Institute of Informatics (NII) - Japan; Nihon
   University
RP Ubayashi, N (corresponding author), Kyushu Univ, Fukuoka 812, Japan.
EM ubayashi@acm.org; nkjm@nii.ac.jp; hirayama.masayuki@nihon-u.ac.jp
OI Ubayashi, Naoyasu/0000-0003-1578-7195
FU Ministry of Education, Culture, Sports, Science and Technology, Japan
   [23300010]; Grants-in-Aid for Scientific Research [23300010] Funding
   Source: KAKEN
FX This research is being conducted as a part of the Grant-in-aid for
   Scientific Research (B), 23300010 by the Ministry of Education, Culture,
   Sports, Science and Technology, Japan.
CR ABRIAL JR, 2006, B BOOK ASSIGNING PRO
   [Anonymous], 1992, The Z Notation
   [Anonymous], SOFTWARE FACTORIES A
   [Anonymous], SPLC INT C SOFTW PRO
   Atkinson C., 2001, COMPONENT BASED PROD
   Brezillon P., 1996, 9629 LAFORIA
   Clarke EM, 1999, MODEL CHECKING, P1
   Coleman J. W., 2005, P WORKSH RIG ENG FAU, P65
   Dehlinger J, 2004, EIGHTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH ASSURANCE SYSTEMS ENGINEERING, PROCEEDINGS, P12, DOI 10.1109/HASE.2004.1281726
   Elrad T, 2001, COMMUN ACM, V44, P28
   Fitzgerald J., 1998, MODELING SYSTEMS PRA
   Fitzgerald J., 2005, Validated Designs for Object-oriented Systems
   Greenspan S. J., 1982, Sixth International Conference on Software Engineering, P225
   Hartmann H, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P12, DOI 10.1109/SPLC.2008.15
   Hayes IJ, 2003, LECT NOTES COMPUT SC, V2805, P154
   HEITMEYER C, 1995, COMPASS '95 - PROCEEDINGS OF THE TENTH ANNUAL CONFERENCE ON COMPUTER ASSURANCE, P109, DOI 10.1109/CMPASS.1995.521891
   Höfner P, 2006, LECT NOTES COMPUT SC, V4085, P300
   Holzmann Gerard J., 2003, The SPIN Model Checker
   Jackson D., 1996, Computer, V29, P21
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Jackson M, 2001, PROBLEM FRAME ANAL S
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kang KC, 2002, IEEE SOFTWARE, V19, P58, DOI 10.1109/MS.2002.1020288
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Lee K, 2010, LECT NOTES COMPUT SC, V6287, P32
   Leveson N.G., 1995, Safeware: System Safety and Computers
   Liu J, 2005, 16TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P21
   Liu J, 2007, PROC INT CONF SOFTW, P85, DOI 10.1109/ICSECOMPANION.2007.42
   McCarthy J., 1969, Machine Intelligence, VVol. 4, P463
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   PARNAS D, 1991, 237 CRL MCMAST U
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Reiser MO, 2005, LECT NOTES COMPUT SC, V3714, P21
   Saaltink M., 1997, ZUM '97: The Z Formal Specification Notation. 10th International Conference of Z Users Proceedings, P72, DOI 10.1007/BFb0027284
   Sun J, 2005, IEEE INT C ENG COMP, P303
   Tarr P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P107, DOI 10.1109/ICSE.1999.841000
   Ubayashi N, 2011, INT REQUIR ENG CONF, P143, DOI 10.1109/RE.2011.6051648
   Ubayashi N, 2010, LECT NOTES COMPUT SC, V6287, P1, DOI 10.1007/978-3-642-15579-6_1
   Ubayashi N, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P1269, DOI 10.1145/1244002.1244277
   Ubayashi N, 2009, LECT NOTES COMPUT SC, V5565, P17, DOI 10.1007/978-3-642-02144-2_7
   Zuo HL, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P499
NR 42
TC 0
Z9 0
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2331
EP 2346
DI 10.1016/j.scico.2012.06.006
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 234SL
UT WOS:000325664500004
OA hybrid
DA 2024-07-18
ER

PT J
AU Dongol, B
   Hayes, IJ
AF Dongol, Brijesh
   Hayes, Ian J.
TI Deriving real-time action systems in a sampling logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Mathematics of Program Construction
CY JUN, 2010
CL Quebec City, CANADA
SP Ctr Rech Math, Univ Laval
DE Sampling logic; Action systems; Temporal logic; Enforced properties;
   Program refinement; Derivation; True concurrency; Safety-critical
   systems
ID REFINEMENT
AB Action systems have been shown to be applicable for modelling and constructing systems in both discrete and hybrid domains. We present a novel semantics for action systems using a sampling logic that facilitates reasoning about the truly concurrent behaviour between an action system and its environment. By reasoning over the apparent states, the sampling logic allows one to determine whether a state predicate is definitely or possibly true over an interval. We present a semantics for action systems that allows the time taken to sample inputs and evaluate expressions (and hence guards) into account. We develop a temporal logic based on the sampling logic that facilitates formalisation of safety, progress, timing and transient properties. Then, we incorporate this logic to the method of enforced properties, which facilitates stepwise refinement of action systems. Crown Copyright (C) 2012 Published by Elsevier B.V. All rights reserved.
C1 [Dongol, Brijesh] Univ Sheffield, Dept Comp Sci, Sheffield S1 4DP, S Yorkshire, England.
   [Hayes, Ian J.] Univ Queensland, Sch Informat Technol & Elect Engn, Brisbane, Qld 4072, Australia.
C3 University of Sheffield; University of Queensland
RP Dongol, B (corresponding author), Univ Sheffield, Dept Comp Sci, Sheffield S1 4DP, S Yorkshire, England.
EM B.Dongol@sheffield.ac.uk; lan.Hayes@itee.uq.edu.au
RI Dongol, Brijesh/ABB-2935-2020
OI Dongol, Brijesh/0000-0003-0446-3507; Hayes, Ian/0000-0003-3649-392X
CR Back R.-J., 1998, Refinement Calculus
   Back R.-J., 2000, LECT NOTES COMPUTER, V1926, P73
   Back R. J. R., 2003, Formal Aspects of Computing, V15, P103, DOI 10.1007/s00165-003-0005-6
   BACK RJ, 1991, STRUCT PROGRAM, V12, P17
   Back RJR, 1994, LECT NOTES COMPUT SC, V836, P367
   Broy M, 2001, THEOR COMPUT SCI, V253, P3, DOI 10.1016/S0304-3975(00)00087-6
   Burns A, 2006, STRUCTURE FOR DEPENDABILITY: COMPUTER-BASED SYSTEMS FROM AN INTERDISCIPLINARY PERSPECTIVE, P74, DOI 10.1007/1-84628-111-3_4
   Burns A, 2010, REAL-TIME SYST, V45, P106, DOI 10.1007/s11241-010-9094-5
   Chandy K.M., 1988, PARALLEL PROGRAM DES
   Coleman JW, 2007, J LOGIC COMPUT, V17, P807, DOI 10.1093/logcom/exm030
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dongol B., 2010, SSE201001 U QUEENSL
   Dongol B., 2009, THESIS U QUEENSLAND
   Dongol B, 2010, LECT NOTES COMPUT SC, V6120, P119, DOI 10.1007/978-3-642-13321-3_9
   Dongol B, 2009, IEEE AUS SOFT ENGR, P3, DOI 10.1109/ASWEC.2009.12
   Fidge C. J., 1997, Formal Aspects of Computing, V9, P175, DOI 10.1007/BF01211618
   Gargantini A, 2001, ACM T SOFTW ENG METH, V10, P255, DOI 10.1145/383876.383877
   Hayes I.J., CSTR1273 NEWC U
   Hayes IJ, 2009, LECT NOTES COMPUT SC, V5454, P85
   Hayes IJ, 2001, ACTA INFORM, V37, P385, DOI 10.1007/PL00013311
   Hooman J, 2000, REAL-TIME SYST, V19, P61, DOI 10.1023/A:1008188323123
   JONES CB, 1983, ACM T PROGR LANG SYS, V5, P596, DOI 10.1145/69575.69577
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Lynch N, 2003, INFORM COMPUT, V185, P105, DOI 10.1016/S0890-5401(03)00067-1
   Manna Z., 1992, Temporal verification of reactive and concurrent systems: Specification
   MCDERMID J, 1996, IND PRESS SAFETY CAS
   Meinicke L, 2006, LECT NOTES COMPUT SC, V4014, P316, DOI 10.1007/11783596_19
   Rönkkö M, 2003, THEOR COMPUT SCI, V290, P937, DOI 10.1016/S0304-3975(02)00547-9
   Rönkkö M, 1999, LECT NOTES COMPUT SC, V1567, P304
   Troubitsyna E. A., 1999, Nordic Journal of Computing, V6, P320
   Troubitsyna E. A., 1999, Proceedings 1999 Pacific Rim International Symposium on Dependable Computing, P120, DOI 10.1109/PRDC.1999.816221
   Westerlund T, 2007, ELECTRON NOTES THEOR, V187, P91, DOI 10.1016/j.entcs.2006.08.046
   Zhou C., 2004, EATCS: Monographs in Theoretical Computer Science
NR 33
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2047
EP 2063
DI 10.1016/j.scico.2012.07.008
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 220QR
UT WOS:000324602500003
OA hybrid
DA 2024-07-18
ER

PT J
AU Figueroa-Martinez, J
   López-Jaquero, V
   Vela, FLG
   Gonzalez, P
AF Figueroa-Martinez, Jose
   Lopez-Jaquero, Victor
   Gutierrez Vela, Francisco Luis
   Gonzalez, Pascual
TI Enriching UsiXML language to support awareness requirements
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Awareness; Model-driven user interface development; Requirements
   specification
AB Awareness support in model-driven architecture approaches is almost nonexistent. Although it is a required feature for the development of collaborative applications, the consideration of awareness in development methodologies and tools has been hindered by the lack of model-driven oriented conceptual models. This work presents an extension to the user interface description language UsiXML for describing generic awareness support in software development, with special focus on requirements level, and keeping a traceable path throughout the development stages. UsiXML describes multimodal and multicontextual user interfaces by following a model-driven approach to software development, and one of its purposes is to enable the development of highly interactive user interfaces, where awareness plays an important role. Furthermore, a template to gather awareness information requirements is provided to help designers explore and describe them in the early design stages. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Figueroa-Martinez, Jose; Gutierrez Vela, Francisco Luis] Univ Granada, E-18071 Granada, Spain.
   [Lopez-Jaquero, Victor; Gonzalez, Pascual] Univ Castilla La Mancha, Albacete 02071, Spain.
C3 University of Granada; Universidad de Castilla-La Mancha
RP Figueroa-Martinez, J (corresponding author), Univ Granada, C Cuesta Hosp S-N, E-18071 Granada, Spain.
EM jfigueroa@ugr.es; victor@dsi.uclm.es; fgutierr@ugr.es;
   Pascual.Gonzalez@uclm.es
RI González, Pascual/E-3693-2016; López-Jaquero, Víctor/AAE-2232-2022;
   Gutierrez Vela, Francisco Luis/C-2433-2012
OI González, Pascual/0000-0003-3549-5712; Lopez Jaquero, Victor
   Manuel/0000-0003-2093-4065; Gutierrez Vela, Francisco
   Luis/0000-0001-6629-7597
FU MICINN of Spain [TIN2008-06596]; CONACYT of Mexico; UsiXML Project
   [ITEA2-08026]; Spanish government [AVANZA TSI-020400-2011-20]
FX This research has been funded by the MICINN of Spain (TIN2008-06596),
   the CONACYT of Mexico and the UsiXML Project (ITEA2-08026), funded by
   the Spanish government (AVANZA TSI-020400-2011-20).
CR Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   Cantera J. Fonseca, 2010, MODEL BASED USER INT
   Carroll JM, 2006, INTERACT COMPUT, V18, P21, DOI 10.1016/j.intcom.2005.05.005
   ENDSLEY MR, 1995, HUM FACTORS, V37, P32, DOI 10.1518/001872095779049543
   Faure D., 2010, P 1 INT WORKSH US IN
   Martinez JF, 2010, ADV INTEL SOFT COMPU, V72, P237, DOI 10.1007/978-3-642-13268-1_33
   Figueroa-Martinez J, 2011, LECT NOTES COMPUT SC, V6949, P665, DOI 10.1007/978-3-642-23768-3_108
   Gross T, 2005, INT J HUM-COMPUT INT, V18, P323, DOI 10.1207/s15327590ijhc1803_5
   Guerrero-García J, 2009, LA-WEB: 2009 LATIN AMERICAN WEB CONGRESS, P36, DOI 10.1109/LA-WEB.2009.40
   Gutwin C., 2002, Computer Supported Cooperative Work: The Journal of Collaborative Computing, V11, P411, DOI 10.1023/A:1021271517844
   Limbourg Q., 2005, Engineering Human Computer Interaction and Interactive Systems, P200, DOI DOI 10.1007/11431879_12
   Limbourg Quentin., 2004, P 3 ANN C TASK MODEL, P155
   Montero F, 2006, LECT NOTES COMPUT SC, V3941, P161
   Patern'o F., 1999, Model-based design and evaluation of interactive applications
   Penichet VMR, 2010, J SYST SOFTWARE, V83, P1478, DOI 10.1016/j.jss.2010.03.029
   Puerta AR, 1997, IEEE SOFTWARE, V14, P40, DOI 10.1109/52.595902
   Teruel M. A., 2012, INFORM SOFTWARE TECH
   Teruel MA, 2011, LECT NOTES COMPUT SC, V6998, P33, DOI 10.1007/978-3-642-24606-7_4
   Tesoriero R, 2010, LECT NOTES COMPUT SC, V6409, P95, DOI 10.1007/978-3-642-16488-0_8
NR 19
TC 3
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2013
VL 78
IS 11
BP 2259
EP 2267
DI 10.1016/j.scico.2012.09.020
PG 9
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 220QR
UT WOS:000324602500012
OA hybrid
DA 2024-07-18
ER

PT J
AU Söderberg, E
   Ekman, T
   Hedin, G
   Magnusson, E
AF Soderberg, Emma
   Ekman, Torbjoern
   Hedin, Gorel
   Magnusson, Eva
TI Extensible intraprocedural flow analysis at the abstract syntax tree
   level
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Declarative; Dataflow; Analysis; Control-flow; Java; Compiler; Attribute
   grammars
AB We have developed a new approach for implementing precise intraprocedural control-flow and dataflow analyses at the abstract syntax tree level. Our approach is declarative, making use of reference attribute grammars augmented with circular attributes and collection attributes. This results in concise executable specifications of the analyses, allowing extensions both to the language and with further source code analyses.
   To evaluate the new approach, we have implemented control flow, dataflow and dead assignment analyses for Java, by extending the JastAdd Extensible Java Compiler. We have compared our results to several well-known analysis frameworks and tools, using a set of Java programs as benchmarks. These results show that our approach performs well concerning both efficiency and preciseness. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Soderberg, Emma; Hedin, Gorel; Magnusson, Eva] Lund Univ, Dept Comp Sci, S-22100 Lund, Sweden.
   [Ekman, Torbjoern] Semmle Ltd, Oxford, England.
C3 Lund University
RP Söderberg, E (corresponding author), Lund Univ, Dept Comp Sci, Box 118, S-22100 Lund, Sweden.
EM emma.soderberg@cs.lth.se; torbjorn@semmle.com; gorel.hedin@cs.lth.se;
   eva.magnusson@cs.lth.se
CR Andrew W.A., 2002, MODERN COMPILER IMPL
   [Anonymous], 1970, ACM SIGPLAN NOTICES, DOI DOI 10.1145/390013.808479
   [Anonymous], 2005, PMD applied
   Ayewah N, 2008, IEEE SOFTWARE, V25, P22, DOI 10.1109/MS.2008.130
   Blackburn S. M., 2006, P OOPSLA 06 OCT
   Blackburn SM, 2008, COMMUN ACM, V51, P83, DOI 10.1145/1378704.1378723
   Boyland JT, 2005, J ACM, V52, P627, DOI 10.1145/1082036.1082042
   Bravenboer M, 2009, ACM SIGPLAN NOTICES, V44, P243, DOI 10.1145/1639949.1640108
   Ekman T, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1297105.1297029
   Ekman T, 2006, LECT NOTES COMPUT SC, V4143, P422
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   FARROW R, 1986, SIGPLAN NOTICES, V21, P85, DOI 10.1145/13310.13320
   Gosling J., 2005, JAVA TM LANGUAGE SPE, V3rd
   Hedin G., 2000, Informatica, V24, P301
   INGALLS DHH, 1986, SIGPLAN NOTICES, V21, P347, DOI 10.1145/960112.28732
   Jong-Deok Choi, 1999, Software Engineering Notes, V24, P21, DOI 10.1145/381788.316171
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Knuth DonaldE., 1971, MATH SYST THEORY, V5, P95
   Magnusson E, 2007, SCI COMPUT PROGRAM, V68, P21, DOI 10.1016/j.scico.2005.06.005
   Magnusson Eva, 2007, P 7 IEEE WORK C SOUR
   Reps T., 1994, Compiler Construction. 5th International Conference, CC'94. Proceedings, P389
   SCHAFER M, 2008, 23 ANN ACM SIGPLAN C
   Vallee-Rai R., 1999, CASCON 1999, P125
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   Whaley J, 2004, ACM SIGPLAN NOTICES, V39, P131, DOI 10.1145/996893.996859
   Wyk Eric Van, 2007, LNCS
NR 26
TC 18
Z9 18
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1809
EP 1827
DI 10.1016/j.scico.2012.02.002
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300004
DA 2024-07-18
ER

PT J
AU Berry, DM
AF Berry, Daniel M.
TI The essential similarity and differences between mathematical modeling
   and programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Abstract model; Exceptions; Mathematical modeling; Mathematical
   notation; Programming; Programming language
AB This note describes mathematical modeling and programming and determines that they are essentially the same activity. However, differences in the way that the products of the two activities are used force them to be applied in very different ways with very different goals. A result of these differences is that programming is harder than mathematical modeling, in that the model that the former produces must be more complete than the model that the latter produces. This note concludes with questions raised to encourage a discussion on the issues.
C1 Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Berry, DM (corresponding author), Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM dberry@uwaterloo.ca
CR Brooks Frederick P., 1995, The mythical man-month
   Jackson M., 1995, SOFTWARE REQUIREMENT
   Knuth D.E., 1989, IFIP C 1989
   KNUTH DE, 1981, SOFTWARE PRACT EXPER, V11, P1119, DOI 10.1002/spe.4380111102
   KNUTH DE, 1991, THEOR COMPUT SCI, V90, P1, DOI 10.1016/0304-3975(91)90295-D
   Knuth DonaldE., 1986, Computers Typesetting, VB.
NR 6
TC 4
Z9 4
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1208
EP 1211
DI 10.1016/j.scico.2010.05.002
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100002
OA hybrid
DA 2024-07-18
ER

PT J
AU Evangelista, S
   Kristensen, LM
AF Evangelista, Sami
   Kristensen, Lars Michael
TI Dynamic state space partitioning for external memory state space
   exploration
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model checking; Explicit state space exploration; External memory
   verification; Distributed verification; State space partitioning; State
   explosion problem
ID MODEL CHECKING; VERIFICATION
AB We describe a dynamic partitioning scheme useable by explicit state space exploration techniques that divide the state space into partitions, such as many external memory and distributed model checking algorithms. The goal of the scheme is to reduce the number of transitions that link states belonging to different partitions, and thereby limit the amount of disk access and network communication. We report on several experiments made with our verification platform ASAP that implements the dynamic partitioning scheme proposed in this paper. The experiments demonstrate the importance of exploiting locality to reduce cross transitions and 10 operations, and using informed heuristics when choosing components to be used as a basis for partition refinement. The experiments furthermore show that the proposed approach improves on earlier techniques and significantly outperforms these when provided with access to the same amount of bounded RAM. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Evangelista, Sami] Univ Paris 13, CNRS UMR 7030, LIPN, F-93430 Villetaneuse, France.
   [Kristensen, Lars Michael] Bergen Univ Coll, Dept Comp Engn, Bergen, Norway.
C3 Universite Paris 13; Western Norway University of Applied Sciences
RP Evangelista, S (corresponding author), Univ Paris 13, CNRS UMR 7030, LIPN, F-93430 Villetaneuse, France.
EM sami.evangelista@lipn.univ-paris13.fr; lmkr@hib.no
CR [Anonymous], 1996, LNCS, DOI DOI 10.1007/3-540-60761-7
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bao T, 2005, LECT NOTES COMPUT SC, V3440, P526
   Barnat J, 2008, LECT NOTES COMPUT SC, V4963, P48, DOI 10.1007/978-3-540-78800-3_5
   BARNAT J, 2009, AUT SOFTW ENG INT C, P635, DOI DOI 10.1109/ASE.2009.32
   Barnat J, 2007, LECT NOTES COMPUT SC, V4590, P281
   Barnat J, 2006, LECT NOTES COMPUT SC, V4144, P278, DOI 10.1007/11817963_26
   Barnett J.P., 2002, Proceedings of Workshops on Growing Longleaf Pine in Containers - 1999 and 2001, P1
   Bourahla M., 2005, AICCSA 2005, P21
   Brim L, 2004, LECT NOTES COMPUT SC, V3312, P352
   Cerná I, 2003, LECT NOTES COMPUT SC, V2648, P49
   Ciardo G., 1998, INFORMS Journal on Computing, V10, P82, DOI 10.1287/ijoc.10.1.82
   COURCOUBETIS C, 1990, LNCS, V531, P233
   Couvreur JM, 1999, LECT NOTES COMPUT SC, V1708, P253
   Dill D.L., 1998, LNCS, V1427, P172
   Evangelista S, 2008, LECT NOTES COMPUT SC, V5156, P77, DOI 10.1007/978-3-540-85114-1_8
   Evangelista S, 2009, LECT NOTES COMPUT SC, V5825, P70, DOI 10.1007/978-3-642-04570-7_7
   Garavel H., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P217
   Geldenhuys J, 2004, LECT NOTES COMPUT SC, V2988, P205
   Holub V, 2007, TASE 2007: FIRST JOINT IEEE/IFIP SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P356, DOI 10.1109/TASE.2007.47
   Holzmann G.J., 1997, SPIN 1997
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Korf RE, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P650
   Lafuente A.L., 2002, SIMPLIFIED DISTRIBUT
   Lerda F., 2001, Model Checking Software. 8th International SPIN Workshop. Proceedings (Lecture Notes in Computer Science Vol.2057), P80
   Lerda F, 1999, LECT NOTES COMPUT SC, V1680, P22
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   Nicol DM, 1997, J PARALLEL DISTR COM, V47, P153, DOI 10.1006/jpdc.1997.1409
   Pelánek R, 2007, LECT NOTES COMPUT SC, V4595, P263
   Rangarajan M, 2004, LECT NOTES COMPUT SC, V2989, P267
   Stern U, 1997, LECT NOTES COMPUT SC, V1254, P256
   Valmari A., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P429
   Westergaard M, 2009, LECT NOTES COMPUT SC, V5606, P303, DOI 10.1007/978-3-642-02424-5_18
   Zhou R, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P683
NR 34
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2013
VL 78
IS 7
BP 778
EP 795
DI 10.1016/j.scico.2011.09.005
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 164PJ
UT WOS:000320421700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Acher, M
   Collet, P
   Lahire, P
   France, RB
AF Acher, Mathieu
   Collet, Philippe
   Lahire, Philippe
   France, Robert B.
TI FAMILIAR: A domain-specific language for large scale management of
   feature models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Domain-specific language; Feature model; Software product lines;
   Variability; Model management
ID VARIABILITY
AB The feature model formalism has become the de facto standard for managing variability in software product lines (SPLs). In practice, developing an SPL can involve modeling a large number of features representing different viewpoints, sub-systems or concerns of the software system. This activity is generally tedious and error-prone. In this article, we present FAMILIAR a Domain-Specific Language (DSL) that is dedicated to the large scale management of feature models and that complements existing tool support. The language provides a powerful support for separating concerns in feature modeling, through the provision of composition and decomposition operators, reasoning facilities and scripting capabilities with modularization mechanisms. We illustrate how an SPL consisting of medical imaging services can be practically managed using reusable FAMILIAR scripts that implement reasoning mechanisms. We also report on various usages and applications of FAMILIAR and its operators, to demonstrate their applicability to different domains and use for different purposes. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Acher, Mathieu] Univ Namur, PReCISE Res Ctr, Namur, Belgium.
   [Acher, Mathieu] Univ Rennes 1, IRISA, INRIA, F-35014 Rennes, France.
   [Collet, Philippe; Lahire, Philippe] Univ Nice Sophia Antipolis, Lab I3S, CNRS UMR 6070, Nice, France.
   [France, Robert B.] Colorado State Univ, Dept Comp Sci, Ft Collins, CO 80523 USA.
C3 University of Namur; Universite de Rennes; Inria; Universite Cote
   d'Azur; Centre National de la Recherche Scientifique (CNRS); Colorado
   State University
RP Acher, M (corresponding author), Univ Namur, PReCISE Res Ctr, Namur, Belgium.
EM acher@i3s.unice.fr
OI Potanin, Alex/0000-0002-4242-2725
FU FP7 Marie-Curie COFUND program
FX Dr. Acher's work was partially funded by the FP7 Marie-Curie COFUND
   program. The authors thank Foudil Bendjabeur and Aleksandar Jaksic for
   their work with FAMILIAR.
CR Acher Mathieu, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P424, DOI 10.1109/ASE.2011.6100089
   Acher Mathieu, 2009, Software Language Engineering. Second International Conference, SLE 2009. Revised Selected Papers, P62
   Acher M, 2012, P 11 ANN INT C ASP O, P1, DOI [10.1145/2162049.2162051, DOI 10.1145/2162049.2162051]
   ACHER M., 2012, P 6 INT WORKSH VAR M, P45, DOI DOI 10.1145/2110147.2110153
   Acher M., 2011, 26 INT S APPL COMP S, P1333
   Acher M., 2012, LNCS IN PRESS
   Acher M, 2012, SOFTWARE QUAL J, V20, P689, DOI 10.1007/s11219-011-9170-7
   Acher M, 2011, 2011 16TH IEEE INTERNATIONAL CONFERENCE ON ENGINEERING OF COMPLEX COMPUTER SYSTEMS (ICECCS), P77, DOI 10.1109/ICECCS.2011.15
   Acher M, 2011, LECT NOTES COMPUT SC, V6903, P220, DOI 10.1007/978-3-642-23798-0_25
   Acher M, 2010, LECT NOTES COMPUT SC, V6138, P3, DOI 10.1007/978-3-642-13595-8_3
   Alves V, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P67, DOI 10.1109/SPLC.2008.18
   Andersen N., 2012, P 16 INT SOFTWARE PR, V1, P106, DOI DOI 10.1145/2362536
   [Anonymous], 2006, PURE VARIANTS
   [Anonymous], 2010, FAMILIAR FEATURE MOD
   [Anonymous], VAMOS 11
   [Anonymous], [No title captured]
   [Anonymous], SPLC INT C SOFTW PRO
   Apel S, 2009, J OBJECT TECHNOL, V8, P49, DOI 10.5381/jot.2009.8.5.c5
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D., 2006, MANAGING VARIABILITY, P1
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Bosch J, 2010, IEEE SOFTWARE, V27, P29, DOI 10.1109/MS.2010.32
   Botterweck G., 2009, P 3 INT WORKSH VAR M, V29, P165
   Chen LP, 2011, INFORM SOFTWARE TECH, V53, P344, DOI 10.1016/j.infsof.2010.12.006
   Classen A, 2008, LECT NOTES COMPUT SC, V4961, P16, DOI 10.1007/978-3-540-78743-3_2
   Classen A, 2011, SCI COMPUT PROGRAM, V76, P1130, DOI 10.1016/j.scico.2010.10.005
   Czarnecki K., 2005, Software Process Improvement and Practice, V10, P143, DOI 10.1002/spip.225
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3566, P326
   Czarnecki K, 2005, LECT NOTES COMPUT SC, V3676, P422
   Czarnecki K, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P23, DOI 10.1109/SPLINE.2007.24
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   Dhungana D., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P120, DOI 10.1109/SPLC.2011.22
   Dhungana D, 2010, J SYST SOFTWARE, V83, P1108, DOI 10.1016/j.jss.2010.02.018
   Dumitru H, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P181, DOI 10.1145/1985793.1985819
   Eclipse, 2009, XTEXT
   Fei Cao, 2003, International Conference on Software Engineering Research and Practice - SERP'03, P944
   Fowler M., 2010, Domain-specific languages
   Hartmann H, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P12, DOI 10.1109/SPLC.2008.15
   Hartmann Herman., 2009, Proceedings of the 13th International Software Product Line Conference, P191
   Haslinger E. N., 2011, 2011 18th Working Conference on Reverse Engineering, P308, DOI 10.1109/WCRE.2011.45
   Heidenreich F, 2010, LECT NOTES COMPUT SC, V6210, P69
   Hubaux A., 2011, SOFTWARE SYSTEMS MOD, P1
   Hubaux A., ACM COMPUTI IN PRESS
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kang Kyo C, 1990, Technical Report
   Kosar T, 2012, EMPIR SOFTW ENG, V17, P276, DOI 10.1007/s10664-011-9172-x
   Krueger CW, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P353, DOI 10.1109/SPLC.2008.33
   Lopez-Herrejon RE, 2010, LECT NOTES COMPUT SC, V6138, P217, DOI 10.1007/978-3-642-13595-8_18
   Lora-Michiels A., 2010, VAMOS 10, P147
   Mendonca M., 2009, P 24 ACM SIGPLAN C C, P761, DOI [10.1145/1639950.1640002, DOI 10.1145/1639950.1640002]
   Mendonca M, 2010, SCI COMPUT PROGRAM, V75, P311, DOI 10.1016/j.scico.2009.12.004
   Mendonca M, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P13
   Mendonca Marcilio, 2009, SPLC' 09, P231
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Metzger A, 2007, INT REQUIR ENG CONF, P243, DOI 10.1109/RE.2007.61
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Pohl Richard, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P313, DOI 10.1109/ASE.2011.6100068
   Reiser MO, 2007, REQUIR ENG, V12, P57, DOI 10.1007/s00766-007-0046-0
   Rosenmuller M, 2011, P 5 INT WORKSH VAR M, P11, DOI DOI 10.1145/1944892.1944894
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Seinturier L, 2012, SOFTWARE PRACT EXPER, V42, P559, DOI 10.1002/spe.1077
   She S, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P461, DOI 10.1145/1985793.1985856
   Sun YJ, 2008, SENSYS'08: PROCEEDINGS OF THE 6TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P1, DOI 10.1145/1460412.1460414
   Svahnberg M, 2005, SOFTWARE PRACT EXPER, V35, P705, DOI 10.1002/spe.652
   Thüm T, 2009, PROC INT CONF SOFTW, P254, DOI 10.1109/ICSE.2009.5070526
   Thum T., 2011, Proceedings of the 2011 15th International Software Product Line Conference (SPLC 2011), P191, DOI 10.1109/SPLC.2011.53
   Thum T., SCI COMPUTE IN PRESS
   Trinidad P, 2008, J SYST SOFTWARE, V81, P883, DOI 10.1016/j.jss.2007.10.030
   Trinidad P, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P359, DOI 10.1109/SPLC.2008.50
   van der Storm T, 2004, LECT NOTES COMPUT SC, V3107, P157
   Van Deursen A, 1998, J SOFTW MAINT-RES PR, V10, P75, DOI 10.1002/(SICI)1096-908X(199803/04)10:2<75::AID-SMR168>3.0.CO;2-5
   van Ommering R, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P255, DOI 10.1109/ICSE.2002.1007973
   Voelter M, 2007, SPLC 2007: 11TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P233, DOI 10.1109/SPLINE.2007.23
   Watt D.A., 1990, PROGRAMMING LANGUAGE
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Zaid LA, 2010, LECT NOTES COMPUT SC, V6412, P233, DOI 10.1007/978-3-642-16373-9_17
   Ziadi Tewfik., 2006, SOFTWARE PRODUCT LIN, P557, DOI DOI 10.1007/978-3-540-33253-4_15
   [No title captured]
NR 79
TC 112
Z9 119
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 657
EP 681
DI 10.1016/j.scico.2012.12.004
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Déharbe, D
AF Deharbe, David
TI Integration of SMT-solvers in B and Event-B development environments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd International Conference on Abstract State Machines (ASM), Alloy, B
   and Z
CY FEB 22-25, 2010
CL Orford, CANADA
SP Univ Sherbrooke, Univ Paris Est Creteil
DE Formal methods; Event-B; SMT-solving
ID SATISFIABILITY MODULO THEORIES; DECISION PROCEDURES; LOGIC
AB Software development in B and Event-B generates proof obligations that have to be discharged using theorem provers. The cost of such developments depends directly on the degree of automation and efficiency of theorem proving techniques for the logics in which these lemmas are expressed. This paper presents and formalizes an approach to transform a class of proof obligations essentially similar to those generated in the Rodin platform into the input language of a category of automatic theorem provers known as SMT-solvers. The work presented in the paper handles proof obligations with Booleans, integer arithmetics, basic sets and relations and has been implemented as a plug-in for Rodin. (c) 2011 Elsevier B.V. All rights reserved.
C1 Univ Fed Rio Grande do Norte, Dept Informat & Matemat Aplicada, BR-59072970 Natal, RN, Brazil.
C3 Universidade Federal do Rio Grande do Norte
RP Déharbe, D (corresponding author), Univ Fed Rio Grande do Norte, Dept Informat & Matemat Aplicada, BR-59072970 Natal, RN, Brazil.
EM david.deharbe@pq.cnpq.br
RI Deharbe, David/C-8531-2009
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 2010, SMT LIB STANDARD VER
   [Anonymous], 2006, YICES SMT SOLVER
   B-Core Ltd, 2002, B TOOLK
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Bobot F., 2008, SMT 2008
   Bofill M, 2008, LECT NOTES COMPUT SC, V5123, P294
   Bouton T, 2009, LECT NOTES ARTIF INT, V5663, P151, DOI 10.1007/978-3-642-02959-2_12
   Bruun H., 1998, 19989 U LEIC
   ClearSy, 2009, AT B US MAN VERS 4 0
   Coleman J., 2005, 5 EUR DEP COMP C EDC, P23
   Couchot J.-F., 2003, J BRAZILIAN COMPUTER, V9, P17
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Moura L, 2007, LECT NOTES COMPUT SC, V4590, P20
   de Moura L, 2009, LECT NOTES COMPUT SC, V5902, P23, DOI 10.1007/978-3-642-10452-7_3
   Déharbe D, 2006, LECT NOTES COMPUT SC, V4281, P366
   Déharbe D, 2010, LECT NOTES COMPUT SC, V5977, P217, DOI 10.1007/978-3-642-11811-1_17
   El Ghazi A.A., 2010, AFM10 AUTOMATED FORM
   Fontaine P, 2009, LECT NOTES ARTIF INT, V5749, P263, DOI 10.1007/978-3-642-04222-5_16
   HURLIN C, 2007, P IS WORKSH 2007 BRE, P2
   Kroning D., 2009, INF P 7 INT WORKSH S
   LEUSCHEL M, 2008, J SOFTWARE TOOLS TEC, V10, P185
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Nelson G., 1979, ACM Transactions on Programming Languages and Systems, V1, P245, DOI 10.1145/357073.357079
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3576, P321
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plagge D., 2009, AUTOMATED FORMAL MET, P16
   RANISE S., 2006, The SMT-LIB standard: Version 1.2
   Spivey J.M., 1992, PRENTICE HALL INT SE
   The Eclipse Foundation, 2009, ECL SDK
NR 31
TC 11
Z9 11
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2013
VL 78
IS 3
SI SI
BP 310
EP 326
DI 10.1016/j.scico.2011.03.007
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 091PP
UT WOS:000315062600005
OA Bronze
DA 2024-07-18
ER

PT J
AU Piveta, EK
   Moreira, A
   Pimenta, MS
   Araújo, J
   Guerreiro, P
   Price, RT
AF Piveta, Eduardo Kessler
   Moreira, Ana
   Pimenta, Marcelo Soares
   Araujo, Joao
   Guerreiro, Pedro
   Tom Price, R.
TI An empirical study of aspect-oriented metrics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Metrics; Aspect-oriented software development; Empirical evaluation;
   AspectJ
ID DESIGN; SOFTWARE; JAVA
AB Metrics for aspect-oriented software have been proposed and used to investigate the benefits and the disadvantages of crosscutting concerns modularisation. Some of these metrics have not been rigorously defined nor analytically evaluated. Also, there are few empirical data showing typical values of these metrics in aspect-oriented software. In this paper, we provide rigorous definitions, usage guidelines, analytical evaluation, and empirical data from ten open source projects, determining the value of six metrics for aspect-oriented software (lines of code, weighted operations in module, depth of inheritance tree, number of children, crosscutting degree of an aspect, and coupling on advice execution). We discuss how each of these metrics can be used to identify shortcomings in existing aspect-oriented software. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Piveta, Eduardo Kessler] Univ Fed Santa Maria UFSM, Dept Eletronica & Comp, BR-97105900 Santa Maria, RS, Brazil.
   [Moreira, Ana; Araujo, Joao] Univ Nova Lisboa UNL, CITI FCT Dept Informat, P-2829516 Caparica, Portugal.
   [Pimenta, Marcelo Soares; Tom Price, R.] Univ Fed Rio Grande Sul UFRGS, Inst Informat, BR-91501970 Porto Alegre, RS, Brazil.
   [Guerreiro, Pedro] Univ Algarve UAlg, Dept Eng Elect & Informat, FCT, P-8005117 Faro, Portugal.
C3 Universidade Federal de Santa Maria (UFSM); Universidade Nova de Lisboa;
   Universidade Federal do Rio Grande do Sul; Universidade do Algarve
RP Piveta, EK (corresponding author), Univ Fed Santa Maria UFSM, Dept Eletronica & Comp, Av Roraima,1000,Cidade Univ, BR-97105900 Santa Maria, RS, Brazil.
EM piveta@inf.ufsm.br; amm@di.fct.unl.pt; mpimenta@inf.ufrgs.br;
   ja@di.fct.unl.pt; pjguerreiro@ualg.pt; tomprice@terra.com.br
RI Araujo, Joao/G-2108-2011; FCTUNL, CITI/G-6714-2011; Guerreiro,
   Pedro/A-7012-2010; Araujo, Joao/M-3560-2013; Moreira, Ana/F-4770-2011
OI Piveta, Eduardo/0000-0002-0092-4495; Guerreiro,
   Pedro/0000-0001-8324-8244; Araujo, Joao/0000-0001-5914-1631; Moreira,
   Ana/0000-0003-2046-2766
FU CNPq [140046/06-2]; Project CNPQ-PROSUL [490478/06-9]; Capes-Grices
   [2051-05-2]; FAPERGS [10/0470-1]; FCT MCTES
FX This work was partially supported by CNPq under grant no. 140046/06-2
   for Eduardo K. Piveta and Project CNPQ-PROSUL grant no. 490478/06-9 -
   Latin-America Research Network on Aspect-Oriented Software Development
   (Latin-AOSD). It is also supported by Capes-Grices project grant no.
   2051-05-2 - Identification of Crosscutting Concerns and Refactoring in
   Aspect-Oriented Systems, FAPERGS grant no. 10/0470-1, and FCT MCTES.
CR [Anonymous], P 11 WORK C REV ENG
   [Anonymous], 1997, Software metrics: A rigorous and practical approach
   [Anonymous], OBJECT TECHNOLOGY SE
   [Anonymous], P 1 WORKSH ASP REV E
   [Anonymous], 1995, PROFESSIONAL COMPUTI
   Bartsch M., 2007, WORKSH ASS ASP OR TE
   Bartsch M., 2006, WORKSH LINK ASP TECH
   Baxter G, 2006, ACM SIGPLAN NOTICES, V41, P397, DOI 10.1145/1167515.1167507
   Briand L., 1996, IEEE Trans. on Software Eng, V22
   Cacho N., 2006, P 5 ASP OR SOFTW DEV
   CASTOR F, 2006, P 14 SIGSOFT FSE NOV, P152
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Conejero J., 2005, UT01D9 AOSD EUR
   Elrad T., 2001, Commun. ACM, V44, P29
   Garcia A, 2006, LECT NOTES COMPUT SC, V3880, P36
   Greenwood P., 2006, T ASPECT ORIENTED SO
   Hannemann J, 2002, ACM SIGPLAN NOTICES, V37, P161, DOI 10.1145/583854.582436
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   Martin R., 1994, WORKSH PRAGM THEOR D
   Monteiro M., 2005, P 4 INT C ASP OR SOF
   Piveta E., 2007, P 19 INT C SOFTW ENG
   Piveta E., 2005, BRAZ S SOFTW ENG SBE
   Piveta EK, 2006, J UNIVERS COMPUT SCI, V12, P811
   RODGERS JL, 1988, AM STAT, V42, P59, DOI 10.2307/2685263
   Rubbo FB, 2008, J UNIVERS COMPUT SCI, V14, P3534
   Rubira C., 2005, P ECOOP 2005 WORKSH
   Sant'anna C., 2003, P 17 BRAZ S SOFTW EN
   Shimazaki H., 2006, THESIS KYOTO U
   Snedecor GW, 1983, Statistical Methods, V6th
   WEYUKER EJ, 1988, IEEE T SOFTWARE ENG, V14, P1357, DOI 10.1109/32.6178
   Zakaria A. A., 2003, 3 INT WORKSH ASP OR
   Zhao J., 2002, SE13625 IPSJ
   Zhao J., 2004, 7 INT C FUND APPR SO
   Zhao J., 2004, 10 INT SOFTW METR S
NR 35
TC 7
Z9 8
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2012
VL 78
IS 1
BP 117
EP 144
DI 10.1016/j.scico.2012.02.003
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 024RD
UT WOS:000310125400007
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Navabi, A
   Zhang, XY
   Jagannathan, S
AF Navabi, Armand
   Zhang, Xiangyu
   Jagannathan, Suresh
TI Dependence analysis for safe futures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrent programming; Parallel programming; Safe futures; Exception
   handling
AB A future is a well-known programming construct used to introduce concurrency into sequential programs. Computations annotated as futures are executed asynchronously and run concurrently with their continuations. Typically, futures are not transparent annotations: a program with futures need not produce the same result as the sequential program from which it was derived. Safe futures guarantee that a future-annotated program produces the same result as its sequential counterpart. The safety property is trivially satisfied in languages without side-effects or exceptions. In the presence of mutable references and language abstractions, such as exceptions, which permit the expression of non-local control-flow, ensuring safety requires that the future-annotated program adhere to control and data dependences imposed by the program's sequential counterpart. In this paper, we present a formulation of safe futures for a higher-order functional language with first-class references and exceptions. Safety can be guaranteed at runtime by blocking a continuation from performing a potentially unsafe action before its futures have completed. To enable greater concurrency, we develop a static analysis and instrumentation and formalize the runtime behavior for instrumented programs that allows a continuation to proceed before its futures complete, as long as its actions are determined to be safe. A continuation's action is safe if it is not control or data dependent on actions that may subsequently be performed by its futures. Published by Elsevier B.V.
C1 [Navabi, Armand; Zhang, Xiangyu; Jagannathan, Suresh] Purdue Univ, Dept Comp Sci, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Navabi, A (corresponding author), Purdue Univ, Dept Comp Sci, 305 N Univ St, W Lafayette, IN 47907 USA.
EM anavabi@cs.purdue.edu; xyzhang@cs.purdue.edu; suresh@cs.purdue.edu
RI Zhang, Xiangyu/H-9255-2013
OI Zhang, Xiangyu/0000-0003-0876-6783
FU National Science Foundation [CSR 0509387, CCF 0701832]; Intel
   Corporation
FX This work is supported in part by the National Science Foundation under
   grants CSR 0509387 and CCF 0701832, and by a grant from the Intel
   Corporation.
CR Allan E., 2008, FORTRESS LANGUAGE SP
   [Anonymous], 1999, J FUNCT PROGRAM, DOI [DOI 10.1017/S0956796899003329, 10.1017/S0956796899003329]
   Berger ED, 2009, ACM SIGPLAN NOTICES, V44, P81, DOI 10.1145/1639949.1640096
   Bocchino RL, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P97
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Danaher JS, 2006, SCI COMPUT PROGRAM, V63, P147, DOI 10.1016/j.scico.2006.05.008
   de Boer FS, 2007, LECT NOTES COMPUT SC, V4421, P316
   Feret J, 2002, LECT NOTES COMPUT SC, V2305, P314
   Flanagan C, 2004, ACM SIGPLAN NOTICES, V39, P256, DOI 10.1145/982962.964023
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/640136.604176
   HALSTEAD RH, 1985, ACM T PROGR LANG SYS, V7, P501, DOI 10.1145/4472.4478
   Harris T, 2003, ACM SIGPLAN NOTICES, V38, P388, DOI 10.1145/949343.949340
   Herlihy M, 2003, P 22 ANN S PRINCIPLE, P92
   Jones NeilD., 1981, P 8 C AUTOMATA LANGU, P114, DOI DOI 10.1007/3-540-10843-2_10
   JSR166, 2004, JSR166 CONCURRENCY U
   KRANZ DA, 1989, SIGPLAN NOTICES, V24, P81, DOI 10.1145/74818.74825
   LISKOV B, 1988, SIGPLAN NOTICES, V23, P260
   Might M., 2009, P 2009 WORKSH SCHEM
   MOHR E, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P185, DOI 10.1145/91556.91631
   Navabi A., 2008, 08027 CSD TR PURD U
   Navabi A, 2008, PPOPP'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PRINCIPLES AND PRACTICE OF PARALLEL PROGRAMMING, P23, DOI 10.1145/1345206.1345212
   PALSBERG J, 1995, ACM T PROGR LANG SYS, V17, P47, DOI 10.1145/200994.201001
   Pratikakis P, 2004, ACM SIGPLAN NOTICES, V39, P206, DOI 10.1145/1035292.1028994
   Rajwar R, 2002, ACM SIGPLAN NOTICES, V37, P5, DOI 10.1145/605432.605399
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   Welc A, 2004, LECT NOTES COMPUT SC, V3086, P519
   Welc A., 2005, P 20 ANN ACM SIGPLAN, P435
   Zhang L., 2007, Proceedings of the 5th international symposium on Principles and practice of programming in Java, PPPJ '07, P175
NR 29
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2012
VL 77
IS 6
SI SI
BP 707
EP 726
DI 10.1016/j.scico.2010.09.002
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 931AO
UT WOS:000303186500004
OA Bronze
DA 2024-07-18
ER

PT J
AU Myreen, MO
   Gordon, MJC
AF Myreen, Magnus O.
   Gordon, Michael J. C.
TI Function extraction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Proof automation; Program verification; Theorem proving
ID VERIFICATION; CODE
AB Low-level imperative programming languages typically have complex operational semantics (e.g. derived from an underlying processor architecture). In this paper, we describe an automatic method for extracting recursive functions from such low-level programs. The functions are derived by formal deduction from the semantics of the programming language. For each function extracted, a proof of correspondence to the original program is automatically constructed. Subsequent program verification can then be clone without referring to the details of the low-level programming language semantics at all: it suffices to prove properties of the extracted function. The technique is explained for simple while programs and also for the machine code of a widely used processor. We show how heuristics can enhance the output from the function extractor/decompiler and how the technique aids implementation of a trustworthy compiler. Our tools have been implemented in the HOL4 theorem prover. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Myreen, Magnus O.; Gordon, Michael J. C.] Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
C3 University of Cambridge
RP Myreen, MO (corresponding author), Univ Cambridge, Comp Lab, Cambridge CB3 0FD, England.
EM magnus.myreen@cl.cam.ac.uk
FU EPSRC [EP/G007411/1] Funding Source: UKRI
CR [Anonymous], ACM SIGMIS DATABASE
   [Anonymous], PROJECT SOURCES FILE
   Appel Andrew W., 2001, LOGIC COMPUTER SCI
   Boyer RobertS., 1985, J AUTOM REASONING, V1, P17
   BOYER RS, 1975, J ACM, V22, P129, DOI 10.1145/321864.321875
   Boyer RS, 1996, J ACM, V43, P166, DOI 10.1145/227595.227603
   Burstall R. M., 1972, Machine intelligence 7, P23
   Cai HX, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P66, DOI 10.1145/1250734.1250743
   Chen J, 2003, ACM SIGPLAN NOTICES, V38, P208, DOI 10.1145/780822.781155
   Filliâtre JC, 2003, J FUNCT PROGRAM, V13, P709, DOI 10.1017/S095679680200446X
   Flanagan C, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/373243.360220
   Fox A, 2003, LECT NOTES COMPUT SC, V2758, P25
   Hardin D.S., 2006, INT WORKSH ACL2 THEO
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOMEIER PV, 1995, COMPUT J, V38, P131, DOI 10.1093/comjnl/38.2.131
   Katsumata S, 2001, LECT NOTES COMPUT SC, V2028, P352
   Leroy X, 2006, ACM SIGPLAN NOTICES, V41, P42, DOI 10.1145/1111320.1111042
   Liu HB, 2004, LECT NOTES COMPUT SC, V3223, P184
   Manolios P, 2003, J AUTOM REASONING, V31, P107, DOI 10.1023/B:JARS.0000009505.07087.34
   Matthews J, 2006, LECT NOTES ARTIF INT, V4246, P362, DOI 10.1007/11916277_25
   McCarthy J., 1969, Machine Intelligence, VVol. 4, P463
   McCarthy John., 1962, IFIP C, P21
   Morrisett G., 1998, POPL 98, P85, DOI DOI 10.1145/268946.268954
   Myreen M.O., 2008, BRAZ S FORM METH SBM
   Myreen M.O., 2009, COMPILER CONSTRUCTIO
   Myreen MO, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P107, DOI 10.1145/1706299.1706313
   Myreen MO, 2009, LECT NOTES COMPUT SC, V5674, P359, DOI 10.1007/978-3-642-03359-9_25
   MYREEN MO, 2008, FORMAL METHODS COMPU
   NECULA GC, 2000, PROGRAMMING LANGUAGE
   Ni Z., 2007, LNCS, P189
   Ni ZZ, 2006, ACM SIGPLAN NOTICES, V41, P320, DOI 10.1145/1111320.1111066
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Reynolds J., 2002, LOGIC COMPUTER SCI
   Rustan K, 2005, INFORM PROCESS LETT, V93, P281, DOI 10.1016/j.ipl.2004.10.015
   Sarkar S, 2009, ACM SIGPLAN NOTICES, V44, P379, DOI 10.1145/1594834.1480929
   Slind K., 2008, LNCS
   Strother Moore J., 1998, Formal Methods in Computer-Aided Design. Second International Conference, FMCAD '98. Proceedings, P334
   Tuch Harvey, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P97, DOI 10.1145/1190216.1190234
   Tuerk T, 2009, LECT NOTES COMPUT SC, V5674, P469, DOI 10.1007/978-3-642-03359-9_32
   Weber T, 2004, LECT NOTES COMPUT SC, V3210, P250
   Winwood S, 2009, LECT NOTES COMPUT SC, V5674, P500, DOI 10.1007/978-3-642-03359-9_34
   Yang HS, 2002, LECT NOTES COMPUT SC, V2303, P402
NR 42
TC 1
Z9 2
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2012
VL 77
IS 4
SI SI
BP 505
EP 517
DI 10.1016/j.scico.2010.10.001
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 906ER
UT WOS:000301328200005
OA Bronze
DA 2024-07-18
ER

PT J
AU Arias, TBC
   Avgeriou, P
   America, P
   Blom, K
   Bachynskyy, S
AF Arias, Trosky B. Callo
   Avgeriou, Paris
   America, Pierre
   Blom, Krelis
   Bachynskyy, Sergiy
TI A top-down strategy to reverse architecting execution views for a large
   and complex software-intensive system: An experience report
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Architecture reconstruction; Downstream software development; Execution
   views; Software-intensive systems
AB This article is an experience report about the application of a top-down strategy to use and embed an architecture reconstruction approach in the incremental software development process of the Philips MRI scanner, a representative large and complex software-intensive system. The approach is an iterative process to construct execution views without being overwhelmed by the system size and complexity. An execution view contains architectural information that describes what the software of a software-intensive system does at runtime and how it does this. The application of the strategy is illustrated with a case study, the construction of an up-to-date execution view for the start-up process of the Philips MRI scanner. The construction of this view helped the development organization to quickly reduce about 30% the start-up time of the scanner, and set up a new system benchmark for assuring the system performance through future evolution steps. The report provides detailed information about the application of the top-down strategy, including how it supports top-down analysis, communication within the development organization, and the aspects that influence the use of the top-down strategy in other contexts. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Arias, Trosky B. Callo; Avgeriou, Paris] Univ Groningen, NL-9747 AG Groningen, Netherlands.
   [America, Pierre] Philips Res, NL-5656 AE Eindhoven, Netherlands.
   [Blom, Krelis; Bachynskyy, Sergiy] Philips Healthcare, NL-5680 DA Best, Netherlands.
C3 University of Groningen; Philips; Philips Research; Philips; Philips
   Healthcare
RP Arias, TBC (corresponding author), Univ Groningen, Nijenborgh 9, NL-9747 AG Groningen, Netherlands.
EM trosky@cs.rug.nl; paris@cs.rug.nl; pierre.america@philips.com;
   krelis.blom@philips.com; sergiy.bachynskyy@philips.com
OI Avgeriou, Paris/0000-0002-7101-0754
FU Dutch Ministry of Economic Affairs
FX This work has been carried out as a part of the Darwin project at
   Philips Healthcare under the responsibilities of the Embedded Systems
   Institute. This project is partially supported by the Dutch Ministry of
   Economic Affairs under the BSIK program.
CR [Anonymous], 2010, CODE PROFILER AQTIME
   [Anonymous], 2010, BOOTCH BOOT PROC PER
   [Anonymous], 2010, ECL TEST PERF TOOLS
   [Anonymous], 2007, 42010 ISOIEC
   [Anonymous], 2000, RATIONAL UNIFIED PRO
   Arias TBC, 2009, WORK CONF REVERSE EN, P247, DOI 10.1109/WCRE.2009.37
   Arias TBC, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P1, DOI 10.1109/WICSA.2009.5290784
   Arias TBC, 2008, WORK CONF REVERSE EN, P49, DOI 10.1109/WCRE.2008.11
   Callo Arias TB, 2009, 42010 ISOIEC
   Cornelissen B, 2007, INT C PROGRAM COMPRE, P49
   Cornelissen B, 2009, IEEE T SOFTWARE ENG, V35, P684, DOI 10.1109/TSE.2009.28
   GARLAN D, 1995, IEEE T SOFTWARE ENG, V21, P269
   Jiang ZM, 2008, J SOFTW MAINT EVOL-R, V20, P249, DOI 10.1002/smr.374
   Koschke Rainer, 2009, Software Engineering. International Summer Schools ISSSE 2006-2008. Revised Tutorial Lectures, P140, DOI 10.1007/978-3-540-95888-8_6
   Kuhn A, 2006, PROC IEEE INT CONF S, P320
   Microsoft Corporation, 2010, SYS SUIT
   Microsoft Corporation, 2010, FAST BOOT FAST RES D
   Muller G., 2004, CONCEPTUAL VIEW, P81
   Murphy GC, 2001, IEEE T SOFTWARE ENG, V27, P364, DOI 10.1109/32.917525
   Philips Healthcare, 2010, MAGN RES IM
   Riva C, 2011, J SOFTW MAINT EVOL-R, V23, P3, DOI 10.1002/smr.411
   Sangal N, 2005, ACM SIGPLAN NOTICES, V40, P167, DOI 10.1145/1103845.1094824
   van de Laar P, 2007, THIRD INTERNATIONAL IEEE WORKSHOP ON SOFTWARE EVOLVABILITY, PROCEEDINGS, P48, DOI 10.1109/SE.2007.7
   van Deursen A., 2002, Applied Computing Review, V10, P4, DOI 10.1145/568235.568236
   van Deursen A, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P122, DOI 10.1109/WICSA.2004.1310696
   YourKit, 2010, NET JAV PROF
NR 26
TC 6
Z9 9
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2011
VL 76
IS 12
SI SI
BP 1098
EP 1112
DI 10.1016/j.scico.2010.11.008
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 793FX
UT WOS:000292806900003
OA Green Published
DA 2024-07-18
ER

PT J
AU Carlson, J
   Lisper, B
AF Carlson, Jan
   Lisper, Bjorn
TI A resource-efficient event algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Event detection; Event notification; Embedded systems
ID ACTIVE DATABASES; PUBLISH/SUBSCRIBE; SPECIFICATION; LANGUAGE
AB Events play many roles in computer systems ranging from hardware interrupts over event-based software architecture to monitoring and managing of complex systems In many applications however individual event occurrences are not the main point of concern but rather the occurrences of certain event patterns Such event patterns can be defined by means of an event algebra i e expressions representing the patterns of interest are built from simple events and operators such as disjunction sequence etc
   We propose a novel event algebra with intuitive operators (a claim which is supported by a number of algebraic properties) We also present an efficient detection algorithm that correctly detects any expression with bounded memory which makes this algebra particularly suitable for resource-constrained applications such as embedded systems (C) 2010 Elsevier B V All rights reserved
C1 [Carlson, Jan; Lisper, Bjorn] Malardalen Univ, Sch Innovat Design & Engn, Vasteras, Sweden.
C3 Malardalen University
RP Carlson, J (corresponding author), Malardalen Univ, Sch Innovat Design & Engn, Vasteras, Sweden.
RI Carlson, Jan/D-4717-2012
OI Carlson, Jan/0000-0002-8461-0230
FU Swedish National Graduate School in Computer Science (CUGS); Swedish
   Foundation for Strategic Research via the strategic research centre
   PROGRESS
FX This work was partially funded by the Swedish National Graduate School
   in Computer Science (CUGS) and the Swedish Foundation for Strategic
   Research via the strategic research centre PROGRESS
CR Adaikkalavan R, 2006, DATA KNOWL ENG, V59, P139, DOI 10.1016/j.datak.2005.07.009
   Allen J. E., 1994, Journal of Logic and Computation, V4, P531, DOI 10.1093/logcom/4.5.531
   Bernstein PA, 1996, COMMUN ACM, V39, P86, DOI 10.1145/230798.230809
   CARLSON J, 2008, 16 INT C REAL TIME N, P77
   CARLSON J, 2009, EVENT ALGEBRA VDM VE
   CARLSON J, 2007, THESIS MALARDALEN U
   CHAKRAVARTHY S, 1994, DATA KNOWL ENG, V14, P1, DOI 10.1016/0169-023X(94)90006-X
   CHAKRAVARTHY S, 1994, INT C VERY LARGE DAT, P606
   DEMERS A, 2005, TECH REP CORNELL U J
   Demers A, 2006, LECT NOTES COMPUT SC, V3896, P627
   Dousson C, 1996, ANN TELECOMMUN, V51, P501
   Eugster PT, 2003, ACM COMPUT SURV, V35, P114, DOI 10.1145/857076.857078
   GALTON A, 2002, P DATABASE EXPERT SY, V2453
   GATZIU S, 1993, P INT WORKSHOP RULES
   GATZIU S, 1994, RIDE ADS, P2
   GEHARN N, 1993, ADV DATABASE SYSTEMS, V759
   GRUBER R, 1999, P IEEE INT C DISTNBU
   HINZE A, 2002, INT S TEMPORAL REPRE
   KOPETZEVENTTRIG.H, 1991, RES REPORT TECHNISCH
   KOWALSKI R, 1986, NEW GENERAT COMPUT, V4, P67, DOI 10.1007/BF03037383
   LIEBIG C, 1999, GI WORKSHOP MULTICAS
   Liu GT, 1998, FOURTH IEEE REAL-TIME TECHNOLOGY AND APPLICATIONS SYMPOSIUM - PROCEEDINGS, P199, DOI 10.1109/RTTAS.1998.683204
   MELLIN J, 2004, THESIS DEP COMPUTER
   MOK A, 1997, P THIRD IEEE WASHING, V97, P252
   PIETZUCH PR, 2004, THESIS U CAMBRIDGE F
   Sánchez C, 2005, LECT NOTES COMPUT SC, V3731, P529
   Sánchez C, 2005, LECT NOTES COMPUT SC, V3629, P364
NR 27
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2010
VL 75
IS 12
BP 1215
EP 1234
DI 10.1016/j.scico.2010.06.010
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 682WM
UT WOS:000284433700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Logozzo, F
   Fähndrich, M
AF Logozzo, Francesco
   Faehndrich, Manuel
TI Pentagons: A weakly relational abstract domain for the efficient
   validation of array accesses
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd Annual ACM Symposium on Applied Computing
CY MAR 16-20, 2008
CL Fortaleza, BRAZIL
SP ACM SIGAC, Univ Fortaleza, Federal Univ Ceara
DE Abstract domains; Abstract interpretation; Bounds checking; Numerical
   domains; Static analysis; .NET framework
AB We introduce Pentagons (Pntg), a weakly relational numerical abstract domain useful for the validation of array accesses in byte-code and intermediate languages (IL). This abstract domain captures properties of the form of x epsilon [a, b] boolean AND x < y. It is more precise than the well known Interval domain, but it is less precise than the Octagon domain.
   The goal of Pntg is to be a lightweight numerical domain useful for adaptive static analysis, where Pntg is used to quickly prove the safety of most array accesses, restricting the use of more precise (but also more expensive) domains to only a small fraction of the code.
   We implemented the Pntg abstract domain in Clousot, a generic abstract interpreter for.NET assemblies. Using it, we were able to validate 83% of array accesses in the core runtime library mscorlib.d11 in a little bit more than 3 minutes. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Logozzo, Francesco; Faehndrich, Manuel] Microsoft Res, Redmond, WA USA.
C3 Microsoft
RP Logozzo, F (corresponding author), Microsoft Res, Redmond, WA USA.
EM logozzo@microsoft.com; maf@microsoft.com
CR ALLAMIGEON X, 2006, SAS 06
   ALUR R, 1990, ICALP 90
   [Anonymous], 1999, NATO ASI SERIES F
   [Anonymous], ECMA335
   Bagnara R, 2005, LECT NOTES COMPUT SC, V3672, P3
   BANTERLE F, 2007, SAS 07
   BARNETT M, CODECONTRACTS FOR NE
   BLANCHET B, 2003, PLDI 03
   BODIK R, 2000, PLDI 00
   Clarisó R, 2007, SCI COMPUT PROGRAM, V64, P115, DOI 10.1016/j.scico.2006.03.009
   Clarke EM, 1999, MODEL CHECKING, P1
   COURBOT A, 2006, CARDIS 06
   COUSOT P, 1978, POPL 78
   Cousot P., 2003, VERIFICATION THEORY
   Cousot P., 1977, POPL 77
   DOR N, 2003, PLDI 03
   *ECMA INT, 2006, ECMA355
   GAUBERT S, 2007, ESOP 07
   Halbwachs N, 2006, FORM METHOD SYST DES, V29, P79, DOI 10.1007/s10703-006-0013-2
   KARR M, 1976, ACTA INFORM, V6, P133, DOI 10.1007/BF00268497
   KILDALL CA, 1973, POPL 73
   LAROCHELLE D, 2001, 2001 USENIX SEC S AU
   LAVIRON V, 2009, VMCAI 09
   LOGOZZO F, 2008, LNCS
   Logozzo Francesco., 2007, VMCAI 07
   Mine A., 2004, Domaines numeriques abstraits faiblement relationnels
   MINE A, 2001, PADO 01
   MINE A, 2002, SAS 02
   MINE A, 2001, WCRE 2001
   NAVAS J, 2007, ICLP 07
   POPEEA C, 2008, PEPM 08
   REVESZ PZ, 2007, VMCAI 07
   SANKARANARAYANA.S, 2007, SAS 07
   Sankaranarayanan S, 2005, LECT NOTES COMPUT SC, V3385, P25
   SIMON A, 2002, LOPSTR 02
   VENET A, 2002, SAS 02
   VENET A, 2004, PLDI 04
   XI H, 1998, PLDI 98
NR 38
TC 17
Z9 18
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2010
VL 75
IS 9
SI SI
BP 796
EP 807
DI 10.1016/j.scico.2009.04.004
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 627NG
UT WOS:000280045900005
DA 2024-07-18
ER

PT J
AU Scott, E
   Johnstone, A
AF Scott, Elizabeth
   Johnstone, Adrian
TI Recognition is not parsing - SPPF-style parsing from cubic recognisers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th Workshop on Language Descriptions, Tools and Application
CY MAR 25, 2007
CL Braga, PORTUGAL
SP ACM SIGPLAN
DE Earley parsing; RIGLR parsing; Cubic generalised parsing; Context free
   languages
ID LANGUAGES
AB In their recogniser forms, the Earley and RIGLR algorithms for testing whether a string can be derived from a grammar are worst-case cubic on general context free grammars (CFG). Earley gave an outline of a method for turning his recognisers into parsers, but it turns out that this method is incorrect. Tomita's GLR parser returns a shared packed parse forest (SPPF) representation of all derivations of a given string from a given CFG but is worst-case unbounded polynomial order. The parser version of the RIGLR algorithm constructs Tomita-style SPPFs and thus is also worst-case unbounded polynomial order. We have given a modified worst-case cubic GLR algorithm, that, for any string and any CFG, returns a binarised SPPF representation of all possible derivations of a given string. In this paper we apply similar techniques to develop worst-case cubic Earley and RIGLR parsing algorithms. (C) 2009 Elsevier E.V. All rights reserved.
C1 [Scott, Elizabeth; Johnstone, Adrian] Univ London, Dept Comp Sci, Surrey, England.
C3 University of London; Royal Holloway University London
RP Scott, E (corresponding author), Univ London, Dept Comp Sci, Surrey, England.
EM e.scott@rhul.ac.uk; a.johnstone@rhul.ac.uk
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], GEN LR PARSING
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], 1991, GEN LR PARSING
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], ELECT NOTES THEOR CO
   Aycock J, 1999, LECT NOTES COMPUT SC, V1575, P32
   Aycock J, 2001, ACTA INFORM, V37, P633, DOI 10.1007/PL00013319
   DEREMER F, 1982, ACM T PROGR LANG SYS, V4, P615, DOI 10.1145/69622.357187
   DeRemer Franklin Lewis, 1969, THESIS MIT
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Gosling J., 2005, Java Language Specification, Vthird
   Gosling James, 1996, The Java Language Specification
   GRAHAM S, 1976, ADV COMPUT, V14, P77
   Grune Dick, 2008, Parsing Techniques: A Practical Guide, V2nd, DOI [10.1007/978-0-387-68954-8, DOI 10.1007/978-0-387-68954-8]
   HOPCROFT JE, 1979, SERIES COMPUTER SCI
   Johnstone A, 2004, LECT NOTES COMPUT SC, V2985, P89
   Johnstone A, 2007, SCI COMPUT PROGRAM, V69, P76, DOI 10.1016/j.scico.2007.01.016
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   REKERS J, 1992, THESIS U AMSTERDAM
   Scott E, 2005, COMPUT J, V48, P565, DOI 10.1093/comjnl/bxh102
   Scott E, 2007, ACTA INFORM, V44, P427, DOI 10.1007/s00236-007-0054-z
   Scott E, 2006, ACM T PROGR LANG SYS, V28, P577, DOI 10.1145/1146809.1146810
   YOUNGER DH, 1967, INFORM CONTROL, V10, P189, DOI 10.1016/S0019-9958(67)80007-X
NR 24
TC 8
Z9 8
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2010
VL 75
IS 1-2
SI SI
BP 55
EP 70
DI 10.1016/j.scico.2009.07.001
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 539CK
UT WOS:000273230800005
DA 2024-07-18
ER

PT J
AU Carpineti, S
   Laneve, C
   Padovani, L
AF Carpineti, Samuele
   Laneve, Cosimo
   Padovani, Luca
TI PiDuce - A project for experimenting Web services technologies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE pi calculus; XML schema; Type system; Subschema relation; WSDL; Web
   services
AB The PiDuce project comprises a programming language and a distributed runtime environment devised for experimenting Web services technologies by relying on solid theories about process calculi and formal languages for XML documents and schemas.
   The language features values and datatypes that extend XML documents and schemas with channels, an expressive type system with subtyping, a pattern matching mechanism for deconstructing XML values, and control constructs that are based on Milner's asynchronous pi calculus. The runtime environment supports the execution of PiDuce processes over networks by relying on state-of-the-art technologies, such as XML schema and WSDL, thus enabling interoperability with existing Web services.
   We thoroughly describe the PiDuce project: the programming language and its semantics, the architecture of the distributed runtime and its implementation. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Carpineti, Samuele; Laneve, Cosimo] Univ Bologna, Dept Comp Sci, I-40127 Bologna, Italy.
   [Padovani, Luca] Univ Urbino, Informat Sci & Technol Inst, I-61029 Urbino, Italy.
C3 University of Bologna; University of Urbino
RP Laneve, C (corresponding author), Univ Bologna, Dept Comp Sci, Mura Anteo Zamboni 7, I-40127 Bologna, Italy.
EM carpinet@cs.unibo.it; laneve@cs.unibo.it; padovani@sti.uniurb.it
OI Padovani, Luca/0000-0001-9097-1297; Laneve, Cosimo/0000-0002-0052-4061
CR Abiteboul S., 2002, Proceedings of the Twenty-eighth International Conference on Very Large Data Bases, P1087
   Acciai L, 2005, LECT NOTES COMPUT SC, V3535, P47
   AMADIO RM, 1993, ACM T PROGR LANG SYS, V15, P575, DOI 10.1145/155183.155231
   Andrews Tony., 2003, Business process execution language for web services
   BENZAKEN V, 2003, P 8 ACM SIGPLAN INT, P51
   Bhargavan K, 2003, LECT NOTES COMPUT SC, V3188, P197
   BOAG S, 2006, XQUERY 1 0 XML QUERY
   Brandt M., 1998, Fundamenta Informaticae, V33, P309
   Brown Allen, 2005, LNCS
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   Carpineti S, 2006, LECT NOTES COMPUT SC, V3924, P197
   Carpineti S, 2005, ACSD2005: Fifth International Conference on Application of Concurrency to System Design, Proceedings, P202, DOI 10.1109/ACSD.2005.6
   CASTAGNA G, 2005, 20 IEEE S LOG COMP S
   Clark J., 1999, XML Path Language (XPath) Version 1.0
   Comon H., 1997, Tree automata techniques and applications
   Conchon S., 1999, First International Symposium on Agent Systems and Applications/Third International Symposium on (Cat No.PR00340), P22, DOI 10.1109/ASAMA.1999.805390
   Fourgeot F, 2000, IONICS, V6, P364, DOI 10.1007/BF02374154
   Fournet C, 1998, LECT NOTES COMPUT SC, V1443, P844, DOI 10.1007/BFb0055107
   FRISCH A, 2004, ICALP
   Gardner P, 2005, THEOR COMPUT SCI, V342, P104, DOI 10.1016/j.tcs.2005.06.006
   Gardner P, 2007, INFORM COMPUT, V205, P1526, DOI 10.1016/j.ic.2007.01.006
   GIACALONE A, 1989, INT J PARALLEL PROG, V18, P121, DOI 10.1007/BF01491213
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Laneve C, 2005, LECT NOTES COMPUT SC, V3441, P282
   *MICR CORP, BIZT SERV
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Phillips A, 2004, LECT NOTES COMPUT SC, V2986, P155
   PIERCE BC, 1996, LOGIC COMPUTER SCI, V6
   Sewell P, 1999, LECT NOTES COMPUT SC, V1686, P1
   Thatte S., 2001, XLANG WEB SERVICES B
   Vansummeren S, 2006, ACM T PROGR LANG SYS, V28, P389, DOI 10.1145/1133651.1133652
   *W3C XML SCHEM WOR, 2004, XML SCHEM
   *W3C XML SCHEM WOR, 2004, XML SCHEM 2
   *W3C XML SCHEM WOR, 2004, XML SCHEM 1
   *WEB SERV ADDR WOR, 2004, WEB SERV ADDR WS ADD
   *WEB SERV DESCR WO, 2001, WEB SERV DESCR LANG
   *WEB SERV DESCR WO, 2005, WEB SERV DE IN PRESS
   *WEB SERV DESCR WO, 2005, WEB SERV 1 IN PRESS
NR 39
TC 9
Z9 9
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 15
PY 2009
VL 74
IS 10
BP 777
EP 811
DI 10.1016/j.scico.2009.03.002
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 482WF
UT WOS:000268920000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU De Nicola, R
   Gorla, D
   Pugliese, R
AF De Nicola, Rocco
   Gorla, Daniele
   Pugliese, Rosario
TI Global computing in a dynamic network of tuple spaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Coordination Models and Languages
   (COORDINATION 2005)
CY APR 20-23, 2005
CL Univ Namur, Inst Informat, Namur, BELGIUM
HO Univ Namur, Inst Informat
DE global computing; formal methods; observational equivalence; distributed
   algorithms; program verification
ID CALCULUS; SYSTEMS; AGENTS; CONSENSUS; KLAIM
AB We present TKLAIM (Topological KLAIM), a process description language that retains the main features of KLAIM (process distribution and mobility, remote and asynchronous communication through distributed data spaces), but extends it with flew constructs to flexibly model the interconnection structure underlying a network and its evolution in time. We show how TKLAIM can be used to model a number of interesting distributed applications and how systems correctness can be guaranteed, also in the presence of failures, by exploiting observational equivalences to Study the relationships between descriptions of systems at different levels of abstraction. (c) 2006 Elsevier B.V. All tights reserved.
C1 Univ Roma La Sapienza, Dipartimento Informat, I-00161 Rome, Italy.
   Univ Florence, Dipartimento Sistemi & Informat, I-50121 Florence, Italy.
C3 Sapienza University Rome; University of Florence
RP Gorla, D (corresponding author), Univ Roma La Sapienza, Dipartimento Informat, Piazzale Aldo Moro 5, I-00161 Rome, Italy.
EM denicola@dsi.unifi.it; gorla@di.uniroma1.it; pugliese@dsi.unifi.it
RI ; Pugliese, Rosario/J-3685-2012; GORLA, DANIELE/E-5911-2017
OI De Nicola, Rocco/0000-0003-4691-7570; Pugliese,
   Rosario/0000-0002-1419-1405; GORLA, DANIELE/0000-0001-8859-9844
CR Abadi M, 1997, LECT NOTES COMPUT SC, V1243, P59
   Amadio RM, 1998, THEOR COMPUT SCI, V195, P291, DOI 10.1016/S0304-3975(97)00223-5
   ARNOLD K, 1999, JAVASPACES PRINCIPLE
   Bettini L, 2005, LECT NOTES COMPUT SC, V3465, P29
   Boreale M, 2002, INFORM COMPUT, V172, P139, DOI 10.1006/inco.2001.3080
   Boreale M, 1999, INFORM COMPUT, V149, P77, DOI 10.1006/inco.1998.2755
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   CARDELLI L, 1999, LNCS, V1603, P51
   Chandra TD, 1996, J ACM, V43, P225, DOI 10.1145/226643.226647
   CHAUDHURI S, 1993, INFORM COMPUT, V105, P132, DOI 10.1006/inco.1993.1043
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R, 2005, LECT NOTES COMPUT SC, V3454, P33
   De Nicola R., 2005, P 20 ANN ACM S APPL, P428
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   DENICOLA R, ENTCS, V128, P117
   FISCHER MJ, 1985, J ACM, V32, P374, DOI 10.1145/3149.214121
   FORD D, 1998, IBM SYST J, P454
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   FRANCALANZA A, LNCS, V3653, P368
   FUZZATI R, 2003, LNCS, V2761
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Hennessy M, 2002, INFORM COMPUT, V173, P82, DOI 10.1006/inco.2001.3089
   Levi F., 2000, P POPL 00, P352
   Omicini A, 1998, INTERNET RES, V8, P400, DOI 10.1108/10662249810241266
   Orava F., 1992, Formal Aspects of Computing, V4, P497, DOI 10.1007/BF01211473
   Parrow J., 2001, Handbook of Process Algebra, P479, DOI [10.1016/B978-044482830-9/50026-6, DOI 10.1016/B978-044482830-9/50026-6]
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   UNYAPOTH A, 2001, P POPL 01, P116
   Victor B., 1994, CAV 94, P428, DOI DOI 10.1007/3-540-58179-0_73
NR 29
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2007
VL 64
IS 2
BP 187
EP 204
DI 10.1016/j.scico.2006.06.004
PG 18
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 121IA
UT WOS:000243150100002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Papadopoulos, GA
   Stavrou, A
   Papapetrou, O
AF Papadopoulos, GA
   Stavrou, A
   Papapetrou, O
TI An implementation framework for Software Architectures based on the
   coordination paradigm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE coordination languages and models; Software Architectures; Architecture
   Description Languages; code generation
AB Software Architectures have evolved considerably over the last decade and, partly also due to the significant progress made in component-based development, have become a major subfield of Software Engineering. The associated field of Architecture Description Languages (ADLs) has also evolved considerably, providing numerous approaches to the formal specification and representation of architectural designs. In this field, one of its most interesting (and rather recent) aspects has been the exploration of different ways to map architectural specifications down to executable representations. In this paper, we present a methodology for mapping the generic features of any typical ADL to executable code. The mapping process involves the use of ACME, a generic language for describing software architectures, and the coordination paradigm. More to the point, we show how the core concepts of ACME can be mapped to equivalent executable code written in the coordination language Manifold. The result is the generation of skeletal code which captures and implements the most important system implementation properties of the translated architectural design, thus significantly assisting the programmer in filling in the rest of the needed code. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Cyprus, Dept Comp Sci, CY-1678 Nicosia, Cyprus.
C3 University of Cyprus
RP Univ Cyprus, Dept Comp Sci, 75 Kallipoleos St,POB 20537, CY-1678 Nicosia, Cyprus.
EM george@cs.ucy.ac.cy; cs98sa2@cs.ucy.ac.cy; cspapap@cs.ucy.ac.cy
RI Papadopoulos, George Angelos/JCO-4266-2023; Papadopoulos, George
   Angelos/ISU-5890-2023; Papadopoulos, George Angelos/ABA-3162-2021
OI Papadopoulos, George Angelos/0000-0001-9250-4916; Papapetrou,
   Odysseas/0000-0003-0045-1648
CR AHUJA S, 1986, COMPUTER, V19, P26, DOI 10.1109/MC.1986.1663305
   Aldrich J, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P187, DOI 10.1109/ICSE.2002.1007967
   ARBAB F, 1996, 1 INT C COORD MOD LA, V1061, P34
   Chachkov S, 2000, P IEEE RAP SYST PROT, P142
   de Paula VCC, 2002, LECT NOTES COMPUT SC, V2306, P128
   EVERAARS K, 2000, INTRO COORDINATION L
   Garlan D., 2001, WILEY ENCY SOFTWARE, P1
   GARLAN D, 1997, IBM CTR ADV STUDIES, P169
   Garlan D, 2000, FDN COMPONENT BASED, P47
   HOLZBACHER AA, 1996, LECT NOTES COMPUTER, V1061, P249
   Inverardi P, 2000, LECT NOTES COMPUT SC, V1906, P323
   LUCKHAM DC, 1995, IEEE T SOFTWARE ENG, V21, P336, DOI 10.1109/32.385971
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Medvidovic N., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P44, DOI 10.1109/ICSE.1999.840994
   MITRA S, 2000, 30 3 HAW INT C SYST, V8, P8052
   MONROE RT, 1999, THESIS CARNEGIE MELL
   Oreizy P, 1998, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.1998.671114
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   Papadopoulos GA, 1996, P INT COMP SOFTW APP, V20, P50, DOI 10.1109/CMPSAC.1996.542425
   Papadopoulos GA, 2001, FUTURE GENER COMP SY, V17, P1023, DOI 10.1016/S0167-739X(01)00043-7
   PAPADOUPOULOS GA, 1998, COORDINATION PARALLE, V24, P1107
   SCHMERL B, 2001, XACME CMU ACME EXTEN
   VESTAL S, 1998, METAH USERS MANUAL V
NR 23
TC 5
Z9 9
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2006
VL 60
IS 1
BP 27
EP 67
DI 10.1016/j.scico.2005.06.002
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 008MV
UT WOS:000235045800002
DA 2024-07-18
ER

PT J
AU Giannini, P
   Sangiorgi, D
   Valente, A
AF Giannini, P
   Sangiorgi, D
   Valente, A
TI Safe Ambients: Abstract machine and distributed implementation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Safe Ambients; abstract machine; proof of correctness; distributed
   implementation
AB The abstract machine PAN for a distributed implementation of an ambient calculus is presented. PAN is different from, and simpler than, previous implementations of ambient-like calculi, mainly because: the underlying calculus is typed Safe Ambients (SA) rather than the untyped Ambient calculus and therefore does not present certain forms of interferences among processes (the grave interferences). In PAN the logical structure of an ambient system and its physical distribution are separated. A translation from SA terms to PAN terms is defined. The correctness of such a translation, which asserts that an SA term and its translation exhibit the same observational behavior, is proved. Moreover, a description of a distributed implementation of the abstract machine in Java is given. (c) 2005 Published by Elsevier B.V.
C1 Univ Bologna, Dipartimento Sci Informaz, I-40126 Bologna, Italy.
   Univ Piemonte Orientale, Dipartimento Informat, I-15100 Alessandria, Italy.
   Aalborg Univ, Dept Software & Media Technol, DK-6700 Esbjerg, Denmark.
C3 University of Bologna; University of Eastern Piedmont Amedeo Avogadro;
   Aalborg University
RP Univ Bologna, Dipartimento Sci Informaz, Mura Anteo Zamboni 7, I-40126 Bologna, Italy.
EM giannini@mfn.unipmn.it; Davide.Sangiorgi@cs.unibo.it; av@cs.aue.auc.dk
RI ; Valente, Andrea/A-3863-2016
OI Giannini, Paola/0000-0003-2239-9529; Valente, Andrea/0000-0002-6295-9511
CR Bugliesi M, 2001, ACM SIGPLAN NOTICES, V36, P222, DOI 10.1145/373243.360223
   Bugliesi M., 2001, LNCS, V2215, P38
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CARDELLI L, 1997, AMBIT
   CARDELLI L, 1997, 1997013 DIG SRC
   CARDELLI L, 2000, P 27 POPL
   CARDELLI L, 1999, P POPL 99, P79
   Fournet C., 1996, LECT NOTES COMPUTER, V1119, P406
   FOURNET C, 2000, LNCS, V1872, P348
   Gordon A. D., 1999, Journal of Functional Programming, V9, P373, DOI 10.1017/S0956796899003482
   Gordon AD, 1999, LECT NOTES COMPUT SC, V1578, P212
   HIRSCHKOFF D, 2005, P COORD 05
   LEFESSANT F, 1998, JOCAML SYSTEM PROTOT
   Levi F, 2003, ACM T PROGR LANG SYS, V25, P1, DOI 10.1145/596980.596981
   Levi F., 2000, P POPL 00, P352
   MERRO M, 2005, IN PRESS ACM T PROGR
   NIELSON F, 2000, P POPL 00, P142
   PHILLIPS AT, 2004, ESOP 2004, P155
   SANGIORGI D, 1992, LECT NOTES COMPUT SC, V630, P32
   Sangiorgi D, 2001, LECT NOTES COMPUT SC, V2076, P408
NR 20
TC 9
Z9 9
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB
PY 2006
VL 59
IS 3
BP 209
EP 249
DI 10.1016/j.scico.2005.05.002
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 000MY
UT WOS:000234467500002
DA 2024-07-18
ER

PT J
AU Palacz, K
   Baker, J
   Flack, C
   Grothoff, C
   Yamauchi, H
   Vitek, J
AF Palacz, K
   Baker, J
   Flack, C
   Grothoff, C
   Yamauchi, H
   Vitek, J
TI Engineering a common intermediate representation for the Ovm framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st Workshop on Interpreters, Virtual Machines and Emulators (IVME 03)
CY JUN 12, 2003
CL San Diego, CA
DE virtual machines; object-oriented languages; Java
AB The Ovm framework is a set of tools and components for building language runtimes. We present the common intermediate representation of this framework and software design patterns used throughout Ovm. One of the main themes in this work has been supporting experimentation with new linguistic constructs and implementation techniques. To this end, Ovm components were designed to be parametric with respect to the instruction set on which they operate and its semantics. We argue that our approach eases the task of writing new components without sacrificing efficiency. (c) 2005 Published by Elsevier B.V.
C1 Purdue Univ, Dept Comp Sci, S3 Lab, W Lafayette, IN 47907 USA.
C3 Purdue University System; Purdue University
RP Purdue Univ, Dept Comp Sci, S3 Lab, W Lafayette, IN 47907 USA.
EM palacz@cs.purdue.edu
RI Vitek, Jan/J-9051-2014
CR BAILLARGUET B, 1999, 2 ECOOP WORKSH OBJ O
   Burke M. G., 1999, Proceedings of the ACM 1999 Java Grande Conference, P129, DOI 10.1145/304065.304113
   Ertl MA, 2002, LECT NOTES COMPUT SC, V2304, P5
   FLACK C, 2003, CSDTR03017 PURD U DE
   GAGNON E, 2003, COMP CONSTR 12 INT C
   Gamma E., 1994, DESIGN PATTERNS
   Glew N, 2002, LECT NOTES COMPUT SC, V2374, P525
   GROTHOFF C, 2003, ECOOP 2003 OBJECT OR
   GROTHOFF C, 2001, C OBJ OR PROGR SYST, P241
   Hovemeyer D, 2002, LECT NOTES COMPUT SC, V2374, P133
   Kelsey R. A., 1994, LISP and Symbolic Computation, V7, P315, DOI 10.1007/BF01018614
   LINDHOLM T, 1996, JAVA VIRTUAL MACHINE
   MAGNUSSON B, 2002, LECT NOTES COMPUTER, V2374
   Nordberg MartinE., 1996, VARIATIONS VISITOR P
   Shivers O. G., 1991, THESIS CARNEGIE MELL
   WHALEY J, 2003, ACM SIGPLAN 2003 WOR
NR 16
TC 10
Z9 11
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2005
VL 57
IS 3
BP 357
EP 378
DI 10.1016/j.scico.2004.08.007
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 957YP
UT WOS:000231409800007
DA 2024-07-18
ER

PT J
AU Whaley, J
AF Whaley, J
TI Joeq: A virtual machine and compiler infrastructure
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st Workshop on Interpreters, Virtual Machines and Emulators (IVME 03)
CY JUN 12, 2003
CL San Diego, CA
DE virtual machine; compiler; intermediate representation; Java; dynamic
   compilation; program analysis; design patterns
AB Joeq(1) is a virtual machine and compiler infrastructure designed to facilitate research in virtual machine technologies such as Just-In-Time and Ahead-Of-Time compilation, advanced garbage collection techniques, distributed computation, sophisticated scheduling algorithms, and advanced run time techniques. Joeq is entirely implemented in Java, leading to reliability, portability, maintainability, and efficiency. It is also language independent, so code from any supported language can be seamlessly compiled, linked, and executed - all dynamically. Each component of the virtual machine is written to be independent with a general but well-defined interface, making it easy to experiment with new ideas. Joeq is released as open source software, and is being used as a framework by researchers all over the world on topics ranging from automatic distributed virtual machines to whole-program pointer analysis. (c) 2005 Elsevier B.V. All rights reserved.
C1 Stanford Univ, Comp Syst Lab, Stanford, CA 94305 USA.
C3 Stanford University
RP Whaley, J (corresponding author), Stanford Univ, Comp Syst Lab, Stanford, CA 94305 USA.
EM jwhaley@stanford.edu
OI Whaley, John/0000-0003-1441-6982
CR Alpern B., 1999, Proceedings of the 14th ACM SIGPLAN conference on Object-oriented programming, systems, languages, and applications, P314
   AMARASINGHE S, 1994, LECT NOTES COMPUTER, V768, P253
   ANANIAN CS, 2001, FLEX COMPILER INFRAS
   [Anonymous], 1995, EX LINK FORM ELF SPE
   BACON D.F., 1998, PLDI 98, P258
   BAUMGARTNER G, 1998, CSDTR96020 PURD U
   BRUENING D, 1999, THESIS MIT
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   BRYCE C, 2002, P 16 EUR C OBJ OR PR
   Burke M. G., 1999, Proceedings of the ACM 1999 Java Grande Conference, P129, DOI 10.1145/304065.304113
   CHOI JD, 1999, WORKSH PROGR AN SOFT, P21
   Click Cliff, 2002, P 2002 JOINT ACMISCO, P96, DOI DOI 10.1145/583810.583821
   DAHM M, 2001, 81798 FREIE U BERL I
   Fitzgerald R, 2000, SOFTWARE PRACT EXPER, V30, P199, DOI 10.1002/(SICI)1097-024X(200003)30:3<199::AID-SPE296>3.0.CO;2-2
   Gagnon EM, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P27
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GAMMA E, 1993, P 7 EUR C OBJ OR PRO
   GROTHOFF C, 2003, P 17 EUR C OBJ OR PR
   GUEIYUANLUEH JMS, 1999, P ACM SIGPLAN C PROG, P118
   Hangal S., 2002, P INT C SOFTW ENG IC
   HEINTZE N, 2001, P C PROGR LANG DES I, P146
   ISHIZAKI K, 2000, P ACM SIGPLAN C OBJ, P294
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   ONODERA T, 1999, P ACM C OBJ OR PROGR, P223
   PALACZ K, 2003, P WORKSH INT VIRT MA
   *SUN MICR, 1997, JAV NAT METH INV SPE
   TAIVALSAARI A, 1998, TR96864 SMLI SUN MIC
   Vallee-Rai R., 1999, CASCON 1999, P125
   Whaley J., 2002, Software Engineering Notes, V27, P221, DOI 10.1145/566171.566212
   Whaley J, 2002, LECT NOTES COMPUT SC, V2477, P180
   WHALEY J, 2001, LNCS, V2192, P44
   Whaley J., 1999, P 14 ACM SIGPLAN C O, P187, DOI [10.1145/320384.320400, DOI 10.1145/320384.320400]
   WHALEY J, 1999, THESIS MIT
   WHALEY J, 2004, P ACM SIGPLAN 04 C P
   Whaley John., 2004, A BDD-based deductive database for program analysis
   Whaley John., 2000, JAVA 00, P78
   Whaley John., 2001, Partial method compilation using dynamic profile information, P166
   YERGEAU F, 1998, 2279 RFC
   [No title captured]
   [No title captured]
NR 40
TC 10
Z9 12
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2005
VL 57
IS 3
BP 339
EP 356
DI 10.1016/j.scico.2004.08.006
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 957YP
UT WOS:000231409800006
DA 2024-07-18
ER

PT J
AU Verhoef, C
AF Verhoef, C
TI Quantitative aspects of outsourcing deals
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE outsourcing; goalsourcing; smartsourcing; fastsourcing; costsourcing;
   offshore outsourcing; eastsourcing; tasksourcing; backsourcing;
   insourcing; scalesourcing; profitsourcing; activity-based cost
   estimation; total cost of ownership (TCO); requirements creep risk; time
   compression risk; litigation risk; failure risk; overtime risk;
   deglubitor risk; payback period risk
ID RELIABILITY
AB There are many goals for outsourcing information technology: for instance, cost reduction, speed to market, quality improvement, or new business opportunities. Based on our real-world experience in advising organizations with goal-driven outsourcing deals, we identified the most prominent quantitative input needed to close such deals. These comprise what we named the five executive issues enabling rational decision making. They concern cost, duration, risk, return, and financing aspects of outsourcing. They add an important quantitative financial/economic dimension to, the decision making process. Based on inferred outcomes for the five executive issues, we address the easily overlooked aspects of selecting partners, contracting, monitoring progress, and acceptance and delivery conditions for contracts. (c) 2004 Elsevier B.V. All rights reserved.
C1 Free Univ Amsterdam, Dept Math & Comp Sci, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Free Univ Amsterdam, Dept Math & Comp Sci, Boelelaan 1081A, NL-1081 HV Amsterdam, Netherlands.
EM x@cs.vu.nl
RI Sawhney, Davinder/A-5736-2010
CR Albrecht A.J., 1979, Em Proceedings of the Joint SHARE, GUIDE, and IBM Application Development Symposium, P83
   Bass Len, 2012, SEI S SOFTW
   BOEHM BW, 1976, IEEE T COMPUT, V25, P1226, DOI 10.1109/TC.1976.1674590
   Boehm BW., 1981, Software Engineering Economics
   Brown S.L., 1998, COMPETING EDGE STRAT
   DAGBLAD F, 2003, FINANCIEEL DAGBHAD
   DALY EB, 1977, IEEE T SOFTWARE ENG, V3, P229, DOI 10.1109/TSE.1977.231132
   DEDENE G, 1995, IEEE SOFTWARE, V12, P35, DOI 10.1109/52.363167
   Dreger J.B., 1989, FUNCTION POINT ANAL
   Elshoff J. L., 1976, IEEE Transactions on Software Engineering, VSE-2, P113, DOI 10.1109/TSE.1976.233538
   Garmus David., 2001, AW INFORMAT
   Garvey P., 2000, PROBABILITY METHODS
   Glass R.L., 1998, Software Runaways: Lessons learned from massive software project failures
   GLASS RL, 2001, COMPUTING FAILUE
   GLASS RL, 1998, COMPUTING CALAMITIES
   HANNA M, 1993, MAINTENANCE BURDEN, P53
   HARRIS C, 2003, FINANCIAL TIMES
   HUET S, 1996, STASTICAL TOOLS NONL
   Hunter S.D., 2003, J INFORM TECHNOLOGY, V5, P1
   JONES C, 1996, CONFLICT LITIGATION
   JONES C, 2001, CONFLICT LITIGATION
   Jones C., 1998, Estimating Software Cost
   Jones C., 1996, Patterns of software system failure and success
   Jones C., 1994, Assessment and control of software risks
   JONES C, 2003, COMMUNICATION    JAN
   Jones C., 2000, Software Assessments, Benchmarks, and Best Practices
   JONES C, 1998, SOFTWARE PROBLME QUA
   Jones C., 1996, APPL SOFTWARE MEASUR
   Kan AR, 2003, PROC IEEE INT CONF S, P2, DOI 10.1109/ICSM.2003.1235400
   KAZMAN R, 1998, CMUSEI989TR008
   Kazman Rick., 2002, Making Architecture Design Decisions: An Economic Approach
   KEMERER CF, 1993, COMMUN ACM, V36, P85, DOI 10.1145/151220.151230
   KEMERER CF, 1992, IEEE T SOFTWARE ENG, V18, P1011, DOI 10.1109/32.177370
   Kobitzsch W, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.914751
   KRAUSE A, 2000, BASICS S SPLUS
   Lientz B P., 1980, Software Maintenance Management
   McConnell S., 1996, Rapid Development: Taming Wild Software Schedules
   McCUE A., 2003, SHAREHOLDER MILITANC
   Norden PeterV., 1970, Management of Production, P71
   NORDEN PV, 1963, OPERATIONS RES RES D
   NORDEN PV, 1958, IBM J RES DEV, P2
   Pinheiro J. A., 2000, MIXED EFFECTS MODELS, DOI DOI 10.1007/B98882
   Putnam L., 1992, MEASURES EXCELLENCE
   PUTNAM LH, 1978, IEEE T SOFTWARE ENG, V4, P345, DOI 10.1109/TSE.1978.231521
   PUTNAM LH, 1976, P IEEE COMPCON 76 FA, P138
   PUTNAM LH, 1984, P INT SOC PAR AN 6 A, V3, P443
   PUTNAM LH, 1977, P IEEE COMP SOC 1 CO, P8
   REUTTER J, 1981, AFIPS C P, V50, P343
   ROBERTS B, 2000, RATINGS GAME
   *STAND GROUP, 2001, RETRIEVABLE VIA
   Steiner Thomas D., 1990, Technology in banking: Creating Value and Destroying Profits, V1
   STOERMER C, 2003, CMUSEI2003TR006
   *US GOVT, 2003, JOINT IND GOVT PAR E
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VERHOEF C, 2004, IN PRESS SCI COMPUTE
   Wadsworth S., 1992, Statistical Models
   Yourdon E., 1997, DEATH MARCH COMPLETE
   1998, C4ISR ARCH WORK GROU
   2003, HAGEMEYER WERELDWIJD
   1997, HCFA HOT SEAT
NR 60
TC 11
Z9 15
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY-JUN
PY 2005
VL 56
IS 3
BP 275
EP 313
DI 10.1016/j.scico.2004.08.003
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 929JH
UT WOS:000229341900002
OA Bronze
DA 2024-07-18
ER

PT J
AU Olderog, ER
   Wehrheim, H
AF Olderog, ER
   Wehrheim, H
TI Specification and (property) inheritance in CSP-OZ
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
DE CSP; Object-Z; failures divergence semantics; inheritance; safety and
   "liveness" properties; model checking; FDR
ID VERIFICATION
AB CSP-OZ [C. Fischer, CSP-OZ: A combination of Object-Z and CSP, in: H. Bowman, J. Derrick (Eds.), Formal Methods for Open Object-Based Distributed Systems, FMOODS'97, vol. 2, Chapman & Hall, 1997, pp. 423-438] is a combination of Communicating Sequential Processes (CSP) and Object-Z (OZ). It enables the specification of systems having both a state-based and a behaviour-oriented view using the object-oriented concepts of classes, instantiation and inheritance. CSP-OZ has a process semantics in the failure divergence model of CSP. In this paper we explain CSP-OZ and investigate the notion of inheritance. Furthermore, we study the issue of property inheritance among classes. We prove in a uniform way that behavioural subtyping relations between classes introduced in [H. Wehrheim, Behavioural subtyping in object-oriented specification formalisms, University of Oldenburg, Habilitation Thesis, 2002] guarantee the inheritance of safety and "liveness" properties. (C) 2004 Elsevier B.V. All rights reserved.
C1 Carl von Ossietzky Univ Oldenburg, Dept Comp Sci, D-26111 Oldenburg, Germany.
C3 Carl von Ossietzky Universitat Oldenburg
RP Carl von Ossietzky Univ Oldenburg, Dept Comp Sci, D-26111 Oldenburg, Germany.
EM olderog@informatik.uni-oldenburg.de;
   wehrheim@informatik.uni-oldenburg.de
CR AMERICA P, 1991, REX WORKSH FDN OBJ O, V489
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], 1994, A classical mind: essays in honour of C. A. R. Hoare
   BOLTON C, 2002, LECT NOTES COMPUTER, V2335, P225
   BROOKES SD, 1984, J ACM, V31, P560, DOI 10.1145/828.833
   Butler M, 1999, LECT NOTES COMPUT SC, V1708, P490
   CHANDY KM, 1988, PARALLEL PROGR DESIG
   DENVIR BT, 2000, FORM ASP COMPUT, V12, P211
   Derrick J., 2001, FACIT, VSecond
   DHARA KK, 1996, ICSE 96, P258
   DUKE R, 1995, COMP STAND INTER, V17, P511, DOI 10.1016/0920-5489(95)00024-O
   Fischer C., 1997, Formal Methods for Open Object-based Distributed Systems. Vol.2 IFIP TC6 WG6.1 International Workshop on Formal Methods for Open Object-based Distributed Systems (FMOODS '97), P423
   Fischer C., 1999, IFM'99. Proceedings of the 1st International Conference on Integrated Formal Methods, P315
   Fischer C, 2000, LECT NOTES COMPUT SC, V1816, P469
   Fischer C, 1998, LECT NOTES COMPUT SC, V1493, P5, DOI 10.1007/BFb0056022
   FISCHER C, 2000, THESIS U OLDENBURG
   FISCHER C, 1997, P FORTE PSTV 97, P503
   GALLOWAY AJ, 1997, INT C FORM ENG METH
   GUTTAG JV, 1985, IEEE SOFTWARE, V2, P24, DOI 10.1109/MS.1985.231756
   HATCLIFF J, 2001, CONCUR 2001 LNCS SPR
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   HOARE CAR, 1985, COMMUNICATIONS
   Hoenicke J., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P245
   Huisman M, 2000, LECT NOTES COMPUT SC, V1783, P284
   KOLYANG HOL, 1999, THESIS U BREMEN
   LATELLA D, 1999, FORM ASP COMPUT, V11, P430
   LEAVENS GT, 1995, ACTA INFORM, V32, P705, DOI 10.1007/BF01178658
   Leino KRM, 2001, LECT NOTES COMPUT SC, V2000, P157
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Mahony B, 1998, PROC INT CONF SOFTW, P95, DOI 10.1109/ICSE.1998.671106
   Nierstrasz Oscar., 1995, Object-Oriented Software Composition, P99
   Olderog ER, 2003, LECT NOTES COMPUT SC, V2852, P361
   OLDEROG ER, 1986, ACTA INFORM, V23, P9, DOI 10.1007/BF00268075
   POETZSCHHEFFTER A, 1999, J UNIVERS COMPUT SCI, V5, P208
   SAALTINK M, 1997, ZUM 97 LNCS, V1212, P72
   SCHAFER T, 2001, WORKSH SOFTW MOD CHE, V55
   Smith G., 1995, Formal Aspects of Computing, V7, P289, DOI 10.1007/BF01211075
   SMITH G, 2002, LNCS, V2272, P82
   SMITH G, 2002, INTEGRATED FORMAL ME, V2335, P267
   SMITH G, 1997, LNCS, V1313, P62
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Spivey J.M., 1992, PRENTICE HALL INT SE
   TAGUCHI K, 1997, INT S FUT SOFTW TECH, P101
   van der Aalst WMP, 2002, THEOR COMPUT SCI, V270, P125, DOI 10.1016/S0304-3975(00)00321-2
   Wehrheim H., 2002, Formal Methods for Open Object-Based Distributed Systems V. IFIP TC6/WG6.1. Fifth International Conference on Formal Methods for Open Object-Based Distributed Systems (FMOODS 2002), P79
   WEHRHEIM H, 2002, FORM METHOD SYST DES, V23, P143
   WEHRHEIM H, 2002, BEHAV SUBTYPING OBJE
   Woodcock J., 1996, SPECIFICATION REFINE
NR 48
TC 14
Z9 16
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 227
EP 257
DI 10.1016/j.scico.2004.05.017
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700009
DA 2024-07-18
ER

PT J
AU Wile, D
AF Wile, D
TI Lessons learned from real DSL experiments
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE domain-specific language; graphical language; experience report; program
   generation; lessons learned
AB Over the years, our group, led by Bob Balzer, designed and implemented three domain-specific languages for use in real applications. Each was invented to "showcase" DSL language design and implementation technology that was the focus of our then-current research. Each of these was actually a prototype for what would have taken more time to engineer and polish before putting into practice. Although each effort was essentially successful, none of the languages was ever followed up with the subsequent engineering efforts that we expected or at least hoped for. Herein I elaborate where these language efforts succeeded and where they failed, gleaning lessons for others who take the somewhat risky step of committing to develop a DSL for a particular user community. (C) 2004 Elsevier B.V. All rights reserved.
C1 Teknowledge Corp, Marina Del Rey, CA 90292 USA.
C3 Teknowledge Corporation
RP Teknowledge Corp, 4640 Admiral Way,Suite 1010, Marina Del Rey, CA 90292 USA.
EM dwile@teknowledge.com
CR BALZER R, 1994, DOMAIN SPECIFIC NOTA
   Balzer RM, 1999, 19TH IEEE INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOP, PROCEEDINGS, P73, DOI 10.1109/ECMDD.1999.776417
   BRAUN C, 1992, P IEEE CONTR SYST SO
   Cohen D., 1986, Proceedings AAAI-86: Fifth National Conference on Artificial Intelligence, P20
   FEATHER MS, 1987, ACM T PROGR LANG SYS, V9, P198, DOI 10.1145/22719.22947
   GOLDMAN N, 1999, IEEE S VIS LANG TOK, P20
   KIEBURTZ R, 1994, CSE94032B OR GRAD CT
   LEVY LS, 1987, TAMING TIGER SOFTWAR
   MARTIN J, 1985, 4 GEN LANGUAGES PRIN, V1
   STRATTON A, EVALUATION REPORT CH
   WILE D, 1993, REFERENCE MANAUL
   WILE D, 1993, INTEGRATING SYNTAXES
   WILE D, 2000, TRAINING MANUAL
   WILE D, 1906, P IFIPTC2 WG 2 1 WOR, P459
   WILE D, 2003, P HAW INT C COMP SCI
   WILE D, 2001, INTEGRATING SYNTAXES, V9, P263
   Wile D. S., 2001, Journal of Computing and Information Technology - CIT, V9, P263, DOI 10.2498/cit.2001.04.01
   Wile DS, 1999, IEEE T SOFTWARE ENG, V25, P289
NR 18
TC 32
Z9 34
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2004
VL 51
IS 3
BP 265
EP 290
DI 10.1016/j.scico.2003.12.006
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 827YO
UT WOS:000221939800003
DA 2024-07-18
ER

PT J
AU Moran, A
   Sands, D
   Carlsson, M
AF Moran, A
   Sands, D
   Carlsson, M
TI Erratic Fudgets: a semantic theory for an embedded coordination language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Conference on Coordination Languages and Architectures
CY 1999
CL AMSTERDAM, NETHERLANDS
ID NONDETERMINISM; POWER
AB The powerful abstraction mechanisms of functional programming languages provide the means to develop domain-specific programming languages within the language itself Typically, this is realised by designing a set of combinators (higher-order reusable programs) for an application area, and by constructing individual applications by combining and coordinating individual combinators. This paper is concerned with a successful example of such an embedded programming language, namely Fudgets, a library of combinators; for building graphical user interfaces in the lazy functional language Haskell. The Fudget library has been used to build a number of substantial applications, including a web browser and a proof editor interface to a proof checker for constructive type theory. This paper develops a semantic theory for the non-deterministic stream processors that are at the heart of the Fudget concept. The interaction of two features of stream processors makes the development of such a semantic theory problematic:
   (i) the sharing of computation provided by the lazy evaluation mechanism of the underlying host language, and (ii) the addition of non-deterministic choice needed to handle the natural concurrency that reactive applications entail.
   We demonstrate that this combination of features in a higher-order functional language can be tamed to provide a tractable semantic theory and induction principles suitable for reasoning about contextual equivalence of Fudgets. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Oregon Grad Inst Sci & Technol, Dept Comp Sci & Engn, Beaverton, OR 97006 USA.
   Chalmers Univ Technol, Dept Comp Sci, S-41296 Gothenburg, Sweden.
   Univ Gothenburg, S-41296 Gothenburg, Sweden.
C3 Chalmers University of Technology; University of Gothenburg
RP Oregon Grad Inst Sci & Technol, Dept Comp Sci & Engn, Beaverton, OR 97006 USA.
EM moran@cse.ogi.edu; dave@cs.chamers.se; magnus@cs.chalmers.se
OI Sands, David/0000-0001-6221-0503
CR Agha GulA., 1997, J FUNCT PROGRAM, V7, P1
   [Anonymous], 1995, C RECORD POPL 95 22, DOI DOI 10.1145/199448.199507
   [Anonymous], J FUNCTIONAL PROGRAM
   [Anonymous], LECT NOTES COMPUTER
   ARBAB F, 1993, CONCURRENCY-PRACT EX, V5, P23, DOI 10.1002/cpe.4330050103
   Ariola Z. M., 1997, J FUNCTIONAL PROGRAM, V7, P265
   ARNOLD A, 1980, THEOR COMPUT SCI, V11, P181, DOI 10.1016/0304-3975(80)90045-6
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   BOUDOL G, 1990, RAPPORTS RECHERCHE I, V1231
   BROY M, 1986, THEOR COMPUT SCI, V45, P1, DOI 10.1016/0304-3975(86)90040-X
   Carlsson Magnus., 1998, THESIS CHALMERS U TE
   CLINGER W, 1982, LISP FUNCTIONAL  AUG, P226
   DELIGUORO U, 1992, LECT NOTES COMPUT SC, V581, P203
   DELIGUORO U, 1995, INFORM COMPUT, V122, P149, DOI 10.1006/inco.1995.1145
   Erdogmus H, 1996, THEOR COMPUT SCI, V159, P271, DOI 10.1016/0304-3975(95)00166-2
   FERREIRA W, 1995, LECT NOTES COMPUTER, V969
   FERREIRA W, 1996, P ICFP 96 MAY, P201
   FINNE S, 1995, P 5 EUR WORKSH PROGR
   GANSNER ER, 1991, P 1991 CMU WORKSH ST
   GORDON AD, 1998, PUBLICATIONS NEWTON
   HENNESSY M, 1973, AUTOMATA LANGUAGES P
   HENNESSY MCB, 1980, THEOR COMPUT SCI, V11, P227, DOI 10.1016/0304-3975(80)90015-8
   HENNESSY MCB, 1980, SIAM J COMPUT, V9, P67, DOI 10.1137/0209005
   HILDEBRANDT T, 1998, LECT NOTES COMPUTER, V1466
   Jones S. Peyton, 1996, POPL 96, P295, DOI DOI 10.1145/237721.237794
   Jones SLP, 1998, SCI COMPUT PROGRAM, V32, P3, DOI 10.1016/S0167-6423(97)00029-4
   Jones SP, 1996, ACM SIGPLAN NOTICES, V31, P1
   JONSSON B, 1989, LECT NOTES COMPUT SC, V366, P217
   JONSSON B, LECT NOTES COMPUTER, V366
   KUTZNER A, 1998, P ICFP 98 SEP, P324
   Lassen S. B., 1999, Mathematical Foundations of Computer Science 1999. 24th International Symposium, MFCS'99. Proceedings (Lecture Notes in Computer Science Vol.1672), P198
   Lassen Soren Bogh, 1998, THESIS U AARHUS
   Launchbury John., 1993, Proceedings of the 20th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages. POPL'93. New York, NY, P144, DOI DOI 10.1145/158511.158618
   Milner R., 1977, Theoretical Computer Science, V4, P1, DOI 10.1016/0304-3975(77)90053-6
   MISLOVE MW, 1992, LECT NOTES COMPUT SC, V598, P77
   MORAN A, 1999, POPL 99, P43
   Moran A., 1998, Call-By-Name, Call-By-Need, and McCarthy's Amb
   MORAN AK, 1998, IMPROVEMENT LAZY CON
   Nielson F, 1996, THEOR COMPUT SCI, V155, P179, DOI 10.1016/0304-3975(95)00017-8
   PANANGADEN P, 1988, LECT NOTES COMPUT SC, V317, P439
   PANANGADEN P, 1988, TR88913 CORN U COMP
   PARK D, 1983, FAIRNESS PROBLEM NON, P133
   PETERSON J, 1997, HASKELL REPORT VERSI
   PITTS AM, 1994, NOTES SERIES U AARHU
   Plotkin G. D., 1976, SIAM Journal on Computing, V5, P452, DOI 10.1137/0205035
   REPPY JH, 1991, SIGPLAN NOTICES, V26, P293, DOI 10.1145/113446.113470
   Sands D, 1995, J LOGIC COMPUT, V5, P495, DOI 10.1093/logcom/5.4.495
   SANDS D, 1998, PUBLICATIONS NEWTON, P275
   SANDS D, 1998, ELECT NOTES THEORETI, V10
   SANGIORGI D, 1994, INFORM COMPUT, V111, P120, DOI 10.1006/inco.1994.1042
   SESTOFT P, 1997, J FUNCTIONAL PROGRAM, V7, P231, DOI DOI 10.1017/S0956796897002712
   SMYTH MB, 1983, LECT NOTES COMPUT SC, V154, P662
   SMYTH MB, 1978, J COMPUT SYST SCI, V16, P23, DOI 10.1016/0022-0000(78)90048-X
   SONDERGAARD H, 1992, COMPUT J, V35, P514, DOI 10.1093/comjnl/35.5.514
   Talcott C.L, 1998, HIGHER ORDER OPERATI, P347
   TAYLOR C, 1998, THESIS U NOTTINGHAM
   TAYLOR C, 1998, P ICFP 98 SEPT, P75
NR 57
TC 10
Z9 10
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2003
VL 46
IS 1-2
BP 99
EP 135
AR PII S0167-6423(02)00088-6
DI 10.1016/S0167-6423(02)00088-6
PG 37
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 633UT
UT WOS:000180302700005
DA 2024-07-18
ER

PT J
AU Sadovykh, A
   Said, B
   Truscan, D
   Bruneliere, H
AF Sadovykh, Andrey
   Said, Bilal
   Truscan, Dragos
   Bruneliere, Hugo
TI An iterative approach for model-based requirements engineering in large
   collaborative projects: A detailed experience report
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Requirements engineering; Model-based engineering; Collaborative
   projects; Experience report
AB In this paper, we report on our 7 years of practical experience designing, developing, deploying, using, and evolving an iterative Model-based Requirements Engineering (MBRE) approach and language in the context of five large European collaborative projects providing complex software-intensive solutions. Based on significant data sets collected both during project execution and via surveys realized afterward, we demonstrate that such a model-based approach can bring interesting benefits in terms of scalability (e.g., a large number of handled requirements), heterogeneity (e.g., partners with different types of RE background), adaptability and extensibility (e.g., to various project's needs), traceability (e.g., from the requirements to the software components), automation (e.g., documentation generation), consistency and quality (e.g., central model), and usefulness or usability (e.g., actual deployment and practical use). Along the way, we illustrate the application of our MBRE approach and language with concrete elements from these several European collaborative projects. More broadly, we discuss the general benefits and current limitations of using such a model-based approach and corresponding language, as well as the related lessons we learned during these past years.
C1 [Sadovykh, Andrey; Said, Bilal] SOFTEAM, Docaposte, Paris, France.
   [Sadovykh, Andrey; Said, Bilal] SOFTEAM, Docaposte, Nantes, France.
   [Truscan, Dragos] Abo Akad Univ, Turku, Finland.
   [Bruneliere, Hugo] IMT Atlantique, CNRS, UMR 6004, LS2N, Nantes, France.
C3 Abo Akademi University; Centre National de la Recherche Scientifique
   (CNRS); IMT - Institut Mines-Telecom; IMT Atlantique
RP Sadovykh, A; Said, B (corresponding author), SOFTEAM, Docaposte, Paris, France.; Sadovykh, A; Said, B (corresponding author), SOFTEAM, Docaposte, Nantes, France.; Truscan, D (corresponding author), Abo Akad Univ, Turku, Finland.; Bruneliere, H (corresponding author), IMT Atlantique, CNRS, UMR 6004, LS2N, Nantes, France.
EM andrey.sadovykh@softeam.fr; bilal.said@softeam.fr;
   dragos.truscan@abo.fi; hugo.bruneliere@imt-atlantique.fr
OI Said, Bilal/0000-0003-2259-6063; Sadovykh, Andrey/0000-0003-2384-5447
FU ECSEL Joint Undertaking [101007350, 737494]; ITEA3 [15010]; H2020; 
   [732064];  [957212]
FX This work has received funding from the ECSEL Joint Undertaking under
   grant agreements No. 101007350 (AIDOaRt project) and No. 737494
   (MegaM@Rt2 project) , from ITEA3 under grant agreement No. 15010
   (REVaMP2 project) , and from H2020 under grant agreements No. 732064
   (DataBio project) and No. 957212 (VeriDevOps project) .
CR Accelopment, 2019, Lessons learnt from horizon 2020 for its final 2 years
   Afzal W, 2018, MICROPROCESS MICROSY, V61, P86, DOI 10.1016/j.micpro.2018.05.010
   Angelis G. D., 2016, P 31 ANN ACM S APPL, P1282, DOI [10.1145/2851613.2851760, DOI 10.1145/2851613.2851760]
   [Anonymous], 2012, Synthesis Lectures on Software Engineering, DOI [DOI 10.2200/S00751ED2V01Y201701SWE004, DOI 10.2200/S00441ED1V01Y201208SWE001]
   [Anonymous], 2017, Requirements engineering
   [Anonymous], 2009, Requirements Engineering: From System Goals to UML Models to Software
   Assar S, 2014, IEEE INT WORKSH MODE, P1, DOI 10.1109/MoDRE.2014.6890820
   Baudry B, 2007, IEEE INT ENTERP DIST, P459, DOI 10.1109/EDOC.2007.15
   Bruneliere H, 2022, MICROPROCESS MICROSY, V94, DOI 10.1016/j.micpro.2022.104672
   Bruneliere Hugo, 2022, D 3.3-AIDOaRt core infrastructure and framework-intermediate version, Deliverable, H2020/KDT AIDOaRt project
   Bruneliere Hugo, 2022, Deliverable Ref. Ares(2022)3313183-29/04/2022, H2020/KDT AIDOaRt project
   Cheng BHC, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P285, DOI 10.1109/FOSE.2007.17
   De Angelis G, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1990
   Desfray Philippe, 2015, 2015 3rd International Conference on Model-Driven Engineering and Software Development (MODELSWARD), pIS
   ecsel, 2023, Ecsel joint undertaking work plan 2020
   ECSEL-JU, 2023, Productive4.0 project
   European Commission, 2023, EU research programmes
   European Commission-DG CONNECT, 2023, Digital economy and society index (DESI) 2020-the EU ICT sector and its R&D performance
   European Cooperation for Space Standardization, 2009, Tech. Rep. ECSS-E-ST-40C
   Goknil A, 2008, LECT NOTES COMPUT SC, V5095, P310, DOI 10.1007/978-3-540-69100-6_21
   Gürses S, 2013, REQUIR ENG, V18, P43, DOI 10.1007/s00766-011-0139-7
   Hesse TM, 2013, 2013 3RD INTERNATIONAL WORKSHOP ON THE TWIN PEAKS OF REQUIREMENTS AND ARCHITECTURE (TWINPEAKS), P22, DOI 10.1109/TwinPeaks-2.2013.6617355
   Hutchinson J, 2014, SCI COMPUT PROGRAM, V89, P144, DOI 10.1016/j.scico.2013.03.017
   IEEE/ISO/IEC, 2018, Tech. Rep. 29148-2018
   Karg S, 2016, 19TH ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS'16), P238, DOI 10.1145/2976767.2976811
   Kasauli R, 2021, J SYST SOFTWARE, V172, DOI 10.1016/j.jss.2020.110851
   Knauss E, 2018, INT REQUIR ENG CONF, P502, DOI 10.1109/RE.2018.00073
   Konaté J, 2014, GROUP DECIS NEGOT, V23, P847, DOI 10.1007/s10726-013-9350-x
   Kotonya G., 1998, Requirements engineering: processes and techniques
   LaToza TD, 2019, IEEE T SOFTWARE ENG, V45, P1106, DOI 10.1109/TSE.2018.2823327
   Laurent P., 2009, 2009 Collaboration and Intercultural Issues on Requirements: Communication, Understanding and Softskills, P26
   Laurent P., 2013, Evaluating the effectiveness of a collaborative requirements engineering modeling notation for planning globally distributed projects
   Leffingwell D., 2010, Agile Software Requirements: Lean Requirements Practices for Teams, Programs, and the Enterprise
   Letier E, 2008, AUTOMAT SOFTW ENG, V15, P175, DOI 10.1007/s10515-008-0027-7
   Liebel G, 2023, J SYST SOFTWARE, V199, DOI 10.1016/j.jss.2023.111628
   Likert R., 1932, TECHNIQUE MEASUREMEN, DOI 1933-01885-001
   Lopes PC, 2018, 2018 11TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P160, DOI 10.1109/QUATIC.2018.00032
   Modelio, 2023, A collaborative business or software modeling platform
   Nepelski D, 2018, J TECHNOL TRANSFER, V43, P615, DOI 10.1007/s10961-017-9624-6
   Nielsen T.D., 2014, NIK
   Nuseibeh B., 2000, P C FUTURE SOFTWARE, P35, DOI [10.1145/336512.336523, DOI 10.1145/336512.336523]
   O.M.G. Systems Modeling Language (SysML), 2023, About us
   O.M.G. Unified, 2023, Modeling language
   Object Management Group (OMG), 2020, Requirements interchange format (ReqIF)
   OMG, 2023, Business process model and notation (BPMN)
   opengroup, 2023, The ArchiMate Enterprise Architecture Modeling Language
   Pohl K, 2010, REQUIREMENTS ENGINEERING: FUNDAMENTALS, PRINCIPLES, AND TECHNIQUES, P1, DOI 10.1007/978-3-642-12578-2
   Sadovykh Andrey, 2020, Software Engineering Aspects of Continuous Development and New Paradigms of Software Production and Deployment. Second International Workshop, DEVOPS 2019. Revised Selected Papers. Lecture Notes in Computer Science (LNCS 12055), P191, DOI 10.1007/978-3-030-39306-9_14
   Sadovykh Andrey, 2019, Software Technology: Methods and Tools. 51st International Conference, TOOLS 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11771), P406, DOI 10.1007/978-3-030-29852-4_34
   Sadovykh A., 2023, Dataset-survey results-applying model-based requirements engineering in AIDOaRt collaborative project, DOI [/10.5281/zenodo.8324734, DOI 10.5281/ZENODO.8324734]
   Sadovykh A, 2021, INT REQUIR ENG CONF, P367, DOI 10.1109/RE51729.2021.00040
   Sadovykh A, 2021, PROCEEDINGS OF THE 2021 DESIGN, AUTOMATION & TEST IN EUROPE CONFERENCE & EXHIBITION (DATE 2021), P1330, DOI 10.23919/DATE51398.2021.9474185
   Sadovykh Andrey, 2021, Zenodo, DOI 10.5281/ZENODO.5011357
   Saito S., 2020, arXiv
   Solheim H, 2005, 13th IEEE International Conference on Requirements Engineering, Proceedings, P421, DOI 10.1109/RE.2005.41
   van Lamsweerde A, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P249
   van Lamsweerde A., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P5, DOI 10.1109/ICSE.2000.870392
   Van Noorden R, 2019, NATURE, V569, P470, DOI 10.1038/d41586-019-01565-0
   Wiegers Karl, 2013, Software Requirements
   Yu ESK, 1997, RE '97 - PROCEEDINGS OF THE THIRD IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, P226, DOI 10.1109/ISRE.1997.566873
NR 60
TC 0
Z9 0
U1 3
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103047
DI 10.1016/j.scico.2023.103047
EA OCT 2023
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y1JU5
UT WOS:001102908200001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Atoum, I
AF Atoum, Issa
TI Measurement of key performance indicators of user experience based on
   software requirements
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE User experience; Requirements elicitation; UX design; UX; UI evaluation;
   UX measurement
ID QUALITY
AB Software User Experience (UX) reveals product impressions when using or planning to utilize a software product. However, software products are notorious for their uncertainty, adaptability, and continuous operation. Users often evaluate the software UX based on a particular system release or a prototype. Although there is much machine research, little research has been conducted on UX prediction based on requirements items. Moreover, developing a UX-oriented prototype at early software requirements elicitation is time-consuming and laborious. Given a list of initial textual requirements, predicting a system UX Key Performance Indicator (KPI) is essential for success and saving project efforts. This study assesses an application's UX KPI in the first phases of software requirements engineering. Our suggested machine learning algorithms extract UX characteristics from textual requirements to categorize them as UX scales. The anticipated UX scales are then used to forecast the total UX KPI of any software application. The UX predictions should be reliable compared to a real case study of different application prototypes. We trained several machine learning models on a benchmark dataset of software requirements. The models were tested, showing a high performance of the f1-measure, which was 0.91 for the Random Forest Algorithm. Besides, the UX KPIs calculated based on outputs from machine learning models were highly interrelated with those calculated based on our developed software prototypes. Therefore, the proposed approach is automatic, easy to implement, and reliable in estimating the overall application UX before development. We conclude that the new model can evaluate UX instantly without interventions from end-users or UX designers.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Atoum, Issa] World Islamic Sci & Educ Univ, Amman, Jordan.
RP Atoum, I (corresponding author), World Islamic Sci & Educ Univ, Amman, Jordan.
EM Issa.Atoum@wise.edu.jo
RI Atoum, Issa/O-9388-2014
OI Atoum, Issa/0000-0002-2160-3615
CR Abdeen W, 2023, REQUIR ENG, V28, P117, DOI 10.1007/s00766-022-00379-3
   Al Qudah DA, 2020, HELIYON, V6, DOI 10.1016/j.heliyon.2020.e04378
   Almaiah MA, 2022, ELECTRONICS-SWITZ, V11, DOI 10.3390/electronics11050788
   Alomari HW, 2020, HELIYON, V6, DOI 10.1016/j.heliyon.2020.e03917
   [Anonymous], 2007, The promise repository of empirical software engineering data
   [Anonymous], 2001, LECT NOTES COMPUT
   [Anonymous], 2003, MUM 2003 P 2 INT C M
   Ardito C, 2014, INT J HUM-COMPUT ST, V72, P542, DOI 10.1016/j.ijhcs.2013.10.004
   Atoum I, 2021, INT J ADV COMPUT SC, V12, P325
   Atoum I, 2021, IEEE ACCESS, V9, P137613, DOI 10.1109/ACCESS.2021.3117989
   Atoum I, 2020, J KING SAUD UNIV-COM, V32, P113, DOI 10.1016/j.jksuci.2018.04.012
   Bergman J, 2018, LECT NOTES COMPUT SC, V10753, P20, DOI 10.1007/978-3-319-77243-1_2
   Bhatt D, 2022, LECT NOTES COMPUT SC, V13260, P576, DOI 10.1007/978-3-031-06773-0_31
   Biduski D, 2020, COMPUT HUM BEHAV, V104, DOI 10.1016/j.chb.2019.106169
   Brooke J, 1996, USABILITY EVALUATION, V189, P4
   Cheng SQ, 2023, INT J HUM-COMPUT INT, V39, P1271, DOI 10.1080/10447318.2022.2062547
   Choma Joelma, 2016, INT C HUM COMP INT, P131
   Condori-Fernandez N, 2020, PROCEEDINGS OF THE 35TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING (SAC'20), P1418, DOI 10.1145/3341105.3374059
   de Myttenaere A, 2016, NEUROCOMPUTING, V192, P38, DOI 10.1016/j.neucom.2015.12.114
   Delgado R, 2019, PLOS ONE, V14, DOI 10.1371/journal.pone.0222916
   Eriksson M, 2021, J COMPUT INFORM SYST, V61, P428, DOI 10.1080/08874417.2019.1693936
   Falotico R, 2015, QUAL QUANT, V49, P463, DOI 10.1007/s11135-014-0003-1
   Fraifer M., 2017, 2017 IEEE 3 INT FOR, P1
   Garrett J. J., 2010, The elements of user experience: user-centered design for the web and beyond
   Grandi F, 2022, INT J COMPUT INTEG M, V35, P4, DOI 10.1080/0951192X.2021.1972470
   Hassenzahl M., 2003, Mensch & Computer 2003: Interaktion in Bewegung, P187, DOI [DOI 10.1007/978-3-322-80058, DOI 10.1007/978-3-322-80058-9_19]
   Hinderks A, 2019, COMPUT STAND INTER, V65, P38, DOI 10.1016/j.csi.2019.01.007
   Kallis R, 2021, SCI COMPUT PROGRAM, V205, DOI 10.1016/j.scico.2020.102598
   Kantorowitz E., 2014, P 2014 EUR C COGN ER, P1
   Kashfi P, 2016, LECT NOTES COMPUT SC, V9856, P234, DOI 10.1007/978-3-319-44902-9_15
   Kitchenham B. A., 1998, Software Engineering Notes, V23, P24, DOI 10.1145/272263.272268
   Kitchenham B. A., 1998, Software Engineering Notes, V23, P20, DOI 10.1145/279437.279445
   Koonsanit Kitti, 2020, 2020 IEEE Region 10 Conference (TENCON), P561, DOI 10.1109/TENCON50793.2020.9293912
   Law E, 2008, Proceeding of the Twenty-Sixth Annual CHI Conference Extended Abstracts, P2395, DOI [10.1086/521592, DOI 10.1086/521592]
   Lee HJ, 2017, INT J SOFTW ENG KNOW, V27, P235, DOI 10.1142/S0218194017500097
   Levy Y, 2022, REQUIR ENG, V27, P231, DOI 10.1007/s00766-022-00372-w
   Li Y., 2021, LECT NOTES ELECT ENG, V754, P263
   Liapis A, 2023, INTERACT LEARN ENVIR, V31, P6841, DOI 10.1080/10494820.2022.2048674
   Lima M, 2019, PROCEEDINGS OF THE XXXIII BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, SBES 2019, P427, DOI 10.1145/3350768.3350776
   López L, 2021, SCI COMPUT PROGRAM, V202, DOI 10.1016/j.scico.2020.102568
   Lopez L., 2018, 2018 IEEE 1 INT WORK, P14
   Madariaga L, 2021, COMPUT EDUC, V167, DOI 10.1016/j.compedu.2021.104176
   Maimbo H, 2005, PACIFIC ASIA CONFERENCE ON INFORMATION SYSTEMS 2005, SECTIONS 1-8 AND POSTER SESSIONS 1-6, P1281
   MILLER GA, 1956, PSYCHOL REV, V63, P81, DOI 10.1037/h0043158
   Mkpojiogu Emmanuel O. C., 2022, 2022 13th International Conference on Computing Communication and Networking Technologies (ICCCNT), P1, DOI 10.1109/ICCCNT54827.2022.9984406
   Möller N, 2022, LECT NOTES COMPUT SC, V13216, P219, DOI 10.1007/978-3-030-98464-9_17
   Montgomery L, 2022, REQUIR ENG, V27, P183, DOI 10.1007/s00766-021-00367-z
   Morville P., 2004, USER EXPERIENCE DESI
   Moshagen M, 2010, INT J HUM-COMPUT ST, V68, P689, DOI 10.1016/j.ijhcs.2010.05.006
   Nicolescu L, 2022, ELECTRONICS-SWITZ, V11, DOI 10.3390/electronics11101579
   Nielsen J., 2018, DEFINITION USER EXPE
   Nielsen Jakob., 1995, CONDUCT HEURISTIC EV, V1, P1
   Ohashi K, 2018, INT REQUIR ENG CONF, P347, DOI 10.1109/RE.2018.00-26
   Pedregosa F, 2011, J MACH LEARN RES, V12, P2825
   Prati E, 2021, ROBOT CIM-INT MANUF, V68, DOI 10.1016/j.rcim.2020.102072
   Quiñones D, 2019, COMPUT STAND INTER, V66, DOI 10.1016/j.csi.2019.04.004
   Restuputri D.P., 2022, HDB RES BIG DATA GRE, P153
   Runeson P, 2009, EMPIR SOFTW ENG, V14, P131, DOI 10.1007/s10664-008-9102-8
   Sarferaz S., 2022, COMPENDIUM ENTERPRIS, P467
   Sauro J, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1599
   Schrepp M, 2017, INT J INTERACT MULTI, V4, P103, DOI 10.9781/ijimai.2017.09.001
   Schrepp M, 2017, INT J INTERACT MULTI, V4, P40, DOI 10.9781/ijimai.2017.445
   Sjoberg DIK, 2023, IEEE T SOFTWARE ENG, V49, P1374, DOI 10.1109/TSE.2022.3176725
   Tong YZ, 2022, J COMPUT INF SCI ENG, V22, DOI 10.1115/1.4054155
   Wohlin C., 2012, Experimentation in Software Engineering
   Yeratziotis A, 2018, INT J HUM-COMPUT INT, V34, P195, DOI 10.1080/10447318.2017.1339940
   Zaki-Ismail A, 2021, LECT NOTES COMPUT SC, V12685, P54, DOI 10.1007/978-3-030-73128-1_4
NR 67
TC 3
Z9 3
U1 6
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2023
VL 226
AR 102929
DI 10.1016/j.scico.2023.102929
EA FEB 2023
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA C7XN2
UT WOS:000964003700001
DA 2024-07-18
ER

PT J
AU Campos, S
   Santiago, R
   Martins, MA
   Figueiredo, D
AF Campos, Suene
   Santiago, Regivan
   Martins, Manuel A.
   Figueiredo, Daniel
TI Introduction to reversal fuzzy switch graph
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Rigorous State-Based Methods (ABZ)
CY MAY 27-29, 2020
CL Ulm, GERMANY
DE Reversal fuzzy switch graphs; Reversal fuzzy reactive graphs; Fuzzy
   switch graphs; Fuzzy systems; Reactive systems
AB Fuzzy Switch Graphs (F SG) generalize the notion of Fuzzy Graphs by adding high-order arrows and aggregation functions which update the fuzzy values of arrows whenever a zero-order arrow is crossed. In this paper, we propose a more general structure called Reversal Fuzzy Switch Graph (R F SG), which promotes other actions in addition to updating the fuzzy values of the arrows, like activation and deactivation of the arrows. RF SGs are able to model dynamical aspects of some systems which generally appear in engineering, computer science and some other fields. The paper also provides the relationship between RF SGs and fuzzy graphs, a logic to verify properties of the modeled system and closes with an application. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Campos, Suene] Univ Fed Rural Semi Arido, Ctr Ciencias Exatas & Nat, Mossoro, Brazil.
   [Campos, Suene; Santiago, Regivan] Univ Fed Rio Grande do Norte, Dept Informat & Matemat Aplicada, Natal, RN, Brazil.
   [Martins, Manuel A.; Figueiredo, Daniel] Univ Aveiro, CIDMA, Aveiro, Portugal.
   [Martins, Manuel A.; Figueiredo, Daniel] Univ Aveiro, Dept Matemat, Aveiro, Portugal.
C3 Universidade Federal Rural do Semi-Arido (UFERSA); Universidade Federal
   do Rio Grande do Norte; Universidade de Aveiro; Universidade de Aveiro
RP Campos, S (corresponding author), Univ Fed Rural Semi Arido, Ctr Ciencias Exatas & Nat, Mossoro, Brazil.; Campos, S; Santiago, R (corresponding author), Univ Fed Rio Grande do Norte, Dept Informat & Matemat Aplicada, Natal, RN, Brazil.
EM suenecampos@ufersa.edu.br; regivan@dimap.ufrn.br; martins@ua.pt;
   daniel.figueiredo@ua.pt
RI ; Martins, Manuel A./A-8821-2010
OI Nunes Santiago, Regivan Hugo/0000-0002-4991-9603; Martins, Manuel
   A./0000-0002-5109-8066; Figueiredo, Daniel/0000-0003-1727-9098
FU National Council for Scientific and Technological Development (CNPq)
   [312053/2018-5]; Coordination for the Improvement of Higher Education
   Personnel (CAPES) [88887.363001/2019-00]; ERDF, through the COMPETE 2020
   Program; FCT [PTDC/CCI-COM/30947/2017, UIDB/04106/2020,
   UIDP/04106/2020]; Fundação para a Ciência e a Tecnologia
   [PTDC/CCI-COM/30947/2017] Funding Source: FCT
FX Santiago was supported by National Council for Scientific and
   Technological Development (CNPq) within the project 312053/2018-5, by
   Coordination for the Improvement of Higher Education Personnel (CAPES)
   within the project Capes-Print 88887.363001/2019-00.; Martins and
   Figueiredo were supported by ERDF, through the COMPETE 2020 Program, and
   by FCT, within the projects PTDC/CCI-COM/30947/2017, UIDB/04106/2020 and
   UIDP/04106/2020.
CR Baczynski M, 2008, STUD FUZZ SOFT COMP, V231, P1
   Baczynski M, 2017, FUZZY SET SYST, V325, P1, DOI 10.1016/j.fss.2017.05.013
   Baczynski M, 2017, FUZZY SET SYST, V324, P1, DOI 10.1016/j.fss.2017.05.012
   Barringer H, 2005, LECT NOTES ARTIF INT, V2605, P59
   Beliakov G., 2007, Aggregation functions: a guide for practitioners, V221
   Callejas C., 2013, MATHWARE SOFT COMPUT, V20, P94
   Campos Suene, 2020, Formal Methods: Foundations and Applications. 23rd Brazilian Symposium, SBMF 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12475), P137, DOI 10.1007/978-3-030-63882-5_9
   Costa VS, 2018, NEUROCOMPUTING, V313, P402, DOI 10.1016/j.neucom.2018.06.021
   Cruz A, 2018, INT J APPROX REASON, V93, P261, DOI 10.1016/j.ijar.2017.11.004
   Fox R.W., 2004, INTRO MECANICA FLUID, V6th
   Gabbay D., 2004, P COMBLOG
   Gabbay D, 2012, ANN MATH ARTIF INTEL, V66, P131, DOI 10.1007/s10472-012-9316-8
   Gabbay DM, 2008, LECT NOTES COMPUT SC, V4800, P292, DOI 10.1007/978-3-540-78127-1_17
   Jain M, 2020, ELECTRON NOTES THEOR, V348, P85, DOI 10.1016/j.entcs.2020.02.006
   Klement Erich Peter, 2013, TRIANGULAR NORMS
   Lee K.H., 2004, 1 COURSE FUZZY THEOR, V27
   Mesiar R., 2008, REV AGGREGATION FUNC, P121
   Mordeson J. N., 2012, FUZZY GRAPHS FUZZY H, V46
   Pal M., 2020, MODERN TRENDS FUZZY
   Pinheiro J, 2018, INT J APPROX REASON, V97, P1, DOI 10.1016/j.ijar.2018.03.008
   Santiago R, 2021, SOFT COMPUT, V25, P6759, DOI 10.1007/s00500-020-05353-1
   Santiago R, 2019, SCI COMPUT PROGRAM, V175, P1, DOI 10.1016/j.scico.2019.01.007
   Farias ADS, 2016, IEEE INT FUZZY SYST, P288, DOI 10.1109/FUZZ-IEEE.2016.7737699
NR 23
TC 1
Z9 1
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2022
VL 216
AR 102776
DI 10.1016/j.scico.2022.102776
EA JAN 2022
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA ZG5YX
UT WOS:000760335200003
OA Green Published
DA 2024-07-18
ER

PT J
AU Alqasrawi, Y
   Azzeh, M
   Elsheikh, Y
AF Alqasrawi, Yousef
   Azzeh, Mohammad
   Elsheikh, Yousef
TI Locally weighted regression with different kernel smoothers for software
   effort estimation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Effort estimation; Locally weighted regression; Kernel function;
   k-nearest neighbors
ID CROSS; MODELS; PREDICTION; ENSEMBLE
AB Estimating software effort has been a largely unsolved problem for decades. One of the main reasons that hinders building accurate estimation models is the often heterogeneous nature of software data with a complex structure. Typically, building effort estimation models from local data tend to be more accurate than using the entire data. Previous studies have focused on the use of clustering techniques and decision trees to generate local and coherent data that can help in building local prediction models. However, these approaches may fall short in some aspect due to limitations in finding optimal clusters and processing noisy data. In this paper we used a more sophisticated locality approach that can mitigate these shortcomings that is Locally Weighted Regression (LWR). This method provides an efficient solution to learn from local data by building an estimation model that combines multiple local regression models in k-nearest-neighbor based model. The main factor affecting the accuracy of this method is the choice of the kernel function used to derive the weights for local regression models. This paper investigates the effects of choosing different kernels on the performance of Locally Weighted Regression of a software effort estimation problem. After comprehensive experiments with 7 datasets, 10 kernels, 3 polynomial degrees and 4 bandwidth values with a total of 840 Locally Weighted Regression variants, we found that: 1) Uniform kernel functions cannot outperform non-uniform kernel functions, and 2) kernel type, polynomial degrees and bandwidth parameters have no specific effect on the estimation accuracy. In other words, no change in bandwidth or degree values occurred with a significant difference in kernel rankings. In short, Locally Weighted Regression methods with Triweight or Triangle kernel can perform better than more complex kernels. Hence, we encourage non-uniform kernel methods as smoother function with wide bandwidth and small polynomial degree. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Alqasrawi, Yousef; Elsheikh, Yousef] Appl Sci Private Univ, Fac Informat Technol, Amman, Jordan.
   [Azzeh, Mohammad] Princess Sumaya Univ Technol, Dept Data Sci, Amman, Jordan.
C3 Princess Sumaya University for Technology
RP Azzeh, M (corresponding author), Princess Sumaya Univ Technol, Dept Data Sci, Amman, Jordan.
EM y_alqasrawi@asu.edu.jo; m.azzeh@psut.edu.jo; y_elsheikh@asu.edu.jo
RI Azzeh, Mohammad/G-5472-2017
OI Azzeh, Mohammad/0000-0002-0323-6452
FU Applied Science Private University, Amman, Jordan; Princess Sumaya
   University for Technology, Amman, Jordan
FX Authors are grateful to the Applied Science Private University, Amman,
   Jordan, for the financial support granted to cover the publication fee
   of this research article.; Mohammad Azzeh is grateful to the Princess
   Sumaya University for Technology, Amman, Jordan, for the financial
   support granted to cover part of the publication fee of this research
   article.
CR Ali A, 2021, SCI COMPUT PROGRAM, V205, DOI 10.1016/j.scico.2021.102621
   Amazal FA, 2019, J SOFTW-EVOL PROC, V31, DOI 10.1002/smr.2180
   Atkeson CG, 1997, ARTIF INTELL REV, V11, P11, DOI 10.1023/A:1006559212014
   Azzeh M., 2016, An application of classification and class decomposition to use case point estimation method, DOI [10.1109 /ICMLA.2015.105, DOI 10.1109/ICMLA.2015.105]
   Azzeh M, 2008, ICSOFT 2008: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL SE/GSDCA/MUSE, P127
   Azzeh M, 2021, SOFTWARE QUAL J, V29, P309, DOI 10.1007/s11219-021-09547-0
   Azzeh M, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.2110
   Azzeh M, 2018, IET SOFTW, V12, P19, DOI 10.1049/iet-sen.2016.0322
   Azzeh M, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1882
   Azzeh M, 2016, APPL SOFT COMPUT, V49, P981, DOI 10.1016/j.asoc.2016.05.008
   Azzeh M, 2016, NEURAL COMPUT APPL, V27, P2241, DOI 10.1007/s00521-015-2004-y
   Azzeh M, 2015, 2015 IEEE 14TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA), P1268, DOI 10.1109/ICMLA.2015.105
   Azzeh M, 2015, IET SOFTW, V9, P39, DOI 10.1049/iet-sen.2013.0165
   Azzeh M, 2015, J SYST SOFTWARE, V103, P36, DOI 10.1016/j.jss.2015.01.028
   BOEHM BW, 1984, IEEE T SOFTWARE ENG, V10, P4, DOI 10.1109/TSE.1984.5010193
   Corazza A, 2013, EMPIR SOFTW ENG, V18, P506, DOI 10.1007/s10664-011-9187-3
   Gallego JJC, 2007, J COMPUT SCI TECH-CH, V22, P371, DOI 10.1007/s11390-007-9043-5
   Dejaeger K, 2012, IEEE T SOFTWARE ENG, V38, P375, DOI 10.1109/TSE.2011.55
   Demsar J, 2006, J MACH LEARN RES, V7, P1
   Foss T, 2003, IEEE T SOFTWARE ENG, V29, P985, DOI 10.1109/TSE.2003.1245300
   Gautam SS, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1983
   Idri A, 2015, INFORM SOFTWARE TECH, V58, P206, DOI 10.1016/j.infsof.2014.07.013
   Jorgensen M, 2020, J SYST SOFTWARE, V159, DOI 10.1016/j.jss.2019.110448
   Jorgensen M, 2019, INFORM SOFTWARE TECH, V115, P93, DOI 10.1016/j.infsof.2019.08.006
   Keung J, 2013, AUTOMAT SOFTW ENG, V20, P543, DOI 10.1007/s10515-012-0108-5
   Kitchenham BA, 2007, IEEE T SOFTWARE ENG, V33, P316, DOI 10.1109/TSE.2007.1101
   Kocaguneli E., 2009, Combining Multiple Learners Induced on Multiple Datasets for Software Effort Prediction
   Kocaguneli E, 2013, IEEE T SOFTWARE ENG, V39, P1040, DOI 10.1109/TSE.2012.88
   Kocaguneli E, 2013, J SYST SOFTWARE, V86, P1879, DOI 10.1016/j.jss.2013.02.053
   Kocaguneli E, 2013, EMPIR SOFTW ENG, V18, P1, DOI 10.1007/s10664-011-9189-1
   Kocaguneli E, 2012, IEEE T SOFTWARE ENG, V38, P1403, DOI 10.1109/TSE.2011.111
   Kocaguneli E, 2012, IEEE T SOFTWARE ENG, V38, P425, DOI 10.1109/TSE.2011.27
   Kultur Y, 2009, KNOWL-BASED SYST, V22, P395, DOI 10.1016/j.knosys.2009.05.001
   Ma Y, 2012, INFORM SOFTWARE TECH, V54, P248, DOI 10.1016/j.infsof.2011.09.007
   Menzies T, 2006, IEEE T SOFTWARE ENG, V32, P883, DOI 10.1109/TSE.2006.114
   Menzies T, 2013, IEEE T SOFTWARE ENG, V39, P822, DOI 10.1109/TSE.2012.83
   Menzies Tim., 2012, PROMISE REPOSITORY E
   Minku LL, 2019, EMPIR SOFTW ENG, V24, P3153, DOI 10.1007/s10664-019-09686-w
   Minku LL, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2522920.2522928
   Minku LL, 2013, INFORM SOFTWARE TECH, V55, P1512, DOI 10.1016/j.infsof.2012.09.012
   Mittas N., 2012, RANKING CLUSTERING S
   Mittas N, 2013, IEEE T SOFTWARE ENG, V39, P537, DOI 10.1109/TSE.2012.45
   Nassif AB, 2013, J SYST SOFTWARE, V86, P144, DOI 10.1016/j.jss.2012.07.050
   Reyes O, 2018, INT J COMPUT INT SYS, V11, P282, DOI 10.2991/ijcis.11.1.22
   Rodríguez D, 2012, J SYST SOFTWARE, V85, P562, DOI 10.1016/j.jss.2011.09.009
   Ryu D, 2016, EMPIR SOFTW ENG, V21, P43, DOI 10.1007/s10664-014-9346-4
   Shepperd M, 1996, PROC INT CONF SOFTW, P170, DOI 10.1109/ICSE.1996.493413
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   Silhavy R, 2018, INFORM SOFTWARE TECH, V97, P1, DOI 10.1016/j.infsof.2017.12.009
   Song LY, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3295700
   Talgorn B, 2018, OPTIM ENG, V19, P213, DOI 10.1007/s11081-017-9370-5
   Wang Q, 2020, J AM STAT ASSOC, V115, P486
   Yin S, 2017, IEEE T IND ELECTRON, V64, P1507, DOI 10.1109/TIE.2016.2612161
NR 53
TC 9
Z9 9
U1 0
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102744
DI 10.1016/j.scico.2021.102744
EA NOV 2021
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Yan, JW
   Zhou, H
   Deng, X
   Wang, P
   Yan, RJ
   Yan, J
   Zhang, J
AF yan, Jiwei
   Zhou, Hao
   Deng, Xi
   Wang, Ping
   Yan, Rongjie
   Yan, Jun
   Zhang, Jian
TI Efficient testing of GUI applications by event sequence reduction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE GUI testing; Test reduction; Record-and-replay; Android application;
   Monkey
AB Automatic event sequence generation tools are widely used for testing GUI applications. With these tools, developers can easily test the target GUI applications with a large number of events and collect a group of crash-triggering sequences in a short time. However, some efficiency-oriented tools generate low-level events randomly based on coordinates of the screen instead of widgets, which leads to many ineffective events that have no contribution to the test. Besides, the randomly generated sequences may repeatedly operate on the same widget or jump to the same window, which increases the complexity of sequences and makes it difficult to extract key events that can lead to crashes.
   The sequence reduction technique can effectively help developers to understand the crashes and further improve the quality of code. In this paper, we propose a general model for the event sequence reduction problemon GUI applications. For better illustration, we take the random test generation tool Monkey as a concrete instance, which is widely used for testing Android applications, owing to its simplicity, effectiveness and good compatibility. To address the major drawbacks in original Monkey testing, in this paper, we attempt to enhance Monkey to support the sequence record-and-replay and propose a sequence reduction approach for Android apps, which helps the crash behavior comprehension and fault localization. By manually investigating the effectiveness of Monkey events, we find three types of ineffective events, including no-ops, single and combination of effect-free ones, and design nine reduction rules for them. To extract key events in one sequence for crash understanding, we analyze the state transition relation among events and propose a static GUI state hierarchy-tree-guided reduction approach. Additionally, we implement our approach in a tool CHARD to achieve event sequence reduction on real-world apps. We also design a semi-structured format to describe the actual behavior of events and improve the sequence comprehensibility.
   We collect 890 sequences from 74 applications as our benchmark, including 740 basic sequences, each of which contains 1,000 events, and 150 longer ones, each of which contains 10,000 events. CHARD can quickly identify 41.3% events as ineffective ones in the collected sequences. For sequences that can be stably replayed, over 94% of the reduced sequences keep the same functionalities as the original ones. By removing ineffective events, CHARD can be used as a pre-process part of the traditional delta-debugging process and make significant speed up. To evaluate the effectiveness of the key event extraction approach, we pick eight buggy applications and collect 40 crash-triggering event sequences generated by Monkey, the length of which varies from 19 to 2700. The results show that CHARD can successfully remove over 95.4% crash-irrelevant events in these crash-triggering sequences within around ten seconds, while the state-of-the-art delta-debugging tool removes 71.3% ones using over 27 hours, which indicates that CHARD can efficiently help the crash replay and sequence comprehension. (C) 2020 Elsevier B.V. All rights reserved.
C1 [yan, Jiwei; Zhou, Hao; Yan, Jun] Chinese Acad Sci, Technol Ctr Software Engn, Inst Software, Beijing, Peoples R China.
   [Deng, Xi; Wang, Ping; Yan, Rongjie; Yan, Jun; Zhang, Jian] Chinese Acad Sci, State Key Lab Comp Sci, Inst Software, Beijing, Peoples R China.
   [yan, Jiwei; Zhou, Hao; Deng, Xi; Yan, Jun; Zhang, Jian] Univ Chinese Acad Sci, Beijing, Peoples R China.
C3 Chinese Academy of Sciences; Institute of Software, CAS; Chinese Academy
   of Sciences; Institute of Software, CAS; Chinese Academy of Sciences;
   University of Chinese Academy of Sciences, CAS
RP Yan, J (corresponding author), Chinese Acad Sci, Technol Ctr Software Engn, Inst Software, Beijing, Peoples R China.; Zhang, J (corresponding author), Chinese Acad Sci, State Key Lab Comp Sci, Inst Software, Beijing, Peoples R China.
EM yanjun@ios.ac.cn; yanjun@ios.ac.cn; zj@ios.ac.cn
RI Yan, Jiwei/AAM-8797-2021
OI Yan, Jiwei/0000-0001-8080-7506
FU National Natural Science Foundation of China [61672505]; Key Research
   Program of Frontier Sciences, CAS [QYZDJSSW-JSC036]
FX This work is supported by National Natural Science Foundation of China
   (Grant No. 61672505), and Key Research Program of Frontier Sciences, CAS
   (Grant No. QYZDJSSW-JSC036). We are grateful to Yajun Zhu for
   proofreading.
CR Alagar VangalurS., 1998, GRAD TEXT COMP SCI
   Amalfitano D, 2015, 2015 30TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING WORKSHOP (ASEW), P50, DOI 10.1109/ASEW.2015.19
   Anandan S, 2012, MATER SCI FORUM, V712, P1, DOI 10.4028/www.scientific.net/MSF.712.1
   Azim T, 2013, ACM SIGPLAN NOTICES, V48, P641, DOI [10.1145/2509136.2509549, 10.1145/2544173.2509549]
   Baek YM, 2016, IEEE INT CONF AUTOM, P238, DOI [10.1145/2970276.2970313, 10.1145/2970276.2970310]
   Choudhary SR, 2015, IEEE INT CONF AUTOM, P429, DOI 10.1109/ASE.2015.89
   Clapp L, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P422, DOI 10.1145/2950290.2950342
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Gu TX, 2019, PROC INT CONF SOFTW, P269, DOI 10.1109/ICSE.2019.00042
   Gu TX, 2017, PROC IEEE INT CONF S, P103, DOI 10.1109/ICSME.2017.72
   [顾咏丰 Gu Yongfeng], 2019, [中国科学. 信息科学, Scientia Sinica Informationis], V49, P1383
   Gyimóthy T, 1999, LECT NOTES COMPUT SC, V1687, P303, DOI 10.1145/318774.319248
   Hammoudi M, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P333, DOI 10.1145/2786805.2786846
   Hu Cuixiong, 2011, Proceedings of the 6th International Workshop on Automation of Software Test, P77
   Hu GuiXue Hu GuiXue, 2014, Journal of Economic Animal, V18, P1
   Jensen C S, 2013, P 2013 INT S SOFTW T, P67, DOI [10.1145/2483760.2483777, DOI 10.1145/2483760.2483777]
   Jiang B, 2017, IEEE INT CONF AUTOM, P297, DOI 10.1109/ASE.2017.8115643
   Liang CJM, 2014, PROCEEDINGS OF THE 20TH ANNUAL INTERNATIONAL CONFERENCE ON MOBILE COMPUTING AND NETWORKING (MOBICOM '14), P519, DOI 10.1145/2639108.2639131
   Liu JR, 2017, 2017 IEEE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P502, DOI 10.1109/SANER.2017.7884662
   Machiry A., 2013, P 2013 9 JOINT M FDN, P224
   Mahmood R., 2012, 2012 Proceedings of 7th International Workshop on Automation of Software Test (AST 2012), P22, DOI 10.1109/IWAST.2012.6228986
   Mahmood R, 2014, 22ND ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (FSE 2014), P599, DOI 10.1145/2635868.2635896
   Mao K., 2016, P 25 INT S SOFTW TES, P94
   McMaster S, 2008, IEEE T SOFTWARE ENG, V34, P99, DOI 10.1109/TSE.2007.70756
   Moran K, 2016, IEEE INT CONF SOFTW, P33, DOI 10.1109/ICST.2016.34
   Qian C, 2017, IEEE T AERO ELEC SYS, V53, P2128, DOI 10.1109/TAES.2017.2683598
   Sahin O, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P128, DOI 10.1109/ASE.2019.00022
   Sipser M., 2013, Introduction to the theory of computation, V3
   Statista, 2019, NEWS ACCELERATOR MAR
   Su T, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P245, DOI 10.1145/3106237.3106298
   Sui YL, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P1095, DOI 10.1145/3338906.3341183
   van der Merwe H., 2014, SIGSOFT Softw. Eng. Notes, V39, P1
   Wang J, 2018, J SYST SOFTWARE, V137, P448, DOI 10.1016/j.jss.2017.06.038
   Wang P, 2019, 2019 13TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2019), P264, DOI [10.1109/TASE.2019.00042, 10.1109/TASE.2019.00012]
   Wang WY, 2018, IEEE INT CONF AUTOM, P738, DOI 10.1145/3238147.3240465
   WEISER M, 1982, COMMUN ACM, V25, P446, DOI 10.1145/358557.358577
   Wu TY, 2019, FRONT COMPUT SCI-CHI, V13, P1210, DOI 10.1007/s11704-018-7008-1
   Yang W, 2013, LECT NOTES COMPUT SC, V7793, P250, DOI 10.1007/978-3-642-37057-1_19
   Zeller A, 2002, IEEE T SOFTWARE ENG, V28, P183, DOI 10.1109/32.988498
   Zeng X, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P987, DOI 10.1145/2950290.2983958
   Zhang Xiangyu., 2006, SIGSOFT 06FSE 14, P81, DOI DOI 10.1145/1181775.1181786
   Zhang ZG, 2003, PROC INT CONF SOFTW, P319
   Zhao Y, 2019, PROC INT CONF SOFTW, P128, DOI 10.1109/ICSE.2019.00030
NR 43
TC 7
Z9 8
U1 2
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2021
VL 201
AR 102522
DI 10.1016/j.scico.2020.102522
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OS0ZN
UT WOS:000589893400001
DA 2024-07-18
ER

PT J
AU Lecomte, T
   Deharbe, D
   Fournier, P
   Oliveira, M
AF Lecomte, Thierry
   Deharbe, David
   Fournier, Paulin
   Oliveira, Marcel
TI The CLEARSY safety platform: 5 years of research, development and
   deployment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 22nd Brazilian Symposium on Formal Methods (SBMF)
CY NOV 25-29, 2019
CL Sao Paulo, BRAZIL
SP Brazilian Comp Soc
DE Formal methods; Safety critical; Software development; Railway
AB The CLEARSY Safety Platform (CSSP) was designed to ease the development of safety critical systems and to reduce the overall costs (development, deployment, and certification) under the pressure of the worldwide market. A smart combination of hardware features (double processor) and formal method (B method and code generators) was used to produce a SIL4-ready platform where safety principles are built-in and cannot be altered by the developer. Summarizing a 5-year return of experience in the effective application in the railways, this article explains how this approach is a game-changer and tries to anticipate the future of this platform for safety critical systems. In particular, the education of future engineers and the seamless integration in existing engineering processes with the support of Domain Specific Languages are key topics for a successful deployment in other domains. DSL like Robosim to program mobile robots and relay circuits to design railway signaling systems are connected to the platform. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Lecomte, Thierry; Deharbe, David; Fournier, Paulin] CLEARSY, Aix En Provence, France.
   [Oliveira, Marcel] Univ Fed Rio Grande do Norte, IMD, Natal, RN, Brazil.
C3 Universidade Federal do Rio Grande do Norte
RP Lecomte, T (corresponding author), CLEARSY, Aix En Provence, France.
EM thierry.lecomte@clearsy.com; david.deharbe@clearsy.com;
   paulin.fournier@clearsy.com; marcel@dimap.ufrn.br
RI ; Deharbe, David/C-8531-2009
OI Oliveira, Marcel/0000-0002-3023-2748; Deharbe,
   David/0000-0001-7589-3323; lecomte, thierry/0000-0001-8977-4827
FU BPI-France (Banque Publique d'Investissement); Metropole Aix-Marseille
   as part of the project LCHIP (Low Cost High Integrity Platform); INES
   2.0; FACEPE [APQ-0399-1.03/17]; CAPES [88887.136410/2017-00]; CNPq
   [465614/2014-0]
FX The work and results described in this article were partly funded by
   BPI-France (Banque Publique d'Investissement) and Metropole
   Aix-Marseille as part of the project LCHIP (Low Cost High Integrity
   Platform) selected for the call AAP-21. This research was also partially
   funded by INES 2.0, FACEPE grant APQ-0399-1.03/17, CAPES grant
   88887.136410/2017-00, and CNPq grant 465614/2014-0.
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 2010, SAFETY COMPUTER ARCH
   [Anonymous], 2005, B BOOK ASSIGNING PRO
   Baro S., 2008, EMBEDDED REAL TIME S
   Behm P, 1999, LECT NOTES COMPUT SC, V1708, P369
   Cao Y, 2019, SENSORS-BASEL, V19, DOI 10.3390/s19040818
   Cao Yuan, 2013, Journal of Traffic and Transportation Engineering, V13, P107
   Cavalcanti A, 2019, SCI COMPUT PROGRAM, V174, P1, DOI 10.1016/j.scico.2019.01.004
   Corbier F., 2016, P 8 EUR C EMB REAL T
   ESSAME D, 1999, P 7 IFIP INT WORK C, P213
   Forin P., 1990, Control, Computers, Communications in Transportation. Selected Papers from the IFAC/IFIP/IFORS Symposium, P79
   Foster S, 2016, LECT NOTES COMPUT SC, V9965, P295, DOI 10.1007/978-3-319-46750-4_17
   Gao Y, 2018, URBAN PLAN, V3, P82, DOI 10.17645/up.v3i2.1246
   Gibson-Robinson T., 2014, Lecture Notes in Computer Science, V8413, P187
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Ingibergsson JTM, 2017, 2017 FIRST IEEE INTERNATIONAL CONFERENCE ON ROBOTIC COMPUTING (IRC), P89, DOI 10.1109/IRC.2017.27
   Jones CB, 2010, REFLECTIONS ON THE WORK OF C A R HOARE, P1, DOI 10.1007/978-1-84882-912-1_1
   Kilmer R., 1984, P SME ROB 8 C EXP
   Lecomte T., 2007, P BRAZ S FORM METH S, P26
   Lecomte T., 2016, P C LAMBD MU 20
   Lecomte T, 2008, LECT NOTES COMPUT SC, V5014, P430, DOI 10.1007/978-3-540-68237-0_32
   Lecomte T, 2017, LECT NOTES COMPUT SC, V10623, P70, DOI 10.1007/978-3-319-70848-5_6
   Lecomte T, 2009, LECT NOTES COMPUT SC, V5825, P26, DOI 10.1007/978-3-642-04570-7_3
   Miyazawa A, 2017, IEEE INT C INT ROBOT, P3869, DOI 10.1109/IROS.2017.8206238
   Pereira DID, 2019, LECT NOTES COMPUT SC, V11495, P242, DOI 10.1007/978-3-030-18744-6_16
   Retiveau R., 1987, La signalisation ferroviaire
   Sabatier D, 2016, LECT NOTES COMPUT SC, V9707, P20, DOI 10.1007/978-3-319-33951-1_2
   Wang HF, 2008, 2008 ISECS INTERNATIONAL COLLOQUIUM ON COMPUTING, COMMUNICATION, CONTROL, AND MANAGEMENT, VOL 1, PROCEEDINGS, P538, DOI 10.1109/CCCM.2008.269
   Zheng S., 2014, DESIGN VERIFICATION, V38, P128, DOI [10.11860/j.issn.1673-0291.2014.03.022, DOI 10.11860/J.ISSN.1673-0291.2014.03.022]
NR 29
TC 1
Z9 1
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2020
VL 199
AR 102524
DI 10.1016/j.scico.2020.102524
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NZ8IA
UT WOS:000577344100004
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Feitosa, S
   Ribeiro, R
   Du Bois, A
AF Feitosa, Samuel
   Ribeiro, Rodrigo
   Du Bois, Andre
TI A type-directed algorithm to generate random well-typed Java 8 programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st Brazilian Symposium on Formal Methods (SBMF)
CY NOV 26-30, 2018
CL Salvador, BRAZIL
DE Featherweight Java; QuickCheck; Property-based testing
AB Property-based testing of compilers or programming language semantics is difficult to accomplish because it is hard to design a random generator for valid programs. Most compiler test tools do not have a well-specified way for generating type-correct programs, which is a requirement for such testing activities. In this project, we formalize a type-directed procedure to generate random well-typed Java 8 programs in the context of Featherweight Java, extending it with interfaces, lambda-expressions and default methods. We implement the approach using the Haskell programming language and verify it against relevant properties using QuickCheck, a library for property-based testing. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Feitosa, Samuel; Du Bois, Andre] Univ Fed Pelotas, Programa Posgrad Comp, PPGC, Pelotas, RS, Brazil.
   [Ribeiro, Rodrigo] Univ Fed Ouro Preto, Programa Posgrad Ciencia Comp, PPGCC, Ouro Preto, MG, Brazil.
C3 Universidade Federal de Pelotas; Universidade Federal de Ouro Preto
RP Feitosa, S (corresponding author), Univ Fed Pelotas, Programa Posgrad Comp, PPGC, Pelotas, RS, Brazil.
EM samuel.feitosa@ifsc.edu.br
OI Feitosa, Samuel/0000-0002-9485-4845; Ribeiro, Rodrigo
   Geraldo/0000-0003-0131-5154
FU CAPES [88881.189154/2018-01]
FX This material is based upon work supported by the CAPES with grant
   88881.189154/2018-01.
CR Allwood TOR, 2009, ELECTRON NOTES THEOR, V238, P3, DOI 10.1016/j.entcs.2009.09.037
   [Anonymous], 2014, The Java Language Specification, Java SE
   [Anonymous], 2007, P 6 JOINT M EUR SOFT
   BAZZICHI F, 1982, IEEE T SOFTWARE ENG, V8, P343, DOI 10.1109/TSE.1982.235428
   Bellia M, 2011, FUND INFORM, V109, P237, DOI 10.3233/FI-2011-508
   Bettini L., 2018, ARXIV180105052 CORR
   Blanco R., 2017, LFMTP 17 LOGICAL FRA
   CELENTANO A, 1980, SOFTWARE PRACT EXPER, V10, P897, DOI 10.1002/spe.4380101104
   Claessen K, 2000, ACM SIGPLAN NOTICES, V35, P268, DOI 10.1145/357766.351266
   da Silva Feitosa S., 2018, P 22 BRAX S PROGR LA, P43
   Debbabi M, 2007, J OBJECT TECHNOL, V6, P117, DOI 10.5381/jot.2007.6.8.a3
   Drienyovszky D, 2010, ERLANG 2010: PROCEEDINGS OF THE 2010 ACM SIGPLAN, ERLANG WORKSHOP, P75
   Feitosa S., 2019, TYPE DIRECTED ALGORI
   Feitosa Samuel S., 2018, Formal Methods: Foundations and Applications, P39
   Gill A, 2007, HASKELL'07: PROCEEDINGS OF THE ACM SIGPLAN 2007 HASKELL WORKSHOP, P1
   Gligoric M., 2010, P 32 ACM IEEE INT C, P225, DOI 10.1145/1806799.1806835
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Klein C, 2010, ACM SIGPLAN NOTICES, V45, P555, DOI 10.1145/1932682.1869505
   Lindig C., 2005, AADEBUG, P3
   Midtgaard J, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3110259
   Mongiovi M, 2014, PROC IEEE INT CONF S, P371, DOI 10.1109/ICSME.2014.59
   Monié F, 2015, REV TRANSP TERRIT, P110
   Palka Michal H, 2011, P 6 INT WORKSH AUT S, P91, DOI DOI 10.1145/1982595.1982615
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Soares G, 2013, IEEE T SOFTWARE ENG, V39, P147, DOI 10.1109/TSE.2012.19
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P216, DOI [10.1145/2666356.2594334, 10.1145/2594291.2594334]
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
NR 27
TC 2
Z9 2
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2020
VL 196
AR 102494
DI 10.1016/j.scico.2020.102494
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA LY6WG
UT WOS:000540668900007
DA 2024-07-18
ER

PT J
AU Ribeiro, C
   Berry, D
AF Ribeiro, Cristina
   Berry, Daniel
TI The prevalence and severity of persistent ambiguity in software
   requirements specifications: Is a special effort needed to find them?
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ambiguity inspection; Case study; Purposive sampling; Random sampling;
   Requirements engineering discussions
AB Context and motivation: All the research in methods and tools for avoiding, detecting, and removing ambiguities in requirements specifications assumes that doing so is necessary and that the methods and tools for doing so are worth the effort to use them. Each of two attempts by de Bruijn et al. and Philippo et al. to test these assumptions empirically with a case study examined a random sampling of the ambiguities in the requirements specification for already constructed software. Each study concluded that ambiguities in the examined requirements specification did not result in any serious defects in the downstream development and seem to have been resolved through the normal multiple inspections and discussions that characterize a serious requirements engineering process.
   Question/problem: However, because each study examined only a small random sampling of the many ambiguities in its specification, it may have missed the rare ambiguity that causes a serious defect in the constructed software. Moreover, as a case study, its results cannot be generalized. So the unanswered questions are: (1) "How prevalent are ambiguities that cause defects?" and (2) "What kinds of defects do these ambiguities cause?"
   Principal idea/Goal: The research reported in this paper tried hard to falsify de Bruijn's and Philippo's result in three different case studies, each with a requirements specification and already developed software. Each study used a purposive sampling of the ambiguities in its requirements specification to find those ambiguities that are least likely to have been discussed and resolved during the inspections and discussions about the specifications in an attempt to find undetected ambiguities that caused or can cause major defects in the implemented software. The purposive sampling was to identify types of ambiguity, called persistent ambiguities of which many people are not aware; which, therefore, will not come up in any of the discussions about the requirements; and which will persist into the implementation to cause defects. After obtaining the persistent ambiguities in the project's requirements specification, we asked the project's chief requirements engineer if any of them caused or can cause serious defects in the project's software.
   Conclusion/Contribution: For the three projects, none of the sampled ambiguities reviewed by each chief requirements engineer caused expensive damage because all of the project's requirements engineers seem to have subconsciously disambiguated the ambiguities in the same way. The first main conclusion is that persistent ambiguities remain undetected during requirements engineering and the subsequent development. The second main conclusion is that a serious requirements engineering process is sufficient to cause all project stakeholders to disambiguate, consciously or not, all ambiguities, persistent or not, in a requirements specification the same way; thus, ambiguities, while present in the specification, do not cause defects in the downstream software. The third main conclusion is that the identification of persistent ambiguities in a requirements specification is potentially an effective and efficient strategy for minimizing damage caused by ambiguity precisely because of its focus on ambiguities that remain undetected due to lack of awareness. Further study is necessary to determine what factors are involved in persistent ambiguity and its prevalence, as well as its potential impacts. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Ribeiro, Cristina] Sheridan Coll, Sch Appl Comp, Oakville, ON L6H 2L1, Canada.
   [Berry, Daniel] Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
C3 University of Waterloo
RP Berry, D (corresponding author), Univ Waterloo, Cheriton Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
EM cristina.ribeiro@sheridancollege.ca; dberry@uwaterloo.ca
RI Ribeiro, Cristina/B-3677-2012
FU Canadian NSERC Discovery Grant [NSERCRGPIN227055]
FX Cristina Ribeiro's and Daniel Berry's work were supported in parts by a
   Canadian NSERC Discovery Grant NSERCRGPIN227055.
CR [Anonymous], 1996, SEMANTIC AMBIGUITY U
   [Anonymous], 2020, LAERD DISSERTATION P
   Armstrong S., 1999, NATURAL LANGUAGE PRO
   Berry Daniel, 2012, Requirements Engineering: Foundation for Software Quality. Proceedings 18th International Working Conference, REFSQ 2012, P211, DOI 10.1007/978-3-642-28714-5_18
   Berry D. M., 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P311, DOI 10.1109/RE.2010.44
   Berry D. M., 2006, P INT WORKSH REQ ENG, P115
   Berry DanielM., 2008, Innovations for Requirement Analysis. From Stakeholders' Needs to Formal Designs, P1, DOI DOI 10.1007/978-3-540-89778-1_1
   Berry DM, 2005, IEEE SOFTWARE, V22, P55, DOI 10.1109/MS.2005.22
   Berry DM, 2004, SPRING INT SER ENG C, V753, P7
   BERRY DM, 2003, TECHNICAL REPORT
   Berube M., 1996, AM HERITAGE BOOK ENG
   Bird S, 2009, COMPUT LINGUIST, V35, P469, DOI 10.1162/coli.35.3.469
   Boehm BW., 1981, Software Engineering Economics
   Bucchiarone A., 2010, P 2010 ACM S APPL CO, P281
   Chantree F, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P59
   Cohen D., 2006, SEMISTRUCTURED INTER
   COMER JR, 1983, SIGPLAN NOTICES, V18, P25, DOI 10.1145/988193.988196
   de Bruijn F, 2010, LECT NOTES COMPUT SC, V6182, P233, DOI 10.1007/978-3-642-14192-8_21
   Dowty DavidR., 1987, P 3 E STATES C LINGU, P97
   DUPRE L, 1998, BUGS WRITING GUIDE D
   Enomoto H., 1984, ADV ARTIFICIAL INTEL, P721
   Ferrari A, 2014, 2014 IEEE 1ST INTERNATIONAL WORKSHOP ON ARTIFICIAL INTELLIGENCE FOR REQUIREMENTS ENGINEERING (AIRE), P1, DOI 10.1109/AIRE.2014.6894849
   Freedman Daniel P., 1990, Handbook of walkthroughs, inspections, and technical reviews
   Fuchs N., 1999, TECHNICAL REPORT
   Garigliano R., 2000, ICS 16 IFIP WCC, P39
   Gause D.C., 1989, EXPLORING REQUIREMEN
   GAUSE DC, 2000, WORKSH FULL LIF CYCL
   Gervasi Vincenzo, 2019, From Software Engineering to Formal Methods and Tools, and Back: Essays Dedicated to Stefania Gnesi on the Occasion of Her 65th Birthday. Lecture Notes in Computer Science (LNCS 11865), P191, DOI 10.1007/978-3-030-30985-5_12
   Gervasi V, 2010, LECT NOTES COMPUT SC, V6182, P248, DOI 10.1007/978-3-642-14192-8_22
   Gleich B, 2010, LECT NOTES COMPUT SC, V6182, P218, DOI 10.1007/978-3-642-14192-8_20
   Huddleston R., 2010, CAMBRIDGE GRAMMAR EN, DOI DOI 10.1017/9781316423530
   Hui Yang, 2010, Proceedings of the 2010 IEEE 18th International Conference on Requirements Engineering (RE2010), P25, DOI 10.1109/RE.2010.14
   Kamsties E, 2005, ENGINEERING AND MANAGING SOFTWARE REQUIREMENTS, P245, DOI 10.1007/3-540-28244-0_11
   Kamsties E., 2001, P 1 WORKSH INSP SOFT, P68
   Kiyavitskaya N, 2008, REQUIR ENG, V13, P207, DOI 10.1007/s00766-008-0063-7
   Kovitz B.L, 1998, PRACTICAL SOFTWARE R
   Mich L, 2004, REQUIR ENG, V9, P40, DOI 10.1007/s00766-003-0179-8
   Moeser R., 2003, EVLASW003
   Niknafs A, 2017, EMPIR SOFTW ENG, V22, P80, DOI 10.1007/s10664-015-9416-2
   Osborne M, 1996, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING, P229, DOI 10.1109/ICRE.1996.491451
   Philippo Erik Jan, 2013, Requirements Engineering: Foundation for Software Quality. 19th International Working Conference, REFSQ 2013. Proceedings, P65, DOI 10.1007/978-3-642-37422-7_5
   Ribeiro C.G., 2016, THESIS
   Robertson S., 2006, Mastering the Requirements Process
   Rosenberg L. H., 1998, Sixteenth Annual Pacific Northwest Software Quality Conference Joint ASQ Software Division's Eighth International Conference on Software Quality, P107
   Ryan K, 1993, P IEEE INT S REQ ENG, P240, DOI 10.1109/ISRE.1993.324852
   Schwertel U., 2005, THESIS
   Stanford Natural Language Processing Group, 2020, STANFORD LOG LINEAR
   Tjong S.F., 2006, P COMP SCI MATH S CS
   Tjong S. F., 2013, The design of SREE-a prototype potential ambiguity finder for requirements specifications and lessons learned, V7830, P80, DOI DOI 10.1007/978-3-642-37422-7_6
   Tjong S.F., 2007, P WORKSH REQ ENG, P97
   University of Chicago Press Staff, 2010, U CHICAGO PRESS STAF
   Wilson WM, 1997, PROC INT CONF SOFTW, P161, DOI 10.1145/253228.253258
NR 52
TC 4
Z9 4
U1 2
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2020
VL 195
AR 102472
DI 10.1016/j.scico.2020.102472
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LR7RO
UT WOS:000535893800003
DA 2024-07-18
ER

PT J
AU Xiang, SQ
   Zhu, HB
   Wu, X
   Xiao, LL
   Bonsangue, M
   Xie, WL
   Zhang, L
AF Xiang, Shuangqing
   Zhu, Huibiao
   Wu, Xi
   Xiao, Lili
   Bonsangue, Marcello
   Xie, Wanling
   Zhang, Lei
TI Modeling and verifying the topology discovery mechanism of OpenFlow
   controllers in software-defined networks using process algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal verification; Modeling; SDN; Secure topology discovery; TopoGuard
ID VERIFICATION
AB Software-Defined Networking (SDN) is an emerging paradigm, providing separation of concerns between controllers that manage the network and switches that forward data flow. SDN enables network programmability and reduces the complexity of network control and management. The OpenFlow protocol is a widely accepted interface between SDN controllers and switches. OpenFlow controllers are the core of Software-Defined Networks (SDNs). They collect topology information to build a global and shared view of the network, which is used to provide services for topology-dependent core modules and applications. Therefore, the accuracy of the centralized abstract view of the network is of outermost importance for many essential SDN operations. However, the topology discovery mechanism used in almost all the mainstream OpenFlow controllers suffers from two kinds of topology poisoning attacks: Link Fabrication Attack and Host Hijacking Attack. TopoGuard is a wide-spread secure OpenFlow controller, which improves the standard topology discovery mechanism, providing automatic and real-time detection of these two attacks. However, the mechanism of TopoGuard lacks formal verification, especially in the situation where some hosts are migrating to their new locations. In this paper, we propose a general parameterized framework, including the Communicating Sequential Processes (CSP) models of the network components and the interfaces among them. Two loopholes of TopoGuard are found by implementing and verifying the proposed system model, which is an instance of the framework, in the model checker Process Analysis Toolkit (PAT). Moreover, we propose a new topology discovery mechanism based on TopoGuard, which solves the two loopholes. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Xiang, Shuangqing; Zhu, Huibiao; Xiao, Lili] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
   [Wu, Xi] Univ Sydney, Sch Comp Sci, Sydney, NSW, Australia.
   [Xiang, Shuangqing; Bonsangue, Marcello] Leiden Univ, LIACS, Niels Bohrweg 1, NL-2333 CA Leiden, Netherlands.
   [Xie, Wanling] Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.
   [Zhang, Lei] East China Normal Univ, Shanghai Key Lab Multidimens Informat Proc, Shanghai, Peoples R China.
C3 East China Normal University; University of Sydney; Leiden University;
   Leiden University - Excl LUMC; Nanjing University of Aeronautics &
   Astronautics; East China Normal University
RP Zhu, HB (corresponding author), East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
EM hbzhu@sei.ecnu.edu.cn
FU National Key Research and Development Program of China [2018YFB2101300];
   National Natural Science Foundation of China [61872145]; Shanghai
   Collaborative Innovation Center of Trustworthy Software for Internet of
   Things [ZF1213]; Fundamental Research Funds for the Central Universities
   of China
FX This work was partly supported by National Key Research and Development
   Program of China (Grant No. 2018YFB2101300), National Natural Science
   Foundation of China (Grant No. 61872145), Shanghai Collaborative
   Innovation Center of Trustworthy Software for Internet of Things (Grant
   No. ZF1213) and the Fundamental Research Funds for the Central
   Universities of China.
CR Albert E, 2018, LECT NOTES COMPUT SC, V10951, P550, DOI 10.1007/978-3-319-95582-7_33
   Alharbi T, 2015, C LOCAL COMPUT NETW, P502, DOI 10.1109/LCN.2015.7366363
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], 2014, P 11 USENIX C NETW S
   [Anonymous], P 9 USENIX S NETW SY
   [Anonymous], 42 IEEE C LOC COMP N
   Dhawan M, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23064
   Fei Y, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1919
   Freire L, 2018, PROCEEDINGS OF THE SYMPOSIUM ON SDN RESEARCH (SOSR'18), DOI 10.1145/3185467.3185499
   Guha A, 2013, ACM SIGPLAN NOTICES, V48, P483, DOI 10.1145/2499370.2462178
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Hong SM, 2015, 22ND ANNUAL NETWORK AND DISTRIBUTED SYSTEM SECURITY SYMPOSIUM (NDSS 2015), DOI 10.14722/ndss.2015.23283
   IEEE, 2016, IEEE STD 80211 2016, P1, DOI 10.1109/ IEEESTD.2016.7524656
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Khan S, 2017, IEEE COMMUN SURV TUT, V19, P303, DOI 10.1109/COMST.2016.2597193
   Khurshid A, 2012, ACM SIGCOMM COMP COM, V42, P467, DOI 10.1145/2377677.2377766
   Kreutz D, 2015, P IEEE, V103, P14, DOI 10.1109/JPROC.2014.2371999
   Lowe G, 1997, IEEE T SOFTWARE ENG, V23, P659, DOI 10.1109/32.637148
   McKeown N, 2008, ACM SIGCOMM COMP COM, V38, P69, DOI 10.1145/1355734.1355746
   Pakzad F, 2016, COMPUT COMMUN, V77, P52, DOI 10.1016/j.comcom.2015.09.013
   Roscoe AW, 2010, TEXTS COMPUT SCI, P3, DOI 10.1007/978-1-84882-258-0_1
   Scott C, 2014, SIGCOMM'14: PROCEEDINGS OF THE 2014 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION, P395, DOI [10.1145/2619239.2626304, 10.1145/2740070.2626304]
   Si YJ, 2014, FRONT COMPUT SCI-CHI, V8, P1, DOI 10.1007/s11704-013-3091-5
   Son Sooel, 2013, 2013 IEEE International Conference on Communications (ICC), P1974, DOI 10.1109/ICC.2013.6654813
   Sun J, 2013, ACM T SOFTW ENG METH, V22, DOI 10.1145/2430536.2430537
   Sun J, 2009, LECT NOTES COMPUT SC, V5643, P709, DOI 10.1007/978-3-642-02658-4_59
   Vanbever Laurent., 2013, Proceedings of the 2nd ACM SIGCOMM Workshop on Hot Topics in Software Defined Networking, HotSDN '13, P133
   Wu X, 2016, FUTURE GENER COMP SY, V56, P153, DOI 10.1016/j.future.2015.09.007
   Xiang SQ, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P84, DOI 10.1109/TASE.2018.00019
NR 29
TC 3
Z9 4
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 15
PY 2020
VL 187
AR 102343
DI 10.1016/j.scico.2019.102343
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KM2YN
UT WOS:000513988800005
OA Bronze
DA 2024-07-18
ER

PT J
AU Bae, K
   Rocha, C
AF Bae, Kyungmin
   Rocha, Camilo
TI Symbolic state space reduction with guarded terms for rewriting modulo
   SMT
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Rewriting modulo SMT; Symbolic reachability analysis; State space
   reduction; Rewriting logic; CASH scheduling algorithm
ID LOGIC
AB Rewriting modulo SMT is a novel symbolic technique to model and analyze infinite-state systems that interact with a non-deterministic environment, by seamlessly combining rewriting modulo equational theories, SMT solving, and model checking. This paper presents guarded terms, an approach to deal with the symbolic state-space explosion problem for rewriting modulo SMT, one of the main challenges of this technique. Guarded terms can encode many symbolic states into one by using SMT constraints as part of the term structure. This approach enables the reduction of the symbolic state space by limiting branching due to concurrent computation, and the complexity and size of constraints by distributing them in the term structure. A case study of an unbounded and symbolic priority queue illustrates the approach. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Bae, Kyungmin] Pohang Univ Sci & Technol, Pohang, South Korea.
   [Rocha, Camilo] Pontificia Univ Javeriana, Cali, Colombia.
C3 Pohang University of Science & Technology (POSTECH); Pontificia
   Universidad Javeriana
RP Rocha, C (corresponding author), Pontificia Univ Javeriana, Cali, Colombia.
EM kmbae@postech.ac.kr; camilo.rocha@javerianacali.edu.co
OI Bae, Kyungmin/0000-0002-6430-5175; Rocha, Camilo/0000-0003-4356-7704
FU Next-Generation Information Computing Development Program through the
   National Research Foundation of Korea (NRF) - Ministry of Science, ICT
   [2017M3C4A7068175]; Basic Science Research Program through the National
   Research Foundation of Korea (NRF) - Ministry of Education
   [2016R1D1A1B03935275]; POSTECH Basic Science Research Institute; CAPES;
   Colciencias; INRIA via the STIC AmSud project "EPIC: EPistemic
   Interactive Concurrency" [88881.117603/2016-01]; INRIA via the Capital
   Semilla 2017 project "SCORES: Stochastic Concurrency in Rewrite-based
   Probabilistic Models" [020100610]
FX The first author was supported in part by Next-Generation Information
   Computing Development Program through the National Research Foundation
   of Korea (NRF) funded by the Ministry of Science, ICT
   (2017M3C4A7068175), Basic Science Research Program through the National
   Research Foundation of Korea (NRF) funded by the Ministry of Education
   (2016R1D1A1B03935275), and POSTECH Basic Science Research Institute. The
   second author has been supported in part by CAPES, Colciencias, and
   INRIA via the STIC AmSud project "EPIC: EPistemic Interactive
   Concurrency" (Proc. No 88881.117603/2016-01), and Capital Semilla 2017
   project "SCORES: Stochastic Concurrency in Rewrite-based Probabilistic
   Models" (Proj. No. 020100610).
CR Aguirre L, 2017, PROCEEDINGS OF THE 19TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2017), P17, DOI 10.1145/3131851.3131856
   Aguirre L, 2018, J AUTOM REASONING, V60, P421, DOI 10.1007/s10817-017-9417-5
   [Anonymous], THESIS
   [Anonymous], 2007, LNCS
   Armando Alessandro, 2009, International Journal on Software Tools for Technology Transfer, V11, P69, DOI 10.1007/s10009-008-0091-0
   Bae K., 2013, LIPICS, V21, P81
   Bae  K., 2017, NOTE GUARDED TERMS R
   Bae K, 2017, LECT NOTES COMPUT SC, V10487, P78, DOI 10.1007/978-3-319-68034-7_5
   Baldoni R, 2018, ACM COMPUT SURV, V51, DOI 10.1145/3182657
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Caccamo M, 2000, REAL TIM SYST SYMP P, P295, DOI 10.1109/REAL.2000.896018
   Cadar C., 2008, Proceedings of the 8th USENIX conference on Operating systems design and implementation, OSDI'08, (USA), P209
   Cadar C, 2013, COMMUN ACM, V56, P82, DOI 10.1145/2408776.2408795
   Cholewa A, 2015, SCI COMPUT PROGRAM, V112, P24, DOI 10.1016/j.scico.2015.06.001
   Cimatti Alessandro, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P277, DOI 10.1007/978-3-642-31424-7_23
   Dowek G, 2010, ELECTRON P THEOR COM, P77, DOI 10.4204/EPTCS.18.6
   Duran Francisco, 2008, Higher-Order and Symbolic Computation, V21, P59, DOI 10.1007/s10990-008-9028-2
   Durán F, 2012, J LOGIC ALGEBR PROGR, V81, P816, DOI 10.1016/j.jlap.2011.12.004
   Durán F, 2009, LECT NOTES ARTIF INT, V5749, P246, DOI 10.1007/978-3-642-04222-5_15
   Lal A., 2012, MSRTR20129
   Meseguer J., 2007, Higher-Order and Symbolic Computation, V20, P123, DOI 10.1007/s10990-007-9000-6
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer  J., 2018, 2142102183 U ILL
   Meseguer J, 2018, SCI COMPUT PROGRAM, V154, P3, DOI 10.1016/j.scico.2017.09.001
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   MIDDELDORP A, 1994, APPL ALGEBR ENG COMM, V5, P213, DOI 10.1007/BF01190830
   Ölveczky PC, 2006, LECT NOTES COMPUT SC, V3922, P357
   Rocha Camilo, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P314, DOI 10.1007/978-3-642-22944-2_22
   Rocha C, 2017, J LOG ALGEBR METHODS, V86, P269, DOI 10.1016/j.jlamp.2016.10.001
NR 29
TC 8
Z9 8
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2019
VL 178
BP 20
EP 42
DI 10.1016/j.scico.2019.03.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HY3GT
UT WOS:000468012000002
OA Bronze
DA 2024-07-18
ER

PT J
AU Xu, ZW
   Wen, C
   Qin, SC
AF Xu, Zhiwu
   Wen, Cheng
   Qin, Shengchao
TI State-taint analysis for detecting resource bugs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Resource bug; Static analysis; Energy leak; Android
AB To ensure that a program uses its resources in an appropriate manner is vital for program correctness. A number of solutions have been proposed to check that programs meet such a property on resource usage. But many of them are sophisticated to use for resource bug detection in practice and do not take into account the expectation that a resource should be used once it is opened or required. This open-but-not-used problem can cause resource starvation in some cases, for example, smartphones or other mobile devices where resources are not only scarce but also energy-hungry, hence inappropriate resource usage can not only cause the system to run out of resources but also lead to much shorter battery life between battery recharge. That is the so-call energy leak problem.
   In this paper, we propose a static analysis called state-taint analysis to detect resource bugs. Taking the open-but-not-used problem into account, we specify the appropriate usage of resources in terms of resource protocols. We then propose a taint-like analysis which employs resource protocols to guide resource bug detection. As an extension and an application, we enrich the protocols with the inappropriate behaviours that may cause energy leaks, and use the refined protocols to guide the analysis for energy leak detection. We implement the analysis as a prototype tool called statedroid. Using this tool, we conduct experiments on several real Android applications and test datasets from Relda and GreenDroid. The experimental results show that our tool is precise, helpful and suitable in practice, and can detect more energy leak patterns. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Xu, Zhiwu; Wen, Cheng; Qin, Shengchao] Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen, Peoples R China.
   [Qin, Shengchao] Teesside Univ, Sch Comp, Middlesbrough, Cleveland, England.
C3 Shenzhen University; University of Teesside
RP Qin, SC (corresponding author), Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen, Peoples R China.; Qin, SC (corresponding author), Teesside Univ, Sch Comp, Middlesbrough, Cleveland, England.
EM xuzhiwu@szu.edu.cn; 2150230509@szu.edu.cn; shengchao.qin@gmail.com
RI Cheng, Wen/AAK-9724-2020; Qin, Shengchao/F-4823-2012
OI Qin, Shengchao/0000-0003-3028-8191; Wen, Cheng/0000-0003-1826-6213
FU National Natural Science Foundation of China [61502308, 61373033]
FX The authors would like to thank the anonymous reviewers for their
   helpful and constructive comments that greatly contributed to improving
   the final version of the paper. They would also like to thank the
   editors for their generous comments and support during the review
   process. This work was partially supported by the National Natural
   Science Foundation of China under Grants No. 61502308 and 61373033.
CR [Anonymous], 2013, NSDI
   [Anonymous], 2017, ANDROID APPL DETECTE
   Arzt S, 2014, ACM SIGPLAN NOTICES, V49, P259, DOI [10.1145/2666356.2594299, 10.1145/2594291.2594299]
   Bartoletti M., 2007, FOSSACS 07, P3247
   Chin WN, 2008, ISMM'08: PROCEEDINGS OF THE 2008 INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT, P151
   Chin WN, 2005, PROC INT CONF SOFTW, P186, DOI 10.1145/1062455.1062500
   Chin WN, 2005, LECT NOTES COMPUT SC, V3672, P70
   DeLine R, 2001, ACM SIGPLAN NOTICES, V36, P59, DOI 10.1145/381694.378811
   Fink Stephen., 2006, INT S SOFTWARE TESTI, P133, DOI DOI 10.1145/1146238.1146254
   Foster JS, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/543552.512531
   Guo CR, 2013, IEEE INT CONF AUTOM, P389, DOI 10.1109/ASE.2013.6693097
   He GH, 2009, LECT NOTES COMPUT SC, V5799, P166
   Hoque MA, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2840723
   Igarashi A, 2002, ACM SIGPLAN NOTICES, V37, P331, DOI 10.1145/565816.503303
   Kang HG, 2005, LECT NOTES COMPUT SC, V3780, P264
   Kobayashi N, 2003, ACM SIGPLAN NOTICES, V38, P50, DOI 10.1145/640136.604182
   Liu S., 2015, SOURCE CODE MAT ANDR
   Liu YP, 2014, IEEE T SOFTWARE ENG, V40, P911, DOI 10.1109/TSE.2014.2323982
   Marriott K, 2003, LECT NOTES COMPUT SC, V2895, P212
   Pathak A., 2012, Mobisys, DOI DOI 10.1145/2307636.2307661
   Reps T., 1995, Conference Record of POPL'95: 22nd ACM SIGPLAN-SIGACT Symposium Principles of Programming Languages, P49, DOI 10.1145/199448.199462
   STROM RE, 1986, IEEE T SOFTWARE ENG, V12, P157, DOI 10.1109/TSE.1986.6312929
   Torlak Emina., 2010, P 32 ACMIEEE INT C S, P535
   Tripp O, 2013, LECT NOTES COMPUT SC, V7793, P210, DOI 10.1007/978-3-642-37057-1_15
   Wu HW, 2016, PROCEEDINGS OF THE 25TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC 2016), P185, DOI 10.1145/2892208.2892218
   Wu TY, 2016, IEEE T SOFTWARE ENG, V42, P1054, DOI 10.1109/TSE.2016.2547385
   Wu TY, 2016, IEEE INT CONF AUTOM, P762, DOI 10.1145/2970276.2970278
   Xu ZW, 2016, 2016 10TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE), P168, DOI 10.1109/TASE.2016.17
   Zhang LD, 2012, CODES+ISSS'12:PROCEEDINGS OF THE TENTH ACM INTERNATIONAL CONFERENCE ON HARDWARE/SOFTWARE-CODESIGN AND SYSTEM SYNTHESIS, P363
NR 29
TC 9
Z9 9
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2018
VL 162
SI SI
BP 93
EP 109
DI 10.1016/j.scico.2017.06.010
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GJ1UM
UT WOS:000435053400006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Jongmans, SSTQ
   Arbab, F
AF Jongmans, S. -S. T. Q.
   Arbab, F.
TI Centralized coordination vs. partially-distributed coordination with Reo
   and constraint automata
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrency; Coordination protocols; Compilation; Benchmarks
ID LTL MODEL-CHECKING; CHANNEL-BASED COORDINATION; COMPONENT CONNECTORS;
   NETS; SYNCHRONIZATION; IMPLEMENTATION; VERIFICATION; SEMANTICS;
   CIRCUITS; LANGUAGE
AB High-level concurrency notations and abstractions have several well-known software engineering advantages when it comes to programming concurrency protocols among threads. To also explore their complementary performance advantages, in ongoing work, we are developing compilation technology for a high-level coordination language, Reo, based on this language's formal automaton semantics. By now, as shown in our previous work, our tools are capable of generating code that can compete with carefully handcrafted code, at least for some protocols. An important prerequisite to further advance this promising technology, now, is to gain a better understanding of how the significantly different compilation approaches that we developed so far, which vary in the amount of parallelism in their generated code, compare against each other. For instance, to better and more reliably tune our compilers, we must learn under which circumstances parallel protocol code, with high throughput but also high latency, outperforms sequential protocol code, with low latency but also low throughput.
   In this paper, we report on an extensive performance comparison between these approaches for a substantial number of protocols, expressed in Reo. Because we have always formulated our compilation technology in terms of a general kind of communicating automaton (i.e., constraint automata), our findings apply not only to Reo but, in principle, to any language whose semantics can be defined in terms of such automata. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Jongmans, S. -S. T. Q.] Open Univ Netherlands, Valkenburgerweg 177, NL-6419 AT Heerlen, Netherlands.
   [Jongmans, S. -S. T. Q.] Radboud Univ Nijmegen, Toernooiveld 212, NL-6525 EC Nijmegen, Netherlands.
   [Jongmans, S. -S. T. Q.; Arbab, F.] Ctr Wiskunde & Informat, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
C3 Open University Netherlands; Radboud University Nijmegen
RP Jongmans, SSTQ (corresponding author), Ctr Wiskunde & Informat, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
EM jongmans@cwi.nl; farhad@cwi.nl
CR [Anonymous], 1985, EATCS Monographs on Theoretical Computer Science
   Arbab F, 2005, LECT NOTES COMPUT SC, V3454, P236
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Arbab F, 2011, LECT NOTES COMPUT SC, V7000, P169, DOI 10.1007/978-3-642-24933-4_9
   Arbab F, 2009, LECT NOTES COMPUT SC, V5486, P37, DOI 10.1007/978-3-642-03429-9_4
   Arbab F, 2008, COMM COM INF SC, V17, P108
   Asanovic K, 2009, COMMUN ACM, V52, P56, DOI 10.1145/1562764.1562783
   Atkinson A., 2010, P AUSPDC 2010, P21
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Barnat J, 2013, ELECTRON NOTES THEOR, V296, P79, DOI 10.1016/j.entcs.2013.07.006
   Barnat J, 2006, LECT NOTES COMPUT SC, V4111, P259
   Basu A, 2006, I C SOFTW ENG FORM M, P3
   Basu S, 2012, ACM SIGPLAN NOTICES, V47, P191, DOI 10.1145/2103621.2103680
   Bjornson R., 1993, THESIS
   Bliudze S, 2008, IEEE T COMPUT, V57, P1315, DOI 10.1109/TC.2008.26
   Bliudze S, 2010, FORM METHOD SYST DES, V36, P167, DOI 10.1007/s10703-010-0091-z
   Bonakdarpour B, 2013, DES AUTOM EMBED SYST, V17, P251, DOI 10.1007/s10617-012-9091-0
   Bonakdarpour B, 2012, DISTRIB COMPUT, V25, P383, DOI 10.1007/s00446-012-0168-6
   Bravetti M, 2007, LECT NOTES COMPUT SC, V4829, P34
   Brim L, 2006, ELECTRON NOTES THEOR, V135, P3, DOI 10.1016/j.entcs.2005.10.015
   Bruni R, 2000, INFORM COMPUT, V156, P46, DOI 10.1006/inco.1999.2819
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Carbone M, 2012, ACM T PROGR LANG SYS, V34, DOI 10.1145/2220365.2220367
   Cascaval C, 2008, COMMUN ACM, V51, P40, DOI 10.1145/1400214.1400228
   Changizi B., 2010, P INT WORKSH FORM EN, P147
   Clarke Dave, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P59, DOI 10.1007/978-3-642-30829-1_5
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Clarke D, 2011, SCI COMPUT PROGRAM, V76, P681, DOI 10.1016/j.scico.2010.05.004
   Clarke D, 2008, LECT NOTES COMPUT SC, V5382, P226, DOI 10.1007/978-3-540-92188-2_10
   Cole Murray, 1988, THESIS
   Cortadella J, 2005, IEEE T COMPUT AID D, V24, P1492, DOI 10.1109/TCAD.2005.852038
   Costa D. M., 2010, THESIS
   Dokter K, 2016, LECT NOTES COMPUT SC, V9686, P84, DOI 10.1007/978-3-319-39519-7_6
   Dokter K, 2015, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.189.3
   Feng M. D., 1994, Parallel Processing: CONPAR 94 - VAPP VI. Third Joint International Conference on Vector and Parallel Processing Proceedings, P581
   Feng MD, 1996, COMPUT LANG, V22, P205, DOI 10.1016/S0096-0551(96)00016-1
   Garavel H, 2013, ELECTRON NOTES THEOR, V296, P145, DOI 10.1016/j.entcs.2013.07.010
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   González-Vélez H, 2010, SOFTWARE PRACT EXPER, V40, P1135, DOI 10.1002/spe.1026
   Groote JF, 2014, MODELING AND ANALYSIS OF COMMUNICATING SYSTEMS, P141
   Haller P, 2012, P IEEE, P1
   Haller P, 2009, THEOR COMPUT SCI, V410, P202, DOI 10.1016/j.tcs.2008.09.019
   Herlihy M., 2014, UBIQUITY, V2014, p[1, 1]
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   Hewitt C., 1973, PROC 3 INT JOINT C A, P235, DOI 10.1145/359545.359563
   Honda K, 2008, ACM SIGPLAN NOTICES, V43, P273, DOI 10.1145/1328897.1328472
   Honda K, 2011, LECT NOTES COMPUT SC, V6536, P55, DOI 10.1007/978-3-642-19056-8_4
   Hsiung PA, 2001, PROCEEDINGS OF THE NINTH INTERNATIONAL SYMPOSIUM ON HARDWARE/SOFTWARE CODESIGN, P208, DOI 10.1109/HSC.2001.924677
   Jongmans S. -S., 2015, FM1503 CWI
   Jongmans SSTQ, 2017, SCI COMPUT PROGRAM, V146, P50, DOI 10.1016/j.scico.2017.03.006
   Jongmans SSTQ, 2016, SCI COMPUT PROGRAM, V115, P199, DOI 10.1016/j.scico.2015.09.001
   Jongmans SSTQ, 2016, SCI COMPUT PROGRAM, V115, P47, DOI 10.1016/j.scico.2014.02.017
   Jongmans S.-S.T.Q., 2016, THESIS
   Jongmans SSTQ, 2013, ELECTRON PROC THEOR, P34, DOI 10.4204/EPTCS.109.6
   Jongmans SSTQ, 2016, LECT NOTES COMPUT SC, V9539, P217, DOI 10.1007/978-3-319-28934-2_12
   Jongmans SSTQ, 2014, WORKS DATA EXEC, P42, DOI 10.1109/DFM.2013.14
   Jongmans SSTQ, 2014, ELECTRON PROC THEOR, P38, DOI 10.4204/EPTCS.166.5
   Jongmans SSTQ, 2015, SERV ORIENTED COMPUT, V9, P311, DOI 10.1007/s11761-015-0177-y
   Jongmans SSTQ, 2015, LECT NOTES COMPUT SC, V9392, P238, DOI 10.1007/978-3-319-24644-4_17
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Khamespanah E., 2015, ECEASST, V72, P1
   Knight Tom., 1986, LFP 86, P105
   Krauweel M, 2017, LECT NOTES COMPUT SC, V10319, P40, DOI 10.1007/978-3-319-59746-1_3
   Liu C, 2008, FUND INFORM, V86, P325
   Mattson T., 2005, PATTERNS PARALLEL PR, P1
   McCool Michael, 2012, STRUCTURED PARALLEL, V1st
   Menezes Ronaldo., 2003, Proceedings of the 2003 ACM symposium on Applied computing, SAC'03, P375
   Meng S, 2012, SCI COMPUT PROGRAM, V77, P799, DOI 10.1016/j.scico.2011.04.002
   Meng S, 2011, SCI COMPUT PROGRAM, V76, P651, DOI 10.1016/j.scico.2010.03.002
   Mousavi MR, 2006, ELECTRON NOTES THEOR, V154, P83, DOI 10.1016/j.entcs.2005.12.034
   Ng N, 2015, LECT NOTES COMPUT SC, V9031, P212, DOI 10.1007/978-3-662-46663-6_11
   Orzan S, 2005, ELECTRON NOTES THEOR, V128, P35, DOI 10.1016/j.entcs.2004.10.017
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   Preda MD, 2014, LECT NOTES COMPUT SC, V8706, P161, DOI 10.1007/978-3-319-11245-9_9
   Proenca J., 2013, CCIS, V393, P159, DOI DOI 10.1007/978-3-642-45364-9_14
   Proenca J., 2012, P 27 ANN ACM S APPL, P1510, DOI DOI 10.1145/2245276.2232017
   Proença J, 2011, ELECTRON PROC THEOR, P65, DOI 10.4204/EPTCS.58.5
   Proença J, 2013, LECT NOTES COMPUT SC, V7890, P211, DOI 10.1007/978-3-642-38493-6_15
   Proença J, 2008, ELECTRON NOTES THEOR, V194, P57, DOI 10.1016/j.entcs.2008.03.099
   Proenca Jose, 2011, THESIS
   Rowstron A., 1996, Euro-Par '96 Parallel Processing. Second International Euro-Par Conference. Proceedings, P510
   Russello G, 2005, LECT NOTES COMPUT SC, V3454, P109
   Sgroi M., 2009, P DAC 1999, P805
   Shavit N, 1997, DISTRIB COMPUT, V10, P99, DOI 10.1007/s004460050028
   Sirjani M, 2004, FUND INFORM, V63, P385
   Sirjani M, 2006, LECT NOTES COMPUT SC, V4038, P281
   Talcott C, 2011, SCI COMPUT PROGRAM, V76, P3, DOI 10.1016/j.scico.2009.11.006
   Tasharofi S, 2013, LECT NOTES COMPUT SC, V7920, P302, DOI 10.1007/978-3-642-39038-8_13
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Vijzelaar S, 2011, ELECTRON P THEOR COM, P84, DOI 10.4204/EPTCS.72.9
   Wyckoff P, 1998, IBM SYST J, V37, P454, DOI 10.1147/sj.373.0454
NR 93
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2018
VL 160
SI SI
BP 48
EP 77
DI 10.1016/j.scico.2017.06.004
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GG2HS
UT WOS:000432511400004
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Monteiro, FR
   Alves, EHD
   Silva, IS
   Ismail, HI
   Cordeiro, LC
   de Lima, EB
AF Monteiro, Felipe R.
   Alves, Erickson H. da S.
   Silva, Isabela S.
   Ismail, Hussama I.
   Cordeiro, Lucas C.
   de Lima Filho, Eddie B.
TI ESBMC-GPU A context-bounded model checking tool to verify CUDA programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE GPU verification; Formal verification; Model checking; CUDA
AB The Compute Unified Device Architecture (CUDA) is a programming model used for exploring the advantages of graphics processing unit (GPU) devices, through parallelization and specialized functions and features. Nonetheless, as in other development platforms, errors may occur, due to traditional software creation processes, which may even compromise the execution of an entire system. In order to address such a problem, ESBMC-GPU was developed, as an extension to the Efficient SMT-Based Context-Bounded Model Checker (ESBMC). In summary, ESBMC processes input code through ESBMC-GPU and an abstract representation of the standard CUDA libraries, with the goal of checking a set of desired properties. Experimental results showed that ESBMC-GPU was able to correctly verify 85% of the chosen benchmarks and it also overcame other existing GPU verifiers regarding the verification of data-race conditions, array out-of-bounds violations, assertive statements, pointer safety, and the use of specific CUDA features. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Monteiro, Felipe R.; Alves, Erickson H. da S.; Silva, Isabela S.; Ismail, Hussama I.; Cordeiro, Lucas C.; de Lima Filho, Eddie B.] Univ Fed Amazonas, Fac Technol, Manaus, Amazonas, Brazil.
   [Alves, Erickson H. da S.] Samsung Res Inst, Campinas, SP, Brazil.
   [Cordeiro, Lucas C.] Univ Oxford, Dept Comp Sci, Oxford, England.
   [de Lima Filho, Eddie B.] TPV Technol Ltd, Sao Paulo, Brazil.
C3 Universidade Federal de Amazonas; University of Oxford
RP Monteiro, FR (corresponding author), Univ Fed Amazonas, Fac Technol, Manaus, Amazonas, Brazil.
EM rms.felipe@gmail.com
RI Sousa, Felipe Rodrigues Monteiro/AAW-8303-2020; Cordeiro,
   Lucas/IVV-3044-2023; Cordeiro, Lucas Carvalho/AAQ-9258-2021
OI Sousa, Felipe Rodrigues Monteiro/0000-0001-9420-9056; Cordeiro, Lucas
   Carvalho/0000-0002-6235-4272
FU Institute of Development and Technology (INdT); National Council for
   Scientific and Technological Development (CNPq) [475647/2013-0]
FX This paper is based on research sponsored by the Institute of
   Development and Technology (INdT) and by the National Council for
   Scientific and Technological Development (CNPq) under agreement number
   475647/2013-0.
CR [Anonymous], 2008, 159712008 IEEE
   Barrett C, 2009, FRONT ARTIF INTEL AP, V185, P825, DOI 10.3233/978-1-58603-929-5-825
   Betts A, 2012, ACM SIGPLAN NOTICES, V47, P113, DOI 10.1145/2398857.2384625
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   CHENG J., 2014, Professional CUDA c Programming
   Cordeiro L, 2012, IEEE T SOFTWARE ENG, V38, P957, DOI 10.1109/TSE.2011.59
   Cordeiro L, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P331, DOI 10.1145/1985793.1985839
   Garcia M., 2016, 23 INT S MOD CHECK S, P97
   Kahlon V, 2009, LECT NOTES COMPUT SC, V5643, P398, DOI 10.1007/978-3-642-02658-4_31
   Li G., 2010, Proceedings of the eighteenth ACM SIGSOFT international symposium on Founda- tions of software engineering, FSE '10, P187
   Li GD, 2012, ACM SIGPLAN NOTICES, V47, P215, DOI 10.1145/2370036.2145844
   Monteiro FR, 2017, SOFTW TEST VERIF REL, V27, DOI 10.1002/stvr.1632
   Morse J, 2015, THESIS
   Morse J., 2014, TACAS, V8413, P405
   Moth D., 2012, C AMP SAMPLE PROJECT
   National Institute of Standards and Technology, 2015, FEDERAL INFORM PROCE, V180-4
   NVIDIA Corporation, 2015, CUDA TOOLK ARCH
   Pereira P., 2015, 15 BRAZ S HIGH PERF, P24
   Pereira P., 2016, P SAC, P1648, DOI [10.1145/2851613.2851830, DOI 10.1145/2851613.2851830]
   Pereira P., 2016, CONCURR COMPUT
   Ramalho M, 2013, 2013 20TH ANNUAL IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER BASED SYSTEMS (ECBS 2013), P147, DOI 10.1109/ECBS.2013.15
   Rocha W, 2017, LECT NOTES COMPUT SC, V10206, P360, DOI 10.1007/978-3-662-54580-5_23
   Sousa FRM, 2015, 2015 IEEE 4TH GLOBAL CONFERENCE ON CONSUMER ELECTRONICS (GCCE), P179, DOI 10.1109/GCCE.2015.7398699
   Zheng MC, 2015, IEEE INT CONF AUTOM, P830, DOI 10.1109/ASE.2015.99
NR 24
TC 11
Z9 13
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2018
VL 152
BP 63
EP 69
DI 10.1016/j.scico.2017.09.005
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FR3OJ
UT WOS:000418975700003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Amato, G
   Rubino, M
   Scozzari, F
AF Amato, Gianluca
   Rubino, Marco
   Scozzari, Francesca
TI Inferring linear invariants with parallelotopes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th International Workshop on Automated Verification of Critical
   Systems (AVoCS)
CY SEP, 2015
CL Heriot Watt Univ, Edinburgh, SCOTLAND
SP Altran, D RisQ, Formal Methods Europe, Scottish Informat & Comp Sci Alliance
HO Heriot Watt Univ
DE Static analysis; Abstract interpretation; Numerical abstract domain;
   Linear invariant; Parallelotopes
ID ABSTRACT DOMAIN; POLYHEDRA; SYSTEMS
AB We propose a new numerical abstract domain for inferring linear invariants based on parallelotopes. The domain may encode any linear constraint, as the polyhedra abstract domain, while maintaining the efficiency of weakly relational abstract domains, such as intervals and octagons. We provide the full set of abstract operators, define a reduced product with intervals and present an experimental comparison with polyhedra and octagons. According to these experiments, the reduced product we propose is much more precise than both polyhedra and octagons in inferring interval constraints. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Amato, Gianluca; Rubino, Marco; Scozzari, Francesca] Univ G dAnnunzio, Pescara, Italy.
C3 G d'Annunzio University of Chieti-Pescara
RP Scozzari, F (corresponding author), Univ G dAnnunzio, Pescara, Italy.
EM gianluca.amato@unich.it; marco.rubino@unich.it;
   francesca.scozzari@unich.it
RI Amato, Gianluca/AAI-9505-2020; Scozzari, Francesca/KCL-0390-2024
OI Amato, Gianluca/0000-0002-6214-5198; Scozzari,
   Francesca/0000-0002-2105-4855
CR Amato C, 2010, LECT NOTES COMPUT SC, V6337, P134, DOI 10.1007/978-3-642-15769-1_9
   Amato G, 2012, ELECTRON NOTES THEOR, V287, P17, DOI 10.1016/j.entcs.2012.09.003
   Amato G, 2012, J SYMB COMPUT, V47, P1533, DOI 10.1016/j.jsc.2011.12.052
   Bagnara R, 2005, SCI COMPUT PROGRAM, V58, P28, DOI 10.1016/j.scico.2005.02.003
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Clarisó R, 2007, SCI COMPUT PROGRAM, V64, P115, DOI 10.1016/j.scico.2006.03.009
   Colón MA, 2011, LECT NOTES COMPUT SC, V6602, P176, DOI 10.1007/978-3-642-19718-5_10
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot P, 2015, LECT NOTES COMPUT SC, V8931, P19
   Cousot Patrick, 1976, P 2 INT S PROGRAMMIN
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   GRANGER P, 1992, LECT NOTES COMPUT SC, V652, P68
   Howe JM, 2009, LECT NOTES COMPUT SC, V5799, P306, DOI 10.1007/978-3-642-04761-9_23
   Maisonneuve V., 2014, 5 WORKSH INVARIANT G
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Sankaranarayanan S, 2006, LECT NOTES COMPUT SC, V3855, P111
   Sankaranarayanan S, 2005, LECT NOTES COMPUT SC, V3385, P25
   Schrijver A., 1998, THEORY LINEAR INTEGE
   Simon A, 2003, LECT NOTES COMPUT SC, V2664, P71, DOI 10.1007/3-540-45013-0_7
NR 20
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2017
VL 148
SI SI
BP 161
EP 188
DI 10.1016/j.scico.2017.05.011
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA FJ8ZB
UT WOS:000413056100009
OA hybrid
DA 2024-07-18
ER

PT J
AU Fachada, N
   Lopes, VV
   Martins, RC
   Rosa, AC
AF Fachada, Nuno
   Lopes, Vitor V.
   Martins, Rui C.
   Rosa, Agostinho C.
TI cf4ocl: A C framework for OpenCL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE OpenCL; C; GPGPU; High-performance computing; Profiling
ID RANDOM NUMBER GENERATOR
AB OpenCL is an open standard for parallel programming of heterogeneous compute devices, such as GPUs, CPUs, DSPs or FPGAs. However, the verbosity of its C host API can hinder application development. In this paper we present cf4ocl, a software library for rapid development of OpenCL programs in pure C. It aims to reduce the verbosity of the OpenCL API, offering straightforward memory management, integrated profiling of events (e.g., kernel execution and data transfers), simple but extensible device selection mechanism and user-friendly error management. We compare two versions of a conceptual application example, one based on cf4ocl, the other developed directly with the OpenCL host API. Results show that the former is simpler to implement and offers more features, at the cost of an effectively negligible computational overhead. Additionally, the tools provided with cf4ocl allowed for a quick analysis on how to optimize the application. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Fachada, Nuno; Rosa, Agostinho C.] IST, LARSyS, ISR, Av Rovisco Pais 1, P-1049001 Lisbon, Portugal.
   [Lopes, Vitor V.] UTEC, Univ Ingn & Tecnol, Jr Medrano Silva 165, Lima, Peru.
   [Lopes, Vitor V.] Univ Lisbon, Fac Ciencias, CMAF CIO, Campo Grande, P-1749016 Lisbon, Portugal.
   [Martins, Rui C.] INESC TEC, Campus FEUP,Rua Dr Roberto Frias, P-4200465 Oporto, Portugal.
C3 Universidade de Lisboa; Universidad de Ingenieria Tecnologia UTEC;
   Universidade de Lisboa; INESC TEC
RP Fachada, N (corresponding author), IST, LARSyS, ISR, Av Rovisco Pais 1, P-1049001 Lisbon, Portugal.
EM nfachada@laseeb.org
RI Fachada, Nuno/D-9270-2014; Lopes, Vitor/P-4961-2019; Rosa, Agostinho
   Claudio da/ABG-1964-2021
OI Fachada, Nuno/0000-0002-8487-5837; Lopes, Vitor/0000-0003-2278-8559;
   Rosa, Agostinho Claudio da/0000-0001-5165-3114
FU Fundacao para a Ciencia e a Tecnologia (FCT) [UID/EEA/50009/2013,
   UID/MAT/04561/2013]; FCT [SFRH/BD/48310/2008]; Fundação para a Ciência e
   a Tecnologia [SFRH/BD/48310/2008] Funding Source: FCT
FX This work was supported by the Fundacao para a Ciencia e a Tecnologia
   (FCT) projects UID/EEA/50009/2013 and UID/MAT/04561/2013, and partially
   funded with grant SFRH/BD/48310/2008, also from FCT.
CR [Anonymous], 2015, ArrayFire-A High Performance Software Library for Parallel Computing with an Easy-to-Use API
   Arshad U., 2014, QUEST SMALLEST OPENC
   Bergen B., 2013, OCL MLA OPENCL MIDLE
   Bilotta G., 2012, OPENCL UTILITY LIB
   Brown R. G., 2013, Dieharder: A random number test suite
   Caster B. R., 2013, MULTIPROG 13
   Coddington P.D.:, 1997, 13 NE PAR ARCH CTR
   Demidov D., 2013, VEXCL VECTOR EXPRESS
   Fachada N., 2016, J OPEN RES SOFTW, V4, pe18, DOI DOI 10.5334/J0RS.115
   Gao S, 2013, COMPUT PHYS COMMUN, V184, P1241, DOI 10.1016/j.cpc.2012.12.001
   Heaton J., 2010, PROGRAMMING YOUR GRA
   Howes L., 2015, OPENCL SPECIFICATION
   Huguet O. A., 2013, SIMPLEOPENCL
   Intel, 2016, CLU COMP LANG UT
   Josopait I., 2014, DER GOOPAX COMPILER
   Khronos, 2016, OPENCL C BIND DOC
   Khronos, 2015, KHRON REL OPENCL 2 1
   Klöckner A, 2012, PARALLEL COMPUT, V38, P157, DOI 10.1016/j.parco.2011.09.001
   Langdon WB, 2008, IEEE C EVOL COMPUTAT, P459, DOI 10.1109/CEC.2008.4630838
   Lawlor O.S., 2011, P 5 INT WORKSH DOM S
   Lewis Bil., 1998, MULTITHREADED PROGRA
   Marsaglia G., 2003, Journal of Statistical Software, V8, P1, DOI DOI 10.18637/JSS.V008.I18
   Neves S, 2012, LECT NOTES COMPUT SC, V7203, P92, DOI 10.1007/978-3-642-31464-3_10
   Perkins H., 2016, EASYCL
   Perry J., 2014, OPENCL PROGRAMMING E
   Said I., 2016, P 4 INT WORKSH OPENC
   Schreiner A.-T., 1993, OBJECT ORIENTED PROG
   Steuwer M., 2011, 2011 IEEE International Symposium on Parallel & Distributed Processing, Workshops and Phd Forum, P1176, DOI 10.1109/IPDPS.2011.269
   Szuppe J., 2016, Proceedings of the 4th International Workshop on OpenCL, P1
   Thomas D. B., 2009, Proceedings of the ACM/SIGDA International Symposium on Field Programmable Gate Arrays, DOI [DOI 10.1145/1508128.1508139, 10.1145/1508128.1508139]
   Urbanek S., 2015, INTERFACE ALLOWING R
   Viñas M, 2015, PROCEDIA COMPUT SCI, V51, P110, DOI 10.1016/j.procs.2015.05.208
   Vogelgesang M., 2016, OCLKIT
   Wang T., 2007, INTEGER HASH FUNCTIO
   Zhmurov A, 2011, J PHYS CHEM B, V115, P5278, DOI 10.1021/jp109079t
NR 35
TC 1
Z9 1
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2017
VL 143
BP 9
EP 19
DI 10.1016/j.scico.2017.03.005
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EW2VV
UT WOS:000402355000002
OA Green Published, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Banach, R
   Butler, M
   Qin, SC
   Zhu, HB
AF Banach, Richard
   Butler, Michael
   Qin, Shengchao
   Zhu, Huibiao
TI Core Hybrid Event-B II: Multiple cooperating Hybrid Event-B machines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hybrid Event-B; Multiple machines; Refinement
ID DECOMPOSITION
AB Hybrid Event-B, initially introduced for single machines to add continuously varying behaviour to discrete change of state in Event-B, is extended to cater for multiple cooperating machines. Multiple machine working is mediated by INTERFACE and PROJECT constructs. The former encapsulates a set of variables, their invariants and initialisations, in a form that several machines can exploit simultaneously. The latter organises the set of cooperating machihes and interfaces into a coherent system. Machine instantiation and composition via interfaces are discussed. Machine decomposition is explored in this framework. Multi-mathine refinement is described. A hypergraph project architecture is proposed. Two small case studies, on power switching and on the European Train Control System (the latter treated earlier within the single machine formalism), illustrate these mechanisms. The semantics of interacting multi-machine systems is described, and proof obligations that ensure correctness are covered. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Banach, Richard] Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
   [Butler, Michael] Univ Southampton, Sch Elect & Comp Sci, Southampton S017 1BJ, Hants, England.
   [Qin, Shengchao] Univ Teesside, Sch Comp, Middlesbrough TS1 3BA, Cleveland, England.
   [Zhu, Huibiao] East China Normal Univ, Int Res Ctr Trustworthy Software, MOE Int Joint Lab Trustworthy Software, Shanghai Key Lab Trustworthy Comp, Shanghai 200062, Peoples R China.
C3 University of Manchester; University of Southampton; University of
   Teesside; East China Normal University
RP Banach, R (corresponding author), Univ Manchester, Sch Comp Sci, Oxford Rd, Manchester M13 9PL, Lancs, England.
EM banach@cs.man.ac.uk; mjb@ecs.soton.ac.uk; s.qin@tees.ac.uk;
   hbzhu@sei.ecnu.edu.cn
RI Qin, Shengchao/F-4823-2012
OI Qin, Shengchao/0000-0003-3028-8191; Banach, Richard/0000-0002-0243-9434
FU ECNU; National Natural Science Foundation of China [61361136002];
   Shanghai Collaborative Innovation Center of Trustworthy Software
   [ZF1213]
FX A portion of the work reported in this paper was done while the first
   author was a visiting researcher at the Software Engineering Institute
   at East China Normal University. The support of ECNU is gratefully
   acknowledged. Huibiao Zhu is supported by National Natural Science
   Foundation of China (No. 61361136002) and Shanghai Collaborative
   Innovation Center of Trustworthy Software for Internet of Things
   (ZF1213).
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.R., RODIN PROJECT DELIVE
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], BASIC COURSE MEASURE
   Banach Richard, 2013, Theories of Programming and Formal Methods. Essays Dedicated to Jifeng He on the Occasion of His 70th Birthday. LNCS 8051, P37, DOI 10.1007/978-3-642-39698-4_3
   Banach R., 2017, INT J SOFTW IN PRESS
   Banach R., 2014, CCIS, V433, P126
   Banach R, 2015, ACSIS-ANN COMPUT SCI, V5, P731, DOI 10.15439/2015F132
   Banach R, 2015, SCI COMPUT PROGRAM, V105, P92, DOI 10.1016/j.scico.2015.02.003
   Banach R, 2014, LECT NOTES COMPUT SC, V8477, P271, DOI 10.1007/978-3-662-43652-3_23
   Boniol F., 2014, CCIS, P1, DOI [10.1007/978-3-319-07512-9_1, DOI 10.1007/978-3-319-07512-9]
   Boyden H., 2010, REAL ANAL
   Butler M, 2009, LECT NOTES COMPUT SC, V5423, P20
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Eshuis R, 2009, SCI COMPUT PROGRAM, V74, P65, DOI 10.1016/j.scico.2008.09.001
   Hallerstede Stefan, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P223, DOI 10.1007/978-3-642-30885-7_16
   Hoang TS, 2010, LECT NOTES COMPUT SC, V5977, P319, DOI 10.1007/978-3-642-11811-1_24
   Silva R, 2011, SOFTWARE PRACT EXPER, V41, P199, DOI 10.1002/spe.1002
   Silva R, 2009, LECT NOTES COMPUT SC, V5885, P466, DOI 10.1007/978-3-642-10373-5_24
   Voisin L, 2014, LECT NOTES COMPUT SC, V8477, P1, DOI 10.1007/978-3-662-43652-3_1
   Walter W, 1998, ORDINARY DIFFERENTIA
NR 21
TC 13
Z9 14
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2017
VL 139
BP 1
EP 35
DI 10.1016/j.scico.2016.12.003
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EP9JX
UT WOS:000397691000001
OA Bronze, Green Submitted, Green Accepted
DA 2024-07-18
ER

PT J
AU Martínez-Fernández, S
   Franch, X
   Bisbal, J
AF Martinez-Fernandez, S.
   Franch, X.
   Bisbal, J.
TI Mercury: Using the QuPreSS reference model to evaluate predictive
   services
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Academic Software Development Tools and
   Techniques
CY JUL 01, 2013
CL Montpellier, FRANCE
DE Tool development; Predictive services; Reference model; Forecast
   verification; Service monitoring
ID FORECAST; VERIFICATION
AB Nowadays, lots of service providers offer predictive services that show in advance a condition or occurrence about the future. As a consequence, it becomes necessary for service customers to select the predictive service that best satisfies their needs. The QuPreSS reference model provides a standard solution for the selection of predictive services based on the quality of their predictions. QuPreSS has been designed to be applicable in any predictive domain (e.g., weather forecasting, economics, and medicine). This paper presents Mercury, a tool based on the QuPreSS reference model and customized to the weather forecast domain. Mercury measures weather predictive services' quality, and automates the context-dependent selection of the most accurate predictive service to satisfy a customer query. To do so, candidate predictive services are monitored so that their predictions can be eventually compared to real observations obtained from a trusted source. Mercury is a proof-of-concept of QuPreSS that aims to show that the selection of predictive services can be driven by the quality of their predictions. Throughout the paper, we show how Mercury was built from the QuPreSS reference model and how it can be installed and used. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Martinez-Fernandez, S.; Franch, X.] Univ Politecn Cataluna, Barcelona Tech, GESSI Res Grp, C Jordi Girona 1-3, ES-08034 Barcelona, Spain.
   [Bisbal, J.] INS Manuel de Cabanyes, Ave Francesc Macia 110-114, Barcelona 08800, Spain.
C3 Universitat Politecnica de Catalunya
RP Martínez-Fernández, S (corresponding author), Univ Politecn Cataluna, Barcelona Tech, GESSI Res Grp, C Jordi Girona 1-3, ES-08034 Barcelona, Spain.
EM smartinez@essi.upc.edu; franch@essi.upc.edu; jbisbal@xtec.cat
RI Franch, Xavier/A-8588-2008; Martínez-Fernández, Silverio/P-5615-2014
OI Martínez-Fernández, Silverio/0000-0001-9928-133X; Bisbal,
   Jesus/0000-0002-6748-5327
CR Altman DG, 2000, STAT MED, V19, P453, DOI 10.1002/(SICI)1097-0258(20000229)19:4<453::AID-SIM350>3.3.CO;2-X
   [Anonymous], 2006, Technical Report
   [Anonymous], 2012, Forecast Verificaton: A Practitioner's Guide in Atmospheric Science
   [Anonymous], 2001, PRINCIPLES FORECASTI
   [Anonymous], 2011, INT GEOPHYS SERIES
   Bass L., 1997, SOFTWARE ARCHITECTUR
   Brooks HE, 1996, WEATHER FORECAST, V11, P288, DOI 10.1175/1520-0434(1996)011<0288:ACOMOA>2.0.CO;2
   Brown JD, 2010, ENVIRON MODELL SOFTW, V25, P854, DOI 10.1016/j.envsoft.2010.01.009
   Campbell JE, 2004, PS-POLIT SCI POLIT, V37, P733
   Canfora Gerardo, 2009, Software Engineering. International Summer Schools ISSSE 2006-2008. Revised Tutorial Lectures, P78, DOI 10.1007/978-3-540-95888-8_4
   Casati B, 2008, METEOROL APPL, V15, P3, DOI 10.1002/met.52
   Clements P., 2001, EVALUATING SOFTWARE
   DIEBOLD FX., 1996, Forecast evaluation and combination
   Domenico B., 2007, FORECAST VERIFICATIO
   Ebert EE, 2004, WEATHER FORECAST, V19, P73, DOI 10.1175/1520-0434(2004)019<0073:VONFTW>2.0.CO;2
   Fraley C, 2011, R J, V3, P55
   Golab L, 2003, SIGMOD REC, V32, P5, DOI 10.1145/776985.776986
   Johnston SC, 2007, LANCET, V369, P283, DOI 10.1016/S0140-6736(07)60150-0
   Kertesz A., 2013, J GRID COMPUT, P1
   Lewis-Beck M., 2005, The British Journal of Politics International Relations, V7, P145, DOI 10.1111/j.1467-856X.2005.00178
   Martinez-Fernandez S., 4 INT WORKSH AC SOFT
   Martinez-Fernandez S., 2014, MERCURY TOOL SELECTI
   Martínez-Fernández S, 2013, ADV INTELL SYST, V172, P525
   Müller C, 2014, IEEE T SERV COMPUT, V7, P168, DOI 10.1109/TSC.2013.45
   Murav'ev AV, 2013, RUSS METEOROL HYDRO+, V38, P723, DOI 10.3103/S1068373913110010
   MURPHY AH, 1993, WEATHER FORECAST, V8, P281, DOI 10.1175/1520-0434(1993)008<0281:WIAGFA>2.0.CO;2
   MURPHY AH, 1987, MON WEATHER REV, V115, P1330, DOI 10.1175/1520-0493(1987)115<1330:AGFFFV>2.0.CO;2
   Nakagawa Elisa Y., 2014, 2014 IEEE/IFIP Conference on Software Architecture (WICSA), P143, DOI 10.1109/WICSA.2014.25
   Nikolopoulos K., 2003, Information Management & Computer Security, V11, P146, DOI 10.1108/09685220310480435
   NOAA, 2013, ENS VER SYST EVS NAT
   Oriol M, 2015, EXPERT SYST APPL, V42, P6507, DOI 10.1016/j.eswa.2015.03.027
   Papazoglou M., 2008, Web Services: Principles and Technology
   Pocernich M, 2012, FORECAST VERIFICATIO, P231, DOI [10.1002/9781119960003.app1, DOI 10.1002/9781119960003.APP1]
   Sammodi O, 2011, P INT COMP SOFTW APP, P582, DOI 10.1109/COMPSAC.2011.81
   Van Gorp P, 2011, PROCEDIA COMPUT SCI, V4, P589, DOI 10.1016/j.procs.2011.04.062
   Weyns D, 2012, ACM T AUTON ADAP SYS, V7, DOI 10.1145/2168260.2168268
   YU X, 2005, WWRP S NOWC VER SHOR
   Zdun U, 2006, INT J INTERNET PROTO, V1, P132, DOI 10.1504/IJIPT.2006.009739
NR 38
TC 0
Z9 0
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2017
VL 134
SI SI
BP 61
EP 74
DI 10.1016/j.scico.2015.11.009
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA EF1GE
UT WOS:000390072500006
OA Bronze, Green Published
DA 2024-07-18
ER

PT J
AU Vu, LH
   Haxthausen, AE
   Peleska, J
AF Linh Hong Vu
   Haxthausen, Anne E.
   Peleska, Jan
TI Formal modelling and verification of interlocking systems featuring
   sequential release
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Railway interlocking systems; Sequential release; Formal verification;
   Bounded model checking; k-Induction
ID CHECKING; INDUCTION
AB In this article, we present a method and an associated toolchain for the formal verification of the new Danish railway interlocking systems that are compatible with the European Train Control System (ETCS) Level 2. We have made a generic and reconfigurable model of the system behaviour and generic safety properties. This model accommodates sequential release - a feature in the new Danish interlocking systems. To verify the safety of an interlocking system, first a domain-specific description of interlocking configuration data is constructed and validated. Then the generic model and safety properties are automatically instantiated with the well-formed description of interlocking configuration data. This instantiation produces a model instance in the form of a Kripke structure, and concrete safety properties expressed as invariants. Finally, using a combination of SMT based bounded model checking (BMC) and inductive reasoning, it is verified that the generated model instance satisfies the generated safety properties. Using this method, we are able to verify the safety properties for model instances corresponding to railway networks of industrial size. Experiments show that BMC is also efficient for finding bugs in the railway interlocking designs. Additionally, benchmarking results comparing the performance of our approach with alternative verification techniques on the interlocking models are presented. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Linh Hong Vu; Haxthausen, Anne E.] Tech Univ Denmark, DTU Compute, Lyngby, Denmark.
   [Peleska, Jan] Univ Bremen, Dept Math & Comp Sci, Bremen, Germany.
C3 Technical University of Denmark; University of Bremen
RP Vu, LH (corresponding author), Tech Univ Denmark, DTU Compute, Lyngby, Denmark.
EM Ivho@dtu.dk; aeha@dtu.dk; jp@cs.uni-bremen.de
RI Haxthausen, Anne E./HSG-1753-2023
OI Haxthausen, Anne E./0000-0001-7349-8872
FU RobustRailS project - Innovation Fund Denmark [0603-00483B]; ITEA2
   project openETCS [11025]
FX The authors' research has been funded by the RobustRailS project granted
   by Innovation Fund Denmark under grant agreement 0603-00483B.; The
   author's research has been partially funded by ITEA2 project openETCS
   under grant agreement 11025.
CR Aanaes M., 2012, THESIS
   [Anonymous], 2002, CAV, DOI DOI 10.1007/3-540-45657-0
   [Anonymous], 2014, ERTMS SYST REQ SPEC
   Behnia S., 2008, 11 INT C COMP SYST D
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A., 1999, P 11 INT C COMPUTER, V1633, P60
   Biere A, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:5)2006
   Bozzano M., 2014, TECHNICAL REPORT
   Bradley AR, 2011, LECT NOTES COMPUT SC, V6538, P70, DOI 10.1007/978-3-642-18275-4_7
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   C. European Committee for Electrotechnical Standardization, 2011, 501282011 EN EUR COM
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   de Moura L, 2003, LECT NOTES COMPUT SC, V2725, P14
   Een N., 2003, ELECT NOTES THEORETI, V89, P543, DOI 10.1016/s1571-0661(05)82542-3
   European Railway Agency, 2012, ANN A ETCS BAS 3 GSM
   Fantechi Alessandro, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P276, DOI 10.1007/978-3-642-34032-1_26
   Fantechi A, 2014, LECT NOTES COMPUT SC, V8368, P167, DOI 10.1007/978-3-319-05032-4_13
   Ferrari A, 2011, FORMS/FORMAT 2010: FORMAL METHODS FOR AUTOMATION AND SAFETY IN RAILWAY AND AUTOMOTIVE SYSTEMS, P107, DOI 10.1007/978-3-642-14261-1_11
   Foldager A., 2015, THESIS
   Hansen Helle Hvid, 2010, FORMAL METHODS COMPO, V6957, P225
   Haxthausen A.E., 2013, Railways: Types, Design and Safety Issues, P127
   Haxthausen AE, 2000, IEEE T SOFTWARE ENG, V26, P687, DOI 10.1109/32.879808
   Haxthausen AE, 2014, LECT NOTES COMPUT SC, V8368, P205, DOI 10.1007/978-3-319-05032-4_16
   Haxthausen AE, 2011, FORM ASP COMPUT, V23, P191, DOI 10.1007/s00165-009-0143-6
   Haxthausen AE, 2010, LECT NOTES COMPUT SC, V6028, P141
   James P., 2011, ELECT COMMUN EASST, V35
   James P, 2014, LECT NOTES COMPUT SC, V8368, P189, DOI 10.1007/978-3-319-05032-4_15
   Peleska J, 2013, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.111.1
   Peleska J, 2011, LECT NOTES COMPUT SC, V6617, P298, DOI 10.1007/978-3-642-20398-5_22
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Theeg G., 2009, RAILWAT SIGNALLING I
   Tombs D., 2002, CORE 2002: Cost Efficient Railways through Engineering, P415
   Verified Systems International GmbH, 2013, RT TEST MOD BAS TEST
   Vu L. H., 2015, THESIS
   Vu LH, 2014, P 10 S FORM METH AUT, P200
   Vu LH, 2015, COMM COM INF SC, V476, P223, DOI 10.1007/978-3-319-17581-2_15
   Winter Kirsten, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P246, DOI 10.1007/978-3-642-34032-1_24
NR 38
TC 23
Z9 24
U1 1
U2 13
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
SI SI
BP 91
EP 115
DI 10.1016/j.scico.2016.05.010
PN 2
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EF1GC
UT WOS:000390072300002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Zhang, BX
   Yin, CT
   David, B
   Xiong, Z
   Niu, W
AF Zhang, Bingxue
   Yin, Chuantao
   David, Bertrand
   Xiong, Zhang
   Niu, Wei
TI Facilitating professionals' work-based learning with context-aware
   mobile system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Work-based learning; Mobile learning; Context-aware; System design and
   implementation; Evaluation of user attitude and acceptance
AB Work-based learning refers to the learning process occurring at workplace as acquiring knowledge and skills or developing approaches to solve problems. It is a crucial approach to promote professionals' working efficiency. However, the majority of research on professional learning concentrates on holding trainings (off-the-job or on-the-job), seminars and workshops, or on implementing systems for distributing training materials or facilitating communication. Few effort has been paid to support work-based learning which has the characteristics like informal, spontaneous, work-related and just-in-time. The purpose of our work is to facilitate professionals' work-based learning with a context aware mobile system. This system can guide professionals to engage in work-based learning activities, which are arranged properly based on our online survey results. It can also provide learning supports which are adapted to current engaged work, professionals' learning needs, personal characteristics, environmental situations, etc. In this paper, we present successively the work -based learning activity design, the system structure design, the system technical implementation, the system functionalities and evaluation of learning achievement, and the user attitude and acceptance about this system. With the proposed system, professionals can use their mobile devices to get personalized, adaptive and just in-time learning supports in real working environment. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Zhang, Bingxue] Univ Shanghai Sci & Technol, Sch Opt Elect & Comp Engn, Shanghai 200093, Peoples R China.
   [Zhang, Bingxue; David, Bertrand] Ecole Cent Lyon, Lab LIRIS, F-69130 Ecully, France.
   [Yin, Chuantao; Niu, Wei] Beihang Univ, Sino French Engineer Sch, Beijing 100191, Peoples R China.
   [Yin, Chuantao] Beihang Univ Shenzhen, Res Inst, Shenzhen 518057, Peoples R China.
   [Xiong, Zhang] Beihang Univ, Sch Comp Sci & Engn, Beijing 100191, Peoples R China.
C3 University of Shanghai for Science & Technology; Ecole Centrale de Lyon;
   Institut National des Sciences Appliquees de Lyon - INSA Lyon; Beihang
   University; Beihang University; Beihang University
RP Niu, W (corresponding author), Beihang Univ, Sino French Engineer Sch, Beijing 100191, Peoples R China.
EM buaazhangbingxue@gmail.com; chuantao.yin@buaa.edu.cn;
   bertrand.david@ec-lyon.fr; xiongz@buaa.edu.cn; wei.niu@buaa.edu.cn
RI Furtado, Kássia/AAU-5007-2020; zhang, bx/HNR-3314-2023
FU National Natural Science Foundation of China [61402028]; Science
   Foundation of Shenzhen City in China [JCYJ20140509150917445]
FX The work is supported by National Natural Science Foundation of China
   (No. 61402028) and Science Foundation of Shenzhen City in China (No.
   JCYJ20140509150917445).
CR Angeli C., 2002, P 10 INT ORG SCI TEC
   [Anonymous], 2014, THESIS
   Baxter S., 2002, US Patent, Patent No. [6,356,903, 6356903]
   Berking P., 2013, Choosing a Learning Management System
   Bezanson W., 2002, Performance support solutions: Achieving business goals through enabling user performance
   Boud D., 2000, Working Knowledge: the new vocationalism and higher education, P14
   Boud D., 2000, WORK CURRICULUM PEDA, P55
   Brennan M., 2001, The Learning Content Management System. IDC White Paper
   Carliner S., 2012, Informal learning basics (ASTD training basics)
   Cheetham G., 2001, J EUR IND TRAIN, V25, P247, DOI DOI 10.1108/03090590110395870
   David B. T., 2009, INT J ADV CORPORATE, V2, P12
   Economides AA, 2008, COMM COM INF SC, V19, P213
   Economides AA, 2009, INT J TECHNOL ENHANC, V1, P169, DOI 10.1504/IJTEL.2009.024865
   Ellstrom P.E., 2001, HUM RESOUR DEV Q, V12, P421
   Engestrom Y., 2001, Education and Work, V14, P133, DOI [10.1080/13639080020028747, DOI 10.1080/13639080020028747]
   Europian Commision, 2013, WORK BAS LEARN EUR
   Fenwick T.J., 2006, Journal of Industrial Relations, V48, P691, DOI [DOI 10.1177/0022185606070112, 10.1177/0022185606070112]
   Georgieva ES, 2011, PROCEDIA COMPUT SCI, V3, DOI 10.1016/j.procs.2010.12.106
   Gómez S, 2014, J KING SAUD UNIV-COM, V26, P47, DOI 10.1016/j.jksuci.2013.10.008
   Graf S, 2008, LECT NOTES COMPUT SC, V5298, P331, DOI 10.1007/978-3-540-89350-9_23
   Greer J., 1998, INT J ARITIFICIAL IN, V9, P159
   Hwang GJ, 2008, EDUC TECHNOL SOC, V11, P81
   Kukulska-Hulme A, 2009, ISS ONLINE EDUC, P135
   Liu GZ, 2010, BRIT J EDUC TECHNOL, V41, pE1, DOI 10.1111/j.1467-8535.2009.00976.x
   Malikowski Steven R., 2007, Journal of Educational Computing Research, V36, P149, DOI 10.2190/1002-1T50-27G2-H3V7
   Mills J. C. H, 2003, WORKPLACE LEARNING C
   Motiwalla LF, 2007, COMPUT EDUC, V49, P581, DOI 10.1016/j.compedu.2005.10.011
   Nguyen V. H., 2010, COMP COMM TECHN RES, P1
   Pham-Nguyen Cuong, 2008, Wl 2008. 2008 IEEE/WIC/ACM International Conference on Web Intelligence. IAT 2008. 2008 IEEE/WIC/ACM International Conference on Intelligent Agent Technology. Wl-IAT Workshop 2008 2008 IEEE/WIC/ACM International Conferences on Web Intelligence and Intelligent Agent Technology Workshops, P824, DOI 10.1109/WIIAT.2008.243
   Stern E., 1999, WORKPLACE LEARNING C
   Tarique I, 2010, J WORLD BUS, V45, P122, DOI 10.1016/j.jwb.2009.09.019
   Traxler J, 2009, ISS ONLINE EDUC, P9
   Wu PH, 2012, EDUC TECHNOL SOC, V15, P223
   Yau J. Y.-K, 2008, International Journal of Interactive Mobile Technologies, V2, P52
   Yin C, 2010, THESIS
   Yin CT, 2015, FRONT COMPUT SCI-CHI, V9, P466, DOI 10.1007/s11704-015-4200-4
   Zhang B., 2014, QUESTIONNAIRE WORK B
NR 37
TC 13
Z9 15
U1 0
U2 42
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2016
VL 129
SI SI
BP 3
EP 19
DI 10.1016/j.scico.2016.01.008
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA DW0CM
UT WOS:000383308500002
OA hybrid
DA 2024-07-18
ER

PT J
AU Daw, Z
   Cleaveland, R
AF Daw, Zamira
   Cleaveland, Rance
TI Comparing model checkers for timed UML activity diagrams
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model checking; UML activity diagrams; UPPAAL; SPIN; NuSMV
AB This paper describes the results of an experimental study on the use of model checkers to verify properties of UML activity diagrams. The motivation for the study derives from the desirability of checking properties of systems early in the development process, and the fact that UML is a commonly used notation for system models. The study assesses the performance of different model checking tools, and strategies for converting activity diagrams into the tools input notation, for a class of real time activity diagrams used in medical device design. This paper compares different translations for four model checkers in particular: UPPAAL, PES, SPIN and NuSMV. The performance of these model checkers is then compared using a suite of UML activity diagrams of varying complexity developed by us for this purpose. The results of a case study involving the design of an infusion pump are also presented. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Daw, Zamira; Cleaveland, Rance] Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
C3 University System of Maryland; University of Maryland College Park
RP Daw, Z (corresponding author), Univ Maryland, Dept Comp Sci, College Pk, MD 20742 USA.
EM zdaw@cs.umd.edu; rance@cs.umd.edu
FU NSF [CCF-0926194]; Division Of Computer and Network Systems; Direct For
   Computer & Info Scie & Enginr [1446365, 1446665] Funding Source:
   National Science Foundation
FX Research supported by NSF Grant CCF-0926194. This paper is an extension
   of [11].
CR ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   [Anonymous], 2002, CAV, DOI DOI 10.1007/3-540-45657-0
   [Anonymous], UN MOD LANG UML VERS
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   BOBBIO A, MODEL CHECKING TIME
   Bosnacki D., 1998, FORMAL DESCRIPTION T, P423, DOI DOI 10.1007/978-0-387-35394-426
   Byg J, 2009, LECT NOTES COMPUT SC, V5885, P698, DOI 10.1007/978-3-642-10373-5_36
   Cao Honghua., 2006, CIT 06, P190
   Cassez F, 2006, J SYST SOFTWARE, V79, P1456, DOI 10.1016/j.jss.2005.12.021
   Cicirelli F, 2012, IEEE ACM DIS SIM, P57, DOI 10.1109/DS-RT.2012.16
   Cicirelli F, 2012, APPL MATH COMPUT, V218, P8160, DOI 10.1016/j.amc.2012.02.018
   Daw Z., 2013, ELECT COMMUN EASST
   Daw Z, 2009, LECT NOTES COMPUT SC, V5795, P556, DOI 10.1007/978-3-642-04425-0_43
   Ding JH, 2012, 2012 IEEE ASIA-PACIFIC SERVICES COMPUTING CONFERENCE (APSCC), P109, DOI 10.1109/APSCC.2012.43
   Eshuis R, 2006, ACM T SOFTW ENG METH, V15, P1, DOI 10.1145/1125808.1125809
   Eshuis R, 2004, IEEE T SOFTWARE ENG, V30, P437, DOI 10.1109/TSE.2004.33
   Esterel Technologies, 2014, SCAD CRIT SYST SOFTW
   Fontana Peter, 2014, Formal Modeling and Analysis of Timed Systems. 12th International Conference, FORMATS 2014. Proceedings. LNCS: 8711, P115, DOI 10.1007/978-3-319-10512-3_9
   Fontana P, 2014, ACM COMPUT SURV, V46, DOI 10.1145/2518102
   Gannod GC, 2001, 16TH ANNUAL INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2001), PROCEEDINGS, P404, DOI 10.1109/ASE.2001.989839
   Grobelna Iwona, 2010, 2010 MIXDES - 17th International Conference "Mixed Design of Integrated Circuits & Systems", P607
   Guan N, 2008, ISORC 2008: 11TH IEEE SYMPOSIUM ON OBJECT/COMPONENT/SERVICE-ORIENTED REAL-TIME DISTRIBUTED COMPUTING - PROCEEDINGS, P556, DOI 10.1109/ISORC.2008.74
   Guan N, 2007, LECT NOTES COMPUT SC, V4761, P263
   Guelfi N., 2005, Proceedings. 12th Asia-Pacific Software Engineering Conference
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Horvath A., 2002, FPN NUSMV TEMPERATUR
   Lam V., 2007, NORD J COMPUT, V14
   MATLAB, MATLAB
   Petre M., 2013, P INT C SOFTW ENG
   Ribeiro OR, 2005, 12TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON THE ENGINEERING OF COMPUTER-BASED SYSTEMS, PROCEEDINGS, P378, DOI 10.1109/ECBS.2005.53
   Sbai Z., 2010, 2 INT C SOFTW TECHN, V1
   Shin K. G, 2003, P 23 INT C DISTR COM P 23 INT C DISTR COM, P350
   Zhang D, 2005, ICCI 2005: Fourth IEEE International Conference on Cognitive Informatics - Proceedings, P10
NR 33
TC 10
Z9 10
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 277
EP 299
DI 10.1016/j.scico.2015.05.008
PN 2
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5LX
UT WOS:000368556700004
DA 2024-07-18
ER

PT J
AU Montenegro, M
   Peña, R
   Segura, C
AF Montenegro, Manuel
   Pena, Ricardo
   Segura, Clara
TI Space consumption analysis by abstract interpretation: Inference of
   recursive functions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Foundational Practical Aspects Resource Analysis (FOPARA)
CY MAY 19, 2011
CL Madrid, SPAIN
DE Resource analysis; Abstract interpretation; Functional languages;
   Regions
ID COST; SEMANTICS; LANGUAGE; MACHINE; BOUNDS
AB We present an abstract interpretation-based static analysis for inferring heap and stack memory consumption in a functional language. The language, called Safe, is eager and firstorder, and its memory management system is based on heap regions instead of the more conventional approach of having a garbage collector. This paper begins by presenting Safe features by means of intuitive examples, and then defines its formal semantics, including the memory consumption of particular program executions. It continues by giving the abstract interpretation rules for non-recursive function definitions, and then how the memory consumption of recursive ones is approximated.
   An interesting property of our analysis is that, under certain reasonable conditions, the inferred bounds are reductive, which means that by iterating the analysis using as input the prior inferred bound, we can get tighter and tighter bounds, all of them correct. In some cases, even the exact bound is obtained. However, and due to lack of space, reductivity is not presented in this paper. The complete development can however be found in a technical report available at the authors' site.
   The paper includes a related work discussion, and small examples. Bigger case studies are presented in the fore-mentioned technical report. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Montenegro, Manuel; Pena, Ricardo; Segura, Clara] Univ Complutense Madrid, Dept Sistemas Informat & Computac, E-28040 Madrid, Spain.
C3 Complutense University of Madrid
RP Montenegro, M (corresponding author), Univ Complutense Madrid, Dept Sistemas Informat & Computac, E-28040 Madrid, Spain.
EM montenegro@fdi.ucm.es; ricardo@sip.ucm.es; csegura@sip.ucm.es
RI PENA MARI, RICARDO VICENTE/L-1886-2017; Segura, Clara/K-9610-2017;
   Montenegro Montes, Manuel/F-8773-2016
OI PENA MARI, RICARDO VICENTE/0000-0001-5387-8931; Segura,
   Clara/0000-0003-1403-2997; Montenegro Montes, Manuel/0000-0002-9686-465X
FU MEC FPU grant [AP2006-02154];  [TIN2008-06622-C03-01/TIN (STAMP)]; 
   [TIN2009-14599-C03-01 (DESAFIOS10)];  [S2009/TIC-1465 (PROMETIDOS)]
FX Work supported by the projects TIN2008-06622-C03-01/TIN (STAMP),
   TIN2009-14599-C03-01 (DESAFIOS10), S2009/TIC-1465 (PROMETIDOS) and the
   MEC FPU grant AP2006-02154.
CR Albert E, 2007, LECT NOTES COMPUT SC, V4421, P157
   Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   Albert E, 2008, LECT NOTES COMPUT SC, V5079, P221
   Albert E, 2011, LECT NOTES COMPUT SC, V6538, P38, DOI 10.1007/978-3-642-18275-4_5
   Albert E, 2011, J AUTOM REASONING, V46, P161, DOI 10.1007/s10817-010-9174-1
   Albert E, 2010, ACM SIGPLAN NOTICES, V45, P121
   Benoy F, 1997, LECT NOTES COMPUT SC, V1207, P204
   Campbell B., 2008, TRENDS FUNCTIONAL PR, V9, P1
   Campbell B., 2008, THESIS U EDINBURGH L
   Cherem S., 2004, INT S MEMORY MANAGEM, P85, DOI DOI 10.1145/1029873.1029884
   Conesa J., 2006, THESIS U COMPLUTENSE
   Cormen T.H., 2009, INTRO ALGORITHMS, P451
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   de Dios Javier, 2011, FM 2011: Formal Methods. Proceedings 17th International Symposium on Formal Methods, P184, DOI 10.1007/978-3-642-21437-0_16
   FLANAGAN C, 1993, SIGPLAN NOTICES, V28, P237, DOI 10.1145/173262.155113
   Grov Gudmund, 2009, Proceedings 2009 International Conference on Software Engineering Theory and Practice (SETP-09), P16
   Hoffmann J, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P357, DOI 10.1145/1926385.1926427
   Hoffmann J, 2010, LECT NOTES COMPUT SC, V6012, P287, DOI 10.1007/978-3-642-11957-6_16
   Hofmann M, 2006, LECT NOTES COMPUT SC, V3924, P22
   Hofmann M, 2003, ACM SIGPLAN NOTICES, V38, P185, DOI 10.1145/640128.604148
   Hudak Paul., 2007, P 3 ACM SIGPLAN C HI, p12
   Hughes J., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P410, DOI 10.1145/237721.240882
   Hughes J, 1999, ACM SIGPLAN NOTICES, V34, P70, DOI 10.1145/317765.317785
   Jost S., 2010, THESIS U MUNCHEN FAK
   Jost S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P223, DOI 10.1145/1706299.1706327
   Lucas S., 2008, P LOG BAS PROGR SYNT, P43
   Montenegro Manuel, 2012, Foundational and Practical Aspects of Resource Analysis. Second International Workshop, FOPARA 2011. Revised Selected Papers, P36, DOI 10.1007/978-3-642-32495-6_3
   Montenegro M., 2014, TECHNICAL REPORT, P1
   Montenegro M., 2008, P 10 INT ACM SIGPLAN, P152
   Montenegro M, 2009, ELECTRON NOTES THEOR, V246, P167, DOI 10.1016/j.entcs.2009.07.021
   Montenegro M, 2014, INFORM COMPUT, V235, P3, DOI 10.1016/j.ic.2014.01.003
   Montenegro M, 2010, LECT NOTES COMPUT SC, V6324, P34
   Montenegro M, 2010, LECT NOTES COMPUT SC, V5979, P145, DOI 10.1007/978-3-642-11999-6_10
   Pareto L., 1998, THESIS CHALMERS U TE
   Peña R, 2011, LECT NOTES COMPUT SC, V6816, P52, DOI 10.1007/978-3-642-22531-4_4
   Shkaravska O., 2008, LNCS, V5836, P1
   Shkaravska O., 2010, INT C PRINCIPLES PRA, P99, DOI DOI 10.1145/1852761.1852776
   Shkaravska O, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(2:10)2009
   SIEBERT F, 2002, HARD REALTIME GARBAG
   Simoes H, 2012, ACM SIGPLAN NOTICES, V47, P165, DOI 10.1145/2398856.2364575
   Spoto F., 2006, EAAI 06
   TARJAN RE, 1985, SIAM J ALGEBRA DISCR, V6, P306, DOI 10.1137/0606031
   van Eekelen M., 2008, TRENDS FUNCTIONAL PR, P36
   Vasconcelos PB, 2004, LECT NOTES COMPUT SC, V3145, P86
   WEGBREIT B, 1975, COMMUN ACM, V18, P528, DOI 10.1145/361002.361016
   Wei-Ngan Chin, 2001, Higher-Order and Symbolic Computation, V14, P261, DOI 10.1023/A:1012996816178
NR 46
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 426
EP 457
DI 10.1016/j.scico.2014.04.006
PN 3
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DB5LY
UT WOS:000368556800004
OA Bronze
DA 2024-07-18
ER

PT J
AU Balasubramanian, D
   Dubey, A
   Otte, W
   Levendovszky, T
   Gokhale, A
   Kumar, P
   Emfinger, W
   Karsai, G
AF Balasubramanian, Daniel
   Dubey, Abhishek
   Otte, William
   Levendovszky, Tihamer
   Gokhale, Aniruddha
   Kumar, Pranav
   Emfinger, William
   Karsai, Gabor
TI DREMS ML: A wide spectrum architecture design language for distributed
   computing platforms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Dagstuhl Seminar on Architecture-Driven Semantic Analysis of Embedded
   Systems
CY JUL 01-06, 2012
CL GERMANY
DE Architecture description language; Model-driven development;
   Fractionated spacecraft
ID AADL
AB Complex sensing, processing and control applications running on distributed platforms are difficult to design, develop, analyze, integrate, deploy and operate, especially if resource constraints, fault tolerance and security issues are to be addressed. While technology exists today for engineering distributed, real-time component-based applications, many problems remain unsolved by existing tools. Model-driven development techniques are powerful, but there are very few existing and complete tool chains that offer an end-to-end solution to developers, from design to deployment. There is a need for an integrated model-driven development environment that addresses all phases of application lifecycle including design, development, verification, analysis, integration, deployment, operation and maintenance, with supporting automation in every phase. Arguably, a centerpiece of such a model-driven environment is the modeling language. To that end, this paper presents a wide-spectrum architecture design language called DREMS ML that itself is an integrated collection of individual domain-specific sub-languages. We claim that the language promotes "correct-by-construction" software development and integration by supporting each individual phase of the application lifecycle. Using a case study, we demonstrate how the design of DREMS ML impacts the development of embedded systems. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Balasubramanian, Daniel; Dubey, Abhishek; Otte, William; Levendovszky, Tihamer; Gokhale, Aniruddha; Kumar, Pranav; Emfinger, William; Karsai, Gabor] Vanderbilt Univ, Dept Elect Engn & Comp Sci, Inst Software Integrated Syst, Nashville, TN 37212 USA.
C3 Vanderbilt University
RP Karsai, G (corresponding author), Vanderbilt Univ, Dept Elect Engn & Comp Sci, Inst Software Integrated Syst, Nashville, TN 37212 USA.
EM daniel@isis.vanderbilt.edu; dabhishe@isis.vanderbilt.edu;
   wotte@isis.vanderbilt.edu; tihamer@isis.vanderbilt.edu;
   gokhale@isis.vanderbilt.edu; pkumar@isis.vanderbilt.edu;
   emfinger@isis.vanderbilt.edu; gabor@isis.vanderbilt.edu
RI Karsai, Gabor/GSN-1874-2022
OI Karsai, Gabor/0000-0001-7775-9099; Balasubramanian,
   Daniel/0000-0002-7531-0594; Gokhale, Aniruddha/0000-0002-7706-7102;
   Dubey, Abhishek/0000-0002-0168-4948; Kumar, Pranav
   Srinivas/0009-0008-6226-4788
FU DARPA System F6 Program [NNA11AC08C]
FX This work was supported by the DARPA System F6 Program under contract
   NNA11AC08C. Any opinions, findings, and conclusions or recommendations
   expressed in this material are those of the author(s) and do not reflect
   the views of DARPA. The authors thank Olin Sibert and Graham O'Neil, and
   all the team members of our project for their invaluable input and
   contributions to this effort.
CR [Anonymous], P 16 IEEE INT S OBJ
   [Anonymous], AUTOMOTIVE OPEN SYST
   [Anonymous], DDS LIGHTW CCM VERS
   [Anonymous], SYST MOD LANG SYSML
   [Anonymous], 2008, PROCOM PROGR COMPONE
   [Anonymous], 2000, Proceedings of the 11th International Conference on Concurrency Theory, CONCUR 00
   [Anonymous], 2006, EUR RAIL TRAFF MAN S
   [Anonymous], 653 ARINC INC
   [Anonymous], 2006, 15 EUR SYST ENG C
   [Anonymous], P 5 INT C SPAC FORM
   [Anonymous], ADA455842
   [Anonymous], P 14 INT C SOFTW ENG
   Behjati R, 2011, LECT NOTES COMPUT SC, V6698, P236, DOI 10.1007/978-3-642-21470-7_17
   Birkhoff G., 1967, Lattice Theory, V3rd
   Blair G, 2009, ANN TELECOMMUN, V64, P1, DOI 10.1007/s12243-009-0086-1
   Bozzano M, 2011, COMPUT J, V54, P754, DOI 10.1093/comjnl/bxq024
   Chkouri MY, 2009, LECT NOTES COMPUT SC, V5421, P5, DOI 10.1007/978-3-642-01648-6_2
   Coutts IA, 1997, IEEE CONCURR, V5, P55, DOI 10.1109/4434.605919
   Cuenot P, 2010, LECT NOTES COMPUT SC, V6100, P297, DOI 10.1007/978-3-642-16277-0_11
   Dubey A, 2012, AEROSP CONF PROC
   Elliott Bell D., 1973, MITRE Technical Report 2547, V1
   Emfinger W., 2014, Proceedings of the 4th ACM SIGBED International Workshop on Design, Modeling, and Evaluation of Cyber-Physical Systems, CyPhy '14, P44
   Feiler P., 2006, COMPUTER AIDED CONTR, P1206
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Lédeczi A, 2001, COMPUTER, V34, P44, DOI 10.1109/2.963443
   Levendovszky T, 2014, IEEE SOFTWARE, V31, P62, DOI 10.1109/MS.2013.143
   Magee J, 1999, INT FED INFO PROC, V12, P35
   Malavolta I, 2013, IEEE T SOFTWARE ENG, V39, P869, DOI 10.1109/TSE.2012.74
   Otte WR, 2011, GPCE 11: PROCEEDINGS OF THE TENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P53
   Pelliccione P, 2009, IEEE T SOFTWARE ENG, V35, P325, DOI 10.1109/TSE.2008.104
   Ratzer AV, 2003, LECT NOTES COMPUT SC, V2679, P450
   Ripoll I, 2013, IEEE T COMPUT, V62, P1813, DOI 10.1109/TC.2012.243
   Sztipanovits J, 1997, COMPUTER, V30, P110, DOI 10.1109/2.585163
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
NR 34
TC 6
Z9 6
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2015
VL 106
SI SI
BP 3
EP 29
DI 10.1016/j.scico.2015.04.002
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CQ4RF
UT WOS:000360591600002
OA Bronze
DA 2024-07-18
ER

PT J
AU Bruggink, HJS
   König, B
   Küpper, S
AF Bruggink, H. J. Sander
   Koenig, Barbara
   Kuepper, Sebastian
TI Robustness and closure properties of recognizable languages in adhesive
   categories
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Closure properties; Recognizable languages; Recognizable graph
   languages; Concatenation; Adhesive categories
AB We consider recognizable languages of cospans in adhesive categories defined via automaton functors, of which recognizable graph languages are a special case.
   There are three contributions in this paper: we first show that the notion of recognizable languages is robust in the sense that also semi-functors, i.e., functors that do not necessarily preserve identities, characterize recognizable languages. This is done by converting semi-functors to functors with a procedure akin to epsilon elimination for nondeterministic finite automata.
   Second, relying on this result, we show that recognizable languages are closed under concatenation, i.e. under cospan composition, by providing a concrete construction that creates a concatenation automaton from two given automata. The construction is considerably more complex than the corresponding construction for finite automata. We conclude by showing negative closure properties for Kleene star and substitution. (C) 2014 Published by Elsevier B.V.
C1 [Bruggink, H. J. Sander; Koenig, Barbara; Kuepper, Sebastian] Univ Duisburg Essen, Fak Ingn Wissensch, Abt Informat & Angew Kognit Wissensch, Essen, Germany.
C3 University of Duisburg Essen
RP Bruggink, HJS (corresponding author), Univ Duisburg Essen, Fak Ingn Wissensch, Abt Informat & Angew Kognit Wissensch, Essen, Germany.
EM sander.bruggink@uni-due.de; barbara_koenig@uni-due.de;
   sebastian.kuepper@uni-due.de
FU DFG-project GaReV [KO 2185/6-2]
FX This work was supported by the DFG-project GaReV (KO 2185/6-2).
CR Baldan P, 2011, J SYMB COMPUT, V46, P222, DOI 10.1016/j.jsc.2010.09.006
   Blume Christoph, 2012, Graph Transformations. Proceedings 6th International Conference, ICGT 2012, P264, DOI 10.1007/978-3-642-33654-6_18
   Bruggink H.J.S., 2011, LIPICS, V13
   Bruggink HJS, 2008, LECT NOTES COMPUT SC, V5214, P336, DOI 10.1007/978-3-540-87405-8_23
   COURCELLE B, 1990, INFORM COMPUT, V85, P12, DOI 10.1016/0890-5401(90)90043-H
   Courcelle B., 1994, MATH STRUCT COMPUT S, V4, P1
   Geser A, 2003, LECT NOTES COMPUT SC, V2747, P449
   Habel A., 1992, LECT NOTES COMPUTER, V643
   Heindel T., 2009, THESIS U DUISBURG ES
   Hopcroft J. E., 2006, INTRO AUTOMATA THEOR
   Kupper Sebastian, 2012, THESIS U DUISBURG ES
   Lack S, 2005, RAIRO-THEOR INF APPL, V39, P511, DOI 10.1051/ita:2005028
   Leifer J. J., 2000, CONCUR 2000 - Concurrency Theory. 11th International Conference. Proceedings (Lecture Notes in Computer Science Vol.1877), P243
   Rupert C. P., 1991, SIGACT News, V22, P48, DOI 10.1145/126546.126547
   Sander Bruggink H.J., 2013, ELECT COMMUN EASST, V58
NR 15
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2015
VL 104
SI SI
BP 71
EP 98
DI 10.1016/j.scico.2014.08.006
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CG2BO
UT WOS:000353080100004
OA hybrid
DA 2024-07-18
ER

PT J
AU Olivero, F
   Lanza, M
   D'ambros, M
AF Olivero, Fernando
   Lanza, Michele
   D'ambros, Marco
TI Object-focused environments revisited
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Object-oriented programming; Development environments
AB Developers write Object-Oriented programs using numerous tools that come as part of integrated development environments (IDEs). We focus on the tool based interfaces of a dynamic class-based language named Smalltalk. Smalltalk IDEs have remained the same for almost 30 years now, despite that they have been found to induce problems related to navigation and the loss of context. The tools work on a textual representation of a program: the source code, which makes it more difficult to comprehend and manipulate the system under construction. In reaction to that, researchers have proposed building IDEs around other metaphors. We explore the desktop metaphor applied to Object-Oriented languages in the form of an object-focused environment, and provide a detailed description of our working prototype, named Gaucho. Our goal is to depart from IDEs with tool based interfaces and fancy text editors, towards an environment that eases the interaction and the crafting of objects by providing more concrete means of manipulation within the interface. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Olivero, Fernando; Lanza, Michele; D'ambros, Marco] Univ Lugano, REVEAL Fac Informat, Lugano, Switzerland.
C3 Universita della Svizzera Italiana
RP Olivero, F (corresponding author), Univ Lugano, REVEAL Fac Informat, Lugano, Switzerland.
EM fernando.olivero@usi.ch
RI Lanza, Michele/JNQ-9470-2023
OI Lanza, Michele/0000-0003-4391-0197
CR [Anonymous], 2005, Extreme programming explained: Embrace change
   Bragdon A., 2010, Proceedings of the 32nd International Conference on Software Engineering (ICSE'10), P455, DOI [DOI 10.1145/1806799.1806866, 10.1145/1806799.1806866]
   Chang B., 1995, Getting close to objects
   CHIKOFSKY EJ, 1990, IEEE SOFTWARE, V7, P13, DOI 10.1109/52.43044
   DeLine R., 2010, P ICSE 2010
   Dijkstra E.W., 1972, COMMUN ACM, P15
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Ingalls D.H., 1981, BYTE MAGAZINE, V6
   JOHNSON J, 1989, COMPUTER, V22, P11, DOI 10.1109/2.35211
   Ko A.J., 2005, P 27 INT C SOFTW ENG
   Kurtenbach G. P., 1993, Human-Computer Interaction, V8, P1, DOI 10.1207/s15327051hci0801_1
   Murphy GC, 2006, IEEE SOFTWARE, V23, P76, DOI 10.1109/MS.2006.105
   Olivero F., 2010, P FLEXITOOLS 2010 1
   Olivero F., P PLATEAU 2012 4 INT
   Olivero F, 2011, S VIS LANG HUM CEN C, P127, DOI 10.1109/VLHCC.2011.6070389
   Roberts D., 1997, Theory and Practice of Object Systems, V3, P253, DOI 10.1002/(SICI)1096-9942(1997)3:4<253::AID-TAPO3>3.0.CO;2-T
   Röthlisberger D, 2009, WORK CONF REVERSE EN, P237, DOI 10.1109/WCRE.2009.18
   Sillito J., 2006, Proceedings of the 14th ACM SIGSOFT international symposium on Foundations of software engineering, P23, DOI DOI 10.1145/1181775.1181779
   Sinha V., 2005, P ETX 2005, P21
   SMITH RB, 1995, SIGPLAN NOTICES, V30, P47, DOI 10.1145/217839.217843
NR 21
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 394
EP 407
DI 10.1016/j.scico.2013.07.011
PN 3
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LH
UT WOS:000347741200006
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Johnstone, A
   Scott, E
AF Johnstone, Adrian
   Scott, Elizabeth
TI Principled software microengineering
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming; Performance; Programming languages
AB Object oriented and pattern based metaphors for software present a solid engineering base for software understanding and construction, but sometimes impose a high performance overhead. We quantify this overhead for one form of generalised parsing and propose support for implementation facets in high level programming languages. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Johnstone, Adrian; Scott, Elizabeth] Univ London, Dept Comp Sci, Egham, Surrey, England.
C3 University of London; Royal Holloway University London
RP Johnstone, A (corresponding author), Univ London, Dept Comp Sci, Egham, Surrey, England.
EM a.johnstone@rhul.ac.uk; e.scott@rhul.ac.uk
FU EPSRC [EP/I032509/1] Funding Source: UKRI
CR [Anonymous], 1977, PATTERN LANGUAGE TOW
   [Anonymous], 2005, SOFTW ENG GUID SOFTW
   Gamma Erich., 1994, DESIGN PATTERNS
   Hohpe Gregor, 2004, Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions
   Johnstone A, 2011, LECT NOTES COMPUT SC, V6563, P42, DOI 10.1007/978-3-642-19440-5_4
   Lavington SimonHugh., 1980, EARLY BRIT COMPUTERS
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   van den Brand MGJ, 2006, LECT NOTES COMPUT SC, V4143, P278
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Watson B.W., 2012, LECT NOTES COMPUT SC, V7643, P236
   Wilkes M.V., 1951, PREPARATION PROGRAMS
   WILKES MV, 1968, J ACM, V15, P1, DOI 10.1145/321439.321440
   Wilkinson J. H., 1948, Report MA/17/1024
NR 13
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 64
EP 68
DI 10.1016/j.scico.2013.11.018
PN 1
PG 5
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100012
OA hybrid
DA 2024-07-18
ER

PT J
AU Chisnall, D
AF Chisnall, David
TI Smalltalk in a C world
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Smalltalk; Objective-C; Object-oriented languages; Late-bound languages;
   Optimisation
AB A modern developer is presented with a continuum of choices of programming languages, ranging from assembly languages and C up to high-level domain-specific languages. It is very rare for a single language to be the best possible choice for everything, and the sweet spot with an optimal trade between ease of development and performance changes depending on the target platform.
   We present an interoperable framework for allowing code written in C (potentially with inline assembly), Objective-C, Smalltalk, and higher-level domain-specific languages to coexist with very low cognitive or performance overhead. Our implementation shares an underlying object model, in interpreted, JIT-compiled and statically compiled code among all languages, allowing a single object to have methods implemented in any of the supported languages. We also describe several techniques that we have used to improve the performance of late-bound dynamic languages. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Cambridge, Cambridge CB2 1TN, England.
C3 University of Cambridge
RP Chisnall, D (corresponding author), Univ Cambridge, Cambridge CB2 1TN, England.
EM David.Chisnall@cl.cam.ac.uk
OI Chisnall, David/0000-0001-6060-0153
FU Defense Advanced Research Projects Agency (DARPA); Air Force Research
   Laboratory (AFRL) [FA8750-10-C-0237]
FX Portions of this work were sponsored by the Defense Advanced Research
   Projects Agency (DARPA) and the Air Force Research Laboratory (AFRL),
   under contract FA8750-10-C-0237. The views, opinions, and/or findings
   contained in this report are those of the authors and should not be
   interpreted as representing the official views or policies, either
   expressed or implied, of the Defense Advanced Research Projects Agency
   or the Department of Defense.
CR [Anonymous], 2002, Master's thesis
   Bacon D. F., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P207
   Bacon D.F., P ACM C OBJ OR SYST, P50
   Bergel A, 2011, COMPUT LANG SYST STR, V37, P132, DOI 10.1016/j.cl.2011.03.002
   Bracha G., 2008, DESIGN, P1
   CHANG PP, 1991, SOFTWARE PRACT EXPER, V21, P1301, DOI 10.1002/spe.4380211204
   Chisnall D, 2012, COMMUN ACM, V55, P44, DOI 10.1145/2330667.2330682
   Chisnall D, 2009, J OBJECT TECHNOL, V8, P221, DOI 10.5381/jot.2009.8.1.a4
   Cox B.J., 1986, OBJECT ORIENTED PROG
   Gal A, 2009, ACM SIGPLAN NOTICES, V44, P465, DOI 10.1145/1543135.1542528
   Gittinger C., 2011 INT SMALL T C
   HOLZLE U, 1994, SIGPLAN NOTICES, V29, P326
   Holzle U., ECOOP 1991 LOND UK, P21
   Ingalls D. H, 1978, P 5 ACM SIGACT SIGPL, P9
   Ingalls D.H.H., 1981, DESIGN PRINCIPLES SM
   Johansson E., 2002, INT J SOFTW TOOLS TE, V4, P421
   Ladd J., 2011 INT SMALLT C
   Petton N., 2011 INT SMALLT C
   Stasenko I., 2011 INT SMALLT C
   Thacker C., 1979, TECHNICAL REPORT
   Todorov T., 2011 INT SMALLT C
   Ungar D., OOPSLA, P227
   Warth A., 2008, THESIS UCLA
NR 23
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 4
EP 16
DI 10.1016/j.scico.2013.10.013
PN 1
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800002
OA hybrid
DA 2024-07-18
ER

PT J
AU Medeiros, S
   Mascarenhas, F
   Ierusalimschy, R
AF Medeiros, Sergio
   Mascarenhas, Fabio
   Ierusalimschy, Roberto
TI Left recursion in Parsing Expression Grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Parsing Expression Grammars; Parsing; Left recursion; Parsing machine;
   Pacicrat parsing
AB Parsing Expression Grammars (PEGs) are a formalism that can describe all deterministic context-free languages through a set of rules that specify a top-down parser for some language. PEGs are easy to use, and there are efficient implementations of PEG libraries in several programming languages.
   A frequently missed feature of PEGs is left recursion, which is commonly used in Context-Free Grammars (CFGs) to encode left-associative operations. We present a simple conservative extension to the semantics of PEGs that gives useful meaning to direct and indirect left-recursive rules, and show that our extensions make it easy to express left-recursive idioms from CFGs in PEGs, with similar results. We prove the conservativeness of these extensions, and also prove that they work with any left-recursive PEG.
   PEGs can also be compiled to programs in a low-level parsing machine. We present an extension to the semantics of the operations of this parsing machine that let it interpret left-recursive PEGs, and prove that this extension is correct with regard to our semantics for left-recursive PEGs. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Medeiros, Sergio] Univ Fed Rio Grande do Norte, Sch Sci & Technol, Natal, RN, Brazil.
   [Mascarenhas, Fabio] Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
   [Ierusalimschy, Roberto] Pontificia Univ Catolica Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
C3 Universidade Federal do Rio Grande do Norte; Universidade Federal do Rio
   de Janeiro; Pontificia Universidade Catolica do Rio de Janeiro
RP Medeiros, S (corresponding author), Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
EM sergio@ufs.br; mascarenhas@ufrj.br; roberto@inf.puc-rio.br
RI Mascarenhas, Fabio/M-5731-2014; Queiroz de Medeiros, Sergio/O-6582-2018
OI Queiroz de Medeiros, Sergio/0000-0002-0759-0926
CR AlessandroWarth Ian, 2007, P 2007 S DYNAMIC LAN, P11
   [Anonymous], 1972, THEORY PARSING TRANS
   [Anonymous], 2006, Lua 5.1 reference manual
   [Anonymous], 2002, THESIS MIT
   BIRMAN A, 1973, INFORM CONTROL, V23, P1, DOI 10.1016/S0019-9958(73)90851-6
   Cooney D., 2009, PEG MAILING
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Ford B, 2002, ACM SIGPLAN NOTICES, V37, P36, DOI 10.1145/583852.581483
   Frost RA, 2008, LECT NOTES COMPUT SC, V4902, P167
   Gosling J., 2005, Java Language Specification, Vthird
   GRUNE D, 1991, PARSING TECHNIQUES P
   HANSON DR, 1985, SOFTWARE PRACT EXPER, V15, P1205, DOI 10.1002/spe.4380151206
   Hutton G., 1992, Journal of Functional Programming, V2, P323, DOI 10.1017/S0956796800000411
   Ierusalimschy R, 2009, SOFTWARE PRACT EXPER, V39, P221, DOI 10.1002/spe.892
   Johnstone A, 2011, LECT NOTES COMPUT SC, V6563, P42, DOI 10.1007/978-3-642-19440-5_4
   Kahn G., 1987, STACS 87. 4th Annual Symposium on Theoretical Aspects of Computer Science. Proceedings, P22, DOI 10.1007/BFb0039592
   Mascarenhas F., 2013, ARXIV13043177
   Medeiros S., 2011, SBLP 11 BRAZ PROGR G
   Medeiros S., 2008, P 2008 S DYNAMIC LAN, DOI [10.1145/1408681.1408683, DOI 10.1145/1408681.1408683]
   Mika O., 2011, OMETA MAILING LIST
   Mizushima Kota, 2010, P 9 ACM SIGPLAN SIGS, P29, DOI [10.1145/1806672, DOI 10.1145/1806672]
   Parr T., 2011, PEG MAILING LIST
   Parr T, 2011, ACM SIGPLAN NOTICES, V46, P425, DOI 10.1145/1993316.1993548
   Redziejowski RR, 2008, FUND INFORM, V85, P441
   Redziejowski RR, 2007, FUND INFORM, V79, P513
   Ridge Tom, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P103
   Scott E, 2007, ACTA INFORM, V44, P427, DOI 10.1007/s00236-007-0054-z
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Tisher G., 2010, PEG MAILING LIST
   Tisher G., 2012, IRONMETA PARSER GENE
   Tomita M., 1988, 26th Annual Meeting of the Association for Computational Linguistics. Proceedings of the Conference, P249
   Tratt L., 2010, EIS1001 MIDDL U
   Warth A., 2008, OMETA MAILING LIST
   Warth A, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P103, DOI 10.1145/1328408.1328424
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 35
TC 10
Z9 10
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 177
EP 190
DI 10.1016/j.scico.2014.01.013
PN 2
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JY
UT WOS:000345180900002
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU van der Storm, T
   Cook, WR
   Loh, A
AF van der Storm, Tijs
   Cook, William R.
   Loh, Alex
TI The design and implementation of Object Grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Domain-specific languages; Model-driven development; Language
   composition; Syntax definition
ID TEXTUAL SYNTAX; LANGUAGE
AB An Object Grammar is a variation on traditional BNF grammars, where the notation is extended to support declarative bidirectional mappings between text and object graphs. The two directions for interpreting Object Grammars are parsing and formatting. Parsing transforms text into an object graph by recognizing syntactic features and creating the corresponding object structure. In the reverse direction, formatting recognizes object graph features and generates an appropriate textual presentation. The key to Object Grammars is the expressive power of the mapping, which decouples the syntactic structure from the graph structure. To handle graphs, Object Grammars support declarative annotations for resolving textual names that refer to arbitrary objects in the graph structure. Predicates on the semantic structure provide additional control over the mapping. Furthermore, Object Grammars are compositional so that languages may be defined in a modular fashion. We have implemented our approach to Object Grammars as one of the foundations of the Ens (o) over bar system and illustrate the utility of our approach by showing how it enables definition and composition of domain-specific languages (DSLs). (C) 2014 Elsevier B.V. All rights reserved.
C1 [van der Storm, Tijs] CWI, NL-1098 XG Amsterdam, Netherlands.
   [Cook, William R.; Loh, Alex] Univ Texas Austin, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP van der Storm, T (corresponding author), CWI, Sci Pk 123, NL-1098 XG Amsterdam, Netherlands.
EM storm@cwi.nl; wcook@cs.utexas.edu; alexloh@cs.utexas.edu
RI Cook, William/JFK-1866-2023; van der Storm, Tijs/HGB-8960-2022
OI Cook, William/0000-0003-4918-8975
CR Alanen M, 2004, 606 TURK CTR COMP SC
   [Anonymous], 1962, LISP 1 5 PROGRAMMERS
   [Anonymous], 2013, SOFTWARE LANGUAGE EN
   Apel S., P INT C SOFTW ENG IC, P221
   Apel S., 2008, ACM T PROGR LANG SYS, V32
   APPEL AW, 1994, ACM T PROGR LANG SYS, V16, P1699, DOI 10.1145/197320.197336
   Avgustinov P, 2008, P 7 INT C ASP OR SOF, P25, DOI [10.1145/1353482.1353486, DOI 10.1145/1353482.1353486]
   Baader F., 2003, DESCRIPTION LOGIC HD
   Bak K, 2011, LECT NOTES COMPUT SC, V6563, P102, DOI 10.1007/978-3-642-19440-5_7
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   Bravenboer M, 2009, LECT NOTES COMPUT SC, V5452, P74, DOI 10.1007/978-3-642-00434-6_6
   CANTOR DG, 1962, J ACM, V9, P477, DOI 10.1145/321138.321145
   Casey A., 2011, P 10 INT C ASPECT OR, P7
   Chen P. P, 1976, ACM T DATABASE SYST, V1
   Crockford D., 2006, Tech. Rep.
   DevBoost, 2012, EMFTEXT CONCR SYNT M
   Diekmann L., 2013, WORKSH SCAL LANG SPE
   EARLEY J, 1970, COMMUN ACM, V13, P607, DOI 10.1145/355598.362740
   Ekman T, 2006, LECT NOTES COMPUT SC, V4143, P422
   Ekman T, 2007, SCI COMPUT PROGRAM, V69, P14, DOI 10.1016/j.scico.2007.02.003
   Erdweg S., 2012, P INT WORKSH LANG DE
   Erdweg S., 2013, P 6 INT C SOFTW LANG
   Eysholdt M., 2010, P ACM INT C COMPANIO, P307, DOI DOI 10.1145/1869542.1869625
   Flanagan D.Y. Matsumoto., 2008, The Ruby Programming Language
   Fondement F., 2006, LGL2006005 EPFL
   Fondement F., 2007, THESIS EPFL
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Frakes W, 1996, ACM COMPUT SURV, V28, P415, DOI 10.1145/234528.234531
   Goldschmidt T, 2008, LECT NOTES COMPUT SC, V5095, P169, DOI 10.1007/978-3-540-69100-6_12
   GOTO E, 1974, 7403 U TOK
   Hammer M., 1978, International Conference on Management of Data (SIGMOD), P26, DOI 10.1145/509252.509264
   Heidenreich F, 2009, LECT NOTES COMPUT SC, V5562, P114, DOI 10.1007/978-3-642-02674-4_9
   Jefferson S., 1996, LISP and Symbolic Computation, V9, P181, DOI 10.1007/BF01806112
   Johnson S. C., 1975, CS32 AT T BELL LAB
   Jouault F., 2006, 5 INT C GEN PROGR CO, P249, DOI DOI 10.1145/1173706.1173744
   Jouault F., 2006, ECL MOD S ECL SUMM E
   Jouault F, 2006, LECT NOTES COMPUT SC, V4037, P171
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Krahn H, 2007, LECT NOTES COMPUT SC, V4735, P286
   Kurtev I., 2006, P COMP 21 ACM SIGPLA, P602
   LECARME O, 1982, SOFTWARE PRACT EXPER, V12, P785, DOI 10.1002/spe.4380120902
   Loh A., LANG WORKB CHALL WOR
   Loh A., 2012, P ACM INT S NEW ID N, P179
   Merkle Bernhard, 2010, COMPANION 25 ANN ACM, P139, DOI DOI 10.1145/1869542
   Muller PA, 2008, SOFTW SYST MODEL, V7, P423, DOI 10.1007/s10270-008-0088-x
   *OBJ MAN GROUP, 2000, UN MOD LANG SPEC VER
   Oliveira BCDS, 2013, LECT NOTES COMPUT SC, V7920, P27, DOI 10.1007/978-3-642-39038-8_2
   PAAKKI J, 1995, ACM COMPUT SURV, V27, P196, DOI 10.1145/210376.197409
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Piumarta I., 2006, RN2006001A VPRI
   Piumarta I, 2008, LECT NOTES COMPUT SC, V5146, P1
   Rendel T, 2010, ACM SIGPLAN NOTICES, V45, P1
   Renggli L, 2010, LECT NOTES COMPUT SC, V5969, P274
   Schorre D. V., 1964, P 1964 19 ACM NAT C, DOI [10.1145/800257.808896, DOI 10.1145/800257.808896]
   Schwerdfeger AC, 2009, ACM SIGPLAN NOTICES, V44, P199, DOI 10.1145/1543135.1542499
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Sloane AM, 2013, SCI COMPUT PROGRAM, V78, P1752, DOI 10.1016/j.scico.2011.11.005
   Smith B. C., 1984, P 11 ACM SIGACT SIGP, P23, DOI [DOI 10.1145/800017.800513, 10.1145/800017.800513]
   Tomita M., 1984, 10th International Conference on Computational Linguistics. 22nd Annual Meeting of the Association for Computational Linguistics. Proceedings of Coling 84, P354
   Tratt L, 2010, EIS1001 MIDDL U SCH
   van der Storm T., 2012, LNCS, V7745, P4
   Van Wyk E., 2003, ELECT NOTES THEORETI, V82.3
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Visser J, 2008, ELECTRON NOTES THEOR, V200, P3, DOI 10.1016/j.entcs.2008.04.090
   Voelter Markus., 2011, GENERATIVE TRANSFORM, P383, DOI [10.1007/978-3-642-35992-7_11, DOI 10.1007/978-3-642-35992-7_11]
   Volter Markus., 2010, Proceedings of the ACM international conference companion on Object oriented programming systems languages and applications companion, P301, DOI [10.1145/1869542.1869623, DOI 10.1145/1869542.1869623]
   Wand M., 1988, LISP and Symbolic Computation, V1, P11, DOI 10.1007/BF01806174
   Warth A, 2008, PEPM'08: PROCEEDINGS OF THE 2008 ACM SIGPLAN SYMPOSIUM ON PARTIAL EVALUATION AND SEMANTICS-BASED PROGRAM MANIPULATION, P103, DOI 10.1145/1328408.1328424
   Wikipedia, 2012, PIP INSTR DIAGR
   Wimmer M, 2006, LECT NOTES COMPUT SC, V3844, P159
   WIRTH N, 1977, COMMUN ACM, V20, P822, DOI 10.1145/359863.359883
NR 72
TC 12
Z9 12
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
BP 460
EP 487
DI 10.1016/j.scico.2014.02.023
PN 4
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KC
UT WOS:000345181300005
OA Green Submitted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Carvalho, G
   Falcao, D
   Barros, F
   Sampaio, A
   Mota, A
   Motta, L
   Blackburn, M
AF Carvalho, Gustavo
   Falcao, Diogo
   Barros, Flavia
   Sampaio, Augusto
   Mota, Alexandre
   Motta, Leonardo
   Blackburn, Mark
TI NAT2TEST<i><sub>SCR</sub></i>: Test case generation from natural
   language requirements based on SCR specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Conference on Software Verification and Testing (SVT) Track at the 28th
   ACM Symposium on Applied Computing (ACM SAC)
CY MAR, 2013
CL Coimbra, PORTUGAL
SP ACM
DE Requirements; Test generation; Natural language processing; Software
   cost reduction; SCR
ID MUTATION
AB Formal models are increasingly being used as input for automated test generation strategies. Software Cost Reduction (SCR), for example, was designed to detect and correct errors during the requirements phase, also allowing test generation. However, the syntax of SCR and other formalisms are not trivial for non-experts. In this work, we present a strategy for test case generation from natural language requirements that uses SCR as an intermediate and hidden formalism. To minimize textual ambiguity, requirements are written according to a controlled natural language. Syntactically valid requirements are mapped into their semantic representation using case frames, from which SCR specifications are derived. These specifications are then used by the T-VEC tool to generate tests cases. Our strategy was evaluated in four different domains: (i) a vending machine (toy example); (ii) a control system for safety injection in a nuclear power plant (publicly available), (iii) one example provided by our industrial partner Embraer; and (iv) the turn indicator system of Mercedes vehicles (publicly available). As a baseline we considered random testing, and, in general, our strategy outperformed it in terms of performance and mutant-based strength analysis. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Carvalho, Gustavo; Falcao, Diogo; Barros, Flavia; Sampaio, Augusto; Mota, Alexandre] Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
   [Motta, Leonardo] Embraer, BR-12227901 Sao Paulo, SP, Brazil.
   [Blackburn, Mark] Stevens Inst Technol, Hoboken, NJ 07030 USA.
C3 Universidade Federal de Pernambuco; Embraer S.A.; Stevens Institute of
   Technology
RP Carvalho, G (corresponding author), Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
EM ghpc@cin.ufpe.br; dfdf@cin.ufpe.br; fab@cin.ufpe.br; acas@cin.ufpe.br;
   acm@cin.ufpe.br; leonardo.motta@embraer.com.br;
   mark.blackburn@stevens.edu
OI de Almeida Barros, Flavia/0000-0003-1280-0251; Mota,
   Alexandre/0000-0003-4416-8123
CR Allen J., 1995, Natural Language Understanding
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], 2008, DICT LANGUAGE LINGUI
   [Anonymous], 2009, NASA STUDY FLIGHT SO
   [Anonymous], 2006, COMPILERS PRINCIPLES
   ASD, 2005, ASDSTE100
   ATLEE JM, 1993, IEEE T SOFTWARE ENG, V19, P24, DOI 10.1109/32.210305
   Barros F.A., 2011, SEKE 2011 P 23 INT C, P250
   Bergerand J.-L., 1986, THESIS INPG
   BLACKBURN MR, 1997, P 12 ANN C COMP ASS
   Boddu R, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P262
   Brottier E, 2007, IEEE INT ENTERP DIST, P390, DOI 10.1109/EDOC.2007.44
   Camus J.-L., 2003, EFFICIENT DEV AIRBOR
   Carvalho G., 2013, SAC, P1217
   Carvalho G., 2014, INT WORKSHOP FORMAL, P19, DOI DOI 10.1007/978-3-319-05416-2_3
   Carvalho G, 2013, LECT NOTES COMPUT SC, V8144, P148, DOI 10.1007/978-3-642-41202-8_11
   Charette R. N., 2009, IEEE SPECTR
   Charniak E., 1999, MAXIMUM ENTROPY INSP
   de Santiago VA, 2012, SOFTWARE QUAL J, V20, P77, DOI 10.1007/s11219-011-9155-6
   Efkemann C., 2011, 2011 IEEE Fourth International Conference on Software Testing, Verification and Validation Workshops (ICSTW), P55, DOI 10.1109/ICSTW.2011.72
   ESSER M.W., 2007, INT WORKSHOP PRINCIP, P75
   FAA, 2009, REQ ENG MAN FIND REP
   Fillmore C.J., 1968, UNIVERSALS LINGUIST, P1, DOI DOI 10.4236/ENG
   Hayhurst K. J., 2001, NASATM2001210876
   Heitmeyer ConstanceL., 2000, Journal of Universal Computer Science, V6, P650
   Heninger K., 1978, 3876 TR US NAV RES L
   Kamprath C., 1998, P 2 INT WORKSH CONTR
   Kuhn T., 2012, LECT NOTES COMPUT SC, V7427
   Larsen K.G., 2004, DAGSTUHL SEMINAR P, V04371
   Leacock C, 1998, LANG SPEECH & COMMUN, P265
   Leonard E. I., 2003, Higher-Order and Symbolic Computation, V16, P63, DOI 10.1023/A:1023072104553
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Mota A, 2010, LECT NOTES COMPUT SC, V6351, P361, DOI 10.1007/978-3-642-15651-9_27
   Nogueira S., 2012, FORM ASP COMPUT, P1
   OBrien S., 2003, P EAMT CLAW, P105
   Pacheco C., 2007, ICSE'07
   Peleska J, 2011, LECT NOTES COMPUT SC, V7019, P146, DOI 10.1007/978-3-642-24580-0_11
   Peleska Jan., 2011, Automated Model-Based Testing with RT-Tester
   Piel É, 2010, LECT NOTES COMPUT SC, V6435, P79, DOI 10.1007/978-3-642-16573-3_7
   Schneider S., 1999, Concurrent and Real Time Systems: The CSP Approach, V1st
   Schwitter R, 2002, P 13 INT WORKSH DAT
   Sinha Avik, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P155, DOI 10.1109/ICST.2010.19
   Sneed HM, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P380
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Utting M., 2007, PRACTICAL MODEL BASE
   Wyner A, 2010, LECT NOTES ARTIF INT, V5972, P281, DOI 10.1007/978-3-642-14418-9_17
NR 47
TC 27
Z9 32
U1 0
U2 21
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 275
EP 297
DI 10.1016/j.scico.2014.06.007
PN 3
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS9RH
UT WOS:000344578800002
DA 2024-07-18
ER

PT J
AU Weijers, J
   Hage, J
   Holdermans, S
AF Weijers, Jeroen
   Hage, Jurriaan
   Holdermans, Stefan
TI Security type error diagnosis for higher-order, polymorphic languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type-based program analysis; Security analysis; Error feedback
ID INFERENCE
AB We combine the type error slicing and heuristics based approaches to type error diagnostic improvement within the context of type based security analysis on a let-polymorphic call by value lambda calculus extended with lists, pairs and the security specific constructs declassify and protect. We define and motivate four classes of heuristics that help diagnose inconsistencies among the constraints, and show their effect on a selection of security incorrect programs. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Hage, Jurriaan] Univ Utrecht, Dept Inf & Comp Sci, NL-3508 TB Utrecht, Netherlands.
   [Holdermans, Stefan] Vector Fabr, NL-5616 RM Eindhoven, Netherlands.
C3 Utrecht University
RP Hage, J (corresponding author), Univ Utrecht, Dept Inf & Comp Sci, POB 80-089, NL-3508 TB Utrecht, Netherlands.
EM mail@jeroenweijers.eu; J.Hage@uu.nl; stefan@vectorfabrics.com
FU NWO project on "Scriptable Compilers" [612.063.406]
FX This work was supported by the NWO project on "Scriptable Compilers"
   (612.063.406). The authors would like to thank Sean Leather and
   anonymous referees for their helpful comments. The present article is a
   revised version of a paper [29] that was presented at the 2013 ACM
   SIGPLAN Workshop on Partial Evaluation and Program Manipulation in Rome,
   Italy. The authors wish to express their gratitude to the anonymous
   reviewers of POPL 2012, PEPM 2013 and the current journal version, for
   their insightful comments and helpful suggestions. Finally, the second
   author thanks the chairs of the VODCA 2008 workshop, in particular
   Alessandro Aldini, for encouraging this research into error diagnosis
   for security analyses as a follow-up to [10].
CR Abadi M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P147, DOI 10.1145/292540.292555
   Abadi M, 2007, ELECTRON NOTES THEOR, V172, P5, DOI 10.1016/j.entcs.2007.02.002
   [Anonymous], 1990, Introduction to Lattices and Order
   [Anonymous], 2003, WORKSHOP HASKELL P H, DOI [DOI 10.1145/871895.871903, 10.1145/871895.871903]
   Damas L., 1982, C REC 9 ANN ACM S PR, P207, DOI DOI 10.1145/582153.582176
   Deng Z., 2006, P ACMSE 2006 44 ACM, P543
   el Boustani N., 2012, HIGH ORDER SYMB COMP, V24, P3
   el Boustani N, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P5, DOI 10.1145/1706356.1706360
   Haack C, 2004, SCI COMPUT PROGRAM, V50, P189, DOI 10.1016/j.scico.2004.01.004
   Hage J, 2007, ACM SIGPLAN NOTICES, V42, P235, DOI 10.1145/1291220.1291189
   Hage J, 2007, LECT NOTES COMPUT SC, V4449, P199
   Hage J, 2009, ELECTRON NOTES THEOR, V236, P163, DOI 10.1016/j.entcs.2009.03.021
   Heeren B, 2003, ACM SIGPLAN NOTICES, V38, P3, DOI 10.1145/944746.944707
   Heeren B., 2005, Top quality type error Messages
   Heintze N., 1998, Conference Record of POPL '98: 25th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P365, DOI 10.1145/268946.268976
   Johnson R, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE 13TH USENIX SECURITY SYMPOSIUM, P119
   Johnson-acsadi G, 1986, Popul Bull UN, P44, DOI 10.1145/512644.512649
   Jones MarkP., 1994, Qualified Types: Theory and Practice
   King D., 2008, Proceedings of the 16th ACM SIGSOFT International Symposium on Foundations of Software Engineering, SIGSOFT '08/FSE-16, P250
   Lerner BS, 2007, ACM SIGPLAN NOTICES, V42, P425, DOI 10.1145/1273442.1250783
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Nielson F., 1999, Principles of Program Analysis
   Pottier F, 2003, ACM T PROGR LANG SYS, V25, P117, DOI 10.1145/596980.596983
   Rahli V., 2010, HWMACSTR0079 HERR WA
   Russo A, 2008, HASKELL'08: PROCEEDINGS OF THE ACM SIGPLAN 2008 HASKELL SYMPOSIUM, P13
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Weijers J., 2013, P ACM SIGPLAN 2013 W, P3
   Weijers J., 2010, THESIS
NR 29
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2014
VL 95
BP 200
EP 218
DI 10.1016/j.scico.2014.03.011
PN 2
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS9RG
UT WOS:000344578700004
DA 2024-07-18
ER

PT J
AU Andova, S
   Groenewegen, LPJ
   de Vink, EP
AF Andova, S.
   Groenewegen, L. P. J.
   de Vink, E. P.
TI Dynamic adaptation with distributed control in Paradigm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Workshop on Formal Aspects of Component Software
   (FACS)
CY OCT 14-16, 2010
CL Guimaraes, PORTUGAL
DE Component-based systems; Dynamic system adaptation; Distributed control;
   Formal verification
ID IN-PROCESS ALGEBRA; VERIFICATION; CONTRACTS; MODEL
AB Adaptation of a component-based system can be achieved in the coordination modeling language Paradigm through the special component McPal. McPal regulates the propagation of new behavior and guides the changes in the components and in their coordination. Here we show how McPal may delegate part of its control to local adaptation managers, created on-the-fly, allowing for distribution of the adaptation indeed. We illustrate the approach for the well-known example of the dining philosophers problem, by modeling migration from a deadlock-prone solution to a deadlock-free and starvation-free solution without any system quiescence. The system migration goes through various stages, exhibiting a shift of control among McPal and its helpers, and changing degrees of orchestrated and choreographic collaboration. The distributed system adaptation is formally verified using the mCRL2 model checker. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Andova, S.] Fontys Univ Appl Sci, ICT Technol, Eindhoven, Netherlands.
   [Groenewegen, L. P. J.] Leiden Univ, Leiden Inst Adv Comp Sci, NL-2300 RA Leiden, Netherlands.
   [de Vink, E. P.] Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
   [de Vink, E. P.] Ctr Wiskunde & Informat, Amsterdam, Netherlands.
C3 Leiden University; Leiden University - Excl LUMC; Eindhoven University
   of Technology
RP de Vink, EP (corresponding author), Eindhoven Univ Technol, Dept Math & Comp Sci, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM e.p.d.vink@tue.nl
CR Adler R, 2010, ACM T EMBED COMPUT S, V10, DOI 10.1145/1880050.1880056
   Alia M, 2007, LECT NOTES COMPUT SC, V4531, P104
   Allen R, 1998, LECT NOTES COMPUT SC, V1382, P21, DOI 10.1007/BFb0053581
   Andova S., 2012, Formal Aspects of Component Software. 7th International Workshop, FACS 2010. Revised Selected Papers, P125, DOI 10.1007/978-3-642-27269-1_8
   Andova S, 2011, SCI COMPUT PROGRAM, V76, P711, DOI 10.1016/j.scico.2010.04.011
   Andova S, 2009, ELECTRON NOTES THEOR, V229, P3, DOI 10.1016/j.entcs.2009.06.026
   Andova S, 2009, ELECTRON NOTES THEOR, V255, P23, DOI 10.1016/j.entcs.2009.10.023
   Andova S, 2010, LECT NOTES COMPUT SC, V6416, P143, DOI 10.1007/978-3-642-16561-0_19
   Andova S, 2011, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.60.1
   Andova S, 2009, LECT NOTES COMPUT SC, V5835, P255, DOI 10.1007/978-3-642-10248-6_11
   Arbab Farhad, 2012, Formal Aspects of Component Software. 7th International Workshop, FACS 2010. Revised Selected Papers, P277, DOI 10.1007/978-3-642-27269-1_16
   Arbab F., 2010, COMMUNICATION
   Bartoletti M, 2011, ELECTRON P THEOR COM, P130, DOI 10.4204/EPTCS.59.11
   BENCOMO N, 2008, SPLC, P23
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   Biyani KN, 2008, J PARALLEL DISTR COM, V68, P1097, DOI 10.1016/j.jpdc.2008.02.005
   Bocchi L, 2010, LECT NOTES COMPUT SC, V6269, P162, DOI 10.1007/978-3-642-15375-4_12
   Bocchi L, 2011, ELECTRON P THEOR COM, P111, DOI 10.4204/EPTCS.59.10
   Bradbury J.S., 2004, Proceedings of the 1st ACM SIGSOFT Workshop on Self-managed Systems. WOSS '04, P28, DOI [10.1145/1075405.1075411, DOI 10.1145/1075405.1075411]
   Bradfield J, 2007, STUD LOGIC PRACT REA, V3, P721
   Bucchiarone A, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P181, DOI 10.1109/WICSA.2009.5290804
   Cetina C, 2008, SPLC 2008: 12TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE, PROCEEDINGS, P117, DOI 10.1109/SPLC.2008.13
   Ehrig H, 2010, LECT NOTES COMPUT SC, V6013, P139, DOI 10.1007/978-3-642-12029-9_10
   Engels G., 2001, Software Engineering Notes, V26, P186, DOI 10.1145/503271.503235
   Giese H, 2007, LECT NOTES COMPUT SC, V4322, P258
   Groenewegen L, 2005, LECT NOTES COMPUT SC, V3454, P94
   Groenewegen L, 2006, LECT NOTES COMPUT SC, V4038, P97
   Groote J. F., 2001, HDB PROCESS ALGEBRA, P1151, DOI [DOI 10.1016/B978-044482830-9/50035-7., 10.1016/b978-044482830-9/50035-7, DOI 10.1016/B978-044482830-9/50035-7]
   Groote Jan Friso., 2007, METHODS MODELLING SO
   Koehler C, 2009, LECT NOTES COMPUT SC, V5486, P221, DOI 10.1007/978-3-642-03429-9_15
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   Kramer J, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P259, DOI 10.1109/FOSE.2007.19
   Krause C., 2011, THESIS LEIDEN U
   Kuster J., 2004, THESIS U PADERBORN
   Magee J., 1996, Software Engineering Notes, V21, P3, DOI 10.1145/250707.239104
   Melliti T, 2008, LECT NOTES COMPUT SC, V4961, P146, DOI 10.1007/978-3-540-78743-3_12
   Morin B, 2008, LECT NOTES COMPUT SC, V5301, P782, DOI 10.1007/978-3-540-87875-9_54
   Morssink P.J.A., 1988, THESIS LEIDEN U
   Rawashdeh O., 2006, P AER C 2006 BIG SKY
   Segarra MT, 2009, INT CON ADV INFO NET, P525, DOI 10.1109/AINA.2009.16
   Stam A., 2009, THESIS LEIDEN U
   Stettina C.J., 2012, ENTERPRISE INTEROP 2, P105
   Stut W., 1992, THESIS LEIDEN U
   TOUSSAINT PJ, 1998, THESIS LEIDEN U
   van Steen M., 1988, THESIS LEIDEN U
   Weijland, 1990, PROCESS ALGEBRA CAMB, V18
   Yarvis M., 1999, Proceedings of the Seventh Workshop on Hot Topics in Operating Systems, P44, DOI 10.1109/HOTOS.1999.798376
   Zhang J, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P161
NR 48
TC 4
Z9 4
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
BP 333
EP 361
DI 10.1016/j.scico.2013.11.034
PN 3
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AS1JY
UT WOS:000344038700005
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Gervasi, V
   Börger, E
   Cisternino, A
AF Gervasi, Vincenzo
   Boerger, Egon
   Cisternino, Antonio
TI Modeling web applications infrastructure with ASMs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web applications; Abstract State Machines; JavaScript
ID VERIFICATION
AB We describe via Abstract State Machines the major ingredients of contemporary web applications: a web browser running javaScript programs and a web server dispatching requests to one of several modules, each one representing a class of established web application frameworks.
   The web browser model comes in four levels, namely transport, stream, context and browser level, and is focussed on the interaction with possibly multiple servers (which requires a concurrent computation model) and on script execution (which requires a dynamic assignment of agents to programs). The server model is focussed on the Request-Reply pattern, and specifies a delegation strategy where the handling of a request is entrusted to a module. We show how several major frameworks for web applications can be described as progressive refinements of a number of basic modules. Three modules are further detailed: static file transfer, CGI and generic scripting modules. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Gervasi, Vincenzo; Boerger, Egon; Cisternino, Antonio] Univ Pisa, Dipartimento Informat, I-56123 Pisa, Italy.
C3 University of Pisa
RP Gervasi, V (corresponding author), Univ Pisa, Dipartimento Informat, Largo B Pontecorvo 3, I-56123 Pisa, Italy.
EM gervasi@di.unipi.it; boerger@di.unipi.it; cistemi@di.unipi.it
RI ; CISTERNINO, ANTONIO/E-6174-2018
OI Gervasi, Vincenzo/0000-0002-8567-9328; CISTERNINO,
   ANTONIO/0000-0001-5302-3335
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   Alpuente M, 2014, SCI COMPUT PROGRAM, V81, P79, DOI 10.1016/j.scico.2013.07.014
   Altenhofen M., 2006, International Journal of Business Process Integration and Management, V1, P267, DOI 10.1504/IJBPIM.2006.012625
   [Anonymous], 2011, ECMA262
   [Anonymous], 2001, Java and the Java Virtual Machine: Definition, Verification, Validation
   Barros A, 2005, LECT NOTES COMPUT SC, V3785, P5
   Bertot Y., 2004, TEXT THEORET COMP S
   Boerger E., 2012, LNCS
   Börger E, 2012, J COMPUT SYST SCI, V78, P939, DOI 10.1016/j.jcss.2011.08.004
   Borger E., 2003, Formal Aspects of Computing, V15, P237, DOI 10.1007/s00165-003-0012-7
   Borger E., 2011, JSSM, P1
   Borger E., 2003, ABSTRACT STATE MACHI
   Börger E, 2007, FORM ASP COMPUT, V19, P225, DOI 10.1007/s00165-006-0019-y
   Cerf V.G., 1974, RFC675
   Chen J, 2004, LECT NOTES COMPUT SC, V3308, P46
   Dittamo C., 2010, VSTTE 10 ED
   Farahbod R, 2007, FUND INFORM, V77, P71
   Gervasi Vincenzo, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P79, DOI 10.1007/978-3-642-30885-7_6
   Hohpe G., 2012, Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions, V15
   Homma K, 2011, IEICE T INF SYST, VE94D, P989, DOI 10.1587/transinf.E94.D.989
   Jang D., 2012, P IET INT C RAD SYST, P1
   Krishnamurthi S., 2006, INTERACTIVE COMPUTAT, P255
   Neron Pierre, 2011, Smart Card Research and Advanced Applications. 10th IFIP WG 8.8/11.2 International Conference. CARDIS 2011. Revised Selected Papers, P34, DOI 10.1007/978-3-642-27257-8_3
   Schellhorn G, 1998, APPL LOG SER, V10, P165
   Schellhorn G, 2006, LECT NOTES COMPUT SC, V4085, P16
   W3C, CGI COMM GAT INT
   World Wide Web Consortium, HTML 5 VOC ASS APIS
NR 27
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 69
EP 92
DI 10.1016/j.scico.2014.02.025
PN 2
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500002
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Hallerstede, S
   Hoang, TS
AF Hallerstede, Stefan
   Hoang, Thai Son
TI Refinement of decomposed models by interface instantiation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Event-B; Decomposition; Refinement; External variables; Interface
   instantiation
AB Decomposition is a technique to separate the design of a complex system into smaller sub-models, which improves scalability and team development. In the shared-variable decomposition approach for Event-B, sub-models share external variables and communicate through external events which cannot be easily refined.
   Our first contribution hence is a proposal for a new construct called interface that encapsulates the external variables, along with a mechanism for interface instantiation. Using the new construct and mechanism, external variables can be refined consistently. Our second contribution is an approach for verifying the correctness of Event-B extensions using the supporting Rodin tool. We illustrate our approach by proving the correctness of interface instantiation. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Hallerstede, Stefan] Aarhus Univ, DK-8000 Aarhus C, Denmark.
   [Hoang, Thai Son] Swiss Fed Inst Technol, Zurich, Switzerland.
C3 Aarhus University; Swiss Federal Institutes of Technology Domain; ETH
   Zurich
RP Hallerstede, S (corresponding author), Aarhus Univ, DK-8000 Aarhus C, Denmark.
EM stefan.hallerstede@wanadoo.fr; htson@inf.ethz.ch
RI Hoang, Thai Son/H-6159-2019
OI Hoang, Thai Son/0000-0003-4095-0732
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J.-R., 2005, RODIN DELIVERABLE 3
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial JR, 2007, FUND INFORM, V77, P1
   Basin D.A., 2012, ARXIV12107283
   Evans N, 2006, LECT NOTES COMPUT SC, V4085, P221
   Gmehlich R, 2011, LECT NOTES COMPUT SC, V6991, P195, DOI 10.1007/978-3-642-24559-6_15
   Hall S., 2005, TECHNICAL REPORT, P1
   Hallerstede Stefan, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P223, DOI 10.1007/978-3-642-30885-7_16
   Hoang TS, 2010, LECT NOTES COMPUT SC, V5977, P319, DOI 10.1007/978-3-642-11811-1_24
   Iliasov A, 2010, LECT NOTES COMPUT SC, V5977, P174, DOI 10.1007/978-3-642-11811-1_14
   Jackson M., 2001, PROBLEM FRAMES ANAL
   Ladenberger L, 2009, LECT NOTES COMPUT SC, V5825, P202, DOI 10.1007/978-3-642-04570-7_17
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Loesch F., 2010, DEPLOY DELIVERABLE D, P1
   Poppleton M, 2008, LECT NOTES COMPUT SC, V5238, P209
   Schneider S, 2011, SCI COMPUT PROGRAM, V76, P837, DOI 10.1016/j.scico.2010.08.001
   Silva R, 2011, SOFTWARE PRACT EXPER, V41, P199, DOI 10.1002/spe.1002
NR 18
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2014
VL 94
SI SI
BP 144
EP 163
DI 10.1016/j.scico.2014.05.005
PN 2
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AS1JW
UT WOS:000344038500006
OA Bronze
DA 2024-07-18
ER

PT J
AU Molina, AI
   Giraldo, WJ
   Ortega, M
   Redondo, MA
   Collazos, CA
AF Molina, Ana I.
   Giraldo, William J.
   Ortega, Manuel
   Redondo, Miguel A.
   Collazos, Cesar A.
TI Model-driven development of interactive groupware systems: Integration
   into the software development process
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software Engineering (SE); Human-Computer Interaction (HCI); Groupware
   design; Model Driven Development (MDD); Models integration
ID COGNITIVE FIT; TASK; INTERFACES; FRAMEWORK; LANGUAGE
AB Modeling interactive groupware systems is a complex and multi-disciplinary task. It is necessary to provide designers and engineers with a set of methods, notations and tools to specify the different aspects to consider when designing this type of systems. In this work we present a methodological framework based on the integration of several notations and processes for modeling some of these aspects, in particular: interaction, collaboration and functionality. The objective of this work is to provide a more complete support to the design of groupware systems, considering different viewpoints and modeling perspectives of the several stakeholders involved in the development of such applications. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Molina, Ana I.; Ortega, Manuel; Redondo, Miguel A.] Univ Castilla La Mancha, Dept Informat Technol & Syst, E-13071 Ciudad Real, Spain.
   [Giraldo, William J.] Univ Quindio, Quindio, Colombia.
   [Collazos, Cesar A.] Univ Cauca, Dept Sistemas FIET, Popayan, Colombia.
C3 Universidad de Castilla-La Mancha; Universidad del Quindio; Universidad
   del Cauca
RP Molina, AI (corresponding author), Univ Castilla La Mancha, Dept Informat Technol & Syst, E-13071 Ciudad Real, Spain.
EM AnaIsabel.Molina@uclm.es; wjgiraldo@uniquindio.edu.co;
   Manuel.Ortega@uclm.es; Miguel.Redondo@uclm.es; ccollazo@unicauca.edu.co
RI Ortega, Manuel/F-9191-2015; Bravo, Jose/F-8861-2015; Molina, Ana
   I/M-1392-2014; Redondo, Miguel A./F-7852-2015
OI Ortega, Manuel/0000-0002-0194-7744; Bravo, Jose/0000-0001-5752-2406;
   Molina, Ana I/0000-0002-3449-2539; Giraldo Orozco, William
   Joseph/0000-0002-3914-3215; Collazos, Cesar/0000-0002-7099-8131;
   Redondo, Miguel A./0000-0001-5809-3412
FU EDUCA-PROG [TIN2011-29542-C02-02]; iColab and INTEGroup projects - Junta
   de Comunidades de Castilla La Mancha (Spain) [PPII11-0013-1219];
   Ministerio de Ciencia e Innovacion (Spain)
FX This work has been partially supported by the EDUCA-PROG
   (TIN2011-29542-C02-02), iColab and INTEGroup (PPII11-0013-1219)
   projects, funded by the Junta de Comunidades de Castilla La Mancha
   (Spain) and the Ministerio de Ciencia e Innovacion (Spain). We thank Dr.
   Pedro Pablo Sanchez Villa Ion for his selfless help in reviewing the
   English language.
CR Ackerman M.S., 2005, SECURITY USABILITY D, P381
   Annett J., 1967, OCCUP PSYCHOL, V41, P211
   [Anonymous], 1983, The Psychology of Human-Computer Interaction
   [Anonymous], 2003, Eclipse Modeling Framework
   [Anonymous], MDA GUIDE VERSION 1
   Balduino R., 2007, INTRO OPENUP OPEN UN
   BOLOGNESI T, 1987, COMPUT NETWORKS ISDN, V14, P25, DOI 10.1016/0169-7552(87)90085-7
   CAFFIAU S, 2010, J DINTERACT PERSONN, V1
   Caffiau S, 2010, INTERACT COMPUT, V22, P569, DOI 10.1016/j.intcom.2010.06.003
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   CARLSEN S, 1998, P 3 IFCIS INT C COOP
   Charfi S, 2007, LECT NOTES COMPUT SC, V4849, P70
   Clayberg E., 2006, ECLIPSE BUILDING COM, V2nd
   CLERCKX T, 2006, P INT C INT US INT S
   Constantine L., 1995, Interactions, V2, P34, DOI 10.1145/205350.205356
   Constantine L.L., 1999, Software for Use: A Practical Guide to the Models and Methods of Usage-Centered Design
   Constantine LL, 2001, AW OBJ TECHNOL S, P245
   da Silva PauloPinheiro., 2002, OBJECT MODELLING INT
   da Silva PP, 2003, IEEE SOFTWARE, V20, P62, DOI 10.1109/MS.2003.1207457
   Dillenbourg P., 1996, Learning in humans and machines: Towards an interdisciplinary learning science, P189, DOI DOI 10.1007/978-1-4020-9827-7_1
   Dix A., 2004, Human-computer interaction
   DOURISH P, 1992, P C COMP SUPP COOP W
   DUMAS B, 2008, CHI 2008 WORKSH US I, P63
   Dumas B, 2009, LECT NOTES COMPUT SC, V5440, P3, DOI 10.1007/978-3-642-00437-7_1
   ELLIS CA, 1991, COMMUN ACM, V34, P38
   FERRE X, 2003, P WORKSH BRIDG GAPS
   Ferre X., 2005, THESIS U POLITECNICA
   GARRIDO JL, 2005, REQUIREMENTS ENG SOC, P226
   Giraldo WJ, 2008, J UNIVERS COMPUT SCI, V14, P3142
   Giraldo WJ, 2008, LECT NOTES COMPUT SC, V5411, P324, DOI 10.1007/978-3-540-92831-7_27
   GIRALDO WJ, 2008, P COMP AID DES US IN, P201
   GIRALDO WJ, 2010, THESIS U CASTILLA LA
   GORANSSON B, 2003, LECT NOTES COMPUT SC
   GRANOLLERS T, 2005, P WORKSH TEND PUENT
   GRANOLLERS T, 2004, THESIS U LLEIDA DEP
   GRANOLLERS T, 2003, P HCI INT
   Gronback R. C., 2009, ECLIPSE MODELING PRO
   Hartson H. R., 1992, Human-Computer Interaction, V7, P1, DOI 10.1207/s15327051hci0701_1
   Hix D., 1993, Developing User Interfaces: Ensuring Usability through Product Process
   Molina AI, 2009, SCI COMPUT PROGRAM, V74, P754, DOI 10.1016/j.scico.2009.03.001
   JOHNSON P, 2004, P 3 TASK MOD DIAGR U
   Karray F, 2008, INT J SMART SENS INT, V1, P137, DOI 10.21307/ijssis-2017-283
   Kelly S., 2008, Domain-Specific Modeling
   LAUESEN S, 2002, SOFTWARE REQUIREMENT
   Lim K.Y., 1994, MUSE METHOD USABILIT
   LIM YK, 2004, ACM INT C P SER
   LIMBOURG Q, 2009, HUMAN CTR SOFTWARE E
   LIMBOURG Q, 2004, P TAMODIA 2004
   LIMBOURG Q, 2004, THESIS U LOUVAIN IAG
   LOZANO MD, 2001, THESIS U POLITECNICA
   Lu S., 2003, Proceedings of CHINZ'03, P9
   LU S, 1999, ENG HUMAN COMPUTER I
   MARKOPOULOS P, 2000, P TUPIS 2000 WORKSH
   Mayhew D.J., 1999, USABILITY ENG LIFECY
   Meixner G., 2011, i-com, V3
   MOLINA AI, 2006, LECT NOTES COMPUT SC
   Molina AI, 2014, SCI COMPUT PROGRAM, V88, P54, DOI 10.1016/j.scico.2014.02.019
   Molina AI, 2013, J SYST SOFTWARE, V86, P1772, DOI 10.1016/j.jss.2012.07.049
   Molina AI, 2012, ADV ENG SOFTW, V52, P10, DOI 10.1016/j.advengsoft.2012.06.002
   Molina AI, 2009, NEW TRENDS ON HUMAN-COMPUTER INTERACTION: RESEARCH, DEVELOPMENT, NEW TOOLS AND METHODS, P75, DOI 10.1007/978-1-84882-352-5_8
   MOODY DL, 2009, IEEE T SOFTW ENG, V35
   NOBREGA L, 2005, P DSVIS
   NUNES NJ, 2001, THESIS U MADEIRA MAD
   *OMG, 2008, SOFTW SYST PROC ENG
   Patern'o F., 1999, Model-based design and evaluation of interactive applications
   Paternò F, 1998, SPRING COMP SCI, P71
   PATERNO F, 2001, LECT NOTES COMPUT SC
   Paterno F., 2004, The Handbook of Task Analysis for Human-Computer Interaction, P483
   Paternò F, 2011, J SYST SOFTWARE, V84, P1806, DOI 10.1016/j.jss.2011.05.025
   Penichet VMR, 2010, J SYST SOFTWARE, V83, P1478, DOI 10.1016/j.jss.2010.03.029
   PETRE M, 1995, COMMUN ACM, V38, P33, DOI 10.1145/203241.203251
   PHILLIPS C, 2002, P 3 AUSTR US INT C A
   PINELLE D, 2004, THESIS U SASKATCHEWA
   Preece J., 2011, Interaction design: beyond human-computer interaction, V3rd
   Puerta AR, 1997, IEEE SOFTWARE, V14, P40, DOI 10.1109/52.595902
   REDONDO MA, 2005, PRESENTE FUTURO DOCE, P273
   Rubart J., 2004, International Journal of Computer Applications in Technology, V19, P231, DOI 10.1504/IJCAT.2004.004071
   SCHULTE R, 1995, R401134 GARTN GROUP
   SCHWABE D, 2001, C REV SYST CAS STUD
   Seffah A, 2005, HUM COM INT, V8, P37, DOI 10.1007/1-4020-4113-6_3
   Shaft TM, 2006, MIS QUART, V30, P29
   SOARES K, 2003, P WORKSH BRIDG GAP S
   SOUZA KS, 2003, P ICSE 2003
   Sutcliffe AG, 2005, HUM COM INT, V8, P71, DOI 10.1007/1-4020-4113-6_5
   TRAETTEBERG H, 2002, THESIS NORWEGIAN U S
   United Nations Educational Scientific and Cultural Organization (UNESCO), 2018, INT TECHN GUID SEX E
   Van den Bergh J, 2007, LECT NOTES COMPUT SC, V4849, P98
   Van der Aalst WMP, 2001, INT J COOP INF SYST, V10, P443, DOI 10.1142/S0218843001000412
   Van Welie M, 2003, HUM FAC ER, P447
   Vanderdonckt J, 2008, J MULTIMODAL USER IN, V2, P1, DOI 10.1007/s12193-008-0011-3
   VANDERVEER GC, 2002, TAMODIA 2002 INFOREC, P32
   VANDERVEER GC, 2005, PRESENTE FUTURO DOCE, P217
   VENTURI G, 2004, P NORDICHI 2004
   VESSEY I, 1991, DECISION SCI, V22, P219, DOI 10.1111/j.1540-5915.1991.tb00344.x
   Vessey I, 1991, INFORM SYST RES, V2, P63, DOI 10.1287/isre.2.1.63
   Wurdel M, 2008, J UNIVERS COMPUT SCI, V14, P3188
   ZACHMAN JA, 1987, IBM SYST J, V26, P276, DOI 10.1147/sj.263.0276
NR 97
TC 3
Z9 4
U1 0
U2 15
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
BP 320
EP 349
DI 10.1016/j.scico.2014.02.030
PN C
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CB
UT WOS:000337929200006
DA 2024-07-18
ER

PT J
AU Cooper, ML
   Shaffer, CA
   Edwards, SH
   Ponce, SP
AF Cooper, Matthew L.
   Shaffer, Clifford A.
   Edwards, Stephen H.
   Ponce, Sean P.
TI Open source software and the algorithm visualization community
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Algorithm animation; Version control; Project hosting; Open source
   licensing; Open source tools
AB Algorithm visualizations are widely viewed as having the potential for major impact on computer science education, but their quality is highly variable. We report on the software development practices used by creators of algorithm visualizations, based on data that can be inferred from a catalog of over 600 algorithm visualizations. Since nearly all are free for use and many provide source code, they might be construed as being open source software. Yet many AV developers do not appear to have used open source best practices. We discuss how such development practices might be employed by the algorithm visualization community, and how they might lead to improved algorithm visualizations in the future. We conclude with a discussion of OpenDSA, an open-source project that builds on earlier progress in the field of algorithm visualization and hopes to use open-source procedures to gain users and contributors. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Cooper, Matthew L.] Microsoft Corp, Redmond, WA 98052 USA.
   [Shaffer, Clifford A.; Edwards, Stephen H.; Ponce, Sean P.] Virginia Tech, Dept Comp Sci, Blacksburg, VA 24061 USA.
C3 Microsoft; Virginia Polytechnic Institute & State University
RP Edwards, SH (corresponding author), Virginia Tech, Dept Comp Sci, Blacksburg, VA 24061 USA.
EM vtbassmatt@gmail.com; shaffer@vt.edu; s.edwards@vt.edu
OI Shaffer, Cliff/0000-0003-0001-0295
CR [Anonymous], 2013, RESTRUCTUREDTEXT RES
   Brown M. H., 1984, Computers & Graphics, V18, P177
   Cooper M.L., 2007, THESIS VIRGINIA TECH
   Fouh E, 2012, COMPUT SCH, V29, P95, DOI 10.1080/07380569.2012.651422
   Hall S., 2014, P ASEE ANN C ATL GA
   Herbsleb J, 1997, COMMUN ACM, V40, P30, DOI 10.1145/255656.255692
   Hundhausen CD, 2002, J VISUAL LANG COMPUT, V13, P259, DOI 10.1006/S1045-926X(02)00028-9
   Ihantola Petri., 2005, ICER 05, P123, DOI DOI 10.1145/1089786.1089798
   JavaOpen, 2006, JAVAOPEN FREE OPEN S
   JSAV, 2013, JSAV PROJ REP
   Karavirta Ville., 2013, Proceedings of the 18th ACM conference on Innovation and technology in computer science education, P159, DOI DOI 10.1145/2462476.2462487
   Levy RB, 2008, ITICSE '08: PROCEEDINGS OF THE 13TH ANNUAL CONFERENCE ON INNOVATION AND TECHNOLOGY IN COMPUTER SCIENCE EDUCATION, P169
   Naps T., 2014, ITICSE WGR 03, P124
   Naps T.L., 2002, ACM SIGCSE Bulletin, Volume, V35, P131, DOI DOI 10.1145/960568.782998
   O'Hara K.J., 2003, The Journal of Computing in Small Colleges, V18, P1
   PAULK M, 1993, CMUSEI93TR024 SOFTW
   Shaffer C.A., 2010, ACM Trans. Comput. Educ., V10, P1, DOI DOI 10.1145/1821996.1821997
   Shaffer CA, 2011, SIGCSE 11: PROCEEDINGS OF THE 42ND ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P129
   Shaffer CliffordA., 2011, KOLI CALLING, P112, DOI 10.1145/2094131.2094154
   Shaffer CliffordA., 2011, Proceedings of the 6th Program Visualization Workshop, PVW '11, P97
   Urquiza-Fuentes J., 2009, ACM T COMPUT EDUC, V9, DOI [DOI 10.1145/1538234.1538236, 2]
NR 21
TC 3
Z9 3
U1 0
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2014
VL 88
SI SI
BP 82
EP 91
DI 10.1016/j.scico.2013.12.008
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AH9QM
UT WOS:000336476900006
OA hybrid
DA 2024-07-18
ER

PT J
AU Thielecke, H
AF Thielecke, Hayo
TI On the semantics of parsing actions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Semantics; Abstract machines; Continuations; Parser generators; Left
   recursion elimination
AB Parsers, whether constructed by hand or automatically via a parser generator tool, typically need to compute some useful semantic information in addition to the purely syntactic analysis of their input. Semantic actions may be added to parsing code by hand, or the parser generator may have its own syntax for annotating grammar rules with semantic actions. In this paper, we take a functional programming view of such actions. We use concepts from the semantics of mostly functional programming languages and adapt them to give meaning to the actions of the parser. Specifically, the semantics is inspired by the categorical semantics of lambda calculi and the use of premonoidal categories for the semantics of effects in programming languages. This framework is then applied to our leading example, the transformation of grammars to eliminate left recursion. The syntactic transformation of left-recursion elimination leads to a corresponding semantic transformation of the actions for the grammar. We prove the semantic transformation correct and relate it to continuation passing style, a widely studied transformation in lambda calculi and functional programming. As an idealization of the input language of parser generators, we define a call-by-value calculus with first-order functions and a type-and-effect system where the effects are given by sequences of grammar symbols. The account of left-recursion elimination is then extended to this calculus. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
C3 University of Birmingham
RP Thielecke, H (corresponding author), Univ Birmingham, Sch Comp Sci, Birmingham B15 2TT, W Midlands, England.
EM H.Thielecke@cs.bham.ac.uk
CR [Anonymous], TECHNICAL MONOGRAPH
   [Anonymous], 1985, Compilers principles, techniques, and tools
   Appel AndrewW., 1997, MODERN COMPILER IMPL
   Atkey R, 2012, IEEE S LOG, P75, DOI 10.1109/LICS.2012.19
   Baars A, 2010, ELECTRON NOTES THEOR, V253, P51, DOI 10.1016/j.entcs.2010.08.031
   Barker C., 2004, P 4 ACM SIGPLAN CONT
   Berdine J., 2002, Higher-Order and Symbolic Computation, V15, P181, DOI 10.1023/A:1020891112409
   Brink K, 2010, LECT NOTES COMPUT SC, V6120, P58, DOI 10.1007/978-3-642-13321-3_6
   Danvy Olivier., 1992, MATH STRUCT COMP SCI, V2, P361, DOI DOI 10.1017/S0960129500001535
   De Moor O., 2000, Informatica, V24, P329
   Devriese D, 2011, LECT NOTES COMPUT SC, V6539, P84, DOI 10.1007/978-3-642-18378-2_9
   Felleisen Matthias, 1986, P IFIP TC 2WG22 WORK
   Friedman DanielP., 1992, ESSENTIALS PROGRAMMI, Vfirst
   GIRARD JY, 1987, THEOR COMPUT SCI, V50, P1, DOI 10.1016/0304-3975(87)90045-4
   GOGUEN JA, 1977, J ACM, V24, P68, DOI 10.1145/321992.321997
   Gunther C.A., 1992, SEMANTICS PROGRAMMIN
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   Hutton G., 1998, Journal of Functional Programming, V8, P437, DOI 10.1017/S0956796898003050
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Lambek J., 1958, American Mathematical Monthly, V65, P154, DOI [DOI 10.1080/00029890.1958.11989160, 10.2307/2310058]
   LANDIN PJ, 1964, COMPUT J, V6, P308, DOI 10.1093/comjnl/6.4.308
   Leroy X., 1990, TR0117 INRIA
   Lohmann Wolfgang., 2004, 4 WORKSHOP LANGUAGE, P133
   Lucassen J. M., 1988, Conference Record of the Fifteenth Annual ACM Symposium on Principles of Programming Languages, P47, DOI 10.1145/73560.73564
   Mac Lane, 1971, CATEGORIES WORKING M
   Might M, 2011, ACM SIGPLAN NOTICES, V46, P189, DOI 10.1145/2034574.2034801
   MOGGI E, 1989, FOURTH ANNUAL SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P14
   Moore RC, 2000, 6TH APPLIED NATURAL LANGUAGE PROCESSING CONFERENCE/1ST MEETING OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE AND PROCEEDINGS OF THE ANLP-NAACL 2000 STUDENT RESEARCH WORKSHOP, pA249
   O'Hearn P, 2003, J FUNCT PROGRAM, V13, P747, DOI 10.1017/S0956796802004495
   Parr Terence., 2011, PLDI
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   Paterson R., 2001, ICFP
   Plotkin G. D., 1975, Theoretical Computer Science, V1, P125, DOI 10.1016/0304-3975(75)90017-1
   Power J., 1999, Automata, Languages and Programming. 26th International Colloquium, ICALP'99. Proceedings (Lecture Notes in Computer Science Vol.1644), P625
   Power J., 1997, Theoretical Aspects of Computer Software. Third International Symposium, TACS '97. Proceedings, P391, DOI 10.1007/BFb0014560
   Power J., 1997, Mathematical Structures in Computer Science, V7, P453, DOI 10.1017/S0960129597002375
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Sitaram D., 1990, LISP and Symbolic Computation, V3, P67, DOI 10.1007/BF01806126
   Steele G., 1978, 474 AI TR MIT ART IN
   Swierstra SD, 2009, LECT NOTES COMPUT SC, V5520, P252, DOI 10.1007/978-3-642-03153-3_6
   Thielecke H, 2003, ACM SIGPLAN NOTICES, V38, P139, DOI 10.1145/640128.604144
   Thielecke H., 2012, PPDP 12 P 14 S PRINC, P91
   Wadler P., 1989, FPCA 89 P 4 INT C FU, P347
NR 43
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2014
VL 84
SI SI
BP 52
EP 76
DI 10.1016/j.scico.2013.04.010
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE6EZ
UT WOS:000334084700004
OA hybrid
DA 2024-07-18
ER

PT J
AU Karatas, AS
   Oguztüzün, H
   Dogru, A
AF Karatas, Ahmet Serkan
   Oguztuzun, Halit
   Dogru, Ali
TI From extended feature models to constraint logic programming
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Variability modeling; Extended feature model; Feature attribute;
   Constraint logic programming
ID VARIABILITY
AB Since feature models for realistic product families may be quite complicated, the automated analysis of feature models is desirable. Although several approaches reported in the literature address this issue, complex cross-tree relationships involving attributes in extended feature models have not been handled. In this article, we introduce a mapping from extended feature models to constraint logic programming over finite domains. This mapping is used to translate into constraint logic programs; basic, cardinality-based and extended feature models, which can include complex cross-tree relationships involving attributes. This translation enables the use of off-the-shelf constraint solvers for the automated analysis of extended feature models involving such complex relationships. We also present the performance results of some well-known analysis operations on an example translated model. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Karatas, Ahmet Serkan; Oguztuzun, Halit; Dogru, Ali] Middle E Tech Univ, Dept Comp Engn, TR-06531 Ankara, Turkey.
C3 Middle East Technical University
RP Karatas, AS (corresponding author), Middle E Tech Univ, Dept Comp Engn, TR-06531 Ankara, Turkey.
EM karatas@ceng.metu.edu.tr; oguztuzun@ceng.metu.edu.tr;
   dogru@ceng.metu.edu.tr
RI Oğuztüzün, Halit/ABA-3509-2020; Dogru, Ali/ABA-4664-2020; DOGRU, ALI
   HIKMET/N-5918-2017
OI DOGRU, ALI HIKMET/0000-0003-0992-7024; Oguztuzun,
   Halit/0000-0001-9928-0441
CR [Anonymous], WORKSH SEM WEB EN SO
   [Anonymous], VAMOS 11
   [Anonymous], 2005, INT WORKSH SOFTW FAC
   [Anonymous], 2009, P 2009 ACM S APPL CO
   Bachmeyer RC, 2007, LECT NOTES ARTIF INT, V4604, P179
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2005, LECT NOTES COMPUT SC, V3520, P491
   Benavides D, 2004, 2 GRON WORKSH SOFTW
   Benavides D., 2006, Managing Variability for Software Product Lines: Working With Variability Mechanisms
   Benavides D., 2007, PROCEEDING 1 INT WOR, P129
   Benavides D., 2005, P INT C SOFTW ENG KN, P677
   Benavides D, 2006, LECT NOTES COMPUT SC, V4143, P399
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Beuche D, 2004, SCI COMPUT PROGRAM, V53, P333, DOI 10.1016/j.scico.2003.04.005
   Carlsson M., 1997, P PROGR LANG IMPL LO
   Classen A, 2011, SCI COMPUT PROGRAM, V76, P1130, DOI 10.1016/j.scico.2010.10.005
   Czarnecki K, 2002, LECT NOTES COMPUT SC, V2487, P156
   Czarnecki K, 2004, LECT NOTES COMPUT SC, V3154, P266
   Czarnecki Krzysztof., 2005, Software Process: Improvement and Practice, P2005
   Dean Mike., 2004, w3c recommendation
   Divo C.E.A., 2011, THESIS UPPSALA U SWE
   Djebbi O, 2007, 14TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P494, DOI 10.1109/ASPEC.2007.63
   Dovier A, 2005, LECT NOTES COMPUT SC, V3668, P67, DOI 10.1007/11562931_8
   Fan SF, 2006, LECT NOTES ARTIF INT, V4252, P1144
   Fernandez A. J., 2000, Constraints, V5, P275, DOI 10.1023/A:1009816801567
   *ISO, 1996, 149771996E ISOIEC
   Kang KC, 1998, ANN SOFTW ENG, V5, P143, DOI 10.1023/A:1018980625587
   Kang Kyo C, 1990, Technical Report
   Karatas AS, 2010, LECT NOTES COMPUT SC, V6308, P537, DOI 10.1007/978-3-642-15396-9_43
   Karatas AS, 2010, LECT NOTES COMPUT SC, V6287, P286, DOI 10.1007/978-3-642-15579-6_20
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   Mannion M., 2002, Software Product Lines. Second International Conference, SPLC 2. Proceedings (Lecture Notes in Computer Science Vol. 2370), P176
   Mendonca Marcilio, 2009, SPLC' 09, P231
   Nabdel L, 2011, AIP CONF PROC, V1389, DOI 10.1063/1.3636864
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Proceedings ( ICB Research, 2009, P 3 INT WORKSH VAR M, V29, P29
   Riebisch M., 2002, 6 C INT DES PROC TEC
   Rossi F, 2006, FOUND ARTIF INTELL, P1
   Schobbens PY, 2007, COMPUT NETW, V51, P456, DOI 10.1016/j.comnet.2006.08.008
   Simos M., 1996, STARSVCA02500100 LOC
   Sun Jun., 2005, 10 IEEE INT C ENG CO
   van der Storm T, 2004, LECT NOTES COMPUT SC, V3107, P157
   van Deursen A., 2002, Journal of Computing and Information Technology - CIT, V10, P1, DOI 10.2498/cit.2002.01.01
   White J, 2010, J SYST SOFTWARE, V83, P1094, DOI 10.1016/j.jss.2010.02.017
   Zhang W, 2004, LECT NOTES COMPUT SC, V3308, P115
   Zhang W, 2008, LECT NOTES COMPUT SC, V5030, P186, DOI 10.1007/978-3-540-68073-4_18
NR 46
TC 21
Z9 22
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2295
EP 2312
DI 10.1016/j.scico.2012.06.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 234SL
UT WOS:000325664500002
OA hybrid
DA 2024-07-18
ER

PT J
AU Ferrari, FC
   Rashid, A
   Maldonado, JC
AF Ferrari, Fabiano Cutigi
   Rashid, Awais
   Maldonado, Jose Carlos
TI Towards the practical mutation testing of AspectJ programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mutation testing; Aspect-oriented programming; AspectJ; Testing AspectJ
   programs; Test evaluation
ID TOOL; SELECTION; CRITERIA; IMPACT
AB Mutation testing is a test selection criterion that relies on the assumption that test cases which can reveal artificial faults in the software are also good to reveal the real ones. It helps to expose faults which would go otherwise unnoticed. This criterion has been shown to be a promising means to deal with testing-related specificities of contemporary programming techniques such as Aspect-Oriented Programming. However, to date the few initiatives for customising mutation testing for aspect-oriented (AO) programs show either limited coverage with respect to the range of simulated faults, or a need for both adequate tool support and proper evaluation in regard to properties like application cost and effectiveness. This article tackles these limitations by describing a comprehensive mutation-based testing approach for programs written in AspectJ, which represents the most investigated AO programming language to date. The approach encompasses the definition of a set of mutation operators for AspectJ-specific constructs and the implementation of a tool that automates the approach. The results of a preliminary evaluation study show that the mutation operators are able to simulate faults that may not be revealed by pre-existing, non-mutation-based test suites. The results also suggest that the approach seems not to overwhelm the testers and hence represents a step towards the practical fault-based testing of AspectJ-like programs. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Ferrari, Fabiano Cutigi] Univ Fed Sao Carlos UFSCar, Dept Comp, Sao Carlos, SP, Brazil.
   [Rashid, Awais] Univ Lancaster, Dept Comp, Lancaster, England.
   [Maldonado, Jose Carlos] Univ Sao Paulo IUMC USP, Dept Sistemas & Comp, Sao Carlos, SP, Brazil.
C3 Universidade Federal de Sao Carlos; Lancaster University
RP Ferrari, FC (corresponding author), Univ Fed Sao Carlos UFSCar, Dept Comp, Sao Carlos, SP, Brazil.
EM fabiano@dc.ufscar.br; marash@comp.lancs.ac.uk; jcmaldon@icmc.usp.br
RI Maldonado, José Carlos/E-9290-2011; Ferrari, Fabiano
   Cutigi/AAC-1392-2019
OI Ferrari, Fabiano Cutigi/0000-0002-7339-8529; Rashid,
   Awais/0000-0002-0109-1341
FU FAPESP [05/55403-6]; CAPES [0653/07-1]; EC Grant AOSD-Europe
   [IST-2-004349]; EC Grant QualiPSo [IST-FP6-IP-034763]; FAPESP; CAPES;
   CNPq
FX The authors received full of partial funding from the following agencies
   and projects: Fabiano Ferrari: FAPESP (grant 05/55403-6), CAPES (grant
   0653/07-1) and EC Grant AOSD-Europe (IST-2-004349); Awais Rashid: EC
   Grant AOSD-Europe (IST-2-004349); Jose Maldonado: EC Grant QualiPSo
   (IST-FP6-IP-034763), FAPESP, CAPES and CNPq.
CR abc Development Team, ASPECTBENCH COMP ASP
   Agrawal H., 1989, Design of mutant operators for the C programming language
   Alexander R.T., 2004, CS04105 COL STAT U D
   Anbalagan Prasanth, 2008, 2008 IEEE International Symposium on Software Reliability Engineering, P239, DOI 10.1109/ISSRE.2008.58
   Andrews JH, 2005, PROC INT CONF SOFTW, P402, DOI 10.1145/1062455.1062530
   Badri M, 2005, Enabling Technologies for the New Knowledge Society, P237
   BAEKKEN JS, 2006, THESIS WASHINGTON ST
   Baniassad E, 2004, PROC INT CONF SOFTW, P158, DOI 10.1109/ICSE.2004.1317438
   Barbosa EF, 2001, SOFTW TEST VERIF REL, V11, P113, DOI 10.1002/stvr.226
   Bernardi ML, 2007, QUATIC 2007: 6TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY, PROCEEDINGS, P65
   Coady Y., 2003, P 2 INT C ASPECT ORI, P50
   Coelho R, 2008, LECT NOTES COMPUT SC, V5142, P207, DOI 10.1007/978-3-540-70592-5_10
   Daran M., 1996, SIGSOFT Software Engineering Notes, V21, P158, DOI [10.1145/229000.226313, 10.1145/226295.226313]
   Delamare R, 2009, SECOND INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION, AND VALIDATION, PROCEEDINGS, P376, DOI 10.1109/ICST.2009.41
   Delamare R, 2009, IEEE ICST WORKSHOP, P200, DOI 10.1109/ICSTW.2009.41
   Delamaro ME, 2001, IEEE T SOFTWARE ENG, V27, P228, DOI 10.1109/32.910859
   DeMillo R.A., 1994, SERCTR92P PURD U
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   DEMILLO RA, 1991, IEEE T SOFTWARE ENG, V17, P900, DOI 10.1109/32.92910
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Do H, 2006, IEEE T SOFTWARE ENG, V32, P733, DOI 10.1109/TSE.2006.92
   Ferrari F., 2010, P 32 ACMIEEE INT C S, V1, P65
   Ferrari F. C., 2010, 2010 Proceedings of 24th Brazilian Symposium on Software Engineering (SBES 2010), P50, DOI 10.1109/SBES.2010.11
   Ferrari Fabiano Cutigi, 2008, 2008 First IEEE International Conference on Software Testing, Verification and Validation (ICST '08), P52, DOI 10.1109/ICST.2008.37
   Ferrari F.C., 2011, TECHNICAL REPORT
   Ferrari F.C., 2009, P 3 LAT AM WORKSH AS, P24
   Ferrari Fabiano Cutigi., 2010, Proceedings of the 5th Workshop on Automation of Software Test, AST '10, P51
   Figueiredo E, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P261, DOI 10.1145/1368088.1368124
   Firman R.E., 2004, Aspect Oriented Software Development, P21
   Gal A., 2001, P WORKSH ADV SEP CON
   Greenwood P, 2007, LECT NOTES COMPUT SC, V4609, P176
   Hilsdale E., 2004, INT C ASPECT ORIENTE, P26
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Johnson R., 2007, SPRING JAVA J2EE APP
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor., 2001, Proceedings of the 15th European Conference on Object-Oriented Programming, P327
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Laddad R, 2003, IEEE SOFTWARE, V20, P90, DOI 10.1109/MS.2003.1241372
   Laddad R., 2003, ASPECT ACTION
   Lemos OAL, 2007, J SYST SOFTWARE, V80, P862, DOI 10.1016/j.jss.2006.08.022
   Lemos OAL, 2009, SCI COMPUT PROGRAM, V74, P861, DOI 10.1016/j.scico.2009.05.001
   Lemos O.A. L., 2006, P 2 WORKSHOP TESTING, P33
   Li N, 2009, IEEE ICST WORKSHOP, P220, DOI 10.1109/ICSTW.2009.30
   Linkman S., 2003, P 7 INT C EMP ASS SO, P1
   Liu CH, 2008, J INF SCI ENG, V24, P11
   Lopez-Herrejon R.E., 2002, TECHNICAL REPORT
   Ma YS, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P352, DOI 10.1109/ISSRE.2002.1173287
   Maldonado J.C., 2000, MUT 2000 S TOOL SESS, P113
   Massicotte P, 2007, J OBJECT TECHNOL, V6, P67, DOI 10.5381/jot.2007.6.1.a1
   Mathur A.P., 1993, 7 SBES, P320
   Mathur A.P., 2007, FDN SOFTWARE TESTING
   Mezini M., 2003, P 2 INT C ASPECT ORI, P90
   Mortensen M., 2005, P 1 WORKSH TEST ASP
   Mortensen M, 2012, IEEE T SOFTWARE ENG, V38, P118, DOI 10.1109/TSE.2010.109
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Offut A. J., 1997, Software Testing, Verification and Reliability, V7, P165, DOI 10.1002/(SICI)1099-1689(199709)7:3<165::AID-STVR143>3.0.CO;2-U
   Offutt A. J., 1996, ACM Transactions on Software Engineering and Methodology, V5, P99, DOI 10.1145/227607.227610
   OFFUTT AJ, 1993, PROC INT CONF SOFTW, P100, DOI 10.1109/ICSE.1993.346062
   Rashid A, 2010, COMPUTER, V43, P19, DOI 10.1109/MC.2010.30
   Robillard MP, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189751
   Soares S, 2006, SOFTWARE PRACT EXPER, V36, P711, DOI 10.1002/spe.715
   Stratego community, 2009, ASPECTJ FRONT PROJ H
   The Eclipse Foundation, ASP DOC
   The JBoss Team, 2010, JBOSS AOP REF DOC V2
   Xie T., 2006, AOSD '06, P190
   Xie T., 2005, P 1 WORKSH TEST ASP
   Xu D., 2005, P 17 INT C SOFTW ENG
   Xu GQ, 2007, PROC INT CONF SOFTW, P65
   Zhao J, 2003, 27TH ANNUAL INTERNATIONAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE, PROCEEDINGS, P188, DOI 10.1109/CMPSAC.2003.1245340
   Zhou YD, 2004, PROCEEDINGS OF THE IEEE 30TH ANNUAL NORTHEAST BIOENGINEERING CONFERENCE, P1
NR 70
TC 7
Z9 7
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1639
EP 1662
DI 10.1016/j.scico.2013.02.011
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100022
OA hybrid
DA 2024-07-18
ER

PT J
AU Dolev, S
   Tzachar, N
AF Dolev, Shlomi
   Tzachar, Nir
TI Spanders: Distributed spanning expanders
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Expanders; Random walks; Self-stabilization; Self-organization; Dynamic
   networks
ID SELF-STABILIZING SYSTEMS
AB Self-stabilizing distributed construction of expanders by the use of short random walks. We consider self-stabilizing and self-organizing distributed construction of a spanner that forms an expander. We advocate the importance of designing systems to be self-stabilizing and self-organizing, as designers cannot predict and address all fault scenarios and should address unexpected faults in the fastest possible way. We use folklore results to randomly define an expander graph. Given the randomized nature of our algorithms, a monitoring technique is presented for ensuring the desired results. The monitoring is based on the fact that expanders have a rapid mixing time and the possibility of examining the rapid mixing time by O(n log n) short (O(log(4) n) length) random walks even for non-regular expanders. We then use our results to construct a hierarchical sequence of spanders, each being an expander spanning the previous spander. Such a sequence of spanders may be used to achieve different quality of service (QoS) assurances in different applications. Several snap-stabilizing algorithms that are used for monitoring are presented, including: (i) Snap-stabilizing data-link, (ii) Snap-stabilizing message passing reset, and (iii) Snap-stabilizing token tracing. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Dolev, Shlomi; Tzachar, Nir] Ben Gurion Univ Negev, Dept Comp Sci, IL-84105 Beer Sheva, Israel.
C3 Ben Gurion University
RP Dolev, S (corresponding author), Ben Gurion Univ Negev, Dept Comp Sci, IL-84105 Beer Sheva, Israel.
EM dolev@cs.bgu.ac.il; tzachar@cs.bgu.ac.il
OI Dolev, Shlomi/0000-0001-5418-6670
FU Ministry of Science and Technology (MOST); Lynne and William Frankel
   Center for Computer Science at Ben-Gurion University; ICT Programme of
   the European Union [FP7-215270]; Microsoft; US Air-Force; Israel Science
   Foundation [428/11]; Verisign 25th Anniversary of.COM grant; Deutsche
   Telekom Labs at BGU; Rita Altura Trust Chair in Computer Sciences; EU
   [ICT-2008-215270 FRONTS]; Lynne and William Frankel Center for Computer
   Sciences
FX The research of the first author has been supported by the Ministry of
   Science and Technology (MOST), the Lynne and William Frankel Center for
   Computer Science at Ben-Gurion University, the ICT Programme of the
   European Union under contract number FP7-215270 (FRONTS), Microsoft, US
   Air-Force, Israel Science Foundation (grant number 428/11), Verisign
   25th Anniversary of.COM grant, Deutsche Telekom Labs at BGU and Rita
   Altura Trust Chair in Computer Sciences. The second author was partially
   supported by EU ICT-2008-215270 FRONTS, and the Lynne and William
   Frankel Center for Computer Sciences.
CR Alon N, 2008, SPAA'08: PROCEEDINGS OF THE TWENTIETH ANNUAL SYMPOSIUM ON PARALLELISM IN ALGORITHMS AND ARCHITECTURES, P119
   [Anonymous], 2000, Self-Stabilization
   [Anonymous], 2000, SIAM MONOG DISCR MAT
   Arora A., 1991, Parallel Processing Letters, V1, P11, DOI 10.1142/S0129626491000161
   AWERBUCH B, 1991, PROCEEDINGS - 32ND ANNUAL SYMPOSIUM ON FOUNDATIONS OF COMPUTER SCIENCE, P258, DOI 10.1109/SFCS.1991.185377
   Cournier A, 2002, INT CON DISTR COMP S, P12
   Czumaj A, 2007, ANN IEEE SYMP FOUND, P570, DOI 10.1109/FOCS.2007.33
   Delaet S, 2009, LECT NOTES COMPUT SC, V5873, P775, DOI 10.1007/978-3-642-05118-0_55
   DIJKSTRA EW, 1974, COMMUN ACM, V17, P643, DOI 10.1145/361179.361202
   Dolev S., 2007, 0802 TR BENG U DEP C
   Dolev S., 2010, THEORETICAL ASPECTS
   Dolev S., 2010, P 25 ACM S APPL COMP
   Dolev S, 2006, IEEE T MOBILE COMPUT, V5, P893, DOI 10.1109/TMC.2006.104
   Dolev S, 2009, THEOR COMPUT SCI, V410, P514, DOI 10.1016/j.tcs.2008.10.006
   Goldreich Oded., 2000, ELECT C COMPUTATIONA, V7
   Hoory S, 2006, B AM MATH SOC, V43, P439, DOI 10.1090/S0273-0979-06-01126-8
   Kale S., 2007, TR07076 ECCC
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Law C., 2003, INFOCOM
   Lovasz Laszlo, Random walks on graphs: A survey
   Motwani R, 2006, RANDOMIZED ALGORITHM
   Nachmias A., 2007, TR07118 ECCC
   PELEG D, 1989, J GRAPH THEOR, V13, P99, DOI 10.1002/jgt.3190130114
   Reiter MK, 2005, 24TH IEEE SYMPOSIUM ON RELIABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P155, DOI 10.1109/RELDIS.2005.16
   Tzachar N., 2008, THESIS BENGURION U N
NR 25
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 544
EP 555
DI 10.1016/j.scico.2012.10.001
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500009
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Reynolds, MC
AF Reynolds, Mark C.
TI Modeling the Java Bytecode Verifier
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd International Conference on Abstract State Machines (ASM), Alloy, B
   and Z
CY FEB 22-25, 2010
CL Orford, CANADA
SP Univ Sherbrooke, Univ Paris Est Creteil
DE Java security; JVM bytecode; Alloy; Lightweight modeling
AB The Java programming language has been widely described as secure by design. Nevertheless, a number of serious security vulnerabilities have been discovered in Java, particularly in the Bytecode Verifier, a critical component used to verify class semantics before loading is complete. This paper describes a method for representing Java security constraints using the Alloy modeling language. It further describes a system for performing a security analysis on any block of Java bytecodes by converting these bytecodes into relation initializers in Alloy. Any counterexamples found by the Alloy analyzer correspond directly to potentially insecure code. Analysis of the approach is provided in the context of known security exploits, including type confusion attacks, invalid memory accesses and control flow misdirection. This type of analysis represents a significant departure from standard malware analysis methods based on signatures or anomaly detection. (c) 2011 Elsevier B.V. All rights reserved.
C1 Boston Univ, Dept Comp Sci, Boston, MA 02215 USA.
C3 Boston University
RP Reynolds, MC (corresponding author), Boston Univ, Dept Comp Sci, Boston, MA 02215 USA.
EM markreyn@cs.bu.edu
CR [Anonymous], 2002, BLACKBOX SECURITY AD
   Bodden E., 2006, PROJECT REPORT EFFIC
   Freund SN, 2003, J AUTOM REASONING, V30, P271, DOI 10.1023/A:1025011624925
   GAL A, 2003, 0323 U CAL SCH INF C
   Higuchi T, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1180475.1180479
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Leroy X, 2003, J AUTOM REASONING, V30, P235, DOI 10.1023/A:1025055424017
   Lindholm T., 2003, JAVA VIRTUAL MACHINE
   McGraw G., 1999, Securing Java: getting down to business with mobile code
   Posegga J., 1998, JAVA BYTECODE VERIFI
   Preda MD, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1387673.1387674
   Reynolds M., 2010, ABSTRACT STATE MACHI
   Sirer EG, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P1
   Xu H., 2000, JAVA SECURITY MODEL
NR 14
TC 2
Z9 2
U1 1
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2013
VL 78
IS 3
SI SI
BP 327
EP 342
DI 10.1016/j.scico.2011.03.008
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 091PP
UT WOS:000315062600006
OA Bronze
DA 2024-07-18
ER

PT J
AU Lo, D
   Ramalingam, G
   Ranganath, VP
   Vaswani, K
AF Lo, David
   Ramalingam, G.
   Ranganath, Venkatesh-Prasad
   Vaswani, Kapil
TI Mining quantified temporal rules: Formalism, algorithms, and evaluation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Specification mining; Temporal rules; Quantification; Dynamic analysis;
   Reverse engineering
AB Libraries usually impose constraints on how clients should use them. Often these constraints are not well-documented. In this paper, we address the problem of recovering such constraints automatically, a problem referred to as specification mining. Given some client programs that use a given library, we identify constraints on the library usage that are (almost) satisfied by the given set of clients.
   The class of rules we target for mining combines simple binary temporal operators with state predicates (composed of equality constraints) and quantification. This is a simple yet expressive subclass of temporal properties (LTL formulae) that allows us to capture many common API usage rules. We focus on recovering rules from execution traces and apply classical data mining concepts to be robust against bugs (API usage rule violations) in clients. We present new algorithms for mining rules from execution traces. We show how a propositional rule mining algorithm can be generalized to treat quantification and state predicates in a unified way. Our approach enables the miner to be complete (i.e., mine all rules within the targeted class that are satisfied by the given traces) while avoiding an exponential blowup.
   We have implemented these algorithms and used them to mine API usage rules for several Windows APIs. Our experiments show the efficiency and effectiveness of our approach. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Lo, David] Singapore Management Univ, Singapore, Singapore.
C3 Singapore Management University
EM davidlo@smu.edu.sg; grama@microsoft.com; rvprasad@microsoft.com;
   kapilv@microsoft.com
RI Ranganath, Venkatesh-Prasad/J-5238-2014; Lo, David/A-2493-2012
OI Ranganath, Venkatesh-Prasad/0000-0001-7684-6086; Lo,
   David/0000-0002-4367-7201
CR AGRAWAL R, 1994, P VLDB
   Alur R., 2005, P POPL
   Chen F., 2008, TECHNICAL REPO UNPUB
   Cockrell M. Ernst. J., TSE, V27
   de Sousa F., 2007, P WORK C REV ENG
   El-Ramly M., 2002, P KDD
   Gabel M., 2008, P FSE
   Lorenzoli D., 2008, P ICSE
   Ramanathan M. K., 2007, P PLDI
   Safyallah H., 2006, P ICPC
   Yang J., 2004, P PASTE
   YANG J, 2006, P ICSE
   [No title captured]
NR 13
TC 18
Z9 20
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2012
VL 77
IS 6
SI SI
BP 743
EP 759
DI 10.1016/j.scico.2010.10.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 931AO
UT WOS:000303186500007
OA Green Published, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Solodkyy, Y
   Järvi, J
AF Solodkyy, Yuriy
   Jaervi, Jaakko
TI Extending type systems in a library: Type-safe XML processing in C plus
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type systems; XML; Type qualifiers; C plus; Template metaprogramming;
   Active libraries
AB Type systems built directly into the compiler or interpreter of a programming language cannot be easily extended to keep track of run-time invariants of new abstractions. Yet, programming with domain-specific abstractions could benefit from additional static checking. This paper presents library techniques for extending the type system of C++ to support domain-specific abstractions. The main contribution is a programmable "subtype" relation. As a demonstration of the techniques, we implement a type system for defining type qualifiers in C++, as well as a type system for the XML processing language, capable of, e.g., statically guaranteeing that a program only produces valid XML documents according to a given XML schema. (c) 2010 Elsevier B.V. All rights reserved.
C1 [Solodkyy, Yuriy; Jaervi, Jaakko] Texas A&M Univ, College Stn, TX 77843 USA.
C3 Texas A&M University System; Texas A&M University College Station
RP Solodkyy, Y (corresponding author), Texas A&M Univ, TAMU 3112, College Stn, TX 77843 USA.
EM yuriys@cse.tamu.edu; jarvi@cse.tamu.edu
CR Abrahams D, 2004, C++ template metaprogramming: concepts, tools, and techniques from Boost and beyond
   AIKEN A, 1991, P 5 ACM C FUNCT PROG
   [Anonymous], 1986, The C++ Programming Language
   [Anonymous], PLDI 99
   [Anonymous], 2003, 148822003 ISOIEC
   Barton J.J., 1994, SCI ENG C
   BIERMAN GM, 2005, LECT NOTES COMPUTER, V3586
   *BOOST, BOOST C LIB BOOST PE
   BOYAPATI C, 2002, OOPSLA 02
   BRACHA G, 2004, OOPSLA 04
   BROWN WE, 2001, 2 WORKSH C TEMPL PRO
   Cacciola Fernando., The Boost Optional Library
   CHIN B., 2005, PLDI 05
   *CS INFO, 2009, 431631 CSINFO
   de Guzman Joel., 2008, The Boost Fusion Library
   DOSREIS G, 2007, WG21N2258070118JTC1S
   EVANS D, 1996, PLDI 96
   Foster J. S., 2002, THESIS U CALIFORNIA
   FOSTER JS, 2002, PLDI 02
   Friedman Eric., 2002, The Boost Variant Library
   GAPEYEV V, 2005, WORKSH PROGR LANG TE
   GARCIA R, 2003, OOPSLA 03
   GURTOVOY A, 2002, BOOST MPL LIB
   Hosoya H, 2005, ACM T PROGR LANG SYS, V27, P46, DOI 10.1145/1053468.1053470
   HOSOYA H, 2001, LNCS, V1997
   *ISO IEC JTC, 2008, N2723080233 ISOIEC J
   Jarvi Jaakko., 2003, The Boost Enable if Library
   JOHNSON R, 2004, USENIX SECURITY S
   KENNEDY A, 1994, LECT NOTES COMPUTER, V788
   Kiselyov Oleg, 2004, HASKELL 04
   Maddock John., 2002, The Boost type traits library
   MANDELBAUM Y, 2003, ICFP 03
   MUSSER DA, 1988, LECT NOTES COMPUTER, V358
   SEIDL H, 1990, SIAM J COMPUT, V19, P424, DOI 10.1137/0219027
   SHANKAR U, 2001, P 10 USENIX SEC S
   SHEARD T, 2002, ACM SIGPLAN HASK WOR
   SOLODKYY J, 2007, EXTENSIBLE TYPING LI
   Stepanov A., 1994, HPL9434R1
   Veldhuizen T., 1995, C++ Report, V7, P36
   VELDHUIZEN T.L., 2003, C TEMPLATES ARE TURI
   WALLACE M, 1999, P 4 ACM SIGPLAN INT, V34
   2009, RSS 2 0 SPECIFICATIO
   [No title captured]
   2005, EXTENSIBLE MARKUP LA
   2005, XML SCHEMA
   2009, ATOM SYNDICATION FOR
NR 46
TC 1
Z9 1
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2011
VL 76
IS 4
SI SI
BP 290
EP 306
DI 10.1016/j.scico.2010.09.004
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 727WU
UT WOS:000287834500006
DA 2024-07-18
ER

PT J
AU Rodriguez, JM
   Crasso, M
   Zunino, A
   Campo, M
AF Manuel Rodriguez, Juan
   Crasso, Marco
   Zunino, Alejandro
   Campo, Marcelo
TI Improving Web Service descriptions for effective service discovery
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web Services; Web Service publication; Web Service discovery; Web
   Service discoverability anti-patterns
ID SEMANTIC WEB; RETHINKING
AB Service-Oriented Computing (SOC) is a new paradigm that replaces the traditional way to develop distributed software with a combination of discovery, engagement and reuse of third-party services. Web Service technologies are currently the most adopted alternative for implementing the SOC paradigm. However, Web Service discovery presents many challenges that, in the end, hinder service reuse. This paper reports frequent practices present in a body of public services that attempt to prevent the discovery of any service. In addition, we have studied how to solve the discoverability problems that these bad practices cause. Accordingly, this paper presents a novel catalog of eight Web Service discoverability anti-patterns. We conducted a comparative analysis of the retrieval effectiveness of three discovery systems by using the original body of Web Services versus their corrected version. This experiment shows that the removal of the identified anti-patterns eases the discovery process by allowing the employed discovery systems to rank more relevant services before non-relevant ones, with the same queries. Moreover, we conducted a survey to collect the opinions from 26 individuals about whether the improved descriptions are more intelligible than the original ones. This experiment provides more evidence of the importance of correcting the observed problems. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Crasso, Marco] Univ Nacl, ISISTAN Res Inst, Ctr Prov Buenos Aires UNICEN, Buenos Aires, DF, Argentina.
   Consejo Nacl Invest Cient & Tecn, RA-1033 Buenos Aires, DF, Argentina.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET)
RP Crasso, M (corresponding author), Univ Nacl, ISISTAN Res Inst, Ctr Prov Buenos Aires UNICEN, Campus Univ,Tandil B7001BBO, Buenos Aires, DF, Argentina.
EM mcrasso@gmail.com
RI Zunino, Alejandro/W-2100-2017; Rodriguez, Juan Manuel/V-9039-2019
OI Zunino, Alejandro/0000-0002-9537-3541; Rodriguez, Juan
   Manuel/0000-0002-1130-8065; Campo, Marcelo/0000-0002-3555-835X
FU ANPCyT [PAE-PICT 2007-02311, PAE-PICT 2007-02312]
FX We thank the anonymous reviewers for their helpful comments and
   suggestions to improve the quality of the paper. We also thank Cristian
   Mateos for helping us to perform the survey. We acknowledge the
   financial support provided by ANPCyT through grants PAE-PICT 2007-02311
   and PAE-PICT 2007-02312.
CR Agichtein E., 2006, Proceedings of the Twenty-Ninth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P3, DOI 10.1145/1148170.1148175
   AKRAM A, 2006, P UK E SCI ALL HANDS
   Al-Masri E, 2008, IEEE INTERNET COMPUT, V12, P74, DOI 10.1109/MIC.2008.53
   [Anonymous], 3 EUR START AI RES S
   [Anonymous], IEEE INT C SERV COMP
   Beaton J, 2008, 2008 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P193, DOI 10.1109/VLHCC.2008.4639084
   Bichler M, 2006, COMPUTER, V39, P99, DOI 10.1109/MC.2006.102
   Blake MB, 2008, IEEE INTERNET COMPUT, V12, P62, DOI 10.1109/MIC.2008.112
   Bollmann P., 1983, Proceedings of the Sixth Annual International ACM SIGIR Conference on Research and Development in Information Retrieval, P122, DOI 10.1145/511793.511811
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Crasso M, 2008, SCI COMPUT PROGRAM, V71, P144, DOI 10.1016/j.scico.2008.02.002
   Dong X., 2004, Proceedings of the 30th International Conference on Very Large Data Bases (VLDB'04), V30, P372, DOI DOI 10.1016/B978-012088469-8.50035-8
   Erl T, 2005, SERVICE ORIENTED ARC
   Fan JC, 2005, SIGMOD REC, V34, P24, DOI 10.1145/1058150.1058156
   FELLBAUM C, 1989, WORDNET ELECT LEXICA
   Garofalakis J, 2006, J WEB ENG, V5, P265
   Gomez-Perez A., 2003, Ontological Engineering
   Hatcher E, 2004, ACTION SERIES
   Henning M, 2009, COMMUN ACM, V52, P46, DOI 10.1145/1506409.1506424
   Hess A, 2004, LECT NOTES COMPUT SC, V3298, P320
   Huhns MN, 2005, IEEE INTERNET COMPUT, V9, P75, DOI 10.1109/MIC.2005.21
   Klein D, 2003, 41ST ANNUAL MEETING OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS, PROCEEDINGS OF THE CONFERENCE, P423, DOI 10.3115/1075096.1075150
   Kokash N, 2006, LECT NOTES COMPUT SC, V4294, P522
   Korfhage R.R., 1997, INFORM STORAGE RETRI
   Kramer D., 1999, Seventeenth Annual International Conference on Computer Documentation. Conference Proceedings, P147, DOI 10.1145/318372.318577
   KRUEGER CW, 1992, COMPUT SURV, V24, P131, DOI 10.1145/130844.130856
   McCool R, 2006, IEEE INTERNET COMPUT, V10, P96, DOI 10.1109/MIC.2006.18
   McCool R, 2005, IEEE INTERNET COMPUT, V9, P88, DOI 10.1109/MIC.2005.133
   Paolucci M, 2003, IEEE INTERNET COMPUT, V7, P34, DOI 10.1109/MIC.2003.1232516
   Pasley J, 2006, IEEE INTERNET COMPUT, V10, P72, DOI 10.1109/MIC.2006.45
   PENDHARKAR PC, 2002, SIGDOC 02, P152
   Sabou M, 2007, J WEB SEMANT, V5, P142, DOI 10.1016/j.websem.2006.11.004
   Shamsfard M, 2004, INT J HUM-COMPUT ST, V60, P17, DOI 10.1016/j.ijhcs.2003.08.001
   Song H, 2007, 2007 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P265
   Stroulia E, 2005, INT J COOP INF SYST, V14, P407, DOI 10.1142/S0218843005001213
   Vaughan-Nichols SJ, 2002, COMPUTER, V35, P18, DOI 10.1109/2.982908
   *W3C CONS, 2007, WEB SERV DESCR LANG
   Wang Hongbing., 2004, Journal of web semantics, V1, P309
   Wang YQ, 2003, FOURTH INTERNATIONAL CONFERENCE ON WEB INFORMATION SYSTEMS ENGINEERING, PROCEEDINGS, P147
NR 39
TC 45
Z9 47
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 1001
EP 1021
DI 10.1016/j.scico.2010.01.002
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600005
OA Bronze
DA 2024-07-18
ER

PT J
AU Pereira, DP
   de Melo, ACV
AF Pereira, David P.
   de Melo, Ana C. V.
TI Formalization of an architectural model for exception handling
   coordination based on CA action concepts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Concurrent exception handling; Coordinated atomic action; Fault
   tolerance; CSP
AB Architectures based on Coordinated Atomic action (CA action) concepts have been used to build concurrent fault-tolerant systems. This conceptual model combines concurrent exception handling with action nesting to provide a general mechanism for both enclosing interactions among system components and coordinating forward error recovery measures. This article presents an architectural model to guide the formal specification of concurrent fault-tolerant systems. This architecture provides built-in Communicating Sequential Processes (CSPs) and predefined channels to coordinate exception handling of the user-defined components. Hence some safety properties concerning action scoping and concurrent exception handling can be proved by using the FDR (Failure Divergence Refinement) verification tool. As a result, a formal and general architecture supporting software fault tolerance is ready to be used and proved as users define components with normal and exceptional behaviors. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Pereira, David P.; de Melo, Ana C. V.] Univ Sao Paulo, Dept Comp Sci, Sao Paulo, Brazil.
C3 Universidade de Sao Paulo
RP Pereira, DP (corresponding author), Univ Sao Paulo, Dept Comp Sci, Sao Paulo, Brazil.
EM dpereira@ime.usp.br; acvm@ime.usp.br
RI de Melo, Ana C V/G-1527-2012
FU National Council for Scientific and Technological Development
   (CNPq-Brazil) [551038/2007-1]; Ministry of Education and Research Agency
   (CAPES-Brazil) [0671-08-8]
FX This project has been co-funded by the National Council for Scientific
   and Technological Development (CNPq-Brazil)-Proc:551038/2007-1 and the
   Ministry of Education and Research Agency (CAPES-Brazil)-Proc:0671-08-8.
   Ana C.V. de Melo also thanks the Oxford University Computing Laboratory
   for providing research facilities during her stay on sabbatical leave at
   Oxford University.
CR ANDERSON T, 1990, FAULT TOLERANCE PRIN
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], 2005, B BOOK ASSIGNING PRO
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Beder D. M., 2000, SIGOPS OPER SYST REV, V34, P21
   BRITO PHS, 2007, IC0704 UNIC
   CAMPBELL RH, 1986, IEEE T SOFTWARE ENG, V12, P811, DOI 10.1109/TSE.1986.6312984
   CAPOZUCCA A, 2005, P FM 2005 REFT WORKS
   CASTOR F, 2006, SAC 06, P680
   CRISTIAN F, 1995, FTCS 25 HIGHLIGHTS 2, P120
   do Lemos R, 2006, IEEE SOFTWARE, V23, P80, DOI 10.1109/MS.2006.35
   Hoare CAR., 1985, Communicating Sequential Processes
   ISSARNY V, 2001, HICSS 01, P9058
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   PEREIRA DP, 2007, THESIS U SAO PAULO
   RANDELL B, 1975, P INT C REL SOFTW, P437, DOI DOI 10.1145/800027.808467
   Randell B., 1994, SOFTWARE FAULT TOLER, P1
   Romanovsky A., 2001, Advances in exception handling techniques (Lecture Notes in Computer Science Vol.2022), P147
   Romanovsky A, 2001, P INT COMP SOFTW APP, P580, DOI 10.1109/CMPSAC.2001.960671
   SCHWIER D, 1997, FORMALIZATION CA ACT
   TARTANOGLU F, 2003, P ICSE 2003 WORKSH A
   Xu J, 2002, IEEE T COMPUT, V51, P164, DOI 10.1109/12.980006
   XU J, 1995, FTCS 25 25 INT S FAU, P499
   2003, PROBE PROCESS BEHAV
   FDR2 FDR2 USER MANUA
NR 26
TC 5
Z9 7
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2010
VL 75
IS 5
SI SI
BP 333
EP 349
DI 10.1016/j.scico.2009.12.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 583YV
UT WOS:000276717500004
DA 2024-07-18
ER

PT J
AU Camacho, DO
   Mens, K
   van den Brand, M
   Vinju, J
AF Camacho, Diego Ordonez
   Mens, Kim
   van den Brand, Mark
   Vinju, Jurgen
TI Automated generation of program translation and verification tools using
   annotated grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th Workshop on Language Descriptions, Tools and Application
CY MAR 25, 2007
CL Braga, PORTUGAL
SP ACM SIGPLAN
DE Annotated grammars; Operations languages; Language families; Program
   translation; Automated translation; ASF plus SDF
AB Automatically generating program translators from source and target language specifications is a non-trivial problem. In this paper we focus on the problem of automating the process of building translators between operations languages, a family of DSLs used to program satellite operations procedures. We exploit their similarities to semi-automatically build transformation tools between these DSLs. The input to our method is a collection of annotated context-free grammars. To simplify the overall translation process even more, we also propose an intermediate representation common to all operations languages. Finally, we discuss how to enrich our annotated grammars model with more advanced semantic annotations to provide a verification system for the translation process. We validate our approach by semi-automatically deriving translators between some real world operations languages, using the prototype tool which we implemented for that purpose. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Camacho, Diego Ordonez; Mens, Kim] Catholic Univ Louvain, Comp Sci Engn Dept, Louvain Sch Engn, B-3000 Louvain, Belgium.
   [Vinju, Jurgen] Ctr Wiskunde & Informat, Dept Software Engn, Amsterdam, Netherlands.
   [van den Brand, Mark] Tech Univ Eindhoven, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 Universite Catholique Louvain; Eindhoven University of Technology
RP Camacho, DO (corresponding author), Catholic Univ Louvain, Comp Sci Engn Dept, Louvain Sch Engn, B-3000 Louvain, Belgium.
EM diego.ordonez@uclouvain.be; kim.mens@uclouvain.be;
   m.g.j.v.d.brand@tue.nl; jurgen.vinju@cwi.nl
RI Vinju, Jurgen/AAC-8760-2022; Ordóñez-Camacho, Diego/AAJ-4120-2020
OI Vinju, Jurgen/0000-0002-2686-7409; Ordóñez-Camacho,
   Diego/0000-0001-8390-634X; van den Brand, Mark/0000-0003-3529-6182;
   Mens, Kim/0000-0003-0303-1630
CR Aho Alfred V., 1969, Proceedings of thefirst annualACM symposium on Theory ofcomputing, P93
   *ASTRIUM, 2003, US CONTR LANG REF MA
   BAXTER ID, 2002, IWPSE 02, P48
   Bosch J., 2000, Design and Use of Software Architectures: Adopting and Evolving a Product-Line Approach
   Camacho D. Ordonez, 2007, INGENIERIE DIRIGEE M, P7
   Camacho DO, 2006, ELECTRON NOTES THEOR, V164, P121, DOI 10.1016/j.entcs.2006.10.009
   CAMACHO DO, 2008, P SPACEOPS 2008 C
   Cater S. J., 2006, 2006 IEEE Aerospace Conference (IEEE Cat. No. 05TH8853C)
   CHAUDHRI G, 2006, SPACEOPS 2006 C, P22
   Cordy J.R., 2004, Electron. Notes Theor. Comput. Sci, V110, P3, DOI [DOI 10.1016/J.ENTCS.2004.11.006, 10.1016/j.entcs.2004.11.006, https://doi.org/10.1016/j.entcs.2004.11.006]
   CRANEFIELD S, 2001, WORKSH ONT AG SYST 5
   Demeuse B, 1998, DATA SYSTEMS IN AEROSPACE - PROCEEDINGS, P307
   European Cooperation for Space Standardization, 2006, ECSSE7032A
   HUTCHINS J, 1999, INT C MACH TRANSL CO, P26
   *INT SYST, 2000, EPOCH T C DIR STOL F
   *INT SYST INC, 2000, INT SYST STOL PROGR
   Klint P, 2005, ACM T SOFTW ENG METH, V14, P331, DOI 10.1145/1072997.1073000
   Kort J., 2002, ELECT NOTES THEORETI, V65
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   Lasota S, 1998, LECT NOTES COMPUT SC, V1521, P381
   LEWIS PM, 1968, J ACM, V15, P465, DOI 10.1145/321466.321477
   Lopes A, 2005, LECT NOTES ARTIF INT, V3690, P535
   Mason I. A., 1994, Logic, language and computation. Festschrift in honor of Satoru Takasu, P225, DOI 10.1007/BFb0032403
   MECREDY N, 2004, HERSCHEL PLANCK CENT
   PETRONE L, 1971, P 2 ACM S SYMB ALG M, P224
   Plotkin G.D., 1981, FN19 DAIMI U AARH
   ROLF PC, 1988, P 12 C COMP LING ASS, P544
   Shashidhar KC, 2005, DES AUT TEST EUROPE, P1310, DOI 10.1109/DATE.2005.163
   Stirling C, 1998, LECT NOTES COMPUT SC, V1450, P142, DOI 10.1007/BFb0055763
   Terekhov AA, 2000, IEEE SOFTWARE, V17, P111, DOI 10.1109/52.895180
   Terekhov AA, 2001, PROC IEEE INT CONF S, P654, DOI 10.1109/ICSM.2001.972782
   TIMMERMANS LJ, 2001, DATA SYSTEMS AEROSPA
   VANDENBRAND MGJ, 2001, LECT NOTES COMPUTER, V2027, P365
   Veerman N, 2005, SCI COMPUT PROGRAM, V57, P129, DOI 10.1016/j.scico.2005.01.001
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
NR 36
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2010
VL 75
IS 1-2
SI SI
BP 3
EP 20
DI 10.1016/j.scico.2009.10.003
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 539CK
UT WOS:000273230800002
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Colvin, R
   Dongol, B
AF Colvin, Robert
   Dongol, Brijesh
TI A general technique for proving lock-freedom
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Lock-free programs; Concurrency; Verification; Temporal logic
AB Lock-freedom is a property of concurrent programs which states that, from any state of the program, eventually some process will complete its operation. Lock-freedom is a weaker property than the usual expectation that eventually all processes will complete their operations. By weakening their completion guarantees, lock-free programs increase the potential for parallelism, and hence make more efficient Use Of Multiprocessor architectures than lock-based algorithms. However, lock-free algorithms, and reasoning about them, are considerably more complex.
   In this paper we present a technique for proving that a program is lock-free. The technique is designed to be as general as possible and is guided by heuristics that simplify the proofs. We demonstrate our theory by proving lock-freedom of two non-trivial examples from the literature. The proofs have been machine-checked by the PVS theorem prover, and we have developed proof strategies to minimise user interaction. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Colvin, Robert; Dongol, Brijesh] Univ Queensland, Sch Informat Technol & Elect Engn, ARC Ctr Complex Syst, Brisbane, Qld 4072, Australia.
C3 University of Queensland
RP Colvin, R (corresponding author), Univ Queensland, Sch Informat Technol & Elect Engn, ARC Ctr Complex Syst, Brisbane, Qld 4072, Australia.
EM robert@itee.uq.edu.au; brijesh@itee.uq.edu.au
RI Colvin, Robert/C-7985-2009; Colvin, Robert/N-6686-2019; Dongol,
   Brijesh/ABB-2935-2020
OI Colvin, Robert/0000-0002-2149-675X; Dongol, Brijesh/0000-0003-0446-3507
CR [Anonymous], 1990, Predicate Calculus and Program Semantics
   CHANDY KM, 1988, PARALLEL PROGRAM DES
   Colvin R., 2007, 5 IEEE INT C SOFTW E
   Colvin R, 2005, 10 INT C ENG COMPL C
   COLVIN R, 2007, LECT NOTES COMPUTER, V4711
   DERRICK J, 2007, LECT NOTES COMPUTER, V4591
   DOHERTY S, 2004, LECT NOTES COMPUTER, V3235
   DONGOL B, 2006, LECT NOTES COMPUTER, V4260
   Fix L, 1996, J LOGIC COMPUT, V6, P343, DOI 10.1093/logcom/6.3.343
   Gao H, 2007, INFORM COMPUT, V205, P225, DOI 10.1016/j.ic.2006.10.003
   Gries D., 1993, LOGICAL APPROACH DIS
   HERLIHY MP, 1990, ACM T PROGR LANG SYS, V12, P463, DOI 10.1145/78969.78972
   *JAV, 2008, JAV API CLASS CONCUR
   Manna Z., 1992, Temporal verification of reactive and concurrent systems: Specification
   MASSALIN H, 1991, CUCS00591 COL U
   Michael MM, 1998, J PARALLEL DISTR COM, V51, P1, DOI 10.1006/jpdc.1998.1446
   Misra J., 2001, DISCIPLINE MULTIPROG
   MOIR M, 1997, P 20 ANN ACM S PRINC
   OWRE S, 1996, LECT NOTES COMPUTER, V1102
   2008, ENCODING PROGRAMS PR
NR 20
TC 6
Z9 6
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2009
VL 74
IS 3
BP 143
EP 165
DI 10.1016/j.scico.2008.09.013
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 402NY
UT WOS:000263021600004
DA 2024-07-18
ER

PT J
AU den Hartog, J
AF den Hartog, Jerry
TI Towards mechanized correctness proofs for cryptographic algorithms
   Axiomatization of a probabilistic Hoare style logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hoare logic; Probability; Axiomatization; Cryptography; Provable
   correctness
AB In [R.J. Corin, J.I. den Hartog, A probabilistic hoare-style logic for game-based cryptographic proofs, in: M. Bugliesi, B. Preneel, V. Sassone (Eds.), ICALP 2006 Track C, Venice, Italy, in: Lecture Notes in Computer Science, vol. 4052, Springer-Verlag, Berlin, 2006, pp. 252-263] we build a formal verification technique for game-based correctness proofs of cryptographic algorithms based on a probabilistic Hoare style logic [J.I. den Hartog, E.P. de Vink, Verifying probabilistic programs using a Hoare like logic, International journal of Foundations of Computer Science 13 (3) (2002) 315-340]. An important step towards enabling mechanized verification within this technique is an axiomatization of implication between predicates which is purely semantically defined in the latter reference cited above. In this paper we provide an axiomatization and illustrate its place in the formal verification technique given in the former. (C) 2008 Published by Elsevier B.V.
C1 Tech Univ Eindhoven, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP den Hartog, J (corresponding author), Tech Univ Eindhoven, Dept Math & Comp Sci, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM j.d.hartog@tue.nl
CR [Anonymous], 2005, SEQUENCES GAMES TOOL
   BELLARE M, 2004, GAME PLAYING TECHNIQ
   Boneh D, 2003, SIAM J COMPUT, V32, P586, DOI 10.1137/S0097539701398521
   Boneh D., 1998, LNCS, V1423
   Chadha R, 2007, THEOR COMPUT SCI, V379, P142, DOI 10.1016/j.tcs.2007.02.040
   Den Hartog J. I., 2002, International Journal of Foundations of Computer Science, V13, P315, DOI 10.1142/S012905410200114X
   ELGAMAL T, 1985, IEEE T INFORM THEORY, V31, P469, DOI 10.1109/TIT.1985.1057074
   GALINDO D, 2005, ICALP, P791
   Gorin R, 2006, LECT NOTES COMPUT SC, V4052, P252
   HALEVI S, 2005, PLAUSIBLE APPROACH C
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   IMPAGLIAZZO R, 2006, J COMPUTER SYSTEMS S, V72
   Morgan C, 1996, ACM T PROGR LANG SYS, V18, P325, DOI 10.1145/229542.229547
NR 13
TC 2
Z9 2
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2008
VL 74
IS 1-2
SI SI
BP 52
EP 63
DI 10.1016/j.scico.2008.09.006
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 386PX
UT WOS:000261896200007
DA 2024-07-18
ER

PT J
AU Johnstone, A
   Scott, E
AF Johnstone, Adrian
   Scott, Elizabeth
TI Proofs and pedagogy; science and systems: The grammar tool box
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE context-free grammars; generalised parsing; tool designs tool
   application
ID PARSERS
AB GTB (the Grammar Tool Box) is the tool that underpins our investigations into generalised parsing. Our goal is to produce a system that supports systematic investigation of various styles of generalised parsing in a way that allows meaningful comparisons between them in a repeatable and easily accessible fashion whilst also allowing: (i) new theoretical ideas to be generated and explored; (ii) production quality parsers to be generated and (iii) humane pedagogy. GTB comprises a language (LC) with various kinds of built-in grammar and automata related objects, and a set of black-box methods written in C++ that provide implementations. of grammar transforms, automata construction algorithms, parsing and recognition algorithms, and a variety of visualisation aids. In this paper we focus on the overall rationale for the GTB framework; the GTB design goals; and some detailed operational flows that are supported by GTB. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Johnstone, Adrian; Scott, Elizabeth] Univ London, Dept Comp Sci, London, England.
C3 University of London
RP Johnstone, A (corresponding author), Univ London, Dept Comp Sci, London, England.
EM a.johnstoiie@rhul.ac.uk; e.scott@rhul.ac.uk
CR Aho Alfred V., 1972, THEORY PARSING TRANS, V1
   Aho Alfred V., 1986, COMPILERS PRINCIPLES
   [Anonymous], GEN LR PARSING
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], THESIS CARNEGIE MELL
   Aycock J, 1999, LECT NOTES COMPUT SC, V1575, P32
   GRAHAM S, 1976, ADV COMPUT, V14, P77
   GRUNE D, 1990, PARSING TECHNOLOGIES
   Johnstone A, 2004, LECT NOTES COMPUT SC, V2985, P89
   Johnstone A, 1998, LECT NOTES COMPUT SC, V1383, P16
   Johnstone A, 2003, LECT NOTES COMPUT SC, V2622, P232
   JOHNSTONE A, 2005, P 5 WORKSH LANG DESC
   JOHNSTONE A, 2002, P 35 ANN HAW INT C S
   JOHNSTONE A, 1998, SIGPLAN NOTICES, V33
   JOHNSTONE A, UNPUB SCI COMPUTER P
   JOHNSTONE A, IN PRESS EVALUATING
   Johnstone Adrian., 2004, 4 WORKSHOP LANGUAGE, P97
   Karp R, 1972, COMPLEXITY COMPUTER, V40, P85, DOI 10.1007/978-3-540-68279-08
   KLINT P, 2003, IN PRESS ACM TOSEM
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lee L, 2002, J ACM, V49, P1, DOI 10.1145/505241.505242
   NEEDHAM R, 2001, ACM SIGSOFT, V26, P7
   Scott E, 2005, COMPUT J, V48, P565, DOI 10.1093/comjnl/bxh102
   Scott E, 2004, ACTA INFORM, V40, P459, DOI 10.1007/s00236-004-0137-z
   SCOTT E, IN PRESS ACM T PROGR
   SIKKEL K, 1993, TEXTS THEORETICAL CO
   Stroustrup B., 1994, The Design and Evolution of C++
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Tomita Masaru, 1991, Generalized LR parsing
   VALIANT LG, 1975, J COMPUT SYST SCI, V10, P308, DOI 10.1016/S0022-0000(75)80046-8
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
NR 31
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2007
VL 69
IS 1-3
BP 76
EP 85
DI 10.1016/j.scico.2007.01.016
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 253CQ
UT WOS:000252496700009
DA 2024-07-18
ER

PT J
AU Alanen, M
   Lundkvist, T
   Porres, I
AF Alanen, Marcus
   Lundkvist, Torbjoern
   Porres, Ivan
TI Creating and reconciling diagrams after executing model transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Model Transformation Track held at the 21st Annual ACM Symposium on
   Applied Computing
CY APR 23-27, 2006
CL Dijon, FRANCE
SP ACM
DE model transformation; visual languages; diagram interchange; DI
ID DIFFERENCE; VIOLATE
AB In this paper we discuss how to create and update diagrams after the execution of a model transformation. This is achieved by creating an independent diagram reconciliation tool component that is based on a mapping language from the abstract syntax to the concrete syntax of a modeling language. This approach allows us to decouple model transformation from diagram handling in model transformation languages and tools. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Alanen, Marcus; Lundkvist, Torbjoern; Porres, Ivan] Abo Akad Univ, Turku Ctr Comp Sci, Dept Informat Technol, FIN-20520 Turku, Finland.
C3 Abo Akademi University
RP Lundkvist, T (corresponding author), Abo Akad Univ, Turku Ctr Comp Sci, Dept Informat Technol, Joukahaisenkatu 3-5A, FIN-20520 Turku, Finland.
EM torbjorn.1undkvist@abo.fi
OI Porres, Ivan/0000-0002-6791-2018
CR Alanen M., 2005, Nordic Journal of Computing, V12, P321
   Alanen M, 2003, LECT NOTES COMPUT SC, V2863, P2
   ALANEN M, 2006, P 2006 ACM S APPL CO, P1267
   Alanen M, 2006, LECT NOTES COMPUT SC, V4199, P454
   ALVAREZ J, 2001, WTUML WORKSH TRANSF
   [Anonymous], P 2 EC MDA WORKSH TR
   [Anonymous], 2003, Eclipse Modeling Framework
   [Anonymous], 1997, Handbook of Graph Grammars and Computing by Graph Transformation
   [Anonymous], P AGT 2002 WORKSH AP
   BAAR T, 2003, OBJET, V9, P95
   BACK RJ, 2005, 705 TUCS
   BENEKEN G, 2005, P 1 WORKSH MOD ASP H
   BEZIVIN J, 2003, 0308 U NANT
   BEZIVIN J, 2004, SPRINGER J SOFTWARE, V3
   Bézivin J, 2006, LECT NOTES COMPUT SC, V4066, P346
   BONDE L, 2005, FORUM SPECIFICATION
   Cabot J, 2005, LECT NOTES COMPUT SC, V3520, P48
   Cabot J, 2004, LECT NOTES COMPUT SC, V3273, P320
   Castello R, 2002, SOFTWARE PRACT EXPER, V32, P25, DOI 10.1002/spe.418
   CELMS E, 2003, 3 OOPSLA WORKSH DOM
   CLARK T, 2001, P FASE 2001, P17
   DAVID H, 2003, SOFTWARE SYSTEM MODE, V2, P215
   Didonet Del Fabro M, 2005, P LER JOURN ING DIR
   EIGLSPERGER M, 2003, P 2003 ACM S SOFTW V
   *EMF DEV TEAM, ECL MOD FRAM WEBS
   Fondement F, 2005, LECT NOTES COMPUT SC, V3748, P190
   *GENTL, POS UML PROD
   HAREL D, 1988, COMMUN ACM, V31, P514, DOI 10.1145/42411.42414
   Hausmann J.H., 2003, P 2003 ACM S SOFTW V, P169
   JARAMILLO JD, 2003, ELECT NOTES THEORETI, V72
   KALNINS A, 2004, WORKSH MOD TRANSF EX
   KELLY S, 2004, 19 ANN ACM C OBJ OR
   KENT S, 2002, P IFM INT FORM METH, V2335
   Kolovos DS, 2006, LECT NOTES COMPUT SC, V4199, P215
   Lilius J., 2005, Nordic Journal of Computing, V12, P361
   LUNDKVIST T, 2005, THESIS ABO AKAD U DE
   MANDEL L, 1999, EXPRESSIVE POWER OBJ
   Mens T, 2006, LECT NOTES COMPUT SC, V4199, P200
   MILEWSKI M, 2005, P 1 WORKSH MOD ASP H
   Myers EW, 1986, ALGORITHMICA, V1, P251, DOI 10.1007/BF01840446
   NYTUN JP, 2004, P 2 NORD WORKSH UN M, P1
   Object Management Group (OMG), 2005, PTC051101 OMG
   *OCT PATR, 2004, P 1 EUR MDA WORKSH M, P83
   *OMG, 2004, FORMAL050705, P83
   *OMG, 2006, AD061107
   *OMG, 2006, 060404 OMG
   *OMG, 2002, XML MET INT XMI
   PORRES I, 2003, SPRINGER INT J SOFTW, V2
   Stoeckle H, 2003, 200S IEEE SYMPOSIUM ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, P59
   Winter A, 2002, LECT NOTES COMPUT SC, V2269, P324
   Zhu NP, 2004, 2004 IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN CENTRIC COMPUTING: PROCEEDINGS, P254
NR 51
TC 4
Z9 4
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2007
VL 68
IS 3
BP 155
EP 178
DI 10.1016/j.scico.2007.05.002
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 243BZ
UT WOS:000251771200004
DA 2024-07-18
ER

PT J
AU Moreno-Ger, P
   Sierra, JL
   Martínez-Ortiz, I
   Fernández-Manjón, B
AF Moreno-Ger, Pablo
   Sierra, Jose Luis
   Martinez-Ortiz, Ivan
   Fernandez-Manjon, Baltasar
TI A documental approach to adventure game development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE videogames; adventure games; development process; document-oriented
   approach; storyboard markup language; game engine
ID LANGUAGES
AB In this paper, we propose a documental approach to the development of graphical adventure videogames. This approach is oriented to the production and maintenance of adventure videogames using the game's storyboard as the key development element. The videogame storyboard is marked up with a suitable domain-specific descriptive markup language, from which the different art assets that are needed are referred to, and then the final executable videogame itself is automatically produced by processing the marked storyboard with a suitable processor for such a language. This document-oriented approach opens new authoring possibilities in videogame development and allows a rational collaboration between the different communities that participate in the development process: game writers, artists, and programmers. We have implemented the approach in the context of the (e-Game) project, by defining a suitable markup language for the storyboards (the (e-Game) language), and by building a suitable processor for this language (the (e-Game) engine). (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Complutense Madrid, Dpto Ingn Software & Inteligencia Artif, E-28040 Madrid, Spain.
   Ctr Estudios Super Felipe II, Madrid, Spain.
C3 Complutense University of Madrid
RP Moreno-Ger, P (corresponding author), Univ Complutense Madrid, Dpto Ingn Software & Inteligencia Artif, E-28040 Madrid, Spain.
EM pablom@fdi.ucm.es; jlsierra@fdi.ucm.es; imartinez@cesfelipesegundo.com;
   balta@fdi.ucm.es
RI Fernandez-Manjon, Baltasar/A-5281-2011; Martinez-Ortiz,
   Ivan/D-1898-2012; Martínez, Iván/IST-4290-2023; Ortiz,
   Ivan/JDM-8977-2023; Sierra, Jose Luis/J-6935-2014; Moreno-Ger,
   Pablo/B-5419-2009
OI Martinez-Ortiz, Ivan/0000-0001-6595-5690; Sierra, Jose
   Luis/0000-0002-0317-0510; Moreno-Ger, Pablo/0000-0003-4817-8150;
   Fernandez-Manjon, Baltasar/0000-0002-8200-6216
CR *AC ADL COL, OUTBR QUEST 90 DAY G
   [Anonymous], 1990, SGML HDB
   Birbeck M., 2001, PROFESSIONAL XML, V2nd
   CLEMENT D, 1985, NATURAL SEMANTICS CO
   COOMBS JH, 1987, COMMUN ACM, V30, P933, DOI 10.1145/32206.32209
   DUCKETT J, 2002, PROFESSIONAL XML SCH
   *ESA, 2005, ESA ESSENTIAL FACTS
   Fernandez-Manjon B., 1997, Education and Information Technologies, V2, P193, DOI 10.1023/A:1018613330173
   GOLDFARB CF, 1981, ACM SIGPLAN NOTICES, V16, P68
   HARBOUR J, 2003, BEGINNERS GUIDE DARK
   Ierusalimschy R, 1996, SOFTWARE PRACT EXPER, V26, P635, DOI 10.1002/(SICI)1097-024X(199606)26:6<635::AID-SPE26>3.0.CO;2-P
   Ju E, 1997, DATA BASE ADV INF SY, V28, P78
   KAHN G, 1987, LECT NOTES COMPUTER, V247
   Kahn K, 1996, J VISUAL LANG COMPUT, V7, P197, DOI 10.1006/jvlc.1996.0011
   Koper R, 2004, EDUC TECHNOL SOC, V7, P97
   LAWRENCE CP, 1996, J AUTOMATIC REASONIN, V17, P291
   Lee D, 2000, SIGMOD RECORD, V29, P76
   MARTINEZORTIZ I, 2006, LECT NOTES COMPUTER, V4227
   MARTINEZORTIZ I, 2006, INT C INF TECHN NEW
   Mauw S, 2004, INT J SOFTW ENG KNOW, V14, P625, DOI 10.1142/S0218194004001828
   Moreno-Ger P., 2005, Cognition and exploratory learning in the digital age (CELDA 2005)
   MORENOGER P, 2006, LECT NOTES COMPUTER, V4146
   Mosses PD, 2004, J LOGIC ALGEBR PROGR, V60-1, P195, DOI 10.1016/j.jlap.2004.03.008
   Mosses PD, 2006, ELECTRON NOTES THEOR, V148, P41, DOI 10.1016/j.entcs.2005.12.012
   Murata M., 2005, ACM Transactions on Internet Technology, V5, P660, DOI 10.1145/1111627.1111631
   Overmars M, 2004, COMPUTER, V37, P81, DOI 10.1109/MC.2004.1297314
   PLOTKIN GD, 2000, FN19 DAIMI AARH U CO
   RABIN S, 2000, GEME PROGRAMMING GEM
   Robertson J, 2005, COMMUN ACM, V48, P61, DOI 10.1145/1039539.1039571
   RODMAN A, 1999, SCUMM ADVENTURE LUCA
   Rucker R., 2002, SOFTWARE ENG COMPUTE
   Sierra JL, 2005, ACM SIGPLAN NOTICES, V40, P28, DOI 10.1145/1117303.1117308
   Sierra JL, 2005, INT J SOFTW ENG KNOW, V15, P975, DOI 10.1142/S0218194005002634
   Sierra JL, 2004, J UNIVERS COMPUT SCI, V10, P1302
   SIERRA JL, 2005, LECT NOTES COMPUTER, V3583
   SIERRA JL, 2005, 31 EUR C SOFTW ENG A
   Sierra JL, 2007, SOFTWARE PRACT EXPER, V37, P441, DOI 10.1002/spe.779
   Sierra JL, 2006, COMPUT J, V49, P562, DOI 10.1093/comjnl/bxl008
   STLAURENT S, 1999, INSIDE XML DTDS SCI
   WARREN A, 2003, LUCAS ARTS DESIGN SU
NR 40
TC 39
Z9 42
U1 0
U2 21
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2007
VL 67
IS 1
BP 3
EP 31
DI 10.1016/j.scico.2006.07.003
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 187HK
UT WOS:000247838100002
DA 2024-07-18
ER

PT J
AU Möller, B
AF Moeller, Bernhard
TI Kleene getting lazy
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Mathematics of Program Construction
CY JUL 12-14, 2004
CL Stirling, SCOTLAND
SP Cornell Univ, Univ Stirling, Formal Aspects Comp Sci, Specialist Grp
DE algebraic semantics; lazy evaluation; Kleene algebra; omega algebra;
   modal operators; predicate transformers
ID REFINEMENT ALGEBRA; OPERATORS
AB We propose a relaxation of Kleene algebra by giving up strictness and right-distributivity of composition. This allows the subsumption of Dijkstra's computation calculus, Cohen's omega algebra and von Wright's demonic refinement algebra. Moreover, by adding domain and codomain operators we can also incorporate modal operators. We show that predicate transformers form lazy Kleene algebras, the disjunctive and conjunctive ones even lazy omega Kleene algebras. We also briefly sketch two further applications: a modal lazy Kleene algebra of commands modelling total correctness and another one that abstractly characterizes sets of trajectories as used in the description of reactive and hybrid systems. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Augsburg, Inst Informat, D-86135 Augsburg, Germany.
C3 University of Augsburg
RP Möller, B (corresponding author), Univ Augsburg, Inst Informat, D-86135 Augsburg, Germany.
EM Bernhard.Moeller@informatik.uni-augsburg.de
CR AARTS C, 1995, INFORM PROCESS LETT, V53, P131, DOI 10.1016/0020-0190(94)00195-5
   [Anonymous], 1981, Lecture Notes in Computer Science, DOI [10.1007/BFb0017309, DOI 10.1007/BFB0017309]
   Back R.-J., 1998, Refinement Calculus
   BACK RJ, 1991, STRUCT PROGRAM, V12, P17
   BERGSTRA JA, 1994, COMPUT J, V37, P243, DOI 10.1093/comjnl/37.4.243
   BERGSTRA JA, 2001, HDB PROCESS ALGEBRA, P333
   Cohen E, 2000, LECT NOTES COMPUT SC, V1837, P45
   Conway J.H., 1971, Regular Algebra and Finite Machines
   DESHARNAIS J, 2004, IFIP INT FEDERATION, V155, P653
   Desharnais J, 2006, ACM T COMPUT LOG, V7, P798, DOI 10.1145/1183278.1183285
   Dijkstra RM, 2000, SCI COMPUT PROGRAM, V37, P3, DOI 10.1016/S0167-6423(99)00021-0
   DIJKSTRA RM, 1998, LNCS, V1422, P151
   ELGOT CC, 1976, J ALGEBRA, V42, P391, DOI 10.1016/0021-8693(76)90106-X
   Guttmann W, 2006, LECT NOTES COMPUT SC, V4010, P236
   Hoare C. A. R., 1998, Unifying Theories of Programming
   Höfner P, 2006, LECT NOTES COMPUT SC, V4136, P222
   Höfner P, 2006, LECT NOTES COMPUT SC, V3929, P121
   KOZEN D, 1994, INFORM COMPUT, V110, P366, DOI 10.1006/inco.1994.1037
   Kozen D, 1997, ACM T PROGR LANG SYS, V19, P427, DOI 10.1145/256167.256195
   KOZEN D, 2003, TR20031915 CORN U DE
   LUKKIEN JJ, 1994, SCI COMPUT PROGRAM, V22, P137, DOI 10.1016/0167-6423(94)90010-8
   LUKKIEN JJ, 1993, LECTURE NOTES COMPUT, V669, P233
   Möller B, 2006, LECT NOTES COMPUT SC, V3929, P200
   Möller B, 2006, THEOR COMPUT SCI, V351, P221, DOI 10.1016/j.tcs.2005.09.069
   Möller B, 2004, LECT NOTES COMPUT SC, V3116, P379
   Möller B, 1998, LECT NOTES COMPUT SC, V1546, P69
   Moszkowski BC, 2000, IEEE S LOG, P241
   NELSON G, 1989, ACM T PROGR LANG SYS, V11, P517, DOI 10.1145/69558.69559
   PARNAS DL, 1983, COMMUN ACM, V26, P572, DOI 10.1145/358161.358168
   Rosenthal K. I., 1990, QUANTALES THEIR APPL, V234
   Sintzoff M, 2004, LECT NOTES COMPUT SC, V2635, P272
   Solin K, 2006, LECT NOTES COMPUT SC, V4014, P397, DOI 10.1007/11783596_23
   Staiger L., 1997, Handbook of formal languages, V3, P339, DOI DOI 10.1007/978-3-642-59126-6_6
   von Wright J, 2004, SCI COMPUT PROGRAM, V51, P23, DOI 10.1016/j.scico.2003.09.002
   von Wright J, 2002, LECT NOTES COMPUT SC, V2386, P233
   VONKARGER B, 1995, INFORM PROCESS LETT, V53, P123, DOI 10.1016/0020-0190(94)00205-D
NR 36
TC 29
Z9 30
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2007
VL 65
IS 2
SI SI
BP 195
EP 214
DI 10.1016/j.scico.2006.01.010
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 144YK
UT WOS:000244832300007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Wright, G
   Seidl, ML
   Wolczko, M
AF Wright, Greg
   Seidl, Matthew L.
   Wolczko, Mario
TI An object-aware memory architecture
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE garbage collection; virtual machines; object memory
AB Despite its dominance, object-oriented computation has received scant attention from the architecture community. We propose a novel memory architecture that supports objects and garbage collection (GC). Our architecture is co-designed with a Java (TM) Virtual Machine (JVM (TM))(1) to improve the functionality and efficiency of heap memory management. The architecture is based on an address space for objects accessed using object IDs mapped by a translator to physical addresses. To support this, the system includes object-addressed caches, a hardware GC barrier to allow in-cache GC of objects, and an exposed cache structure cooperatively managed by the JVM. These extend a conventional architecture, without compromising compatibility or performance for legacy binaries.
   Our innovations enable various improvements such as: a novel technique for parallel and concurrent garbage collection, without requiring any global synchronization; an in-cache garbage collector, which never accesses main memory; concurrent compaction of objects; and elimination of most GC store barrier overheads. We compare the behavior of our system against that of a conventional generational garbage collector, both with and without an explicit allocate-in-cache operation which eliminates many write misses. Our scheme additionally trades L2 misses for in-cache operations, and provides the mapping indirection required for concurrent compaction. (c) 2006 Sun Microsystems Inc. Published by Elsevier B.V. All rights reserved.
C1 Sun Microsyst Inc, Menlo Pk, CA 94025 USA.
C3 Sun Microsystems, Inc.
RP Wright, G (corresponding author), Sun Microsyst Inc, Menlo Pk, CA 94025 USA.
EM Greg.Wright@Sun.com; Matthew.Seidl@Sun.com; Mario.Wolczko@Sun.com
CR [Anonymous], 1984, Capability-Based Computer Systems
   BLACKBURN SM, 2004, SIGMETRICS 2004 PERF, P25, DOI DOI 10.1145/1005686.1005693
   Boehm H. J., 1991, SIGPLAN Notices, V26, P157, DOI 10.1145/113446.113459
   Chang JM, 2002, J SYST SOFTWARE, V63, P187, DOI 10.1016/S0164-1212(02)00014-6
   CHIUEH T, 1991, LECT NOTES COMPUT SC, V523, P520
   Click Cliff, 2005, P 1 ACMUSENIX INT C, P46, DOI [DOI 10.1145/1064979.1064988EVENT-PLACE:CHICAGO,IL,USA, 10.1145/1064979.1064988, DOI 10.1145/1064979.1064988]
   CZAJKOWSKI G, 2001, P ACM C OBJ OR PROGR, P125
   DIECKMANN S, 1999, P WORKSH HARDW SUPP
   Gagnon EM, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P27
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   HILL M, 1986, COMPUTER, V19, P8, DOI 10.1109/MC.1986.1663096
   Horowitz M, 1998, ACM T COMPUT SYST, V16, P170, DOI 10.1145/279227.279230
   *IBM CORP, 2001, ASS LANG REF AIX 5L
   *INT CORP, 1981, IAXP 432 GDP ARCH RE
   Jones R.E., 1996, Garbage Collection: Algorithms for Automatic Dynamic Memory Management
   Karlsson M, 2003, NINTH INTERNATIONAL SYMPOSIUM ON HIGH-PERFORMANCE COMPUTER ARCHITECTURE, PROCEEDINGS, P217, DOI 10.1109/HPCA.2003.1183540
   Lindholm T., 1997, JAVA VIRTUAL MACHINE
   NILSEN KD, 1994, J PROGRAM LANG, V2, P1
   OConnor JM, 1997, IEEE MICRO, V17, P45, DOI 10.1109/40.592314
   PENG CJ, 1989, 860 U WISC COMP SCI
   Smith JE, 1999, INNOVATIVE ARCHITECTURE FOR FUTURE GENERATION HIGH-PERFORMANCE PROCESSORS AND SYSTEMS, P77, DOI 10.1109/IWIA.1998.779076
   *STAND PERF EV COU, JBB2000 SPEC
   *STAND PERF EV COU, JVM98 SPEC
   UNGAR DM, 1987, DESIGN EVALUATION HI
   VIJAYKRISHNAN N, 2002, JAVA MICROARCHITECTU
   Wilkes M. V., 1982, Computer Architecture News, V10, P107, DOI 10.1145/964750.801834
   WILLIAMS IW, 1990, P 4 INT WORKSH PERS, P113
   WILSON PR, 1990, EECS905 U ILL CHIC
   WITHCEL E, 2002, P 10 INT S ARCH SUPP, P304
   WOLCZKO M, 1999, USING TRACING JAVA V
   Wolczko Mario., 1992, POS, P396
   WOLCZKO MI, 1999, Patent No. 5900001
   WRIGHT G, 2005, SMLITR2005143
   [No title captured]
NR 34
TC 16
Z9 18
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2006
VL 62
IS 2
BP 145
EP 163
DI 10.1016/j.scico.2006.02.007
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 075VM
UT WOS:000239913600004
DA 2024-07-18
ER

PT J
AU Carette, J
AF Carette, Jacques
TI Gaussian Elimination: A case study in efficient genericity with
   MetaOCaml
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st MetalOCaml Workshop
CY OCT, 2004
CL Vancouver, CANADA
SP Natl Sci Fdn
DE MetaOCaml; linear algebra; genericity; generative; staging
ID IMPLEMENTATION
AB The Gaussian Elimination algorithm is in fact an algorithm family - common implementations contain at least six (mostly independent) "design choices". A generic implementation can easily be parametrized by all these design choices, but this usually leads to slow and bloated code. Using MetaOCaml's staging facilities, we show how we can produce a natural and type-safe implementation of Gaussian Elimination which exposes its design choices at code-generation time, so that these choices can effectively be specialized away, and where the resulting code is quite efficient. (c) 2006 Elsevier B.V. All rights reserved.
C1 McMaster Univ, Hamilton, ON L8S 4K1, Canada.
C3 McMaster University
RP Carette, J (corresponding author), McMaster Univ, 1280 Main St W, Hamilton, ON L8S 4K1, Canada.
EM carette@mcmaster.ca
OI Carette, Jacques/0000-0001-8993-9804
CR Abelson H., 1998, Higher Order Symbolic Computation, V11, P7, DOI 10.1023/A:1010051815785
   [Anonymous], 2005, 5462 INRIA
   [Anonymous], 1996, Structure and interpretation of computer programs
   [Anonymous], 1993, Partial Evaluation and Automatic Program Generation
   [Anonymous], ACM ANN C
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Augustsson L., 1993, FPCA '93. Conference on Functional Programming Languages and Computer Architecture, P65, DOI 10.1145/165180.165191
   BACKHOUSE RC, 2003, LECT NOTES COMPUTING, V2793
   Bondorf A., 1994, PEPM '94. ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation, P1
   Burden R., 1989, Numerical Analysis
   Butler G, 2001, PROC INT CONF SOFTW, P760, DOI 10.1109/ICSE.2001.919165
   Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   CARETTE J, 2005, GENERATIVE PROGRAMMI
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Czarnecki K, 2003, LECT NOTES COMPUT SC, V3016, P51
   DAVENPORT J, 1984, SCRATCHPAD
   DE BRUIJN N.G., 1983, Automation of Reasoning: 2: Classical Papers on Computational Logic 1967-1970, P159
   Dijkstra E.W., 1982, EWD 447: On the role of scientific thought. Selected Writings on Computing: A Personal Perspective, P60, DOI DOI 10.1007/978-1-4612-5695-3
   Dijkstra E.W., 1974, ROLE SCI THOUGHT
   Frigo M, 1998, INT CONF ACOUST SPEE, P1381, DOI 10.1109/ICASSP.1998.681704
   GARCIA R, 2003, OOPSLA 03, P115
   Geddes K.O., 1992, Algorithms for Computer Algebra
   Gruntz D., 1994, SIGSAM Bulletin, V28, P3, DOI 10.1145/190694.190695
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Hutton G, 1998, J FUNCT PROGRAM, V8, P437, DOI [10.1017/S0956796898003050, DOI 10.1017/S0956796898003050]
   Jay CB, 1995, SCI COMPUT PROGRAM, V25, P251, DOI 10.1016/0167-6423(95)00015-1
   JENKS R.D., 1992, AXIOM SCI COMPUTATIO
   JOHN I, 1998, COMPUT PHYS, V12, P453
   Jones M. P., 1995, LISP and Symbolic Computation, V8, P229, DOI 10.1007/BF01019005
   JONES SP, 2004, WOBBLY TYPES TYPE IN
   KISELYOV O, 2004, ACM INT C EMB SOFTW
   LAMMEL R, J LOGIC ALGEBRAIC PR, V54
   Leijen D, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE 2ND CONFERENCE ON DOMAIN-SPECIFIC LANGUAGES (DSL'99), P109, DOI 10.1145/331963.331977
   LEMEUR AF, 2004, HIGHER ORDER SYMBOLI, V17, P47
   LEMEUR AF, 2000, SPLC 2000 WORKSH PRO
   Li XYS, 2002, ACM T MATH SOFTWARE, V28, P152, DOI 10.1145/567806.567808
   MARLET R, 1999, J AUTOMATED SOFTWARE, V6, P411
   MONAGAN MB, 2001, MAPLE 7 PROGRAMMING
   MUSSER DR, 1989, LECT NOTES COMPUT SC, V358, P13
   MUSSER DR, 1994, SOFTWARE PRACT EXPER, V24, P623, DOI 10.1002/spe.4380240703
   Myers PG, 2002, ATMOS OCEAN, V40, P445, DOI 10.3137/ao.400405
   Parnas D. L., 1976, IEEE Transactions on Software Engineering, VSe-2, P1, DOI 10.1109/TSE.1976.233797
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   Stoy JosephE., 1981, Denotational Semantics: The Scott-Strachey Approach to Programming Language Theory
   Sumii E., 2001, Higher-Order and Symbolic Computation, V14, P101, DOI 10.1023/A:1012984529382
   Taha W., 1999, THESIS OREGON GRADUA
   THIEMANN P, 1996, INT C FUNCT PROGR, P180
   Veldhuizen T. L., 1998, P SIAM WORKSH OBJ OR
   Veldhuizen TL, 1998, LECT NOTES COMPUTER
   WATT SM, 2003, COMPUTER ALGEBRA HDB
   Whaley RC, 2001, PARALLEL COMPUT, V27, P3, DOI 10.1016/S0167-8191(00)00087-9
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
NR 52
TC 9
Z9 11
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2006
VL 62
IS 1
BP 3
EP 24
DI 10.1016/j.scico.2005.10.012
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 066UL
UT WOS:000239255500002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU League, C
AF League, Christopher
TI MetaOCaml server pages: Web publishing as staged computation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st MetalOCaml Workshop
CY OCT, 2004
CL Vancouver, CANADA
SP Natl Sci Fdn
DE multi-stage programming; web services
AB Modem dynamic web services are really computer programs. Some parts of these programs run off-line, others run server-side on each request, and still others run within the browser. In other words, web publishing is staged computation, either for better performance, or because certain resources are available in one stage but not another. Unfortunately, the various web programming languages make it difficult to spread computation over more than one stage. This is a tremendous opportunity for multi-stage languages in general, and for MetaOCaml in particular.
   We present the design of MetaOCan-fl Server Pages. Unlike other languages in its genre, the embedded MetaOCaml code blocks may be annotated with staging information, so that the programmer may safely and precisely control which computation occurs in which stage. A prototype web server, written in OCaml, supports web sites with both static and dynamic content. We provide several sample programs and demonstrate the performance gains won using multi-stage programming. (c) 2006 Elsevier B.V. All rights reserved.
C1 Long Isl Univ, Brooklyn, NY 11201 USA.
C3 Long Island University-Brooklyn Campus
RP League, C (corresponding author), Long Isl Univ, 1 Univ Plaza, Brooklyn, NY 11201 USA.
EM christopher.league@liu.edu
OI League, Christopher/0000-0002-1092-8641
CR Calcagno C, 2003, LECT NOTES COMPUT SC, V2830, P57
   Christensen E., 2001, WEB SERVICES DESCRIP
   Davies R, 2001, J ACM, V48, P555, DOI 10.1145/382780.382785
   Elsman M, 2004, LECT NOTES COMPUT SC, V3057, P224
   Elsman M, 2003, LECT NOTES COMPUT SC, V2562, P74
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Garrigue J, 1999, INFORM COMPUT, V155, P134, DOI 10.1006/inco.1999.2830
   Graunke P, 2003, LECT NOTES COMPUT SC, V2618, P238
   Graunke P, 2001, LECT NOTES COMPUT SC, V2028, P122
   Greenspun, 1999, PHILIP ALEXS GUIDE W
   Hosoya Haruo, 2003, ACM T INTERNET TECHN, V3, DOI DOI 10.1145/767193.767195
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   MATTHEWS J, 2004, J AUTOMATED SOFTWARE, V11, P337
   NORMARK K, 2002, P INT WORLD WID WEB
   Queinnec C, 2000, ACM SIGPLAN NOTICES, V35, P23, DOI 10.1145/357766.351243
   Rouaix F, 1996, COMPUT NETWORKS ISDN, V28, P1365, DOI 10.1016/0169-7552(96)00032-3
   SHEARD T, 2001, LECT NOTES COMPUTER, V2196, P2
   Taha W, 2000, THEOR COMPUT SCI, V248, P211, DOI 10.1016/S0304-3975(00)00053-0
   TAKEBE Y, 2002, IPSJ T PROGRAMMING, V43
   TRANTER J, 2003, LINUX GAZETTE    JUN, V91
   TURNER J, 2003, LINUXWORLD MAGAZ DEC, V2
   Wallace M, 1999, ACM SIGPLAN NOTICES, V34, P148, DOI 10.1145/317765.317794
NR 22
TC 0
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2006
VL 62
IS 1
BP 66
EP 84
DI 10.1016/j.scico.2006.05.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 066UL
UT WOS:000239255500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Lopes, A
   Fiadeiro, JL
AF Lopes, Antonia
   Fiadeiro, Jose Luiz
TI Adding mobility to software architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd International Workshop on Foundations of Languages and Software
   Architectures (FOCLASA 03)
CY SEP 02, 2003
CL -Coordination, Marseilles, FRANCE
HO -Coordination
DE composition; connectors; coordination; distribution; location-awareness;
   mobility; refinement; software architecture
AB Mobility has become a new factor of complexity in the construction and evolution of software systems. In this paper, we show how architectural description techniques can be enriched to support the incremental and compositional construction of location-aware systems. In our approach, the process of integrating and managing mobility in architectural models of distributed systems is not intrusive on the options that are made at the level of the other two dimensions - computation and coordination. This means that a true separation of concerns between computation, coordination and distribution can be enforced at the level of architectural models. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Lisbon, Fac Sci, Dept Informat, P-1749016 Lisbon, Portugal.
   Univ Leicester, Dept Comp Sci, Leicester LEI 7RH, Leics, England.
C3 Universidade de Lisboa; University of Leicester
RP Lopes, A (corresponding author), Univ Lisbon, Fac Sci, Dept Informat, P-1749016 Lisbon, Portugal.
EM mal@di.fc.ul.pt; jose@fiadeiro.org
RI Lopes, Antonia/M-1755-2015
OI Lopes, Antonia/0000-0003-0688-3521
CR ALDRICH J, 2002, P 24 INT C SOFTW ENG
   Allen R., 1997, ACM Transactions on Software Engineering and Methodology, V6, P213, DOI 10.1145/258077.258078
   ANDRADE L, 2003, FORMAL METHODS RAILW
   Andrade LF, 2003, LECT NOTES COMPUT SC, V2804, P148
   BACK RJR, 1988, ACM T PROGR LANG SYS, V10, P513, DOI 10.1145/48022.48023
   Bettini L., 2002, P ACM SAC 2002 SPEC, P373, DOI 10.1145/508791.508862
   Boudol G, 2004, LECT NOTES COMPUT SC, V2986, P234
   BRUNI R, 2004, 3 IFIP INT C THEOR C, V1, P367
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   CIANCARINI P, 1998, UBLCS TECHNICAL REPO
   CORRADINI A, 2004, ELECT NOTES THEOR CO, V109, P111
   CORRELLESSA V, 2001, P WORKSH PROG SALADI
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   De Nicola R, 2005, LECT NOTES COMPUT SC, V3454, P157
   EGYED A, 2001, P 1 WORKSH DESCR SOF
   Fiadeiro J.L., 2004, CATEGORIES SOFTWARE
   FRANCALANZA A, 2005, THEORY SYSTEM BEHAV
   GRASSI V, 2004, LNCS, V3273, P10
   Lopes A, 2004, FORM ASP COMPUT, V16, P5, DOI 10.1007/s00165-003-0021-6
   Lopes A, 2003, LECT NOTES COMPUT SC, V2755, P343
   Lopes A, 2003, ACM T SOFTW ENG METH, V12, P64, DOI 10.1145/839268.839272
   Lopes A, 1999, LECT NOTES COMPUT SC, V1577, P144
   LOPES A, 2004, ENCTS, V97, P241
   Lopes Antonia, 2002, P 10 S FDN SOFTW ENG, P41
   MEDVIDOVIC N, 2001, P SOFTW ENG MOB WORK
   MONTANARI R, 2004, POLICY BASED DYNAMIC
   MORICONI M, 1995, IEEE T SOFTWARE ENG, V21, P356, DOI 10.1109/32.385972
   PICCO G, 1998, LNCS, V1301, P500
   Picco GP, 2001, MICROPROCESS MICROSY, V25, P65, DOI 10.1016/S0141-9331(01)00099-0
   Roman G.-C., 1997, ACM Transactions on Software Engineering and Methodology, V6, P250, DOI 10.1145/258077.258079
   Roman Gruia-Catalin., 2000, P 22 INT C SOFTWARE, P241
   Wermelinger M, 1999, LECT NOTES COMPUT SC, V1687, P393, DOI 10.1145/318774.319256
   Wermelinger M, 1998, IEEE T SOFTWARE ENG, V24, P331, DOI 10.1109/32.685257
   Wermelinger M., 2003, LNCS, V2793, P190
   White JE., 1997, Software Agents, P437
NR 35
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2006
VL 61
IS 2
BP 114
EP 135
DI 10.1016/j.scico.2005.10.010
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 049MM
UT WOS:000238020600003
DA 2024-07-18
ER

PT J
AU Comon-Lundh, H
   Cortier, V
AF Comon-Lundh, H
   Cortier, V
TI Security properties: two agents are sufficient
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th European Symposium on Programming (ESOP 2003)
CY APR 05-13, 2003
CL Warsaw, POLAND
DE cryptographic protocols; authentication; secrecy; agent identities; horn
   clauses
AB We consider an important family of cryptographic protocols and a class of security properties which encompasses secrecy and authentication. We show that it is always sufficient to consider a bounded number of agents b (b = 2 for secrecy properties for example): if there is an attack involving n agents, then there is an attack involving at most b agents. (C) 2003 Elsevier B.V. All rights reserved.
C1 Ecole Normale Super, CNRS, Lab Specificat & Verificat, INRIA, Cachan, France.
C3 Inria; Centre National de la Recherche Scientifique (CNRS)
RP Ecole Normale Super, CNRS, Lab Specificat & Verificat, INRIA, Cachan, France.
EM comon@lsv.ens-cachan.fr; cortier@lsv.ens-cachan.fr
CR Abadi Martin, 1997, P 4 ACM C COMP COMM, P36, DOI [10.1145/266420.266432, DOI 10.1145/266420.266432]
   ALLEN GC, 1993, CAN J ANAESTH, V40, P284, DOI 10.1007/BF03037043
   Amadio R., 2000, LECT NOTES COMPUTER, V1877, P380
   AMADIO R, 2002, LECT NOTES COMPUTER, V2421
   BARBUTI R, 1990, J LOGIC PROGRAM, V8, P201, DOI 10.1016/0743-1066(90)90023-X
   BLANCHET B, 2001, CSFW P 14 COMP SEC F
   BOZGA L, 2003, LECT NOTES COMPUTER, V2619
   CLARK J, SURVEY AUTHENTICATIO
   COMON H, 2001, LECT NOTES COMPUTER, V2076
   Comon H., 2002, Tree Automata Techniques and Applications
   COMON H, 2001, LSV0113
   COMONLUNDH H, 2002, LSV0210 ENS CACH LAB
   Cortier V, 2001, P IEEE CSFW, P97, DOI 10.1109/CSFW.2001.930139
   Denker G., 2000, SRICSL200002
   Durgin N., 1999, WORKSH FORM METH SEC
   EVEN S, 1983, P IEEE S FDN COMP SC
   Fabrega F. J. T., 1999, Journal of Computer Security, V7, P191
   FIORE M, 2001, P 14 IEEE COMP SEC F
   Heather J, 2000, P IEEE CSFW, P132, DOI 10.1109/CSFW.2000.856932
   HEATHER J, 2000, CSFW P 13 IEEE COMP
   JACQUEMARD F, 2000, LECT NOTES COMPUTER, V1955
   Lowe G., 1999, Journal of Computer Security, V7, P89
   Lowe G, 1996, SOFTWARE-CONC TOOL, V17, P93
   MILLEN J, 2000, RSP 21 IEEE COMP SOC
   Millen Jonathan., 2001, CCS '01: Proceedings of the 8th ACM conference on Computer and Communications Security, P166
   Paulson L. C., 1998, Journal of Computer Security, V6, P85
   Paulson LC, 1997, P IEEE CSFW, P84, DOI 10.1109/CSFW.1997.596790
   RUSINOWITCH M, 2001, 14 IEEE COMP SEC FDN
   Ryan P., 2000, MODELLING ANAL SECUR, Vfirst
   Stoller SD, 2001, IEEE S LOG, P61, DOI 10.1109/LICS.2001.932483
   [No title captured]
NR 31
TC 25
Z9 27
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2004
VL 50
IS 1-3
BP 51
EP 71
DI 10.1016/j.scico.2003.12.002
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 804AH
UT WOS:000220271100004
OA Bronze
DA 2024-07-18
ER

PT J
AU Edwards, SA
   Lee, EA
AF Edwards, SA
   Lee, EA
TI The semantics and execution of a synchronous block-diagram language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE heterogeneity; synchronous; software modules; execution; fixed points;
   embedded systems; coordination language; system of equations;
   relaxation; chaotic iteration
ID PROGRAMMING LANGUAGE; ALGORITHMS; SYSTEMS; ESTEREL
AB We present a new block diagram language for describing synchronous software. It coordinates the execution of synchronous, concurrent software modules, allowing real-time systems to be assembled from precompiled blocks specified in other languages. The semantics we present, based on fixed points, is deterministic even in the presence of instantaneous feedback. The execution policy develops a static schedule-a fixed order in which to execute the blocks that makes the system execution predictable.
   We present exact and heuristic algorithms for finding schedules that minimize system execution time, and show that good schedules can be found quickly. The scheduling algorithms are applicable to other problems where large systems of equations need to be solved. (C) 2002 Elsevier Science B.V. All rights reserved.
C1 Columbia Univ, New York, NY 10027 USA.
   Univ Calif Berkeley, Berkeley, CA 94720 USA.
C3 Columbia University; University of California System; University of
   California Berkeley
RP Columbia Univ, 1214 Amsterdam Ave, New York, NY 10027 USA.
EM sedwards@cs.columbia.edu; eal@eecs.berkeley.edu
RI Edwards, Stephen Anthony/HKP-1916-2023; Lee, Edward/AAU-4604-2021
OI Edwards, Stephen Anthony/0000-0003-2609-4861; Lee,
   Edward/0000-0002-5663-0584
CR [Anonymous], 1992, Semantics of programming languages: structures and techniques
   [Anonymous], 1986, Springer Series in Computational Mathematics
   [Anonymous], P S COMP AUT
   Balarin F., 1997, Hardware-Software Co-Design of Embedded Systems: The POLIS Approach
   BAUDET GM, 1978, J ACM, V25, P226, DOI 10.1145/322063.322067
   Bekic H., 1984, Programming Languages and Their Definition - Hans Bekic (1936-1982), P30, DOI [10.1007/BFb0048939, DOI 10.1007/BFB0048939]
   BENVENISTE A, 1990, IEEE T AUTOMAT CONTR, V35, P535, DOI 10.1109/9.53519
   BENVENISTE A, 1991, P IEEE, V79, P1270, DOI 10.1109/5.97297
   Benveniste A, 2000, INFORM COMPUT, V163, P125, DOI [10.1006/inco.2000.9999, 10.1006/inco.2000.2898]
   Berry G, 2000, FOUNDAT COMPUT, P425
   BERRY G, 1992, PHILOS T R SOC A, V339, P87, DOI 10.1098/rsta.1992.0027
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Berry G., 2000, ESTEREL V5 LANGUAGE
   BERRY G, 2000, FORM METHOD SYST DES, V17, P165
   Berry Gerard, 1999, The constructive semantics of pure Esterel.
   Bourdoncle F., 1993, LECT NOTES COMPUTER, V735
   Brace K.S., 1990, DAC, P40
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   BUCK JT, 1991, P CPLUSPLUS WORK C S
   Caspi P, 1999, IEEE T SOFTWARE ENG, V25, P416, DOI 10.1109/32.798329
   Caspi P., 1987, ACM S PRINC PROGR LA
   CASPI P, 1994, 7 INT C PAR DISTR CO
   CHIODO M, 1993, P INT WORKSH HARDW S
   COUDERT O, 1990, LECT NOTES COMPUT SC, V407, P365
   Cousot P., 1981, Program flow analysis. Theory and applications, P303
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   FRANK A, 1981, COMBINATORICA, V1, P145, DOI 10.1007/BF02579270
   HALBWACHS N, 1991, P IEEE, V79, P1305, DOI 10.1109/5.97300
   HALBWACHS N, 1991, LECT NOTES COMPUTER, V528
   Halbwachs Nicolas., 1993, Synchronous Programming of Reactive Systems
   LASSEZ JL, 1982, INFORM PROCESS LETT, V14, P112, DOI 10.1016/0020-0190(82)90065-5
   LEE EA, 1987, IEEE T COMPUT, V36, P24, DOI 10.1109/TC.1987.5009446
   LEE EA, 1987, P IEEE, V75, P1235, DOI 10.1109/PROC.1987.13876
   LEGUERNIC P, 1991, P IEEE, V79, P1321, DOI 10.1109/5.97301
   MALIK S, 1994, IEEE T COMPUT AID D, V13, P950, DOI 10.1109/43.293952
   MALIK S, 1993, 1993 IEEE/ACM INTERNATIONAL CONFERENCE ON COMPUTER-AIDED DESIGN - DIGEST OF TECHNICAL PAPERS, P618, DOI 10.1109/ICCAD.1993.580150
   MARANINCHI F, 1992, LECT NOTES COMPUT SC, V630, P550
   MARANINCHI F, 1991, P IEEE WORKSH VIS LA
   Shiple TR, 1996, EUR CONF DESIG AUTOM, P328, DOI 10.1109/EDTC.1996.494321
   URESIN A, 1990, J ACM, V37, P588, DOI 10.1145/79147.79162
   WEI JW, 1993, PARALLEL COMPUT, V19, P887, DOI 10.1016/0167-8191(93)90072-S
   Winskel G., 1993, The Formal Semantics of Programming Languages
   [No title captured]
NR 43
TC 52
Z9 57
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2003
VL 48
IS 1
BP 21
EP 42
AR PII S0167-6423(02)00096-5
DI 10.1016/S0167-6423(02)00096-5
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 690VN
UT WOS:000183571300002
OA Green Published, Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Kaluarachchi, T
   Wickramasinghe, M
AF Kaluarachchi, Thisaranie
   Wickramasinghe, Manjusri
TI <i>WebDraw:</i> A machine learning-driven tool for automatic website
   prototyping
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automatic website generation; Mock-up driven website generation; Website
   prototyping; Machine learning; DOM hierarchy construction
ID ALGORITHM
AB To overcome the time-consuming nature and improve the cost-effectiveness of classical web development, being automatic is the most convenient alternative recent researchers suggest. Over the years, researchers have been working on inventing new approaches to generating websites automatically. In this paper, a novel approach is presented that automates the website generation process by incorporating web designer best practices and driving new prototype websites without the significant effort of redesigning websites. It takes high-fidelity mock-up design artifacts such as screen captures of real-world websites, and generates functional websites similar to the input websites, which involves three steps: GUI element detection, classification, and code generation. First, image processing techniques are applied to detect atomic web GUI elements from a mock-up design artifact of a real-world website. Second, a Convolutional Neural Network (CNN) is trained to classify the extracted web GUI elements into their domain-specific types such as headings, paragraphs, images, etc. A Graphical User Interface (GUI) is typically represented in code as a hierarchical tree, with nested GUI elements bundled together within one another to construct a tree. A recursive algorithm is proposed that constructs the appropriate Document Object Model (DOM) hierarchy for a website by recursively grouping classified web GUI elements within each other. Finally, the constructed DOM is converted to the accurate native code. The approach was implemented as a tool called WebDraw. Design science research evaluation shows that WebDraw achieves an average of 90% web GUI element classification and generates website prototypes that are visually similar to the target website design mock-up artifact while producing functional GUI code. Furthermore, interviews with industry professionals illustrate WebDraw's industry relevance for improving their industrial web design and development workflows.
C1 [Kaluarachchi, Thisaranie; Wickramasinghe, Manjusri] Univ Colombo, Sch Comp, Colombo 0700, Sri Lanka.
C3 University of Colombo
RP Kaluarachchi, T (corresponding author), Univ Colombo, Sch Comp, Colombo 0700, Sri Lanka.
EM thisaranie@spc.cmb.ac.lk
RI Wickramasinghe, Manjusri/ADJ-4826-2022
OI Wickramasinghe, Manjusri/0000-0002-0725-5124
CR Asiroglu B, 2019, 2019 SCIENTIFIC MEETING ON ELECTRICAL-ELECTRONICS & BIOMEDICAL ENGINEERING AND COMPUTER SCIENCE (EBBT), DOI 10.1109/ebbt.2019.8741736
   Bajammal M, 2018, IEEE INT CONF AUTOM, P601, DOI 10.1145/3238147.3238194
   Bay H, 2008, COMPUT VIS IMAGE UND, V110, P346, DOI 10.1016/j.cviu.2007.09.014
   Beltramelli T, 2019, Hack your design sprint: wireframes to prototype in under 5 min
   Beltramelli T, 2018, PROCEEDINGS OF THE ACM SIGCHI SYMPOSIUM ON ENGINEERING INTERACTIVE COMPUTING SYSTEMS (EICS'18), DOI 10.1145/3220134.3220135
   Chen CY, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P665, DOI 10.1145/3180155.3180222
   Chen S, 2019, 2019 IEEE 1ST INTERNATIONAL WORKSHOP ON ARTIFICIAL INTELLIGENCE FOR MOBILE (AI4MOBILE '19), P13, DOI [10.1109/AI4Mobile.2019.8672718, 10.1109/ai4mobile.2019.8672718]
   Choudhary S. R., 2012, 2012 IEEE Fifth International Conference on Software Testing, Verification and Validation (ICST 2012), P171, DOI 10.1109/ICST.2012.97
   Choudhary S.R., 2010, P 2010 IEEE INT C SO, P1, DOI DOI 10.1109/ICSM.2010.5609723
   Conover W.J., 1999, Practical Nonparametric Statistics, V350
   Csurka G., 2004, Workshop on Statistical Learning in Computer Vision, ECCV, P59
   Ferreira J., 2021, P 16 INT JOINT C COM
   Girshick R, 2014, PROC CVPR IEEE, P580, DOI 10.1109/CVPR.2014.81
   Grissom R. J., 2005, EFFECT SIZES RES BRO
   Gu JX, 2018, PATTERN RECOGN, V77, P354, DOI 10.1016/j.patcog.2017.10.013
   Halbe A, 2015, PROCEDIA COMPUT SCI, V45, P197, DOI 10.1016/j.procs.2015.03.122
   Han Y, 2015, 2018 2ND INTERNATIONAL CONFERENCE ON ADVANCES IN ARTIFICIAL INTELLIGENCE (ICAAI 2018), P29, DOI 10.1145/3292448.3292455
   He KM, 2016, PROC CVPR IEEE, P770, DOI 10.1109/CVPR.2016.90
   Jiao LC, 2019, IEEE ACCESS, V7, P128837, DOI 10.1109/ACCESS.2019.2939201
   Kaluarachchi T, 2023, J COMPUT LANG, V75, DOI 10.1016/j.cola.2023.101202
   Kim B, 2018, PROCEEDINGS OF THE 2018 CONFERENCE ON RESEARCH IN ADAPTIVE AND CONVERGENT SYSTEMS (RACS 2018), P64, DOI 10.1145/3264746.3264807
   Kohonen T, 1995, HDB BRAIN THEORY NEU, P175, DOI [DOI 10.1007/978-3-642-97610-0_6, 10.1007/978-3-642-97610-0]
   Krizhevsky A, 2017, COMMUN ACM, V60, P84, DOI 10.1145/3065386
   Kumar A, 2018, Medium Insight
   Liu TF, 2018, UIST 2018: PROCEEDINGS OF THE 31ST ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P569, DOI 10.1145/3242587.3242650
   Liu YB, 2018, PROCEEDINGS OF 2018 IEEE INTERNATIONAL CONFERENCE ON AUTOMATION, ELECTRONICS AND ELECTRICAL ENGINEERING (AUTEEE), P220, DOI 10.1109/AUTEEE.2018.8720784
   Mahajan S, 2016, IEEE INT CONF SOFTW, P191, DOI 10.1109/ICST.2016.35
   Rivero JM, 2010, LECT NOTES COMPUT SC, V6385s, P13, DOI 10.1007/978-3-642-16985-4_2
   Moran K, 2020, IEEE T SOFTWARE ENG, V46, P196, DOI 10.1109/TSE.2018.2844788
   Natarajan S, 2018, 2018 IEEE/ACM 5TH INTERNATIONAL CONFERENCE ON MOBILE SOFTWARE ENGINEERING AND SYSTEMS (MOBILESOFT), P224, DOI 10.1145/3197231.3197249
   Newman Mark W., 2010, P 4 C DES INT SYST P, P263
   Nguyen BN, 2014, AUTOMAT SOFTW ENG, V21, P65, DOI 10.1007/s10515-013-0128-9
   Ozenc FK, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P2513
   Ozkaya I, 2019, IEEE SOFTWARE, V36, P3, DOI 10.1109/MS.2019.2910943
   Ren SQ, 2017, IEEE T PATTERN ANAL, V39, P1137, DOI 10.1109/TPAMI.2016.2577031
   Ruozi Huang, 2016, INT C SOFTW ENG KNOW, P589
   Ramon OS, 2016, INFORM SOFTWARE TECH, V70, P155, DOI 10.1016/j.infsof.2015.10.005
   Sinha N., 2013, P 2013 9 JOINT M FDN, P312, DOI DOI 10.1145/2491411.2491427
   Sketch2Code, 2019, Microsoft AI Labs
   Suleri S, 2019, CHI EA '19 EXTENDED ABSTRACTS: EXTENDED ABSTRACTS OF THE 2019 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3290607.3312994
   Szegedy C, 2015, PROC CVPR IEEE, P1, DOI 10.1109/CVPR.2015.7298594
   Thome J., 2014, P 7 INT WORKSH SEARC, P5, DOI DOI 10.1145/2593833.2593835
   Nguyen TA, 2015, IEEE INT CONF AUTOM, P248, DOI 10.1109/ASE.2015.32
   Wilkins Benjamin, 2017, Sketching Interfaces
   Williams RJ, 1989, NEURAL COMPUT, V1, P270, DOI 10.1162/neco.1989.1.2.270
   Xu Y, 2021, J SOFTW-EVOL PROC, V33, DOI 10.1002/smr.2369
   Young-Sun Yun, 2019, Sixth International Conference on Green and Human Information Technology. ICGHIT 2018. Proceedings: LNEE 502, P86, DOI 10.1007/978-981-13-0311-1_16
   Zeiler MD, 2014, LECT NOTES COMPUT SC, V8689, P818, DOI 10.1007/978-3-319-10590-1_53
   Zhao ZQ, 2019, IEEE T NEUR NET LEAR, V30, P3212, DOI 10.1109/TNNLS.2018.2876865
   Zhu ZH, 2019, LECT NOTES COMPUT SC, V11366, P181, DOI 10.1007/978-3-030-20876-9_12
   Zou Z., 2019, arXiv
NR 51
TC 0
Z9 0
U1 5
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103056
DI 10.1016/j.scico.2023.103056
EA DEC 2023
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EO0X4
UT WOS:001139760500001
DA 2024-07-18
ER

PT J
AU Nistala, P
   Rajbhoj, A
   Kulkarni, V
   Noronha, S
   Joshi, A
AF Nistala, Padmalata
   Rajbhoj, Asha
   Kulkarni, Vinay
   Noronha, Sapphire
   Joshi, Ankit
TI An industrial experience report on model-based, AI-enabled proposal
   development for an RFP/RFI
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE MDE; Meta-model; Document to models; Model to text; Proposal; RFP; RFI;
   Document parser; Knowledge driven; AI; NLP
AB Large organizations respond to huge volumes of Request for Proposals (RFP)/ Request for Information (RFI) every year. The process of developing a proposal for an RFP/ RFI is completely manual and time-, effort-, and intellect-intensive. While Model Driven Engineering (MDE) approaches have been popular in downstream Software Development Lifecycle (SDLC) phases to transform the design models into code, there has been a gap in leveraging model-based techniques in document-centric phases of proposal development, requirements analysis, etc. This paper presents an automated proposal development approach for a client-supplied RFP/RFI using a combination of model-based and AI-enabled techniques and describes the case study of its successful deployment to hundreds of presales users across multiple geographies. We explain the Proposal system and report on the experience of deploying the system in the industry, bring out its efficacy, and user feedback, and discuss the lessons learnt.
C1 [Nistala, Padmalata; Rajbhoj, Asha; Kulkarni, Vinay; Noronha, Sapphire; Joshi, Ankit] Tata Consultancy Serv, TCS Res, Mumbai, India.
C3 Tata Sons; Tata Consultancy Services Limited (TCS)
RP Nistala, P (corresponding author), Tata Consultancy Serv, TCS Res, Mumbai, India.
EM nistala.padma@tcs.com; asha.rajbhoj@tcs.com; vinay.vkulkarni@tcs.com
CR Allam AMN., 2012, International Journal of Research and Reviews in Information Sciences (IJRRIS), V2
   [Anonymous], ISO/IEC/IEEE 12207:2017 Systems and software engineering-Software life cycle processes
   antlr, ANTLR open source
   Bouziane A, 2015, PROCEDIA COMPUT SCI, V73, P366, DOI 10.1016/j.procs.2015.12.005
   Bucchiarone A, 2020, SOFTW SYST MODEL, V19, P5, DOI 10.1007/s10270-019-00773-6
   Cabot J, 2018, LECT NOTES COMPUT SC, V10748, P154, DOI 10.1007/978-3-319-74730-9_13
   Delp C, 2013, AEROSP CONF PROC
   docx4java, Docx4J Homepage
   Giudice D.L., 2016, How Ai Will Change Software Development and Applications
   Hochstetter J., 2012, P 15 C IB SOFTW ENG
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   Ikeda T., 1998, P COLING 1998
   Keszocze O, 2013, 2013 1ST INTERNATIONAL WORKSHOP ON NATURAL LANGUAGE ANALYSIS IN SOFTWARE ENGINEERING (NATURALISE), P31, DOI 10.1109/NAturaLiSE.2013.6611718
   Kolovos DS, 2014, LECT NOTES COMPUT SC, V8767, P420, DOI 10.1007/978-3-319-11653-2_26
   Kulkarni V, 2010, LECT NOTES COMPUT SC, V6395, P331
   Liu N., 2019, P 2019 INT C ART INT, P12
   Loopio website loopio, ABOUT US
   Lucene Homepage, ABOUT US
   Manchanda S, 2021, DATA MANAGEMENT ANAL, V1, P45
   MILLER GA, 1995, COMMUN ACM, V38, P39, DOI 10.1145/219717.219748
   mofa, ABOUT US
   Motahari-Nezhad HR, 2016, P ANN HICSS, P1691, DOI 10.1109/HICSS.2016.213
   Nicolás J, 2009, INFORM SOFTWARE TECH, V51, P1291, DOI 10.1016/j.infsof.2009.04.001
   Nistala PV, 2022, AUTOMAT SOFTW ENG, V29, DOI 10.1007/s10515-022-00324-2
   opennlp, OpenNLP Homepage
   Paech B., 2023, P REFSQ REQUIREMENTS, P16
   Philbin S., 2008, J. High Technol. Manag. Res., V19, P14
   Rajbhoj A., 2022, P 15 INN SOFTW ENG C, P1
   Rajbhoj A., 2023, P 45 IEEE ACM INT C, P10
   Rajbhoj A, 2019, PROCEEDINGS OF THE 12TH INNOVATIONS ON SOFTWARE ENGINEERING CONFERENCE (ISEC), DOI 10.1145/3299771.3299779
   Rajbhoj A, 2013, ASIA PAC SOFWR ENG, P123, DOI 10.1109/APSEC.2013.126
   Rfpio website, ABOUT US
   Tao Xie, 2018, Dependable Software Engineering. Theories, Tools, and Applications. 4th International Symposium, SETTA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 10998), P3, DOI 10.1007/978-3-319-99933-3_1
NR 33
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2024
VL 233
AR 103058
DI 10.1016/j.scico.2023.103058
EA NOV 2023
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CM5V9
UT WOS:001125690000001
DA 2024-07-18
ER

PT J
AU Cano-Genoves, C
   Insfran, E
   Abrahao, S
AF Cano-Genoves, C.
   Insfran, E.
   Abrahao, S.
TI VeGAn-Tool: A fuzzy-logic approach for value-based goal model analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Goal-oriented analysis technique; Value-based software engineering;
   Fuzzy logic
AB Goal-oriented analysis tools are used to assess goal models and assist analysts in decision -making. We introduce the VeGAn-Tool, which prioritizes goals according to their qualitative importance for the stakeholders and propagates this information in the goal model according to the different types of relationships. The FTOPSIS technique is used to calculate the value of each intentional element by employing the fuzzified importance (importance level fuzzified and refined by a confidence level) and the impact among the related intentional elements. The result is a prioritized goal model according to the value of each intentional element from the stakeholders' point of view.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Cano-Genoves, C.; Insfran, E.; Abrahao, S.] Univ Politecn Valencia, IUMTI, Valencia, Spain.
C3 Universitat Politecnica de Valencia
RP Cano-Genoves, C (corresponding author), Univ Politecn Valencia, IUMTI, Valencia, Spain.
EM carcage1@dsic.upv.es
OI Cano-Genoves, Carlos/0000-0001-5201-9449
CR Amyot D, 2010, INT J INTELL SYST, V25, P841, DOI 10.1002/int.20433
   Boehm B, 2006, VALUE-BASED SOFTWARE ENGINEERING, P3, DOI 10.1007/3-540-29263-2_1
   Cano-genoves Carlos, 2022, MODELS '22: Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings, P32, DOI 10.1145/3550356.3559089
   Cano-Genoves C., 2022, MODELSWARD 2022, P242
   Horkoff J, 2016, REQUIR ENG, V21, P29, DOI 10.1007/s00766-014-0209-8
   Horkoff J, 2013, REQUIR ENG, V18, P199, DOI 10.1007/s00766-011-0143-y
NR 6
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 103001
DI 10.1016/j.scico.2023.103001
EA JUL 2023
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA P5VA7
UT WOS:001051339900001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Pathade, K
   Khedker, U
AF Pathade, Komal
   Khedker, Uday
TI Computing maximum fixed point solutions over feasible paths in data flow
   analyses
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Compilers; Data flow analysis; Infeasible control flow paths; Static
   program analysis; Maximum fixed-point solution
ID SOUND
AB The control flow graph (CFG) representation of a procedure used by virtually all flow -sensitive program analyses, admits a large number of infeasible control flow paths i.e., these paths do not occur in any execution of the program. Hence the information reaching along infeasible paths in an analysis is spurious. This affects the precision of the conventional maximum fixed point (MFP) solution of the data flow analysis, because it includes the information reaching along all control flow paths. The existing approaches for removing this imprecision are either specific to a data flow problem with no straightforward generalization or involve control flow graph restructuring which may exponentially blow up the size of the CFG.We lift the notion of MFP solution to define the notion of feasible path MFP (FPMFP) solutions that exclude the data flowing along known infeasible paths. The notion of FPMFP is generic and does not involve CFG restructuring. Instead, it takes externally supplied information about infeasible paths and lifts any data flow analysis to an analysis that maintains the distinctions between different paths where these distinctions are beneficial, and ignores them where they are not. Thus it gets the benefit of a path-sensitive analysis where it is useful without performing a conventional path-sensitive analysis. Hence, an FPMFP solution is more precise than the corresponding MFP solution in most cases; it is guaranteed to be sound in each case.We implemented the proposed computation of feasible path MFP solutions for reaching definitions analysis and potentially uninitialized variable analysis. We evaluated the precision improvement in these two analyses by analyzing 30 benchmark applications selected from open source, industry, and SPEC CPU 2006. The evaluation results indicate that the precision improvement in these two analyses respectively reduces the number def-use pairs by up to 13.6% (average 2.87%, geometric mean 1.75%), and reduce the potentially uninitialized variable alarms by up to 100% (average 18.5%, geo. mean 3%). We found that the FPMFP computation time was 2.9x of the MFP computation time on average.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Pathade, Komal] TCS Res, Pune, India.
   [Khedker, Uday] Indian Inst Technol, Mumbai, India.
C3 Indian Institute of Technology System (IIT System); Indian Institute of
   Technology (IIT) - Bombay
RP Pathade, K (corresponding author), TCS Res, Pune, India.
EM komalpathade@gmail.com; uday@cse.iitb.ac.in
CR Aho A. V., 2003, COMPILERS PRINCIPLES, V2/e
   Ammons G, 2004, ACM SIGPLAN NOTICES, V39, P568, DOI 10.1145/989393.989451
   Ammons G, 1998, ACM SIGPLAN NOTICES, V33, P72, DOI 10.1145/277652.277665
   [Anonymous], 2017, TCS EMB COD AN
   Balakrishnan G, 2008, LECT NOTES COMPUT SC, V5079, P238
   BERTOLINO A, 1994, IEEE T SOFTWARE ENG, V20, P885, DOI 10.1109/32.368137
   Blackshear S, 2018, P ACM PROGRAM LANG, V2, DOI 10.1145/3276514
   Bodik R, 1997, ACM SIGPLAN NOTICES, V32, P146, DOI 10.1145/258916.258929
   Bodík R, 1997, LECT NOTES COMPUT SC, V1301, P361, DOI 10.1145/267896.267921
   Brat Guillaume, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P271, DOI 10.1007/978-3-319-10431-7_20
   Bueno PMS, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P209, DOI 10.1109/ASE.2000.873665
   Chen T, 2007, OASICS OPENACCESS SE, V1
   Das M, 2002, ACM SIGPLAN NOTICES, V37, P57, DOI 10.1145/543552.512538
   Delahaye Mickael, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P215, DOI 10.1109/ICST.2010.13
   Dhurjati D, 2006, LECT NOTES COMPUT SC, V4134, P425
   Dillig I, 2008, ACM SIGPLAN NOTICES, V43, P270, DOI 10.1145/1379022.1375615
   Dor N., 2004, Software Engineering Notes, V29, P12, DOI 10.1145/1013886.1007515
   Gong HQ, 2019, INT CONF SOFTW ENG, P282, DOI [10.1109/icsess47205.2019.9040767, 10.1109/ICSESS47205.2019.9040767]
   Hampapuram H., 2005, ACM SIGSOFT SOFTWARE, V31, P52, DOI 10.1145/1108768.1108808
   Handjieva M, 1998, LECT NOTES COMPUT SC, V1503, P200
   Hassanshahi B., 2017, P 6 ACM SIGPLAN INT, P13
   Hedley D., 1985, Proceedings of the 8th International Conference on Software Engineering (Cat. No.85CH2139-4), P259
   HOLLEY LH, 1981, IEEE T SOFTWARE ENG, V7, P60, DOI 10.1109/TSE.1981.234509
   Jiang SJ, 2019, IEEE ACCESS, V7, P68058, DOI 10.1109/ACCESS.2019.2918558
   Khedker U., 2009, Data Flow Analysis: Theory and Practice, V1st
   Lee E.W.S., 2019, INFEASIBLE PATH DETE
   Lee W, 2012, LECT NOTES COMPUT SC, V7148, P299, DOI 10.1007/978-3-642-27940-9_20
   Li T, 2022, ASPLOS '22: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P859, DOI 10.1145/3503222.3507770
   Li YF, 2020, ACTA PHYSIOL PLANT, V42, DOI 10.1007/s11738-020-03075-3
   MALEVRIS N, 1990, INFORM SOFTWARE TECH, V32, P115, DOI 10.1016/0950-5849(90)90110-D
   Marashdih AW, 2017, INT J ADV COMPUT SC, V8, P64
   Mauborgne L, 2005, LECT NOTES COMPUT SC, V3444, P5
   Muske T, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P187, DOI 10.1145/3213846.3213850
   Ngo M.N., 2007, Proceedings of the the 6th joint meeting of the European software engineering conference and the ACM SIGSOFT symposium on The foundations of software engineering, P215
   Oh H, 2016, ACM T PROGR LANG SYS, V38, DOI 10.1145/2821504
   Oh H, 2014, ACM SIGPLAN NOTICES, V49, P475, DOI [10.1145/2594291.2594318, 10.1145/2666356.2594318]
   Pathade K, 2019, PROCEEDINGS OF THE 28TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION (CC '19), P159, DOI 10.1145/3302516.3307349
   Pathade K, 2018, CC'18: PROCEEDINGS OF THE 27TH INTERNATIONAL CONFERENCE ON COMPILER CONSTRUCTION, P37, DOI 10.1145/3178372.3179497
   Rui C., 2006, THESIS CHINESE ACAD
   Rui Yang, 2011, Proceedings of the 2011 IEEE 13th International Symposium on High-Assurance Systems Engineering (HASE 2011), P17, DOI 10.1109/HASE.2011.12
   Sewell T., 2016, Proceedings of the 22nd Real-Time and Embedded Technology and Applications Symposium (RTAS'16), P1, DOI DOI 10.1109/RTAS.2016.7461326
   Sharir M., 1981, Program flow analysis. Theory and applications, P189
   Sui YL, 2014, IEEE T SOFTWARE ENG, V40, P107, DOI 10.1109/TSE.2014.2302311
   Tan TX, 2021, ANN IEEE INT CONF SE, DOI 10.1109/SECON52354.2021.9491614
   Thakur A, 2008, INT SYM CODE GENER, P55
   Wei Shiyi, 2015, 29 EUR C OBJ OR PROG
   Yichen Xie, 2003, Software Engineering Notes, V28, P327, DOI 10.1145/949952.940115
   Zeng F., 2017, INT C GEO SPATIAL KN, P294
   Zhang DL, 2013, ASIA PAC SOFWR ENG, P172, DOI 10.1109/APSEC.2013.33
   Zhu HL, 2019, IEEE ACCESS, V7, P15040, DOI 10.1109/ACCESS.2019.2894593
   Zhuang XT, 2006, INT SYMP MICROARCH, P113
NR 51
TC 0
Z9 0
U1 3
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2023
VL 228
AR 102944
DI 10.1016/j.scico.2023.102944
EA APR 2023
PG 48
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA F2UC3
UT WOS:000980939600001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Babur, O
   Cleophas, L
   van den Brand, M
AF Babur, Oender
   Cleophas, Loek
   van den Brand, Mark
TI SAMOS- A framework for model analytics and management
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven engineering; Model analytics; Software ecosystems;
   Information retrieval; Machine learning
ID CLONE DETECTION
AB The increased popularity and adoption of model-* engineering paradigms, such as model -driven and model-based engineering, leads to an increase in the number of models, metamodels, model transformations and other related artifacts. This calls for automated techniques to analyze large collections of those artifacts to manage model-* ecosystems. SAMOS is a framework to address this challenge: it treats model-* artifacts as data, and applies various techniques-ranging from information retrieval to machine learning-to analyze those artifacts in a holistic, scalable and efficient way. Such analyses can help to understand and manage those ecosystems.(c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Babur, Oender] Wageningen Univ & Res, Wageningen, Netherlands.
   [Babur, Oender; Cleophas, Loek; van den Brand, Mark] Eindhoven Univ Technol, Eindhoven, Netherlands.
   [Cleophas, Loek] Stellenbosch Univ, Matieland, South Africa.
C3 Wageningen University & Research; Eindhoven University of Technology;
   Stellenbosch University
RP Babur, O (corresponding author), Wageningen Univ & Res, Wageningen, Netherlands.; Babur, O (corresponding author), Eindhoven Univ Technol, Eindhoven, Netherlands.
EM Onder.Babur@wur.nl; L.G.W.A.Cleophas@tue.nl; M.G.J.v.d.Brand@tue.nl
RI Babur, Önder/HNI-9589-2023
OI Babur, Onder/0000-0002-1460-2825; van den Brand,
   Mark/0000-0003-3529-6182
CR Alalfi MH, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P295, DOI 10.1109/ICSM.2012.6405285
   [Anonymous], ATLANMOD ZOO
   Babur O., 2018, P MODELS 2018 WORKSH, P787
   Babur O., 2022, LANGUAGE USAGE UNPUB
   Babur O., 2019, LABELED ECORE METAMO, DOI [10.5281/zenodo.2585456, DOI 10.5281/ZENODO.2585456]
   Babur Ö, 2020, MODEL MANAGEMENT AND ANALYTICS FOR LARGE SCALE SYSTEMS, P273, DOI 10.1016/B978-0-12-816649-9.00021-1
   Babur Ö, 2018, PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P767, DOI 10.5220/0006735407670772
   Babur Ö, 2019, J COMPUT LANG, V51, P57, DOI 10.1016/j.cola.2018.12.002
   Babur Ö, 2018, LECT NOTES COMPUT SC, V10748, P129, DOI 10.1007/978-3-319-74730-9_10
   Babur Ö, 2017, LECT NOTES COMPUT SC, V10139, P510, DOI 10.1007/978-3-319-51963-0_40
   Babur Ö, 2016, IEEE INT CONF AUTOM, P888, DOI 10.1145/2970276.2975938
   Babur Ö, 2016, LECT NOTES COMPUT SC, V9764, P3, DOI 10.1007/978-3-319-42061-5_1
   Basciani F, 2016, LECT NOTES COMPUT SC, V9694, P342, DOI 10.1007/978-3-319-39696-5_21
   Damasceno CDN, 2021, 24TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2021), P285, DOI 10.1109/MODELS50736.2021.00036
   Manning C.D., 1999, FDN STAT NATURAL LAN
   Nikoo M.S., 2022, PEERJ COMPUT SCI, DOI [10.7717/peerj-cs.1046, DOI 10.7717/PEERJ-CS.1046]
   Sanderson M, 2010, NAT LANG ENG, V16, P100, DOI 10.1017/S1351324909005129
   Störrle H, 2013, SOFTW SYST MODEL, V12, P307, DOI 10.1007/s10270-011-0217-9
   Tekinerdogan B, 2020, MODEL MANAGEMENT AND ANALYTICS FOR LARGE SCALE SYSTEMS, P3, DOI 10.1016/B978-0-12-816649-9.00009-0
   Wille D, 2018, SCI COMPUT PROGRAM, V163, P62, DOI 10.1016/j.scico.2018.04.002
NR 20
TC 3
Z9 3
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102877
DI 10.1016/j.scico.2022.102877
EA SEP 2022
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5K5JW
UT WOS:000869763500002
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Alashqar, AM
AF Alashqar, Abdelkareem M.
TI Studying the commonalities, mappings and relationships between
   non-functional requirements using machine learning
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Non-functional requirements; Text classification; Machine learning;
   Confusion matrix; Principal component analysis
ID CLASSIFICATION
AB Studying the interactions and relationships between non-functional requirements (NFRs) is important when developing software applications. This is because that a specific NFR may conflict, overlap or complement other NFRs. Moreover, one NFR may include characteristics and features of other NFRs. Most of the current studies focused on classifying NFRs into distinct different categories without considering the common characteristics or the relationships between these categories. This paper provides a study on how the results of various machine learning (ML) classifiers can be visualized and analyzed with the help of confusion matrices and principal component analysis (PCA) tools in order to examine the commonalities, mappings and relationships between NFRs. And to define which NFRs are mostly distinct and which NFRs are mostly overlapping. The paper also defines which ML classifier achieves the best performance through various classifications of NFRs. The experiments were performed using five different ML classifiers on the newly expanded PROMISE dataset and the achievements of these classifiers are evaluated based on precision, recall and F1-Score metrics. The results of this research help practitioners and researchers in the field of software engineering to pay more attention on the behavior of various NFRs.
   (c) 2022 Elsevier B.V. All rights reserved.
C1 [Alashqar, Abdelkareem M.] Islamic Univ Gaza, Fac Informat Technol, POB 108, Gaza, Palestine.
C3 Islamic University Gaza
RP Alashqar, AM (corresponding author), Islamic Univ Gaza, Fac Informat Technol, POB 108, Gaza, Palestine.
EM aashgar@yahoo.com
CR Abad ZSH, 2017, INT REQUIR ENG CONF, P496, DOI 10.1109/RE.2017.36
   Aggarwal CharuC., 2012, MINING TEXT DATA, DOI [10.1007/978-1-4614-3223-4_6, DOI 10.1007/978-1-4614-3223-4_6]
   Alashqar A.M., 2021, INT J ENG INF SYST, V5, P29
   [Anonymous], 2011, ISO/IEC 25010:2011
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bengfort B., 2018, Applied text analysis with Python: Enabling language-aware data products with machine learning, V1st ed.
   Binkhonain M., 2019, EXPERT SYST APPL, V10
   Cleland-Huang J, 2007, REQUIR ENG, V12, P103, DOI 10.1007/s00766-007-0045-1
   COSMIC, 2020, NONF PROJ REQ COSMIC
   Canedo ED, 2020, ENTROPY-SWITZ, V22, DOI 10.3390/e22091057
   Hussain I, 2008, LECT NOTES COMPUT SC, V5039, P287
   Khan Aurangzeb, 2010, Journal of Advances in Information Technology, V1, P4, DOI 10.4304/jait.1.1.4-20
   Kowsari K, 2019, INFORMATION, V10, DOI 10.3390/info10040150
   Kurtanovic Z, 2017, INT REQUIR ENG CONF, P490, DOI 10.1109/RE.2017.82
   Lima M, 2019, PROCEEDINGS OF THE XXXIII BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, SBES 2019, P427, DOI 10.1145/3350768.3350776
   Lu Mengmeng., 2017, P 21 INT C EVALUATIO, P344, DOI [10.1145/3084226.3084241, DOI 10.1145/3084226.3084241]
   Mller A.C., 2016, INTRO MACHINE LEARNI
   Patra A., 2013, INT J COMPUT APPL, V75
   Rashwan A, 2013, P INT COMP SOFTW APP, P381, DOI 10.1109/COMPSAC.2013.64
   Sayyad Shirabad J., 2005, School of Information Technology and Engineering, P24
   Sommerville Ian, 2016, Software engineering 8
   Tharwat A, 2021, APPL COMPUT INFORM, V17, P168, DOI 10.1016/j.aci.2018.08.003
   Van Lamsweerde A., 2009, REQUIREMENTS ENG SYS, V10, P34
   Yang H., 2015, INT C SOFTW ENG KNOW, P7
   Zulzalil H, 2008, INT J COMPUT SCI NET, V8, P215
NR 25
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2022
VL 218
AR 102806
DI 10.1016/j.scico.2022.102806
EA MAR 2022
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 1D1JC
UT WOS:000793563300007
DA 2024-07-18
ER

PT J
AU Kosiol, J
   Strüber, D
   Taentzer, G
   Zschaler, S
AF Kosiol, Jens
   Strueber, Daniel
   Taentzer, Gabriele
   Zschaler, Steffen
TI Sustaining and improving graduated graph consistency: A static analysis
   of graph transformations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Graph consistency; Graph transformation systems; Graph repair;
   Evolutionary search
ID SYSTEMS
AB Where graphs are used for modelling and specifying systems, consistency is an important concern. To be a valid model of a system, the graph structure must satisfy a number of constraints. To date, consistency has primarily been viewed as a binary property: a graph either is or is not consistent with respect to a set of graph constraints. This has enabled the definition of notions such as constraint-preserving and constraint-guaranteeing graph transformations. Many practical applications-for example model repair or evolutionary search-implicitly assume a more graduated notion of consistency, but without an explicit formalisation only limited analysis of these applications is possible. In this paper, we introduce an explicit notion of consistency as a graduated property, depending on the number of constraint violations in a graph. We present two new characterisations of transformations (and transformation rules) enabling reasoning about the gradual introduction of consistency: while consistency-sustaining transformations do not decrease the consistency level, consistency-improving transformations strictly reduce the number of constraint violations. We show how these new definitions refine the existing concepts of constraint-preserving and constraint-guaranteeing transformations. To support a static analysis based on our characterisations, we present criteria for deciding which form of consistency-ensuring transformations is induced by the application of a transformation rule. We validate our contributions in the context of an application in search-based model engineering. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Kosiol, Jens; Taentzer, Gabriele] Philipps Univ Marburg, Marburg, Germany.
   [Strueber, Daniel] Radboud Univ Nijmegen, Nijmegen, Netherlands.
   [Zschaler, Steffen] Kings Coll London, London, England.
C3 Philipps University Marburg; Radboud University Nijmegen; University of
   London; King's College London
RP Kosiol, J (corresponding author), Philipps Univ Marburg, Marburg, Germany.
EM kosiolje@informatik.uni-marburg.de; d.strueber@cs.ru.nl;
   taentzer@informatik.uni-marburg.de; szschaler@acm.org
OI Zschaler, Steffen/0000-0001-9062-6637; Kosiol, Jens/0000-0003-4733-2777
FU German Research Foundation (DFG) [413074939]
FX We thank the anonymous reviewers for their helpful comments. This work
   was partially funded by the German Research Foundation (DFG), project
   "Triple Graph Grammars (TGG) 2.0" and research fellowship with project
   number 413074939.
CR Arendt T, 2010, LECT NOTES COMPUT SC, V6394, P121
   Becker Basil, 2011, Theory and Practice of Model Transformations. Proceedings of the 4th International Conference, ICMT 2011, P123, DOI 10.1007/978-3-642-21732-6_9
   Behr N, 2020, ELECTRON P THEOR COM, P126, DOI 10.4204/EPTCS.330.8
   Bowman M, 2010, IEEE T SOFTWARE ENG, V36, P817, DOI 10.1109/TSE.2010.70
   Burdusel A, 2019, 2019 ACM/IEEE 22ND INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2019), P106, DOI 10.1109/MODELS.2019.00-10
   Burdusel A, 2018, 21ST ACM/IEEE INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS: COMPANION PROCEEDINGS (MODELS-COMPANION '18), P12, DOI 10.1145/3270112.3270130
   Dyck J, 2017, LECT NOTES COMPUT SC, V10373, P142, DOI 10.1007/978-3-319-61470-0_9
   Ehrig H, 2015, MONOGR THEOR COMPUT, P1, DOI 10.1007/978-3-662-47980-3
   Ehrig H., 2006, MONO THEOR COMP SCI, DOI 10.1007/3-540-31188-2
   Fleck M, 2016, J SOFTW-EVOL PROC, V28, P1081, DOI 10.1002/smr.1804
   Fleck Martin, 2016, P TTC 2016 CEUR WORK, V1758, P1
   Ghamarian Amir Hossein, 2012, International Journal on Software Tools for Technology Transfer, V14, P15, DOI 10.1007/s10009-011-0186-x
   Habel A, 2018, LECT NOTES COMPUT SC, V11176, P431, DOI 10.1007/978-3-030-04771-9_31
   Habel A, 2009, MATH STRUCT COMP SCI, V19, P245, DOI 10.1017/S0960129508007202
   Heckel R., 2020, Graph transformation for software engineers, DOI DOI 10.1007/978-3-030-43916-3_9
   Jensen Mikkel T, 2004, Journal of Mathematical Modelling and Algorithms, V3, P323, DOI DOI 10.1023/B:JMMA.0000049378.57591.C6
   Kehrer T, 2016, LECT NOTES COMPUT SC, V9765, P173, DOI 10.1007/978-3-319-42064-6_12
   Kosiol Jens, 2019, Recent Trends in Algebraic Development Techniques. 24th IFIP WG 1.3 International Workshop, WADT 2018. Revised Selected Papers: Lecture Notes in Computer Science (LNCS 11563), P139, DOI 10.1007/978-3-030-23220-7_8
   Kosiol J., 2020, LECT NOTES COMPUTER, V2150, P239
   Lambers L, 2006, LECT NOTES COMPUT SC, V4178, P61
   Lambers L, 2019, J LOG ALGEBR METHODS, V103, P105, DOI 10.1016/j.jlamp.2018.11.004
   Lambers L, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P716, DOI 10.1145/3180155.3180258
   Nassar N, 2020, J LOG ALGEBR METHODS, V114, DOI 10.1016/j.jlamp.2020.100564
   Nassar N, 2017, LECT NOTES COMPUT SC, V10374, P171, DOI 10.1007/978-3-319-61473-1_12
   Nassar Nebras, 2017, GCM
   Nebras N, 2019, LECT NOTES COMPUT SC, V11629, P177, DOI 10.1007/978-3-030-23611-3_11
   Nuseibeh B, 2001, J SYST SOFTWARE, V58, P171, DOI 10.1016/S0164-1212(01)00036-X
   Ohrndorf M, 2021, ACM T SOFTW ENG METH, V30, DOI 10.1145/3419017
   Plump D, 2005, LECT NOTES COMPUT SC, V3838, P280
   Sandmann C, 2019, ELECTRON P THEOR COM, P87, DOI 10.4204/EPTCS.309.5
   Schneider Sven, 2019, Fundamental Approaches to Software Engineering. 22nd International Conference, FASE 2019. Held as Part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2019. Proceedings: Lecture Notes in Computer Science (11424), P151, DOI 10.1007/978-3-030-16722-6_9
   Semeráth O, 2017, LECT NOTES COMPUT SC, V10374, P138, DOI 10.1007/978-3-319-61473-1_10
   Stevens P, 2014, LECT NOTES COMPUT SC, V8411, P32
   Strüber D, 2017, LECT NOTES COMPUT SC, V10374, P121, DOI 10.1007/978-3-319-61473-1_9
   Strüber D, 2017, LECT NOTES COMPUT SC, V10373, P196, DOI 10.1007/978-3-319-61470-0_12
   Taentzer G, 2017, LECT NOTES COMPUT SC, V10202, P283, DOI 10.1007/978-3-662-54494-5_16
NR 36
TC 5
Z9 5
U1 2
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102729
DI 10.1016/j.scico.2021.102729
EA OCT 2021
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000006
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Miller, DM
   Dueck, GW
AF Miller, D. Michael
   Dueck, Gerhard W.
TI Function translations and search-based transformation for MVL reversible
   circuit synthesis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multiple-valued logic; Reversible circuits; Quantum circuits;
   Transformation-based synthesis; Circuit simplification
AB Two new function translations and a novel bounded search transformation-based synthesis approach that finds a reversible circuit implementation for a given 3-valued reversible function are presented. Methods for simplifying the circuit post-synthesis and quantum circuit implementation constraints are also considered. Experimental results for all 2-input 3-valued functions show the effectiveness of the new approaches compared to earlier transformation-based synthesis approaches. Other examples are given to show both the effectiveness and limitations of the new approaches which point to a number of key areas for further research. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Miller, D. Michael] Univ Victoria, Dept Comp Sci, POB 1700 STN CSC, Victoria, BC V8W 2Y2, Canada.
   [Dueck, Gerhard W.] Univ New Brunswick, Fac Comp Sci, POB 4400, Fredericton, NB E3B 5A3, Canada.
C3 University of Victoria; University of New Brunswick
RP Miller, DM (corresponding author), Univ Victoria, Dept Comp Sci, POB 1700 STN CSC, Victoria, BC V8W 2Y2, Canada.
EM mmiller@uvic.ca; gdueck@unb.ca
OI Dueck, Gerhard/0000-0001-5396-4629; Miller, Michael/0000-0002-4140-3370
FU Natural Sciences and Engineering Research Council of Canada [RGPIN
   6455-2014]
FX The authors gratefully acknowledge the very detailed comments and
   suggestions from the anonymous reviewers. Their feedback has greatly
   helped improve the presentation of the results in this paper. This work
   was partly supported by research grant RGPIN 6455-2014 from the Natural
   Sciences and Engineering Research Council of Canada.
CR Barbieri C., 2018, 13 INT WORKSH BOOL P
   BARENCO A, 1995, PHYS REV A, V52, P3457, DOI 10.1103/PhysRevA.52.3457
   Chuang I., 2000, Quantum Information and Quantum Computation
   Hawash M.M., 2014, THESIS PORTLAND STAT
   Hawash M, 2012, INT SYM MVL, P63, DOI 10.1109/ISMVL.2012.49
   Kole A, 2017, INT SYM MVL, P179, DOI 10.1109/ISMVL.2017.51
   Miller DM, 2006, J MULT-VALUED LOG S, V12, P431
   Miller DM, 2020, LECT NOTES COMPUT SC, V12227, P218, DOI 10.1007/978-3-030-52482-1_13
   Miller DM, 2004, INT SYM MVL, P74
   Miller DM, 2003, DES AUT CON, P318
   Muthukrishnan A, 2000, PHYS REV A, V62, DOI 10.1103/PhysRevA.62.052309
   Resch S., 2019, ARXIV190507240V3QUAN
   Shende VV, 2002, IEEE/ACM INTERNATIONAL CONFERENCE ON CAD-02, DIGEST OF TECHNICAL PAPERS, P353, DOI 10.1109/ICCAD.2002.1167558
   Soeken M, 2016, IEEE INT SYMP CIRC S, P2290, DOI 10.1109/ISCAS.2016.7539041
   Toorma P., 2002, Natural Computing, V1, P199, DOI 10.1023/A:1016543713037
   Wille R, 2009, I CONF VLSI DESIGN, P189, DOI 10.1109/VLSI.Design.2009.40
NR 16
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2021
VL 212
AR 102704
DI 10.1016/j.scico.2021.102704
EA JUL 2021
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA UW4HG
UT WOS:000700118500002
DA 2024-07-18
ER

PT J
AU Autili, M
   Di Salle, A
   Gallo, F
   Pompilio, C
   Tivoli, M
AF Autili, Marco
   Di Salle, Amleto
   Gallo, Francesco
   Pompilio, Claudio
   Tivoli, Massimo
TI CHOReVOLUTION: Service choreography in practice
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 21st IFIP WG 6.1 International Conference on Coordination Models and
   Languages (COORDINATION) Held as Part of the 14th International
   Federated Conference on Distributed Computing Techniques (DisCoTec)
CY JUN 17-21, 2019
CL Kongens Lyngby, DENMARK
SP Int Federat Informat Proc WG 6 1, Tech Univ Denmark, Dept Appl Math & Comp Sci, Nord IoT Hub
DE Service choreographies; Distributed computing; Distributed coordination;
   Automated synthesis
AB This paper presents CHOReVOLUTION, a platform for the tool-assisted realization and execution of distributed applications. CHOReVOLUTION specifically targets service-oriented systems specified through service choreographies. It offers an Integrated Development and Runtime Environment (IDRE) organized into three layers, namely, front-end, back-end, and cloud. It comprises a wizard-aided development environment and a system monitoring console in the front-end layer, and a back-end for managing the deployment and execution of the choreographed system on the cloud. We describe the IDRE by using an industrial use case in the domain of Smart Mobility & Tourism, and finally we provide details on its experimental evaluation. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Autili, Marco; Di Salle, Amleto; Gallo, Francesco; Pompilio, Claudio; Tivoli, Massimo] Univ Aquila, Dept Informat Engn Comp Sci & Math, Via Vetoio Snc, Laquila, Italy.
C3 University of L'Aquila
RP Di Salle, A (corresponding author), Univ Aquila, Dept Informat Engn Comp Sci & Math, Via Vetoio Snc, Laquila, Italy.
EM marco.autili@univaq.it; amleto.disalle@univaq.it;
   francesco.gallo@univaq.it; claudio.pompilio@univaq.it;
   massimo.tivoli@univaq.it
RI Tivoli, Massimo/A-7289-2008; AUTILI, Marco/AAG-7127-2020
OI AUTILI, Marco/0000-0001-5951-1567; TIVOLI, Massimo/0000-0001-9290-1997;
   DI SALLE, AMLETO/0000-0002-0163-9784; Pompilio,
   Claudio/0000-0002-7925-6943
FU Italian Ministry of Economy and Finance [135/2012]; SISMA national
   research project - MIUR under the PRIN program [201752ENYB]; ConnectPA
   national research project - Regione Abruzzo under the POR FSER Abruzzo
   2014-2020 program
FX This work was supported by the (i) Italian Ministry of Economy and
   Finance, Cipe resolution n. 135/2012 (project INCIPICT - INnovating CIty
   Planning through Information and Communication Technologies), (ii) SISMA
   national research project, which has been funded by the MIUR under the
   PRIN program (Contract 201752ENYB), and (iii) ConnectPA national
   research project, funded by Regione Abruzzo under the POR FSER Abruzzo
   2014-2020 program.
CR [Anonymous], 2011, P WWW 2011, DOI DOI 10.1145/1963405.1963516
   Autili M, 2019, SAC '19: PROCEEDINGS OF THE 34TH ACM/SIGAPP SYMPOSIUM ON APPLIED COMPUTING, P1701, DOI 10.1145/3297280.3297446
   Autili M, 2019, LECT NOTES COMPUT SC, V11533, P92, DOI 10.1007/978-3-030-22397-7_6
   Autili M, 2018, ECSA 2018: PROCEEDINGS OF THE 12TH EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE: COMPANION PROCEEDINGS, DOI 10.1145/3241403.3241425
   Autili M, 2018, SCI COMPUT PROGRAM, V160, P3, DOI 10.1016/j.scico.2017.10.010
   Autili M, 2013, LECT NOTES COMPUT SC, V7793, P37, DOI 10.1007/978-3-642-37057-1_4
   Basu S, 2016, LECT NOTES COMPUT SC, V9633, P13, DOI 10.1007/978-3-662-49665-7_2
   Basu S, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P191
   Bouloukakis G., 2017, THESIS
   Carbone M, 2013, ACM SIGPLAN NOTICES, V48, P263, DOI 10.1145/2480359.2429101
   Chen L, 2017, IEEE VTS VEH TECHNOL
   Corradini F, 2018, SCI COMPUT PROGRAM, V166, P35, DOI 10.1016/j.scico.2018.05.008
   European Commission, 2017, DIG AG EUR FUT INT R
   Güdemann M, 2016, IEEE T SERV COMPUT, V9, P647, DOI 10.1109/TSC.2015.2413401
   Hernández-Muñoz JM, 2011, LECT NOTES COMPUT SC, V6656, P447, DOI 10.1007/978-3-642-20898-0_32
   Hu DerekHao., 2008, AAAI, P1363
   Lanese Ivan, 2015, Software, Services and Systems: Essays Dedicated to Martin Wirsing on the Occasion of his Retirement from the Chair of Programming and Software Engineering: LNCS 8950, P506
   Leite L, 2014, 2014 IEEE 13TH INTERNATIONAL SYMPOSIUM ON NETWORK COMPUTING AND APPLICATIONS (NCA 2014), P121, DOI 10.1109/NCA.2014.25
   Poizat P., 2012, P 27 ANN ACM S APPL, P1927, DOI [10.1145/2245276.2232095, DOI 10.1145/2245276.2232095]
NR 19
TC 8
Z9 8
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102498
DI 10.1016/j.scico.2020.102498
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CO
UT WOS:000572347300006
DA 2024-07-18
ER

PT J
AU Beohar, H
   König, B
   Küpper, S
   Silva, A
AF Beohar, Harsh
   Koenig, Barbara
   Kuepper, Sebastian
   Silva, Alexandra
TI Conditional transition systems with upgrades
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 12th International Symposium on Theoretical Aspects of Software
   Engineering (TASE)
CY SEP 13-15, 2017
CL Sophia Antipolis, FRANCE
SP IEEE Comp Soc, i3S, UCA JEDI, Inria, IEEE, TSCE, GDR GPL
DE Conditional transition systems; Software product lines; BDDs; Features;
   Bisimulation
AB We introduce a variant of transition systems, where activation of transitions depends on conditions of the environment and upgrades during runtime potentially create additional transitions. Using a cornerstone result in lattice theory, we show that such transition systems can be modelled in two ways: as conditional transition systems (CTS) with a partial order on conditions, or as lattice transition systems (LaTS), where transitions are labelled with the elements from a distributive lattice. We define equivalent notions of bisimilarity for both variants and characterise them via a bisimulation game.
   We explain how conditional transition systems are related to featured transition systems for the modelling of software product lines. Furthermore, we show how to compute bisimilarity symbolically via BDDs by defining an operation on BDDs that approximates an element of a Boolean algebra into a lattice. We have implemented our procedure and provide runtime results.
   This is an extended version of the TASE 2017 paper [1], including all proofs, additional examples, an extension of the formalism to account for deactivation of updates and detailed runtime results. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Beohar, Harsh; Koenig, Barbara] Univ Duisburg Essen, Essen, Germany.
   [Kuepper, Sebastian] Fern Univ Hagen, Hagen, Germany.
   [Silva, Alexandra] UCL, London, England.
C3 University of Duisburg Essen; Fern University Hagen; University of
   London; University College London
RP Beohar, H (corresponding author), Univ Duisburg Essen, Essen, Germany.
EM harsh.beohar@uni-due.de; barbara_koenig@uni-due.de;
   sebastian.kuepper@fernuni-hagen.de; alexandra.silva@ucl.ac.uk
FU DFG project BEMEGA [KO 2185/7-2]; ERC Starting Grant ProFoundNet
   [679127]; European Research Council (ERC) [679127] Funding Source:
   European Research Council (ERC)
FX We thank Filippo Bonchi and Mathias Flulsbusch for interesting
   discussions on earlier drafts. This research is partially supported by
   DFG project BEMEGA (KO 2185/7-2) and ERC Starting Grant ProFoundNet
   (grant agreement 679127).
CR Adámek J, 2012, LECT NOTES COMPUT SC, V7213, P58, DOI 10.1007/978-3-642-28729-9_4
   Andersen H.R., 1997, INTRO BINARY DECISIO
   Areces C, 2018, J LOGIC COMPUT, V28, P1443, DOI 10.1093/logcom/exy022
   Areces C, 2015, LOG J IGPL, V23, P601, DOI 10.1093/jigpal/jzv020
   Atlee JM, 2015, FME WORKS FORM, P20, DOI 10.1109/FormaliSE.2015.11
   Baldan P., 2002, Algebraic Methodology and Software Technology. 9th International Conference, AMAST 2002. Proceedings (Lecture Notes in Computer Science Vol.2422), P254
   Belohlavek R, 2012, FUND INFORM, V115, P279, DOI 10.3233/FI-2012-656
   Beohar H., 2017, IEEE XPLORE
   Beohar H, 2018, LOG METH COMPUT SCI, V14, DOI 10.23638/LMCS-14(1:19)2018
   Chrszon P, 2016, LECT NOTES COMPUT SC, V9633, P287, DOI 10.1007/978-3-662-49665-7_17
   Classen A., 2010, P ICSE 10
   Classen A., 2011, P ICSE 11
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Cordy M., 2013, Lecture Notes in Computer Science, V7740, P1, DOI [DOI 10.1007/978-3-642-36249, 10.1007/978-3-642-36249-1_1, DOI 10.1007/978-3-642-36249-1_1]
   Cordy M, 2012, PROC INT CONF SOFTW, P672, DOI 10.1109/ICSE.2012.6227150
   Crochemore M, 2011, INFORM COMPUT, V209, P692, DOI 10.1016/j.ic.2011.01.002
   Davey B. A., 2002, INTRO LATTICES ORDER, V2nd, DOI DOI 10.1017/CBO9780511809088
   Droste M, 2009, MONOGR THEOR COMPUT, P1, DOI 10.1007/978-3-642-01492-5
   Dubslaff Clemens, 2014, MODULARITY 14 MODULA, P169, DOI [10.1145/2577080.2577095, DOI 10.1145/2577080.2577095]
   Eleftheriou PE, 2012, J LOGIC COMPUT, V22, P213, DOI 10.1093/logcom/exq005
   Fitting M., 2002, ADV MODAL LOGIC, V4, P97
   Gabbay DM, 2013, COGN TECHNOL, P1, DOI 10.1007/978-3-642-41389-6_1
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   HENNESSY M, 1995, THEOR COMPUT SCI, V138, P353, DOI 10.1016/0304-3975(94)00172-F
   Hülsbusch M, 2012, LECT NOTES COMPUT SC, V7213, P361, DOI 10.1007/978-3-642-28729-9_24
   Kanig B., 2017, EPTCS, V250
   KOHOUT LJ, 1985, INFORM SCIENCES, V37, P25, DOI 10.1016/0020-0255(85)90004-0
   Kupferman O, 2010, INT J FOUND COMPUT S, V21, P167, DOI 10.1142/S0129054110007192
   Larsen K., 1986, THESIS
   Lity Sascha, 2013, Technical Report
   Lochau M, 2017, SOFTW SYST MODEL, V16, P125, DOI 10.1007/s10270-015-0470-4
   Metzger A, 2014, SPRACHE SPRACHEN, P75
   Nguyen Truong Khanh, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P326, DOI 10.1007/978-3-642-32759-9_28
   Northrop L., 2001, SOFTWARE PRODUCT LIN
   Polterrnann K., 2017, THESIS
   Rensink A, 2000, INFORM COMPUT, V156, P345, DOI 10.1006/inco.1999.2818
   Stirling C., 1997, BISIMULATION MODEL C
   ter Beek M.H., 2015, P 19 INT C SOFTWARE, P11, DOI DOI 10.1145/2791060.2791087
   ter Beek MH, 2016, J LOG ALGEBR METHODS, V85, P287, DOI 10.1016/j.jlamp.2015.11.006
NR 39
TC 3
Z9 3
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2020
VL 186
AR 102320
DI 10.1016/j.scico.2019.102320
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA JU4MS
UT WOS:000501652300002
OA Green Submitted, Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Vassallo, C
   Grano, G
   Palomba, F
   Gall, HC
   Bacchelli, A
AF Vassallo, Carmine
   Grano, Giovanni
   Palomba, Fabio
   Gall, Harald C.
   Bacchelli, Alberto
TI A large-scale empirical exploration on refactoring activities in open
   source software projects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Refactoring; Software Evolution; Software Maintenance
ID IDENTIFICATION; SMELL
AB Refactoring is a well-established practice that aims at improving the internal structure of a software system without changing its external behavior. Existing literature provides evidence of how and why developers perform refactoring in practice. In this paper, we continue on this line of research by performing a large-scale empirical analysis of refactoring practices in 200 open source systems. Specifically, we analyze the change history of these systems at commit level to investigate: (i) whether developers perform refactoring operations and, if so, which are more diffused and (ii) when refactoring operations are applied, and (iii) which are the main developer-oriented factors leading to refactoring. Based on our results, future research can focus on enabling automatic support for less frequent refactorings and on recommending refactorings based on the developer's workload, project's maturity and developer's commitment to the project. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Vassallo, Carmine; Grano, Giovanni; Palomba, Fabio; Gall, Harald C.; Bacchelli, Alberto] Univ Zurich, Zurich, Switzerland.
C3 University of Zurich
RP Vassallo, C (corresponding author), Univ Zurich, Zurich, Switzerland.
EM vassallo@ifi.uzh.ch; grano@ifi.uzh.ch; palomba@ifi.uzh.ch;
   gall@ifi.uzh.ch; bacchelli@ifi.uzh.ch
RI Grano, Giovanni/ABA-1024-2021; Bacchelli, Alberto/ABG-5379-2020
OI Grano, Giovanni/0000-0002-8207-3259; Bacchelli,
   Alberto/0000-0003-0193-6823; Gall, Harald/0000-0002-3874-5628; Palomba,
   Fabio/0000-0001-9337-5116
CR Alshayeb M, 2009, INFORM SOFTWARE TECH, V51, P1319, DOI 10.1016/j.infsof.2009.04.002
   Ammerlaan E, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P504, DOI 10.1109/SANER.2015.7081865
   [Anonymous], PRACTICAL NONPARAMET
   [Anonymous], 2017, EMPIRICAL SOFTWARE E
   [Anonymous], 2007, P WORKSH REF TOOLS W
   [Anonymous], 2016, 2016 IEEE 24th International Conference on Program Comprehension (ICPC)
   [Anonymous], 2010, APACHE OPEN OFFICE R
   Atkinson DC, 2005, 12TH ASIA-PACIFIC SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P663, DOI 10.1109/APSEC.2005.76
   Baeza-Yates Ricardo, 1999, MODERN INFORM RETRIE, V463
   Bavota G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P104, DOI 10.1109/SCAM.2012.20
   Bavota G., 2014, Recommendation Systems in Software Engineering, P387
   Bavota G, 2015, J SYST SOFTWARE, V107, P1, DOI 10.1016/j.jss.2015.05.024
   Bavota G, 2014, IEEE T SOFTWARE ENG, V40, P671, DOI 10.1109/TSE.2013.60
   Bavota G, 2013, PROC IEEE INT CONF S, P280, DOI 10.1109/ICSM.2013.39
   Bernstein A., 2010, P 18 ACM SIGSOFT INT, P97
   Bird C., 2011, P 19 ACM SIGSOFT S 1, P4, DOI DOI 10.1145/2025113.2025119
   Buse RPL, 2010, IEEE T SOFTWARE ENG, V36, P546, DOI 10.1109/TSE.2009.70
   CASAIS E, 1992, LECT NOTES COMPUT SC, V615, P114, DOI 10.1007/BFb0053033
   Cedrim D, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P465, DOI 10.1145/3106237.3106259
   Charmaz K., 2007, Blackwell Encyclopaedia of Sociology Online, DOI [DOI 10.1002/9781405165518.WBEOSG070, DOI 10.1002/9781405165518.WBEOSG070.PUB2]
   Cheung S.-C., 2011, P 19 ACM SIGSOFT S 1, P15
   Collins C., 2011, Android in Practice
   D'Ambros Marco, 2010, Proceedings of the Tenth International Conference on Quality Software (QSIC 2010), P23, DOI 10.1109/QSIC.2010.58
   Fischer M, 2003, PROC IEEE INT CONF S, P23, DOI 10.1109/ICSM.2003.1235403
   Fokaefs M, 2012, J SYST SOFTWARE, V85, P2241, DOI 10.1016/j.jss.2012.04.013
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Gatrell M, 2015, SCI COMPUT PROGRAM, V102, P44, DOI 10.1016/j.scico.2014.12.002
   Grissom R. J., 2005, EFFECT SIZES RES BRO
   Kataoka Y, 2002, PROC IEEE INT CONF S, P576, DOI 10.1109/ICSM.2002.1167822
   Kerievsky J., 2004, REFACTORING PATTERNS
   Khalilpour KR, 2016, GREEN ENERGY TECHNOL, P41, DOI 10.1007/978-981-287-652-2_3
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Kim M, 2014, IEEE T SOFTWARE ENG, V40, P633, DOI 10.1109/TSE.2014.2318734
   Ligu E, 2013, PROC IEEE INT CONF S, P392, DOI 10.1109/ICSM.2013.55
   Lin B, 2017, IEEE INT WORK C SO, P81, DOI 10.1109/SCAM.2017.17
   Maruyama K., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P236, DOI 10.1109/ICSE.1999.841013
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Moore I, 1996, ACM SIGPLAN NOTICES, V31, P235, DOI 10.1145/236338.236361
   Moser R, 2008, LECT NOTES COMPUT SC, V5082, P252
   Murphy-Hill E, 2012, IEEE T SOFTWARE ENG, V38, P5, DOI 10.1109/TSE.2011.41
   Negara S, 2013, LECT NOTES COMPUT SC, V7920, P552, DOI 10.1007/978-3-642-39038-8_23
   O'Keeffe M, 2006, 10TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P247
   Opdyke William F., 1992, THESIS
   Palomba F, 2018, IEEE T SOFTWARE ENG, V44, P977, DOI 10.1109/TSE.2017.2752171
   Palomba F, 2017, PROC IEEE INT CONF S, P1, DOI 10.1109/ICSME.2017.12
   Palomba F, 2017, INT C PROGRAM COMPRE, P176, DOI 10.1109/ICPC.2017.38
   Palomba F, 2015, IEEE T SOFTWARE ENG, V41, P462, DOI 10.1109/TSE.2014.2372760
   Parnas D. L., 1994, ICSE-16. 16th International Conference on Software Engineering (Cat. No.94CH3409-0), P279, DOI 10.1109/ICSE.1994.296790
   Roberts D., 1997, Theory and Practice of Object Systems, V3, P253, DOI 10.1002/(SICI)1096-9942(1997)3:4<253::AID-TAPO3>3.0.CO;2-T
   Seaman C., 2012, Proceedings 2012 Third International Workshop on Managing Technical Debt (MTD 2012), P45, DOI 10.1109/MTD.2012.6225999
   Silva D, 2017, IEEE WORK CONF MIN S, P269, DOI 10.1109/MSR.2017.14
   Silva D, 2016, FSE'16: PROCEEDINGS OF THE 2016 24TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON FOUNDATIONS OF SOFTWARE ENGINEERING, P858, DOI 10.1145/2950290.2950305
   Simon F, 2001, FIFTH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P30, DOI 10.1109/CSMR.2001.914965
   Stroggylos K., 2007, P 5 INT WORKSH SOFTW, P10, DOI [10.1109/WOSQ.2007.11, DOI 10.1109/WOSQ.2007.11]
   Stroulia E, 2001, OOIS 2001: 7TH INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED INFORMATION SYSTEMS, PROCEEDINGS, P113
   Suryanarayana G., 2014, Refactoring for Software Design Smells: Managing Technical Debt
   Szoke G, 2014, IEEE INT WORK C SO, P95, DOI 10.1109/SCAM.2014.18
   Tom E, 2013, J SYST SOFTWARE, V86, P1498, DOI 10.1016/j.jss.2012.12.052
   Tsantalis N, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P329
   Tsantalis N, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P483, DOI 10.1145/3180155.3180206
   Tsantalis N, 2011, J SYST SOFTWARE, V84, P1757, DOI 10.1016/j.jss.2011.05.016
   Tsantalis N, 2009, IEEE T SOFTWARE ENG, V35, P347, DOI 10.1109/TSE.2009.1
   Tufano M, 2017, IEEE T SOFTWARE ENG, V43, P1063, DOI 10.1109/TSE.2017.2653105
   Tufano M, 2016, IEEE INT CONF AUTOM, P4, DOI 10.1145/2970276.2970340
   Wang Y, 2009, PROC IEEE INT CONF S, P413, DOI 10.1109/ICSM.2009.5306290
   Xing Z., 2005, 20 IEEEACM INT C AUT, P54, DOI DOI 10.1145/1101908.1101919
   Xing ZC, 2006, PROC IEEE INT CONF S, P458
NR 67
TC 27
Z9 29
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2019
VL 180
BP 1
EP 15
DI 10.1016/j.scico.2019.05.002
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA IR8XM
UT WOS:000481724800001
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Yin, J
   Tan, G
   Li, H
   Bai, XL
   Wang, YP
   Hu, SM
AF Yin, Jie
   Tan, Gang
   Li, Hao
   Bai, Xiaolong
   Wang, Yu-Ping
   Hu, Shi-Min
TI Debugopt: Debugging fully optimized natively compiled programs using
   multistage instrumentation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Debugging; Multistage instrumentation; Hot patching
AB The accuracy of debugging information is crucial for source level debugging. However the debugging information may be inaccurate after sophisticated optimizations if the target program is compiled into native code. Hence, the efficiency of diagnosing software is affected due to inaccurate debugging information.
   To address the issue, we propose Debugopt, a framework for debugging fully optimized natively compiled programs using multistage instrumentation. At compile time, Debugopt generates unoptimized programs with accurate debugging information and optimized programs. At debugging time, Debugopt dynamically replaces the execution of optimized programs with unoptimized programs. Debugopt is implemented on multiple architectures, including x86-32, x86-64, armv7 and mips3. Debugopt's overhead is small during normal execution on a large range of benchmarks. (C) 2018 Published by Elsevier B.V.
C1 [Yin, Jie; Li, Hao; Bai, Xiaolong; Wang, Yu-Ping; Hu, Shi-Min] Tsinghua Univ, Dept Comp Sci & Technol, Beijing, Peoples R China.
   [Tan, Gang] Penn State Univ, Dept Comp Sci & Engn, Sch Elect Engn & Comp Sci, University Pk, PA 16802 USA.
C3 Tsinghua University; Pennsylvania Commonwealth System of Higher
   Education (PCSHE); Pennsylvania State University; Pennsylvania State
   University - University Park
RP Yin, J (corresponding author), Tsinghua Univ, Dept Comp Sci & Technol, Beijing, Peoples R China.
EM writalnaie@163.com
RI Hu, Shi-Min/AAW-1952-2020
OI Wang, Yu-Ping/0000-0003-4129-7704; Tan, Gang/0000-0001-6109-6091
CR Anton Ertl M., 2003, The Journal of Instruction-Level Parallelism, V5, P1
   ARM, 2001, ARM ARCHITECTURE REF
   Arora N, 2013, IEEE INT CONF AUTOM, P742, DOI 10.1109/ASE.2013.6693147
   Béra C, 2016, J OBJECT TECHNOL, V15, DOI 10.5381/jot.2016.15.2.a1
   Bernat A.R., 2011, P 10 ACM SIGPLAN SIG, P9, DOI [10.1145/2024569.2024572, DOI 10.1145/2024569.2024572]
   Bolz CF, 2015, SCI COMPUT PROGRAM, V98, P408, DOI 10.1016/j.scico.2013.02.001
   Bolz Carl Friedrich, 2009, P 4 WORKSH IMPL COMP, P18, DOI [10.1145/1565824.1565827, DOI 10.1145/1565824.1565827]
   Bruening D, 2003, INT SYM CODE GENER, P265, DOI 10.1109/CGO.2003.1191551
   Bungale PP, 2007, VEE'07: PROCEEDINGS OF THE THIRD INTERNATIONAL CONFERENCE ON VIRTUAL EXECUTION ENVIRONMENTS, P137
   Coady Y., 2001, Software Engineering Notes, V26, P88, DOI 10.1145/503271.503223
   Cohn R, 1997, PROCEEDINGS OF THE USENIX WINDOWS NT WORKSHOP, P17
   D.D.I.F. Committee, DWARF DEB INF FORM
   Eaddy M, 2007, LECT NOTES COMPUT SC, V4829, P200
   Feiner P, 2012, ASPLOS XVII: SEVENTEENTH INTERNATIONAL CONFERENCE ON ARCHITECTURAL SUPPORT FOR PROGRAMMING LANGUAGES AND OPERATING SYSTEMS, P135
   Guckenheimer S., 2006, MICROSOFT NET DEV SE
   HOLZLE U, 1992, SIGPLAN NOTICES, V27, P32, DOI 10.1145/143103.143114
   Humer C, 2015, ACM SIGPLAN NOTICES, V50, P123, DOI 10.1145/2658761.2658776
   Jaramillo C, 2000, LECT NOTES COMPUT SC, V1824, P240
   Kiczales G., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P327
   Kotzmann T, 2008, ACM T ARCHIT CODE OP, V5, DOI 10.1145/1369396.1370017
   Kumar N, 2009, INT SYM CODE GENER, P275, DOI 10.1109/CGO.2009.28
   Lattner C, 2004, INT SYM CODE GENER, P75, DOI 10.1109/CGO.2004.1281665
   Lueck G., 2012, Proceedings of the Tenth International Symposium on Code Generation and Optimization, CGO '12, P114, DOI DOI 10.1145/2259016.2259032226
   Luk CK, 2005, ACM SIGPLAN NOTICES, V40, P190, DOI 10.1145/1064978.1065034
   Marr S, 2015, ACM SIGPLAN NOTICES, V50, P821, DOI [10.1145/2814270.2814275, 10.1145/2858965.2814275]
   Muth R, 2001, SOFTWARE PRACT EXPER, V31, P67, DOI 10.1002/1097-024X(200101)31:1<67::AID-SPE357>3.0.CO;2-A
   Necula GC, 2002, LECT NOTES COMPUT SC, V2304, P213
   Nethercote N, 2007, ACM SIGPLAN NOTICES, V42, P89, DOI 10.1145/1273442.1250746
   Olszewski M., 2007, Operating Systems Review, V41, P3, DOI 10.1145/1272998.1273000
   Seaton C., 2014, P WORKSHOP DYNAMIC L, P1
   Shi Y., 2008, ACM T ARCHIT CODE OP, V4, P2, DOI DOI 10.1145/1328195.1328197
   SRIVASTAVA A, 1994, SIGPLAN NOTICES, V29, P196, DOI 10.1145/773473.178260
   Stallman Richard., 2002, Debugging with GDB
   Van Put L, 2005, 2005 IEEE INTERNATIONAL SYMPOSIUM ON SIGNAL PROCESSING AND INFORMATION TECHNOLOGY (ISSPIT), VOLS 1 AND 2, P7
   Wrthinger T., 2013, P 2013 ACM INT S NEW, P187, DOI [10.1145/2509578.2509581, DOI 10.1145/2509578.2509581]
   Würthinger T, 2013, ACM SIGPLAN NOTICES, V48, P73, DOI 10.1145/2480360.2384587
   Yin H., 2010, UCKECS20103
   Yin J, 2016, SOFTWARE PRACT EXPER, V46, P341, DOI 10.1002/spe.2313
   Zeng JY, 2015, ACM SIGPLAN NOTICES, V50, P147, DOI [10.1145/2817817.2731201, 10.1145/2731186.2731201]
NR 39
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2019
VL 169
BP 18
EP 32
DI 10.1016/j.scico.2018.09.005
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HB8RJ
UT WOS:000451358000002
DA 2024-07-18
ER

PT J
AU Araujo, H
   Carvalho, G
   Mohaqeqi, M
   Mousavi, MR
   Sampaio, A
AF Araujo, Hugo
   Carvalho, Gustavo
   Mohaqeqi, Morteza
   Mousavi, Mohammad Reza
   Sampaio, Augusto
TI Sound conformance testing for cyber-physical systems: Theory and
   implementation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cyber-physical systems; Model-based testing; Conformance testing;
   Soundness; Reachability analysis
ID TEST-GENERATION; COMPUTATION
AB Conformance testing is a formal and structured approach to verifying system correctness. We propose a conformance testing algorithm for cyber-physical systems, based on the notion of hybrid conformance by Abbas and Fainekos. We show how the dynamics of system specification and the sampling rate play an essential role in making sound verdicts. We specify and prove error bounds that lead to sound test-suites for a given specification and a given sampling rate. We use reachability analysis to find such bounds and implement the proposed approach using the CORA toolbox in Matlab. We apply the implemented approach on a case study from the automotive domain. (C) 2017 The Author(s). Published by Elsevier B.V.
C1 [Araujo, Hugo; Carvalho, Gustavo; Sampaio, Augusto] Univ Fed Pernambuco, Recife, PE, Brazil.
   [Mohaqeqi, Morteza] Uppsala Univ, Uppsala, Sweden.
   [Mousavi, Mohammad Reza] Halmstad Univ, Halmstad, Sweden.
   [Mousavi, Mohammad Reza] Univ Leicester, Leicester, Leics, England.
C3 Universidade Federal de Pernambuco; Uppsala University; Halmstad
   University; University of Leicester
RP Mousavi, MR (corresponding author), Halmstad Univ, Halmstad, Sweden.; Mousavi, MR (corresponding author), Univ Leicester, Leicester, Leics, England.
EM hlsa@cin.ufpe.br; ghpc@cin.ufpe.br; morteza.mohaqeqi@it.uu.se;
   m.r.mousavi@hh.se; acas@cin.ufpe.br
RI Mousavi, Mohammad Reza/A-3410-2013
OI Mousavi, Mohammad Reza/0000-0002-4869-6794
FU Swedish Research Council (Vetenskapsradet) [621-2014-5057]; Swedish
   Knowledge Foundation (Stiftelsen for Kunskaps- och Kompetensutveckling)
   in the context of the AUTO-CAAS HoG project [20140312]; ELLIIT Strategic
   Research Area; CIn-UFPE/Motorola cooperation project; CNPq
   [303022/2012-4, 132332/2015-9]
FX The work of M.R. Mousavi has been partially supported by the Swedish
   Research Council (Vetenskapsradet) award number: 621-2014-5057
   (Effective Model-Based Testing of Concurrent Systems), the Swedish
   Knowledge Foundation (Stiftelsen for Kunskaps- och Kompetensutveckling)
   in the context of the AUTO-CAAS HoG project (number: 20140312), and the
   ELLIIT Strategic Research Area.; The work of Hugo Araujo, Gustavo
   Carvalho and Augusto Sampaio was partially supported by the
   CIn-UFPE/Motorola cooperation project, as well as CNPq grants
   303022/2012-4 and 132332/2015-9.
CR Abbas Houssam, 2014, 2014 Twelfth ACM/IEEE Conference on Formal Methods and Models for Codesign (MEMOCODE), P155, DOI 10.1109/MEMCOD.2014.6961854
   Abbas H., 2015, THESIS
   Abbas H, 2014, ACM IEEE INT CONF CY, P211, DOI 10.1109/ICCPS.2014.6843724
   Aerts A, 2015, LECT NOTES COMPUT SC, V9399, P563, DOI 10.1007/978-3-319-25150-9_32
   Althoff M., 2010, THESIS
   Althoff M, 2011, IEEE DECIS CONTR P, P6814, DOI 10.1109/CDC.2011.6160872
   Althoff M, 2010, NONLINEAR ANAL-HYBRI, V4, P233, DOI 10.1016/j.nahs.2009.03.009
   [Anonymous], 2015, An introduction to cora 2015
   [Anonymous], 2004, MULTIPARAMETRIC TOOL
   [Anonymous], 1997, COMPUTER CONTROLLED
   Bournez O, 1999, LECT NOTES COMPUT SC, V1569, P46
   Broy M., 2005, Lecture Notes in Computer Science, V3472
   Chen X., 2015, Ph.D. dissertation
   Cook JA, 2006, ASIAN J CONTROL, V8, P237, DOI 10.1111/j.1934-6093.2006.tb00275.x
   Cuijpers P.J.L., 2002, HYBRID TRANSITION SY
   Dang T., MONOGRAPH MODEL BASE
   Deshmukh JV, 2015, LECT NOTES COMPUT SC, V9207, P234, DOI 10.1007/978-3-319-21668-3_14
   Fainekos GE, 2007, LECT NOTES COMPUT SC, V4763, P147
   Girard A, 2008, LECT NOTES COMPUT SC, V4981, P215
   Goebel R, 2009, IEEE CONTR SYST MAG, V29, P28, DOI 10.1109/MCS.2008.931718
   Jin X., 2014, P 17 INT C HYBR SYST, P253
   Khakpour Narges, 2015, LIPIcs, V42, P18, DOI 10.
   Lafferriere G, 2001, J SYMB COMPUT, V32, P231, DOI 10.1006/jsco.2001.0472
   Mohaqeqi M., 2016, P 1 INT WORKSH VER V, V232, P53
   Mohaqeqi M., 2016, TASE 2016
   Mohaqeqi M., 2014, ECEASST, V70
   Rungger M, 2016, IEEE T AUTOMAT CONTR, V61, P2108, DOI 10.1109/TAC.2015.2492438
   Sontag ED, 2008, LECT NOTES MATH, V1932, P163
   Stursberg O, 2003, LECT NOTES COMPUT SC, V2623, P482
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Tretmans J, 1996, SOFTWARE-CONC TOOL, V17, P103
   van Osch M, 2009, THESIS
   van Osch M, 2006, LECT NOTES COMPUT SC, V4262, P70
   Yannakakis M., 1999, Computer Science Logic. 12th International Workshop, CSL'98. Annual Conference of the EACSL. Proceedings, P29
NR 34
TC 11
Z9 13
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2018
VL 162
SI SI
BP 35
EP 54
DI 10.1016/j.scico.2017.07.002
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GJ1UM
UT WOS:000435053400003
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Bergel, A
   Infante, A
   Maass, S
   Alcocer, JPS
AF Bergel, Alexandre
   Infante, Alejandro
   Maass, Sergio
   Sandoval Alcocer, Juan Pablo
TI Reducing resource consumption of expandable collections: The Pharo case
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Collection; Pharo; Lua; Profiling; Experiment
AB Expandable collections are collections whose size may vary as elements are added and removed. Hash maps and ordered collections are popular expandable collections. Expandable collection classes offer an easy-to-use API, however this apparent simplicity is accompanied by a significant amount of wasted resources.
   We describe some improvements of the collection library to reduce the amount of waste associated with collection expansions. We have designed two new collection libraries for the Pharo programming language that exhibit better resource management than the standard library. We improved the Pharo collection library using two complementary perspectives.
   First, across a basket of 5 applications, our optimized collection library significantly reduces the memory footprint of the collections: (i) the amount of intermediary internal array storage by 73%, (ii) the number of allocated bytes by 67% and (iii) the number of unused bytes by 72%. This reduction of memory is accompanied by a speedup of about 3% for most of our benchmarks.
   Second, we looked for an alternative to the classical expandable collection. The Lua programming language offers a unique abstract data type called table. We designed, implemented, and introduced this data type in the Pharo programming language and we ran a number of micro and macro-benchmarks. Overall, replacing the standard Pharo collection library by one inspired on Lua's table data type results in an execution speedup of up to 15% and a reduction of the memory consumption by up to 19%.
   We analyzed the collection implementations of Java, C#, Scala, and Ruby: these implementations largely behave like Pharo's, therefore with the same limitations. Our results are thus likely to benefit designers of future programming languages and collection libraries. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Bergel, Alexandre; Infante, Alejandro; Maass, Sergio; Sandoval Alcocer, Juan Pablo] Univ Chile, DCC, Pleiad Lab, Santiago, Chile.
   [Sandoval Alcocer, Juan Pablo] Univ Mayor San Simon, Cochabamba, Bolivia.
C3 Universidad de Chile; Universidad Mayor de San Simon
RP Bergel, A (corresponding author), Univ Chile, DCC, Pleiad Lab, Santiago, Chile.
EM abergel@dcc.uchile.cl
RI Sandoval Alcocer, Juan Pablo/CAA-0465-2022; Sandoval Alcocer, Juan
   Pablo/AGK-7291-2022
OI Sandoval Alcocer, Juan Pablo/0000-0002-8335-4351; 
FU LAM Research; CONICYT, Chile; CONICYT-PCHA/Doctorado Nacional para
   extranjeros [2013-63130199]; CONICYT-PCHA/MagisterNacional
   [2015-22150809]
FX We gratefully thank LAM Research for its financial support. Juan Pablo
   Sandoval Alcocer is supported by a Ph.D. scholarship from CONICYT,
   Chile. CONICYT-PCHA/Doctorado Nacional para extranjeros/2013-63130199.
   Alejandro Infante is supported by
   CONICYT-PCHA/MagisterNacional/2015-22150809.
CR [Anonymous], 2013, DEEP PHARO
   Bacon DF, 2003, ACM SIGPLAN NOTICES, V38, P285, DOI 10.1145/640128.604155
   Bergel A, 2012, COMPUT LANG SYST STR, V38, P16, DOI 10.1016/j.cl.2011.10.002
   Bhattacharya S, 2011, LECT NOTES COMPUT SC, V6813, P408, DOI 10.1007/978-3-642-22655-7_19
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Bolz CF, 2013, ACM SIGPLAN NOTICES, V48, P167, DOI [10.1145/2544173.2509531, 10.1145/2509136.2509531]
   Bruni C., 2011, THESIS
   Cassou D, 2009, COMPUT LANG SYST STR, V35, P2, DOI 10.1016/j.cl.2008.05.004
   Chen G, 2003, ACM SIGPLAN NOTICES, V38, P282, DOI 10.1145/949343.949330
   Chis AE, 2011, LECT NOTES COMPUT SC, V6813, P383, DOI 10.1007/978-3-642-22655-7_18
   Cook William R., 2009, SIGPLAN Notices, V44, P557, DOI 10.1145/1639949.1640133
   Ducasse S, 2009, LECT NOTES BUS INF P, V33, P252
   Georges A, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P57
   Gil J. Y., 2011, P ACM INT C COMP OBJ, P191, DOI [10.1145/2048147.2048201, DOI 10.1145/2048147.2048201]
   Joannou S, 2011, LECT NOTES COMPUT SC, V6630, P447
   Kagedal A., 1996, TECH REP
   Kalibera T, 2013, PROCEEDINGS OF THE ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON MEMORY MANAGEMENT (ISMM '13), P63
   Mazur N., 2001, Logic Programming. 17th International Conference, ICLP 2001. Proceedings (Lecture Notes in Computer Science Vol.2237), P105
   Mitchell N, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P245
   Mytkowicz T, 2009, ACM SIGPLAN NOTICES, V44, P265, DOI 10.1145/1508284.1508275
   Nistor A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P562, DOI 10.1109/ICSE.2013.6606602
   Odersky M., 2009, P 29 IARCS ANN C FDN, V4, P427, DOI DOI 10.4230/LIPICS.FSTTCS.2009.2338
   Potanin A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P742, DOI 10.1109/ICSE.2013.6606620
   Sartor JB, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P471, DOI 10.1145/1806596.1806649
   Shacham O, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P408, DOI 10.1145/1542476.1542522
   Shirazi J., 2002, JAVA PERFORMANCE TUN, V2nd
   Wilson PR, 1995, LECT NOTES COMPUT SC, V986, P1
   Wilson S., 2000, JAVA PLATFORM PERFOR
   Wolfmaier K., 2010, P 1 WORKSH TEST OBJ, DOI 10.1145/1890692.1890696
   Xu GQ, 2012, ACM SIGPLAN NOTICES, V47, P1017, DOI 10.1145/2398857.2384690
   Xu GQ, 2013, LECT NOTES COMPUT SC, V7920, P1, DOI 10.1007/978-3-642-39038-8_1
   Xu GQ, 2012, LECT NOTES COMPUT SC, V7313, P738, DOI 10.1007/978-3-642-31057-7_32
NR 32
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2018
VL 161
SI SI
BP 34
EP 56
DI 10.1016/j.scico.2017.12.009
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI7ZZ
UT WOS:000434742900004
DA 2024-07-18
ER

PT J
AU Merz, S
   Vanzetto, H
AF Merz, Stephan
   Vanzetto, Hernan
TI Encoding TLA<SUP>+</SUP> into unsorted and many-sorted first-order logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Interactive theorem proving; Set theory; Many-sorted first-order logic;
   TLA(+); Formal verification of distributed systems
AB TLA(+) is a specification language designed for the verification of concurrent and distributed algorithms and systems. We present an encoding of a non-temporal fragment of TLA(+) into (unsorted) first-order logic and many-sorted first-order logic, the input languages of first order automated theorem provers. The non-temporal subset of TLA(+) is based on untyped set theory and includes functions, arithmetic expressions, and Hilbert's choice operator. The translation, based on encoding techniques such as boolification, injection of unsorted expressions into sorted languages, term rewriting, and abstraction, is the core component of a back-end prover based on first-order theorem provers and SMT solvers for the TLA(+) Proof System. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Merz, Stephan] Univ Lorraine, LORIA, Inria, CNRS, Nancy, France.
   [Vanzetto, Hernan] Yale Univ, New Haven, CT 06520 USA.
C3 Universite de Lorraine; Centre National de la Recherche Scientifique
   (CNRS); Inria; Yale University
RP Vanzetto, H (corresponding author), Yale Univ, New Haven, CT 06520 USA.
FU MSR-Inria Joint Centre; Agence Nationale de la Recherche
   [ANR-13-IS02-0001]; Agence Nationale de la Recherche (ANR)
   [ANR-13-IS02-0001] Funding Source: Agence Nationale de la Recherche
   (ANR)
FX This work was partially supported by the MSR-Inria Joint Centre and by
   project ANR-13-IS02-0001 (SMArT) of the Agence Nationale de la
   Recherche.
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], 1970, Computational Problems in Abstract Algebra, DOI DOI 10.1016/B978-0-08-012975-4.50028-X
   [Anonymous], STUDIES CONSTRUCTIVE
   Avigad J., 2002, ACM T COMPUT LOG, DOI 10.1145/772062.772068
   Azaiez S, 2016, LECT NOTES COMPUT SC, V9675, P70, DOI 10.1007/978-3-319-33600-8_4
   Azmy Noran, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P109, DOI 10.1007/978-3-642-38574-2_7
   Azmy N, 2016, LECT NOTES COMPUT SC, V9675, P86, DOI 10.1007/978-3-319-33600-8_5
   Baader F., 1999, Term Rewriting and All that, P223
   Barrett C., 2010, The satisfiability modulo theories library
   Blanchette JC, 2013, J AUTOM REASONING, V51, P109, DOI 10.1007/s10817-013-9278-5
   Conchon S, 2014, LECT NOTES COMPUT SC, V8477, P294, DOI 10.1007/978-3-662-43652-3_27
   Conchon S, 2008, ELECTRON NOTES THEOR, V198, P51, DOI 10.1016/j.entcs.2008.04.080
   Cousineau D., 2012, LECT NOTES COMPUTER, V7436, P147, DOI 10.1007/978-3-642-32759-914
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Deharbe David, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P194, DOI 10.1007/978-3-642-30885-7_14
   Delahaye David, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P274, DOI 10.1007/978-3-642-45221-5_20
   Douceur J. R., 2011, MSRTR201119
   Grabowski A, 2010, J FORMALIZ REASON, V3, P153
   Hansen D., 2012, LNCS, V7321, P24, DOI 10.1007/978-3-642-30729-43
   HUET G, 1980, J ACM, V27, P797, DOI 10.1145/322217.322230
   Jackson P. B., 2009, PROVING SPARK VERIFI
   Konrad M., 2012, TECHNICAL REPORT
   Lamport L, 1999, ACM T PROGR LANG SYS, V21, P502, DOI 10.1145/319301.319317
   Lamport L., 2002, SPECIFYING SYSTEMS T
   Manzano M., 2005, EXTENSIONS 1 ORDER L
   Mentre David, 2012, Abstract State Machines, Alloy, B, VDM, and Z. Proceedings Third International Conference, ABZ 2012, P238, DOI 10.1007/978-3-642-30885-7_17
   Merz S., 2012, SCI TECHNOLOGY, P53
   Merz S, 2016, LECT NOTES COMPUT SC, V9675, P54, DOI 10.1007/978-3-319-33600-8_3
   Merz S, 2014, LECT NOTES COMPUT SC, V8430, P143, DOI 10.1007/978-3-319-06200-6_11
   Merz S, 2012, LECT NOTES COMPUT SC, V7180, P289, DOI 10.1007/978-3-642-28717-6_23
   Nonnengart Andreas., 2001, HDB AUTOMATED REASON, VI, P335
   PAULSON LC, 1993, J AUTOM REASONING, V11, P353, DOI 10.1007/BF00881873
   Plagge Daniel, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P372, DOI 10.1007/978-3-642-32759-9_31
   Sutcliffe G, 2009, J AUTOM REASONING, V43, P337, DOI 10.1007/s10817-009-9143-8
   Urban J, 2003, LECT NOTES COMPUT SC, V2594, P203
   Weidenbach C., 1999, HDB AUTOMATED REASON, V2, P1965
   Zheng YH, 2017, FORM METHOD SYST DES, V50, P249, DOI 10.1007/s10703-016-0263-6
NR 38
TC 2
Z9 2
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2018
VL 158
BP 3
EP 20
DI 10.1016/j.scico.2017.09.004
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GE4CX
UT WOS:000431163000002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Grewe, S
   Erdweg, S
   Pacak, A
   Raulf, M
   Mezini, M
AF Grewe, Sylvia
   Erdweg, Sebastian
   Pacak, Andre
   Raulf, Michael
   Mezini, Mira
TI Exploration of language specifications by compilation to first-order
   logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Type systems; Formal specification; Declarative languages; First-order
   theorem proving; Domain-specific languages
AB Exploration of language specifications helps to discover errors and inconsistencies early during the development of a programming language. We propose exploration of language specifications via application of existing automated first-order theorem provers (ATPs). To this end, we translate language specifications and exploration tasks to first-order logic, which many ATPs accept as input. However, there are several different strategies for compiling a language specification to first-order logic, and even small variations in the translation may have a large impact on the time it takes ATPs to find proofs.
   In this paper, we first present a systematic empirical study on how to best compile language specifications to first-order logic such that existing ATPs can solve typical exploration tasks efficiently. We have developed a compiler product line that implements 36 different compilation strategies and used it to feed language specifications to 4 existing first-order theorem provers. As benchmarks, we developed language specifications for typed SQL and for a Questionnaire Language (QL), with 50 exploration goals each. Our study empirically confirms that the choice of a compilation strategy greatly influences prover performance in general and shows which strategies are advantageous for prover performance. Second, we extend our empirical study with 4 domain-specific strategies for axiom selection and find that axiom selection does not influence prover performance in our benchmark specifications. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Grewe, Sylvia; Pacak, Andre; Raulf, Michael; Mezini, Mira] Tech Univ Darmstadt, Karolinenpl 5, D-64289 Darmstadt, Germany.
   [Erdweg, Sebastian] Delft Univ Technol, Mekelweg 4, NL-2628 CD Delft, Netherlands.
C3 Technical University of Darmstadt; Delft University of Technology
RP Grewe, S (corresponding author), Tech Univ Darmstadt, Karolinenpl 5, D-64289 Darmstadt, Germany.; Erdweg, S (corresponding author), Delft Univ Technol, Mekelweg 4, NL-2628 CD Delft, Netherlands.
EM grewe@cs.tu-darmstadt.de; S.T.Erdweg@tudelft.nl;
   mezini@cs.tu-darmstadt.de
FU European Research Council [321217]; European Research Council (ERC)
   [321217] Funding Source: European Research Council (ERC)
FX We thank Laura Kovacs and Rustan Leino for helpful and inspiring
   research discussions during the preparation of this article. We thank
   Daniel Lehmann for helping with the implementation of the compiler
   product line for generating the different compilation variants.
   Furthermore, we thank Sarah Nadi for providing us helpful additional
   pointers on how to assess and interpret the results of our study.
   Finally, we thank the anonymous reviewers for suggesting several textual
   improvements. This work was supported in part by the European Research
   Council, grant No. 321217 (PACE). Calculations on the Lichtenberg high
   performance computer of the TU Darmstadt were conducted for this
   research.
CR [Anonymous], 2000, ACM SIGSOFT S FDN SO, DOI DOI 10.1145/357474.355063
   [Anonymous], THESIS
   [Anonymous], 2012, The Coq proof assistant reference manual
   Aydemir BE, 2005, LECT NOTES COMPUT SC, V3603, P50
   Azmy Noran, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P109, DOI 10.1007/978-3-642-38574-2_7
   Barendregt H., 1981, STUDIES LOGIC FDN MA
   Barrett Clark, 2010, P 8 INT WORKSH SAT M
   Benzmüller C, 2015, J AUTOM REASONING, V55, P389, DOI 10.1007/s10817-015-9348-y
   Blanchette J. C., 2016, TECH REP
   Blanchette JC, 2013, LECT NOTES COMPUT SC, V7795, P493, DOI 10.1007/978-3-642-36742-7_34
   Blanchette JC, 2010, LECT NOTES COMPUT SC, V6172, P131, DOI 10.1007/978-3-642-14052-5_11
   Claessen Koen, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P392, DOI 10.1007/978-3-642-38574-2_27
   Claessen K, 2011, LECT NOTES ARTIF INT, V6803, P207, DOI 10.1007/978-3-642-22438-6_17
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Erdweg S, 2015, COMPUT LANG SYST STR, V44, P24, DOI 10.1016/j.cl.2015.08.007
   Erdweg S, 2013, LECT NOTES COMPUT SC, V8225, P197, DOI 10.1007/978-3-319-02654-1_11
   Grewe S., 2015, 2015 ACM INT S NEW I, P137
   Grewe S, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P104, DOI 10.1145/2967973.2968606
   Hoder K, 2011, LECT NOTES ARTIF INT, V6803, P299, DOI 10.1007/978-3-642-22438-6_23
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Klein C, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P285
   Kotelnikov E, 2016, PROCEEDINGS OF THE 5TH ACM SIGPLAN CONFERENCE ON CERTIFIED PROGRAMS AND PROOFS (CPP'16), P37, DOI 10.1145/2854065.2854071
   Kotelnikov Evgenii., 2016, GCAI 2016. 2nd Global Conference on Artificial Intelligence, V41, P53
   Kovacs Laura, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P1, DOI 10.1007/978-3-642-39799-8_1
   Kühlwein D, 2013, LECT NOTES COMPUT SC, V7998, P35, DOI 10.1007/978-3-642-39634-2_6
   Kuksa E., 2016, CEUR WORKSHOP PROC, V1635, P56
   Kuksa E., 2016, P JOINT ONT WORKSH E
   Lorenzen F, 2016, ACM SIGPLAN NOTICES, V51, P204, DOI 10.1145/2914770.2837644
   Lorenzen F, 2013, ACM SIGPLAN NOTICES, V48, P331, DOI [10.1145/2544174.2500596, 10.1145/2500365.2500596]
   Meng J, 2008, J AUTOM REASONING, V40, P35, DOI 10.1007/s10817-007-9085-y
   Meng J, 2009, J APPL LOGIC, V7, P41, DOI 10.1016/j.jal.2007.07.004
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A
   Reger G., 2016, EPIC SERIES COMPUTIN, V41, P11, DOI [10.29007/dzfz, DOI 10.29007/DZFZ]
   Rummer P, 2008, LECT NOTES ARTIF INT, V5330, P274, DOI 10.1007/978-3-540-89439-1_20
   Rustan K, 2010, LECT NOTES ARTIF INT, V6355, P348, DOI 10.1007/978-3-642-17511-4_20
   Rustan K., 2008, TECH REP, V2
   Rustan K., 2010, TOOLS ALGORITHMS CON
   Schulz Stephan, 2013, Logic for Programming, Artificial Intelligence and Reasoning. 19th International Conference, LPAR-19, Proceedings: LNCS 8312, P735, DOI 10.1007/978-3-642-45221-5_49
   Sewell P, 2007, ICFP'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P1
   Sutcliffe G, 2009, J AUTOM REASONING, V43, P337, DOI 10.1007/s10817-009-9143-8
   Tortak E, 2007, LECT NOTES COMPUT SC, V4424, P632
   Wenzel M., 2012, ISABELLE ISAR REFERE
NR 44
TC 0
Z9 0
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2018
VL 155
BP 146
EP 172
DI 10.1016/j.scico.2017.08.001
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ1JJ
UT WOS:000427332600007
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Bourdil, PA
   Berthomieu, B
   Dal Zilio, S
   Vernadat, F
AF Bourdil, Pierre-Alain
   Berthomieu, Bernard
   Dal Zilio, Silvano
   Vernadat, Francois
TI Symmetry reduction for time Petri net state classes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Time Petri nets; State classes; Symmetry reduction
ID SYSTEMS; VERIFICATION; SAFETY
AB We propose a method to exploit the symmetries of a real-time system represented by a Time Petri net for its verification by model-checking. The method handles both markings and timing constraints; it can be used in conjunction with the widely used state classes abstraction, a construction providing a finite representation of the behavior of a Time Petri net preserving its markings and traces. The approach has been implemented and experiments are reported. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bourdil, Pierre-Alain; Berthomieu, Bernard; Dal Zilio, Silvano; Vernadat, Francois] Univ Toulouse, CNRS, LAAS, Toulouse, France.
   [Vernadat, Francois] Univ Toulouse, CNRS, LAAS, INSA, Toulouse, France.
   [Bourdil, Pierre-Alain] Eurogiciel Ingn, 417 Ave Occitane, F-31670 Labege, France.
C3 Centre National de la Recherche Scientifique (CNRS); Universite de
   Toulouse; Centre National de la Recherche Scientifique (CNRS);
   Universite Federale Toulouse Midi-Pyrenees (ComUE); Universite de
   Toulouse; Institut National des Sciences Appliquees de Toulouse
RP Berthomieu, B (corresponding author), Univ Toulouse, CNRS, LAAS, Toulouse, France.
EM Pierre-Alain.Bourdil@eurogiciel.fr; Bernard.Berthomieu@laas.fr;
   Silvano.Dalzilio@laas.fr; Francois.Vernadat@laas.fr
RI Dal Zilio, Silvano/AAV-6461-2021; Vernadat, Francois/AAE-7973-2021;
   Berthomieu, Bernard/R-1649-2019; dal zilio, simone/Q-8065-2018
OI Dal Zilio, Silvano/0000-0002-6002-2696; dal zilio,
   simone/0000-0003-0337-7068
CR Bérard B, 2005, LECT NOTES COMPUT SC, V3829, P211
   Berthomieu B., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P41
   Berthomieu B, 2004, INT J PROD RES, V42, P2741, DOI [10.1080/00207540412331312688, 10.1080/00207540410001705257]
   Berthomieu B, 2003, LECT NOTES COMPUT SC, V2619, P442
   BERTHOMIEU B, 1991, IEEE T SOFTWARE ENG, V17, P259, DOI 10.1109/32.75415
   BERTHOMIEU B, 2007, HDB REAL TIME EMBEDD
   Berthomieu B, 2006, LECT NOTES COMPUT SC, V4202, P82
   Boucheneb H., 2003, Technique et Science Informatiques, V22, P435, DOI 10.3166/tsi.22.435-459
   Bourdil P.-A., 2015, THESIS
   Bucci Giacomo, 2010, International Journal on Software Tools for Technology Transfer, V12, P391, DOI 10.1007/s10009-010-0156-8
   BUCCI G, 1995, IEEE T SOFTWARE ENG, V21, P969, DOI 10.1109/32.489073
   Chiola G, 1998, LECT NOTES COMPUT SC, V1420, P28
   Clarke EM, 1996, FORM METHOD SYST DES, V9, P77, DOI 10.1007/BF00625969
   Clarke EM, 1998, LECT NOTES COMPUT SC, V1427, P147, DOI 10.1007/BFb0028741
   Donaldson AF, 2009, ANN MATH ARTIF INTEL, V57, P1, DOI 10.1007/s10472-009-9171-4
   Gardey G, 2005, LECT NOTES COMPUT SC, V3576, P418
   Hack M., 1976, 159 TR MIT
   Hendriks M, 2003, LECT NOTES COMPUT SC, V2791, P46
   Hendriks M., 2002, NIIIR0208 U NIJM NIJ
   Ip CN, 1999, FORM METHOD SYST DES, V14, P273, DOI 10.1023/A:1008723125149
   Junttila T.A., 2004, LNCS, V3099
   Lime D, 2009, LECT NOTES COMPUT SC, V5505, P54, DOI 10.1007/978-3-642-00768-2_6
   Merlin P.M., 1974, 58 TR U CAL DEP INF
   Miller A, 2006, ACM COMPUT SURV, V38, DOI 10.1145/1132960.1132962
   Pommereau F., 2009, THESIS, P11
   Ramalingam G., 1995, ALGORITHMICA, V23
   Schmidt K, 2000, LECT NOTES COMPUT SC, V1825, P465
   Schmidt K, 2000, ACTA INFORM, V36, P545, DOI 10.1007/s002360050002
   Schmidt K, 2000, LECT NOTES COMPUT SC, V1785, P315
   Sistla AP, 2000, ACM T SOFTW ENG METH, V9, P133, DOI 10.1145/350887.350891
   Starke P.H., 1992, REFERENCE MANUAL
   STARKE PH, 1991, SYST ANAL MODEL SIM, V8, P293
   Vicario E, 2001, IEEE T SOFTWARE ENG, V27, P728, DOI 10.1109/32.940727
   Wahl T, 2010, SYMMETRY-BASEL, V2, P799, DOI 10.3390/sym2020799
   Wang F, 2002, LECT NOTES COMPUT SC, V2529, P50
NR 35
TC 11
Z9 11
U1 1
U2 7
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
SI SI
BP 209
EP 225
DI 10.1016/j.scico.2016.08.008
PN 2
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA ED3ZB
UT WOS:000388785900005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Ernst, G
   Pfähler, J
   Schellhorn, G
   Reif, W
AF Ernst, Gidon
   Pfaehler, Joerg
   Schellhorn, Gerhard
   Reif, Wolfgang
TI Modular, crash-safe refinement for ASMs with submachines
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Abstract State Machine; Refinement; Flash file systems; Crash safety;
   Power cuts
AB In this paper we define a formal refinement theory for a variant of Abstract State Machines (ASMs) with submachines and power cuts. The theory is motivated by the development of a verified flash file system. Different components of the system are modeled as submachines and refined individually. We define a non-atomic semantics that is suitable for considering power cuts in the middle of operations. We prove that refinement is compositional with respect to submachines and crashes. We give a criterion "crash-neutrality" and corresponding proof obligations that are sufficient to reduce non-atomic reasoning to standard pre/post verification in the context of power failures in file systems. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Ernst, Gidon; Pfaehler, Joerg; Schellhorn, Gerhard; Reif, Wolfgang] Univ Augsburg, Inst Software & Syst Engn, Augsburg, Germany.
C3 University of Augsburg
RP Ernst, G (corresponding author), Univ Augsburg, Inst Software & Syst Engn, Augsburg, Germany.
EM emst@isse.de; pfaehler@isse.de; schellhorn@isse.de; reif@isse.de
OI Reif, Wolfgang/0000-0002-4086-0043; Ernst, Gidon/0000-0002-3289-5764
FU Deutsche Forschungsgemeinschaft (DFG) [RE828/13-1]
FX This work is part of the project "Verifikation von Flash-Dateisystemen"
   (RE828/13-1) sponsored by the Deutsche Forschungsgemeinschaft (DFG).
CR Abrial J.-R., 1996, B BOOK ASSIGNING PRO
   Abrial JR, 2007, FUND INFORM, V77, P1
   Amani S, 2015, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.196.1
   [Anonymous], 1997, The Theory and Practice of Concurrency
   [Anonymous], MODELING IN EVENT B
   Baumann C., 2009, ELECT NOTES THEOR CO
   Borger E., 2003, Formal Aspects of Computing, V15, P237, DOI 10.1007/s00165-003-0012-7
   Borger E., 2000, Computer Science Logic. 14th International Workshop, CSL 2000. Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.1862), P41
   Borger E., 2003, ABSTRACT STATE MACHI
   Bornholt J, 2016, ACM SIGPLAN NOTICES, V51, P83, DOI 10.1145/2954679.2872406
   Chen H., 2015, 15 WORKSH TOP OP SYS
   Chen HG, 2015, SOSP'15: PROCEEDINGS OF THE TWENTY-FIFTH ACM SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P18, DOI 10.1145/2815400.2815402
   Damchoom K, 2009, LECT NOTES COMPUT SC, V5902, P134, DOI 10.1007/978-3-642-10452-7_10
   de Roever W., 1998, CAMB TRACTS THEOR CO, V47
   Ernst Gidon, 2014, Verified Software: Theories, Tools, Experiments. 5th International Conference, VSTTE 2013. Revised Selected Papers: LNCS 8164, P242, DOI 10.1007/978-3-642-54108-7_13
   Ernst G., 2015, COMMUNICATION
   Ernst G, 2012, ELECTRON PROC THEOR, P33
   Ernst G, 2016, LECT NOTES COMPUT SC, V9593, P73, DOI 10.1007/978-3-319-29613-5_5
   Ernst G, 2015, INT J SOFTW TOOLS TE, V17, P677, DOI 10.1007/s10009-014-0308-3
   Ernst G, 2014, LECT NOTES COMPUT SC, V8477, P188, DOI 10.1007/978-3-662-43652-3_16
   HAREL D, 2000, FOUNDAT COMPUT, P3
   He J., 1986, ESOP 86: European Symposium on Programming. Proceedings, P187
   Hoare CAR., 1985, Communicating Sequential Processes
   Jackson Daniel, 2006, Software abstractions: Logic, language, and analysis
   Joshi R, 2007, FORM ASP COMPUT, V19, P269, DOI 10.1007/s00165-006-0022-3
   Kang E., 2009, INT J SOFTWARE INFOR, V3, P129
   Keller Gabriele, 2013, PLOS 2013, P1, DOI [10.1145/2525528.2525530, DOI 10.1145/2525528.2525530]
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Koskinen E., 2016, P PRINC PROGR LANG P
   Lali Ikram Ullah, 2013, International Journal of Advanced Computer Science, V3, P602
   Maric O, 2014, LECT NOTES COMPUT SC, V8442, P449, DOI 10.1007/978-3-319-06410-9_31
   McEwan AA, 2010, LECT NOTES COMPUT SC, V5713, P122
   Ntzik G, 2015, LECT NOTES COMPUT SC, V9458, P169, DOI 10.1007/978-3-319-26529-2_10
   O'Connor-Davis L., 2014, TECH REP
   Pfahler Jorg, 2013, Hardware and Software: Verification and Testing. 9th International Haifa Verification Conference, HVC 2013. Proceedings: LNCS 8244, P214, DOI 10.1007/978-3-319-03077-7_15
   Reeves G, 2005, AEROSP CONF PROC, P4186
   Reif W, 1998, APPL LOG SER, V9, P13
   Ridge T., 2015, P SOSP
   Schellhorn G, 2005, THEOR COMPUT SCI, V336, P403, DOI 10.1016/j.tcs.2004.11.013
   Schellhorn G, 2001, J UNIVERS COMPUT SCI, V7, P952
   Schellhorn G, 2014, ANN MATH ARTIF INTEL, V71, P131, DOI 10.1007/s10472-013-9389-z
   Schellhorn G, 2014, LECT NOTES COMPUT SC, V8477, P9, DOI 10.1007/978-3-662-43652-3_2
   Schellhorn G, 2011, SCI COMPUT PROGRAM, V76, P756, DOI 10.1016/j.scico.2009.10.004
   Sivathanu M, 2005, USENIX ASSOCIATION PROCEEDINGS OF THE 4TH USENIX CONFERENCE ON FILE AND STORAGE TECHNOLOGIES, P1
   Taverne P, 2009, LECT NOTES COMPUT SC, V5885, P226, DOI 10.1007/978-3-642-10373-5_12
   The Open Group, 2004, 10031 IEEE OP GROUP
   Woodcock J., 1996, PRENTICE HALL INT SE
   Yang JF, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P273
NR 48
TC 9
Z9 9
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2016
VL 131
BP 3
EP 21
DI 10.1016/j.scico.2016.04.009
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EB8FQ
UT WOS:000387627300002
OA hybrid
DA 2024-07-18
ER

PT J
AU Delen, GPAJ
   Peters, RJ
   Verhoef, C
   van Vlijmen, SFM
AF Delen, G. P. A. J.
   Peters, R. J.
   Verhoef, C.
   van Vlijmen, S. F. M.
TI Lessons from Dutch IT-outsourcing success and failure
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Empirical study; IT-outsourcing success; Controllable success
   determinants; Rigid success determinants; Outsourcing consultant
ID RELATIONAL GOVERNANCE; CAPABILITIES; QUALITY; IMPACT; TRUST
AB We present the findings from a Dutch field study of a representative sample of 30 outsourcing deals totalling to more than 100 million Euro, where both customers, corresponding IT-outsourcing providers and their intermediaries (if present) participated. Of the 30 deals, 18 were successful. As the sample is representative for the 700 Dutch IT-outsourcing deals between 2007-2010, the Dutch success rate was about 60% at that time. The main objective of the study was to examine what made some a success and some a failure and how to influence the outcome if possible. For a number of well-known factors we investigated whether they discriminate between IT-outsourcing success and failure in the early phase of service delivery and determined their impact on the chance on a successful deal. We investigated controllable factors to increase the odds during sourcing and rigid factors as a warning sign before closing a deal.
   Based on 253 interviews with 516 different questions we collected 28 thousand data points (which took several FTEs). From the data and the perceived failure or success of the closed deals we investigated the discriminative power of the determinants (ex post). We found three statistically significant controllable factors that discriminated in an early phase between failure and success. They are: working according to the transition plan, demand management and, to our surprise, communication within the supplier organisation (so not between client and supplier). These factors also turned out to be the only significant factors for a (logistic) model predicting the chance of a successful IT-outsourcing. Improving demand management and internal communication at the supplier increases the odds the most, sticking to the transition plan only modestly. Other controllable factors were not significant in our study. They are: managing the business case, transfer of staff or assets, retention of expertise and communication within the client organisation. Of the rigid factors, the motive to outsource, cultural differences, and the type of work were insignificant. The motive of the supplier was significant: short-term motivations like increasing profit margins or business volume decreased the chance of success while longterm motivations like increasing market share or becoming a player increased the success rate. From the data we inferred that the degree of experience with sourcing did not show to be a convincing factor of success. Hiring sourcing consultants (intermediaries) worked contra-productive: it lowered chances of success. This illustrates that you better not outsource outsourcing. (C) 2016 Elsevier B.V. All rights reserved.
EM s.f.m.vanvlijmen@uva.nl
FU Dutch Joint Academic and Commercial Quality Research & Development
   (Jacquard) program on Software Engineering Research [638.004.405,
   638.003.611]
FX We thank the anonymous reviewers for their valuable comments. This
   research received partial support by the Dutch Joint Academic and
   Commercial Quality Research & Development (Jacquard) program on Software
   Engineering Research via contract 638.004.405 Equity: Exploring
   Quantifiable Information Technology Yields and contract 638.003.611
   Symbiosis: Synergy of managing business-IT-alignment, IT-sourcing and
   offshoring success in society.
CR Ali S, 2014, INT CONF GLOBAL SOFT, P153, DOI 10.1109/ICGSE.2014.12
   Babar MA, 2007, J SYST SOFTWARE, V80, P1438, DOI [10.1016/j.jss.2006.10.038, 10.1016/j.jss.2006.12.038]
   Baldwin LP, 2001, EUR J INFORM SYST, V10, P15, DOI 10.1057/palgrave.ejis.3000372
   Baraldi E, 2014, IND MARKET MANAG, V43, P553, DOI 10.1016/j.indmarman.2014.02.012
   Bergstra J. A., 2011, ARXIV11074684
   Bergstra Jan, 2011, OUTSOURCING IN NL
   Bhagwatwar A, 2011, INFORM SYST MANAGE, V28, P165, DOI 10.1080/10580530.2011.562132
   COHEN J, 1992, PSYCHOL BULL, V112, P155, DOI 10.1037/0033-2909.112.1.155
   Cohen J., 1988, STAT POWER ANAL BEHA
   Cram W. Alec, 2009, AMCIS P 2009
   Cullen S, 2008, P 2 INF SYST WORKSH
   Dahlberg Tomi, 2006, 39 HAW INT C SYST SC
   Delen Guus, 2008, HDB NETWORK SYSTEM A, P929
   Delen Guus, 2005, DECISION CONTROLFACT
   Deshpande Sadhana, 2010, Proceedings of the 2010 Fifth IEEE International Conference Global Software Engineering (ICGSE 2010), P67, DOI 10.1109/ICGSE.2010.16
   Dibbern Jens, 2004, DATA BASE ADV INF SY, V35, P99
   Dixon W.J., 1957, INTRO STAT ANAL, VSecond
   Eveleens JL, 2010, IEEE SOFTWARE, V27, P30, DOI 10.1109/MS.2009.154
   Eveleens L, 2015, J SOFTW-EVOL PROC, V27, P147, DOI 10.1002/smr.1700
   Fitoussi D, 2012, INFORM SYST RES, V23, P129, DOI 10.1287/isre.1100.0310
   Gable GG, 1996, MANAGE SCI, V42, P1175, DOI 10.1287/mnsc.42.8.1175
   George D., 2009, SPSS WINDOWS STEP ST, V10th
   Gliem J. A., 2003, MIDW RES TO PRACT C, V1, P82, DOI DOI 10.1109/PROC.1975.9792
   Goo J, 2008, DECIS SUPPORT SYST, V46, P216, DOI 10.1016/j.dss.2008.06.005
   Grover V., 1996, Journal of Management Information Systems, V12, P89
   Hirschheim R, 2000, COMMUN ACM, V43, P99, DOI 10.1145/328236.328112
   HODGES JL, 1956, ANN MATH STAT, V27, P324, DOI 10.1214/aoms/1177728261
   Hodosi G., 2013, J INFORM TECHNOLOGY, V14, P17
   Hogg Robert V., 1977, PROBABILITY STAT INF
   Huber TL, 2014, P ANN HICSS, P4276, DOI 10.1109/HICSS.2014.529
   Jablokow Kathryn, 2010, Proceedings of the 2010 Fifth IEEE International Conference Global Software Engineering (ICGSE 2010), P77, DOI 10.1109/ICGSE.2010.17
   Jae-Nam Lee, 1999, Journal of Management Information Systems, V15, P29, DOI 10.1557/JMR.2000.0009
   Kampstra P., 2008, Journal of Statistical Software, V28, P1, DOI [10.18637/jss.v028.c01, DOI 10.18637/JSS.V028.C01, 10.18637/jss.v028.c01.papers3://publication/uuid/692988CE-7E10-498E-96EC-E7A0CE3620A3]
   Kim S, 2003, J COMPUT INFORM SYST, V43, P81
   Kulk GP, 2008, SCI COMPUT PROGRAM, V72, P136, DOI 10.1016/j.scico.2008.04.003
   Lacity MC, 2009, J STRATEGIC INF SYST, V18, P130, DOI 10.1016/j.jsis.2009.06.002
   Lacity MC, 1998, MIS QUART, V22, P363, DOI 10.2307/249670
   Lee JN, 2004, INFORM SYST RES, V15, P110, DOI 10.1287/isre.1040.0013
   Lee JN, 2001, INFORM MANAGE, V38, P323, DOI 10.1016/S0378-7206(00)00074-4
   Levina N, 2003, MIS QUART, V27, P331
   Lioliou E, 2014, INFORM SYST J, V24, P503, DOI 10.1111/isj.12038
   Mendez E., 2006, AM C INF SYST AMCIS
   Nasir M.H. N., 2011, Scientific Research and Essays, V6, P2174, DOI [DOI 10.5897/SRE10.1171, 10.5897/SRE10.1171]
   Oza NV, 2006, INFORM SOFTWARE TECH, V48, P345, DOI 10.1016/j.infsof.2005.09.011
   Perunovic Z, 2012, INT J OPER PROD MAN, V32, P351, DOI 10.1108/01443571211212619
   Plugge A, 2013, INFORM MANAGE-AMSTER, V50, P275, DOI 10.1016/j.im.2013.04.006
   Power M., 2006, The outsourcing handbook: how to implement a successful outsourcing process
   Rouse AC, 2006, PACIFIC ASIA CONFERENCE ON INFORMATION SYSTEMS 2006, SECTIONS 1-8, P1
   Schwarz C, 2014, INFORM MANAGE-AMSTER, V51, P152, DOI 10.1016/j.im.2013.11.005
   Smuts H., 2010, Proceedings of the 2010 Annual Research Conference of the South African Institute of Computer Scientists and Information Technologists (SAICSIT '10), P304
   Urbach N, 2012, BUS INFORM SYST ENG+, V4, P247, DOI 10.1007/s12599-012-0231-7
   van Vlijmen S. F. M., 2012, CROSS REFERENCE SYMB
   van Vlijmen S. F. M., 2012, CODEBOOK SYMBIOSIS D
   van Vlijmen S. F. M., 2012, SYMBIOSIS ORIGINAL Q
   Verhoef C, 2005, SCI COMPUT PROGRAM, V56, P275, DOI 10.1016/j.scico.2004.08.003
   Willcocks L, 2004, INFORM SYST MANAGE, V21, P7, DOI 10.1201/1078/44432.21.3.20040601/82471.2
   Winkler JK, 2008, INFORM SYST FRONT, V10, P243, DOI 10.1007/s10796-008-9068-5
   Zaal R., 2008, AUTOM GIDS      0822
   Zaal R., 2010, AUTOM GIDS      0507
   Zaal R., 2011, AUTOM GIDS      0429
NR 60
TC 20
Z9 25
U1 0
U2 42
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2016
VL 130
BP 37
EP 68
DI 10.1016/j.scico.2016.04.001
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Social Science Citation Index (SSCI)
SC Computer Science
GA DY1MQ
UT WOS:000384859500004
DA 2024-07-18
ER

PT J
AU Bonacchi, A
   Fantechi, A
   Bacherini, S
   Tempestini, M
AF Bonacchi, A.
   Fantechi, A.
   Bacherini, S.
   Tempestini, M.
TI Validation process for railway interlocking systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Railway interlocking systems; System validation; Model-based testing;
   Formal methods; Model checking
ID MODEL CHECKING; VERIFICATION; INDUCTION
AB An interlocking system monitors the status of the objects in a railway yard, allowing or denying the movement of trains, in accordance with safety rules. The high number of complex interlocking rules that guarantee the safe movements of independent trains in a large station makes the verification of such systems a complex task, which needs to be addressed in conformance with EN50128 safety guidelines.
   In this paper we show how the problem, has been addressed by a manufacturer at the final validation stage of production interlocking systems, by means of a model extraction procedure that creates a model of the internal behaviour, to be exercised with the planned test suites, in order to reduce the high costs of direct validation of the target system.
   The same extracted model is then subject to formal verification experiments, employing an iterative verification process implementing slicing and CEGAR-like techniques, defined to address the typical complexity of this application domain. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bonacchi, A.; Fantechi, A.] Univ Florence, DINFO, Via S Marta 3, Florence, Italy.
   [Bacherini, S.; Tempestini, M.] Gen Elect Transportat Syst, Florence, Italy.
C3 University of Florence; General Electric
RP Fantechi, A (corresponding author), Univ Florence, DINFO, Via S Marta 3, Florence, Italy.
EM a.bonacchi@unifi.it; alessandro.fantechi@unifi.it;
   stefano.bacherini@ge.com; matteo.tempestini@ge.com
OI Fantechi, Alessandro/0000-0002-4648-4667
FU Villum Fonden
FX The second author has been partially funded by Villum Fonden.
CR [Anonymous], LOGIC GROUP PREPRINT
   [Anonymous], 2002, CAV, DOI DOI 10.1007/3-540-45657-0
   [Anonymous], LNCS
   [Anonymous], INT J SOFTW INF
   Armando Alessandro, 2009, International Journal on Software Tools for Technology Transfer, V11, P69, DOI 10.1007/s10009-008-0091-0
   Bacherini S, 2006, LECT NOTES COMPUT SC, V4085, P179
   Bernardeschi C, 1998, FORM METHOD SYST DES, V12, P139, DOI 10.1023/A:1008645826258
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Bonacchi A., 2014, LNCS, V8718, P226
   Bonacchi A, 2014, 2014 9TH INTERNATIONAL CONFERENCE ON THE QUALITY OF INFORMATION AND COMMUNICATIONS TECHNOLOGY (QUATIC), P226, DOI 10.1109/QUATIC.2014.37
   Broekman B., 2002, TESTNG EMBEDDED SOFT
   Clarke EdmundM., 2000, Proceedings of the International Conference on Computer Aided Veri cation (CAV), P154, DOI 10.1007/1072216715
   de Moura L, 2003, LECT NOTES COMPUT SC, V2725, P14
   European Committee for Electrotechnical Standardization, 2011, 501282011 CENELEC EN
   Fantechi Alessandro, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Applications and Case Studies. Proceedings of the 5th International Symposium, ISoLA 2012, P276, DOI 10.1007/978-3-642-34032-1_26
   Ferrari Alessio, 2011, International Journal of Embedded and Real-Time Communication Systems, V2, P42, DOI 10.4018/jertcs.2011040103
   Ferrari A, 2013, IEEE SOFTWARE, V30, P28, DOI 10.1109/MS.2013.44
   Ferrari A, 2011, FORMS/FORMAT 2010: FORMAL METHODS FOR AUTOMATION AND SAFETY IN RAILWAY AND AUTOMOTIVE SYSTEMS, P107, DOI 10.1007/978-3-642-14261-1_11
   Haxthausen A.E., 2008, LNCS, V6028, P176
   Haxthausen A. E., 2013, LNCS, P205
   Haxthausen AE, 2014, INT J SOFTW TOOLS TE, V16, P713, DOI 10.1007/s10009-013-0295-9
   James P., 2013, LNCS, V8368, P189
   James P., 2013, LNCS, V8368, P253, DOI DOI 10.1007/978-3-319-05032-4_
   Kanso K, 2009, ELECTRON NOTES THEOR, V250, P19, DOI 10.1016/j.entcs.2009.08.015
   Loding Helge, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P449, DOI 10.1109/ICST.2010.60
   Moller F., 2012, LECT NOTES COMPUTER, V7857, P193, DOI [10.1007/978-3-642- 39611-3 20, DOI 10.1007/978-3-642-39611-3]
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   ten Hoeve T., 2012, THESIS
   Vanit-Anunchai S, 2010, LECT NOTES COMPUT SC, V6116, P137, DOI 10.1007/978-3-642-13414-2_10
   Vu LH, 2014, P 10 S FORM METH AUT, P200
   Vu LH, 2015, COMM COM INF SC, V476, P223, DOI 10.1007/978-3-319-17581-2_15
   WEISER M, 1984, IEEE T SOFTWARE ENG, V10, P352, DOI 10.1109/TSE.1984.5010248
   Weissleder S., 2010, THESIS
   Winter K., 2006, 10 AUSTR WORKSH SAF, V55, P101
   Winter K., 2003, 26 AUSTRALASIAN COMP, P309
   Winter K, 2012, RAILWAY SAFETY, RELIABILITY, AND SECURITY: TECHNOLOGIES AND SYSTEMS ENGINEERING, P298, DOI 10.4018/978-1-4666-1643-1.ch013
NR 36
TC 11
Z9 13
U1 3
U2 26
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2016
VL 128
SI SI
BP 2
EP 21
DI 10.1016/j.scico.2016.04.004
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DS2JI
UT WOS:000380595400002
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Barenghi, A
   Reghizzi, SC
   Mandrioli, D
   Panella, F
   Pradella, M
AF Barenghi, Alessandro
   Reghizzi, Stefano Crespi
   Mandrioli, Dino
   Panella, Federica
   Pradella, Matteo
TI Parallel parsing made practical
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Parallel parsing algorithms; Syntax analysis; Parallel parser; Operator
   precedence grammar
ID SPEEDUP; PARSER
AB The property of local parsability allows to parse inputs through inspecting only a bounded-length string around the current token. This in turn enables the construction of a scalable, data-parallel parsing algorithm, which is presented in this work. Such an algorithm is easily amenable to be automatically generated via a parser generator tool, which was realized, and is also presented in the following. Furthermore, to complete the framework of a parallel input analysis, a parallel scanner can also combined with the parser. To prove the practicality of a parallel lexing and parsing approach, we report the results of the adaptation of JSON and Lua to a form fit for parallel parsing (i.e. an operator-precedence grammar) through simple grammar changes and scanning transformations. The approach is validated with performance figures from both high performance and embedded multicore platforms, obtained analyzing real-world inputs as a test-bench. The results show that our approach matches or dominates the performances of production-grade LR parsers in sequential execution, and achieves significant speedups and good scaling on multi-core machines. The work is concluded by a broad and critical survey of the past work on parallel parsing and future directions on the integration with semantic analysis and incremental parsing. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Barenghi, Alessandro; Reghizzi, Stefano Crespi; Mandrioli, Dino; Panella, Federica; Pradella, Matteo] Politecn Milan, DEIB, I-20133 Milan, Italy.
C3 Polytechnic University of Milan
EM alessandro.barenghi@polimi.it; stefano.crespireghizzi@polimi.it;
   dino.mandrioli@polimi.it; federica.panella@polimi.it;
   matteo.pradella@polimi.it
RI Pradella, Matteo/ABF-5509-2020; Barenghi, Alessandro/X-1915-2019
OI Pradella, Matteo/0000-0003-3039-1084; Barenghi,
   Alessandro/0000-0003-0840-6358
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   ALBLAS H, 1994, SIGPLAN NOTICES, V29, P54, DOI 10.1145/181577.181586
   Alur R, 2009, J ACM, V56, DOI 10.1145/1516512.1516518
   Barenghi A, 2014, LECT NOTES COMPUT SC, V8409, P192
   Barenghi A, 2013, INFORM PROCESS LETT, V113, P245, DOI 10.1016/j.ipl.2013.01.008
   Bianculli D., 2013, SCI COMPUT PROGRAM, DOI [http://dx.doi.org/10.1016/j.scico.2013.11.026, DOI 10.1016/J.SCIC0.2013.11.026]
   Celestia Development Team, 2014, CEL SPAC SIM
   CHYTIL M, 1991, THEOR COMPUT SCI, V81, P311, DOI 10.1016/0304-3975(91)90199-C
   COHEN J, 1982, J ACM, V29, P408, DOI 10.1145/322307.322316
   Crockford D., 2006, RFC4267
   Crockford D., 2008, JAVASCRIPT GOOD PART
   DeBosschere K, 1996, SOFTWARE PRACT EXPER, V26, P763, DOI 10.1002/(SICI)1097-024X(199607)26:7<763::AID-SPE33>3.0.CO;2-L
   DEGANO P, 1988, ACM T PROGR LANG SYS, V10, P345, DOI 10.1145/44501.214503
   DeLoura M., 2009, ENGINE SURVEY GEN RE
   Demaille Akim, 2014, GNU BISON
   Fischer C.N., 1975, TECHNICAL REPORT
   Fischer M. J., 1969, STOC 69, P181
   FLOYD RW, 1963, J ACM, V10, P316, DOI 10.1145/321172.321179
   FLOYD RW, 1964, COMMUN ACM, V7, P62, DOI 10.1145/363921.363927
   Game Developer, 2012, 14 ANN FRONT LIN AW
   Germann U., P NAACL HLT WORKSH S, P31
   Ghezzi C., 1979, ACM Transactions on Programming Languages and Systems, V1, P58, DOI 10.1145/357062.357066
   GIBBONS A, 1989, INFORM COMPUT, V81, P32, DOI 10.1016/0890-5401(89)90027-8
   Greibach S., 1968, Mathematical Systems Theory, V2, P1, DOI 10.1007/BF01691341
   Grune Dick, 2008, Parsing Techniques: A Practical Guide, V2nd, DOI [10.1007/978-0-387-68954-8, DOI 10.1007/978-0-387-68954-8]
   HILLIS WD, 1986, COMMUN ACM, V29, P1170, DOI 10.1145/7902.7903
   HUNT HB, 1978, SIAM J COMPUT, V7, P99, DOI 10.1137/0207007
   KARP AH, 1990, COMMUN ACM, V33, P539, DOI 10.1145/78607.78614
   Kegler J., 2008, PERL REV
   KLEIN PN, 1988, SIAM J COMPUT, V17, P463, DOI 10.1137/0217027
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   KNUTH DE, 1967, INFORM CONTROL, V11, P269, DOI 10.1016/S0019-9958(67)90564-5
   Lampe J., 1990, Journal of Information Processing and Cybernetics, V26, P75
   LARCHEVEQUE JM, 1995, ACM T PROGR LANG SYS, V17, P1, DOI 10.1145/200994.200996
   Layer7 Technology, 2014, XML ACC
   Lu W, 2006, 2006 7TH IEEE/ACM INTERNATIONAL CONFERENCE ON GRID COMPUTING, P223, DOI 10.1109/ICGRID.2006.311019
   McCloskey R., 1994, PARALLEL PARSING LAN
   Mickunas M.D., 1978, P 1978 ACM ANN C DEC, V1, P241
   Papageno Developers, 2014, PAPAGENO PAR PARS GE
   Pontifical Catholic University of Rio de Janeiro, 2014, LUA OFF REF MAN
   Reghizzi SC, 2013, TEXTS COMPUT SCI, P1, DOI 10.1007/978-1-4471-5514-0
   Reghizzi SC, 2012, J COMPUT SYST SCI, V78, P1837, DOI 10.1016/j.jcss.2011.12.006
   RYTTER W, 1986, THEOR COMPUT SCI, V47, P315, DOI 10.1016/0304-3975(86)90155-6
   SARKAR D, 1990, IEEE T SOFTWARE ENG, V16, P677, DOI 10.1109/32.56094
   Sin'ya R, 2013, PROC INT CONF PARAL, P220, DOI 10.1109/ICPP.2013.31
   Srikanth G. Umarani, 2010, Proceedings of the 2010 Fourth IEEE International Conference on Secure Software Integration and Reliability Improvement Companion (SSIRI-C 2010), P28, DOI 10.1109/SSIRI-C.2010.16
   Vagner L, 2007, ACTA INFORM, V44, P1, DOI 10.1007/s00236-006-0031-y
   Zakai Alon, 2014, EMSCRIPTEN
   Zhao ZJ, 2013, ACM T ARCHIT CODE OP, V10, DOI 10.1145/2555289.2555301
NR 49
TC 16
Z9 17
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 195
EP 226
DI 10.1016/j.scico.2015.09.002
PN 3
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CW3HE
UT WOS:000364881800001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Yi, J
   Disney, T
   Freund, SN
   Flanagan, C
AF Yi, Jaeheon
   Disney, Tim
   Freund, Stephen N.
   Flanagan, Cormac
TI Cooperative types for controlling thread interference in Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Cooperability; Concurrency; Type systems
AB Multithreaded programs are notoriously prone to unintended interference between concurrent threads. To address this problem, we argue that yield annotations in the source code should document all thread interference, and we present a type system for verifying the absence of undocumented interference in Java programs. Under this type system, well-typed programs behave as if context switches occur only at yield annotations. Thus, well-typed programs can be understood using intuitive sequential reasoning, except where yield annotations remind the programmer to account for thread interference.
   Experimental results show that yield annotations describe thread interference more precisely than prior techniques based on method-level atomicity specifications. In particular, yield annotations reduce the number of interference points one must reason about by an order of magnitude. The type system is also more precise than prior methods targeting race freedom, and yield annotations highlight all known concurrency defects in our benchmarks.
   The type system reasons about program behavior modularly via method-level specifications. To alleviate the programmer burden of writing these specifications, we extend our system to support method specification inference, which makes our technique more practical for large code bases. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Yi, Jaeheon; Disney, Tim; Flanagan, Cormac] Univ Calif Santa Cruz, Santa Cruz, CA 95064 USA.
   [Freund, Stephen N.] Williams Coll, Williamstown, MA 01267 USA.
C3 University of California System; University of California Santa Cruz;
   Williams College
RP Freund, SN (corresponding author), Williams Coll, 47 Lab Campus Dr, Williamstown, MA 01267 USA.
EM freund@cs.williams.edu
FU National Science Foundation [1116883, 1116825, 1337278, 1421051,
   1421016, 1439042]; Direct For Computer & Info Scie & Enginr [1116883,
   1337278] Funding Source: National Science Foundation; Division of
   Computing and Communication Foundations [1337278, 1116883] Funding
   Source: National Science Foundation; Division of Computing and
   Communication Foundations; Direct For Computer & Info Scie & Enginr
   [1116825, 1439042, 1421051, 1421016] Funding Source: National Science
   Foundation
FX This work was supported by the National Science Foundation under grants
   1116883, 1116825, 1337278, 1421051, 1421016, and 1439042.
CR Abadi M, 2006, ACM T PROGR LANG SYS, V28, P207, DOI 10.1145/1119479.1119480
   Adve SV, 1996, COMPUTER, V29, P66, DOI 10.1109/2.546611
   Adya A, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE GENERAL TRACK, P289
   Amadio RM, 2004, LECT NOTES COMPUT SC, V3170, P68
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Ball T, 2002, ACM SIGPLAN NOTICES, V37, P1, DOI 10.1145/565816.503274
   Beyer Dirk, 2007, International Journal on Software Tools for Technology Transfer, V9, P505, DOI 10.1007/s10009-007-0044-z
   Bocchino RL, 2009, OOPSLA 2009, CONFERENCE PROCEEDINGS, P97
   Boudol G, 2007, LECT NOTES COMPUT SC, V4703, P272
   Boyapati C, 2001, ACM SIGPLAN NOTICES, V36, P56, DOI 10.1145/504311.504287
   Burnim J, 2009, 7TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P3, DOI 10.1145/1595696.1595700
   Devietti J, 2009, ACM SIGPLAN NOTICES, V44, P85, DOI 10.1145/1508284.1508255
   Dice David, 2009, P 14 INT C ARCHITECT, P157, DOI [DOI 10.1145/1508244.1508263, 10.1145/1508244.1508263, DOI 10.1145/1508284.1508263]
   Eppinger JeffreyL., 1991, Camelot and Avalon: A Distributed Transaction Facility
   Farzan A, 2008, LECT NOTES COMPUT SC, V5123, P52
   Flanagan C, 2004, ACM SIGPLAN NOTICES, V39, P256, DOI 10.1145/982962.964023
   Flanagan C, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/640136.604176
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Flanagan C, 2010, COMMUN ACM, V53, P93, DOI 10.1145/1839676.1839699
   Flanagan C, 2010, PLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P244, DOI 10.1145/1806596.1806625
   Flanagan C, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1377492.1377495
   Flanagan C, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P293, DOI 10.1145/1375581.1375618
   Grossman D, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/640136.604177
   Harris T, 2003, ACM SIGPLAN NOTICES, V38, P388, DOI 10.1145/949343.949340
   Hatcliff J, 2004, LECT NOTES COMPUT SC, V2937, P175
   Herlihy M., 1993, INT S COMPUTER ARCHI, DOI DOI 10.1145/165123.165164
   Hoare C. A. R., 1972, OPERATING SYSTEMS TE, P61, DOI DOI 10.1145/361227.361234
   Isard M., 2007, Proceedings of the 11th USENIX workshop on Hot topics in Operating Systems (HOTOS'07), P1
   Java Grande Forum, 2008, JAV GRAND BENCHM GUI
   Kulkarni A, 2010, ACM SIGPLAN NOTICES, V45, P671, DOI 10.1145/1932682.1869514
   Larus JamesR., 2006, Transactional Memory. Synthesis Lectures on Computer Architecture
   Lin Eric, 2013, C SYST PROGR APPL SO, P19
   LIPTON RJ, 1975, COMMUN ACM, V18, P717, DOI 10.1145/361227.361234
   Liskov B., 1987, SOSP 87, P111
   Lomet D. B., 1977, SIGPLAN Notices, V12, P128, DOI 10.1145/390017.808319
   Manson J, 2005, ACM SIGPLAN NOTICES, V40, P378, DOI 10.1145/1047659.1040336
   Naik M, 2006, ACM SIGPLAN NOTICES, V41, P308, DOI 10.1145/1133981.1134018
   Naik M, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P327
   O'Callahan R., 2003, SIGPLAN Notices, V38, P166, DOI 10.1145/966049.781528
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Olszewski M, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1508284.1508256
   Pratikakis P., 2006, C PROGR LANG DES IMP, P320
   Qadeer S, 2004, ACM SIGPLAN NOTICES, V39, P14, DOI 10.1145/996893.996845
   Rajan Hridesh., 2010, P FSESDP WORKSHOP FU, P293
   Rajwar R, 2001, INT SYMP MICROARCH, P294, DOI 10.1109/MICRO.2001.991127
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Roy A, 2009, EUROSYS'09: PROCEEDINGS OF THE FOURTH EUROSYS CONFERENCE, P261
   SADOWSKI C, 2010, ONW WORKSH EV US PRO
   Sadowski C, 2009, LECT NOTES COMPUT SC, V5502, P394, DOI 10.1007/978-3-642-00590-9_28
   Savage S, 1997, ACM T COMPUT SYST, V15, P391, DOI 10.1145/269005.266641
   Shavit N., 1995, Proceedings of the Fourteenth Annual ACM Symposium on Principles of Distributed Computing, P204, DOI 10.1145/224964.224987
   Stone C.A., 2011, OOPSLA COMPANION, P205
   von Praun C, 2003, ACM SIGPLAN NOTICES, V38, P115, DOI 10.1145/780822.781145
   VONPRAUN C, 2003, WORKSH FORM TECHN JA
   Wang LQ, 2006, IEEE T SOFTWARE ENG, V32, P93, DOI 10.1109/TSE.2006.1599419
   Yi J., 2011, UCSCSOE1122
   Yi JH, 2011, ACM SIGPLAN NOTICES, V46, P147, DOI 10.1145/2038037.1941575
   Yi J, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P3
   Yi Jaeheon., 2012, Proceedings of the 2012 International Symposium on Software Testing and Analysis, ISSTA 2012, P232
   Ziarek L, 2008, LECT NOTES COMPUT SC, V5142, P129, DOI 10.1007/978-3-540-70592-5_7
NR 60
TC 1
Z9 1
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2015
VL 112
BP 227
EP 260
DI 10.1016/j.scico.2015.08.004
PN 3
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CW3HE
UT WOS:000364881800002
DA 2024-07-18
ER

PT J
AU Latella, D
   Loreti, M
   Massink, M
AF Latella, Diego
   Loreti, Michele
   Massink, Mieke
TI On-the-fly PCTL fast mean-field approximated model-checking for
   self-organising coordination
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 28th ACM Symposium on Applied Computing (SAC) on Programming Languages
   Track
CY MAR 18-22, 2013
CL Coimbra, PORTUGAL
SP ACM, ACM Special Interest Grp Appl Comp
DE Probabilistic model-checking; On-the-fly model-checking; Mean-field
   approximation; Discrete time Markov chains; Self-organisation
ID PROCESS ALGEBRA; VERIFICATION; SEMANTICS; FRAMEWORK; CITIES; POWER
AB Typical self-organising collective systems consist of a large number of interacting objects that coordinate their activities in a decentralised and often implicit way. Design of such systems is challenging and requires suitable, scalable analysis tools to check properties of proposed system designs before they are put into operation. We present a novel scalable, on-the-fly approximated model-checking procedure to verify bounded PCTL properties of selected individuals in the context of very large systems of independent interacting objects. The proposed procedure combines on-the-fly model-checking techniques with deterministic mean-field approximation in discrete time. The asymptotic correctness of the procedure is proven and a prototype implementation of the model-checker is presented. The potential of the verification approach is illustrated by its application on self-organising collective systems and an overview of remaining open issues and future extensions is provided. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Latella, Diego; Massink, Mieke] CNR, Ist Sci & Tecnol Informaz A Faedo, I-56100 Pisa, Italy.
   [Loreti, Michele] Univ Florence, Dip Stat Informat Applicaz G Parenti, I-50121 Florence, Italy.
   [Loreti, Michele] IMT Adv Studies Lucca, Lucca, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); University
   of Florence; IMT School for Advanced Studies Lucca
RP Latella, D (corresponding author), CNR, Ist Sci & Tecnol Informaz A Faedo, I-56100 Pisa, Italy.
EM diego.latella@isti.cnr.it; michele.loreti@unifi.it;
   mieke.massink@isti.cnr.it
RI Latella, Diego/AAD-5792-2022; Loreti, Michele/J-4350-2012; Latella,
   Diego/E-1098-2012; Massink, Mieke/E-1287-2012
OI Latella, Diego/0000-0002-3257-9059; Latella, Diego/0000-0002-3257-9059;
   Loreti, Michele/0000-0003-3061-863X; Massink, Mieke/0000-0001-5089-002X
FU EU [257414, 600708]; IT MIUR project CINA
FX This research has been partially funded by the EU projects ASCENS (nr.
   257414) and QUANTICOL (nr. 600708), and the IT MIUR project CINA.
CR Aiello M, 2007, HANDBOOK OF SPATIAL LOGICS, P1, DOI 10.1007/978-1-4020-5587-4
   [Anonymous], LNCS
   [Anonymous], 2004, ANT COLONY OPTIMIZAT
   [Anonymous], 2009, P 2009 ACM S APPL CO, DOI DOI 10.1145/1529282.1529585
   Aziz Adnan, 2000, ACM Trans. Comput. Logic, V1, P162, DOI DOI 10.1145/343369.343402
   Baier C, 2005, INFORM COMPUT, V200, P149, DOI 10.1016/j.ic.2005.03.001
   Baier C, 2003, IEEE T SOFTWARE ENG, V29, P524, DOI 10.1109/TSE.2003.1205180
   Baier C, 1999, LECT NOTES COMPUT SC, V1664, P146
   Bakhshi Rena, 2010, Proceedings of the 2010 Seventh International Conference on the Quantitative Evaluation of Systems (QEST 2010), P241, DOI 10.1109/QEST.2010.38
   Beal J, 2013, FORMAL AND PRACTICAL ASPECTS OF DOMAIN-SPECIFIC LANGUAGES: RECENT DEVELOPMENTS, P436, DOI 10.4018/978-1-4666-2092-6.ch016
   Benaim M, 2008, PERFORM EVALUATION, V65, P823, DOI 10.1016/j.peva.2008.03.005
   BHAT G, 1995, IEEE S LOG, P388, DOI 10.1109/LICS.1995.523273
   Bortolussi L., 2012, 2012 Ninth International Conference on Quantitative Evaluation of Systems (QEST 2012), P53, DOI 10.1109/QEST.2012.13
   Bortolussi L, 2013, PERFORM EVALUATION, V70, P736, DOI 10.1016/j.peva.2013.08.012
   Bortolussi L, 2013, LECT NOTES COMPUT SC, V7890, P1, DOI 10.1007/978-3-642-38493-6_1
   Bortolussi L, 2013, PERFORM EVALUATION, V70, P317, DOI 10.1016/j.peva.2013.01.001
   Bortolussi L, 2012, LECT NOTES COMPUT SC, V7454, P333, DOI 10.1007/978-3-642-32940-1_24
   Bradley JT, 2008, J COMPUT SYST SCI, V74, P1013, DOI 10.1016/j.jcss.2007.07.005
   Buchli J., 2005, COMPLEX SYSTEMS SUMM, V2005
   Caragliu A, 2011, J URBAN TECHNOL, V18, P65, DOI 10.1080/10630732.2011.601117
   Cardelli L, 1998, LECT NOTES COMPUT SC, V1378, P140, DOI 10.1007/BFb0053547
   Chaintreau A, 2009, PERF E R SI, V37, P109
   Ciancia Vincenzo, 2014, Theoretical Computer Science. 8th IFIP TC 1/WG 2.2 International Conference, TCS 2014. Proceedings: LNCS 8705, P222, DOI 10.1007/978-3-662-44602-7_18
   Ciancia V., 2014, TRQC12014 QUANTICOL
   Ciancia V, 2014, INT CONF SELF SELF, P32, DOI 10.1109/SASOW.2014.16
   Ciocchetta F, 2009, THEOR COMPUT SCI, V410, P3065, DOI 10.1016/j.tcs.2009.02.037
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Courcoubetis C., 1992, Formal Methods in System Design, V1, P275, DOI 10.1007/BF00121128
   Darling RWR, 2008, PROBAB SURV, V5, P37, DOI 10.1214/07-PS121
   De Nicola R, 2007, THEOR COMPUT SCI, V382, P42, DOI 10.1016/j.tcs.2007.05.008
   Della Penna G, 2004, LECT NOTES COMPUT SC, V3312, P214
   DeMaio P., 2009, J PUBLIC TRANSPORT, V12, P3, DOI [DOI 10.5038/2375-0901.12.4.3, 10.5038/2375-0901.12.4. 3]
   Duflot M., 2006, International Journal on Software Tools for Technology Transfer, V8, P621, DOI 10.1007/s10009-006-0014-x
   Ericsson, 2011, NETW SOC CIT IND TRI
   Frei R, 2011, INT J BIO-INSPIR COM, V3, P123, DOI 10.1504/IJBIC.2011.039911
   Fricker C., 2012, DISCRETE MATH THEOR, DOI [10.46298/dmtcs.3006, DOI 10.46298/DMTCS.3006]
   Fricker C., 2014, EURO Journal on Transportation and Logistics
   Galpin V., 2014, PRELIMINARY INVESTIG
   Gast N, 2010, PERF E R SI, V38, P13, DOI 10.1145/1811099.1811042
   Gnesi S, 2011, LECT NOTES COMPUT SC, V6582, P390, DOI 10.1007/978-3-642-20401-2_18
   Guirado G, 2006, ELECTRON NOTES THEOR, V135, P19, DOI 10.1016/j.entcs.2005.10.016
   Hahn EM, 2009, LECT NOTES COMPUT SC, V5643, P641, DOI 10.1007/978-3-642-02658-4_49
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Hayden R., 2011, THESIS
   Hérault T, 2004, LECT NOTES COMPUT SC, V2937, P73
   Hermanns H, 2002, THEOR COMPUT SCI, V274, P43, DOI 10.1016/S0304-3975(00)00305-4
   HERMANNS H., 2001, LECT NOTES COMPUTER, V2090, P181
   Hillston J., 2005, Proceedings. Second International Conference on the Quantitative Evaluation of Systems, P33, DOI 10.1109/QEST.2005.12
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Kolesnichenko A., 2012, TRCTIT1211
   Kolesnichenko A., 2013, DSN13
   Kwiatkowska M., 2004, International Journal on Software Tools for Technology Transfer, V6, P128, DOI 10.1007/s10009-004-0140-2
   Latella D., 2013, TRQC012013 QUANTICOL
   Latella D., 2014, P 7 INT CONC EXP ICE
   Le Boudec JY, 2007, INT CONF QUANT EVAL, P3, DOI 10.1109/QEST.2007.8
   Lotka A., 1924, Elements of Mathematical Biology
   Mamei M, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1538942.1538945
   Massink Mieke, 2012, Coordination Models and Languages. Proceedings 14th International Conference, COORDINATION 2012, P152, DOI 10.1007/978-3-642-30829-1_11
   Massink M., 2014, FDN SCALABLE VERIFIC
   Massink M, 2013, SWARM INTELL-US, V7, P201, DOI 10.1007/s11721-013-0079-6
   Massink M, 2011, LECT NOTES COMPUT SC, V6603, P96, DOI 10.1007/978-3-642-19811-3_8
   McCaig C, 2011, THEOR COMPUT SCI, V412, P1557, DOI 10.1016/j.tcs.2010.09.024
   Mitzenmacher M, 2001, IEEE T PARALL DISTR, V12, P1094, DOI 10.1109/71.963420
   Montes de Oca MA, 2011, SWARM INTELL-US, V5, P305, DOI 10.1007/s11721-011-0062-z
   Naphade M, 2011, COMPUTER, V44, P32, DOI 10.1109/MC.2011.187
   Nenzi Laura, 2014, P VALUE TOOLS 2014 I
   Norman G, 2005, FORM ASP COMPUT, V17, P160, DOI 10.1007/s00165-005-0062-0
   Omicini A., 2013, ISRN SOFTW ENG, V2013
   Seeley TD, 2012, SCIENCE, V335, P108, DOI 10.1126/science.1210361
   Stefanek A, 2010, ELECTRON P THEOR COM, P159, DOI 10.4204/EPTCS.28.11
   Tribastone M, 2012, IEEE T SOFTWARE ENG, V38, P205, DOI 10.1109/TSE.2010.82
   Viroli M, 2013, SCI COMPUT PROGRAM, V78, P633, DOI 10.1016/j.scico.2012.12.003
   Volterra V, 1926, NATURE, V118, P558, DOI 10.1038/118558a0
   Younes HLS, 2004, LECT NOTES COMPUT SC, V2988, P46
NR 74
TC 18
Z9 19
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2015
VL 110
BP 23
EP 50
DI 10.1016/j.scico.2015.06.009
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CR3VX
UT WOS:000361262300003
DA 2024-07-18
ER

PT J
AU Bruni, R
   Corradini, A
   Gadducci, F
   Lafuente, AL
   Vandin, A
AF Bruni, Roberto
   Corradini, Andrea
   Gadducci, Fabio
   Lafuente, Alberto Lluch
   Vandin, Andrea
TI Modelling and analyzing adaptive self-assembly strategies with Maude
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Adaptation; Maude; Reflective Russian Dolls; Statistical model checking;
   PVeStA
ID SPECIFICATION; COORDINATION; SOFTWARE; LANGUAGE
AB Building adaptive systems with predictable emergent behavior is a difficult task and it is becoming a critical need. The research community has accepted the challenge by introducing approaches of various nature:, from software architectures to programming paradigms and analysis techniques. Our white-box conceptual approach to adaptive systems based on the notion of control data promotes a clear distinction between the application and the adaptation logic. In this paper we propose a concrete instance of our approach based on (i) a neat identification of control data; (ii) a hierarchical architecture that provides the basic structure to separate the adaptation and application logics; (iii) computational reflection as the main mechanism to realize the adaptation logic; (iv) probabilistic rule-based specifications and quantitative verification techniques to specify and analyze the adaptation logic. We show that our solution can be naturally realized in Maude, a Rewriting Logic based framework, and illustrate our approach by specifying, validating and analyzing a prominent example of adaptive systems: robot swarms equipped with self-assembly strategies. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bruni, Roberto; Corradini, Andrea; Gadducci, Fabio] Univ Pisa, Dipartimento Informat, I-56100 Pisa, Italy.
   [Lafuente, Alberto Lluch; Vandin, Andrea] IMT Inst Adv Studies, Lucca, Italy.
   [Vandin, Andrea] Univ Southampton, Dept Elect & Comp Sci, Southampton SO9 5NH, Hants, England.
C3 University of Pisa; IMT School for Advanced Studies Lucca; University of
   Southampton
RP Vandin, A (corresponding author), Univ Southampton, Dept Elect & Comp Sci, Southampton SO9 5NH, Hants, England.
EM bruni@di.unipi.it; andrea@di.unipi.it; gadducci@di.unipi.it;
   alberto.lluch@imtlucca.lt; a.vandin@soton.ac.uk
RI Vandin, Andrea/L-4563-2018; BRUNI, ROBERTO/KBB-9626-2024; GADDUCCI,
   FABIO/HSE-2262-2023; Lafuente, Alberto Lluch/G-4413-2011; Bruni,
   Roberto/O-8349-2015
OI Vandin, Andrea/0000-0002-2606-7241; GADDUCCI, FABIO/0000-0003-0690-3051;
   Lafuente, Alberto Lluch/0000-0001-7405-0818; Corradini,
   Andrea/0000-0001-6123-4175; Bruni, Roberto/0000-0002-7771-4154
FU European IP [257414 ASCENS]; European STReP [600708 QUANTICOL]; Italian
   PRIN [2010LHT4KM CINA]
FX Research partly supported by the European IP 257414 ASCENS, the European
   STReP 600708 QUANTICOL, and the Italian PRIN 2010LHT4KM CINA.
CR Agha G., 1986, Actors: a model of concurrent computation in distributed systems
   Agha G, 2006, ELECTRON NOTES THEOR, V153, P213, DOI 10.1016/j.entcs.2005.10.040
   AlTurki Musab, 2011, Algebra and Coalgebra in Computer Science. Proceedings 4th International Conference, CALCO 2011, P386, DOI 10.1007/978-3-642-22944-2_28
   AlTurki M, 2009, ELECTRON NOTES THEOR, V234, P3, DOI 10.1016/j.entcs.2009.02.069
   Andersson J, 2009, 2009 ICSE WORKSHOP ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS, P38, DOI 10.1109/SEAMS.2009.5069072
   [Anonymous], P 2004 DYN ASP WORKS
   Bentea L., 2013, RECENT TRENDS ALGEBR, V7841, P77
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   Brambilla M., 2012, Proceedings of the 11th International Conference on Autonomous Agents and Multiagent Systems, V1, P139
   Bruni Roberto, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P118, DOI 10.1007/978-3-642-34005-5_7
   Bruni R, 2012, LECT NOTES COMPUT SC, V7212, P240, DOI 10.1007/978-3-642-28872-2_17
   Bucchiarone A, 2011, SERVICE ENGINEERING: EUROPEAN RESEARCH RESULTS, P1, DOI 10.1007/978-3-7091-0415-6_1
   Cabri G., 2011, Proceedings 2011 International Conference on Collaboration Technologies and Systems (CTS 2011), P508, DOI 10.1109/CTS.2011.5928730
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Clavel M., 2007, LECT NOTES COMPUT SC, V4350
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   Dowling J, 2000, LECT NOTES COMPUT SC, V1826, P169
   Eckhardt Jonas, 2013, Recent Trends in Algebraic Development Techniques. 21st International Workshop, WADT 2012. Revised Selected Papers, P143, DOI 10.1007/978-3-642-37635-1_9
   Eckhardt J, 2012, LECT NOTES COMPUT SC, V7212, P78, DOI 10.1007/978-3-642-28872-2_6
   Frei R, 2010, J AMB INTEL HUM COMP, V1, P163, DOI 10.1007/s12652-010-0016-0
   Ghezzi C., 2011, SEAMS, P50
   Gjondrekaj E., 2012, SAC, P1522
   Gjondrekaj Edmond, 2012, Formal Methods and Software Engineering, P54
   Harvey I, 2005, ARTIF LIFE, V11, P79, DOI 10.1162/1064546053278991
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   Horn P., 2001, AUTOMATIC COMPUTING
   Khakpour N, 2012, SCI COMPUT PROGRAM, V78, P3, DOI 10.1016/j.scico.2011.09.004
   Lanese I, 2010, LECT NOTES COMPUT SC, V6084, P284, DOI 10.1007/978-3-642-15640-3_19
   McKinley PK, 2004, COMPUTER, V37, P56, DOI 10.1109/MC.2004.48
   Meseguer J, 2002, LECT NOTES COMPUT SC, V2374, P1
   Meseguer J, 2006, LECT NOTES COMPUT SC, V3927, P460
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   Mondada F, 2004, AUTON ROBOT, V17, P193, DOI 10.1023/B:AURO.0000033972.50769.1c
   O'Grady R, 2010, AUTON ROBOT, V28, P439, DOI 10.1007/s10514-010-9177-0
   Ricci A., 2012, SPLASH 2012, P73
   Salvaneschi G., ARXIV11050069V2
   Sebastio S., 2013, VALUETOOLS IN PRESS
   Sen K, 2005, LECT NOTES COMPUT SC, V3576, P266
   Sen K, 2005, INT CONF QUANT EVAL, P251, DOI 10.1109/QEST.2005.42
   Talcott CL, 2006, ELECTRON NOTES THEOR, V150, P143, DOI 10.1016/j.entcs.2005.12.028
   Talcott CL, 2007, ELECTRON NOTES THEOR, V181, P97, DOI 10.1016/j.entcs.2007.01.056
   Van Renesse R, 1998, SOFTWARE PRACT EXPER, V28, P963, DOI 10.1002/(SICI)1097-024X(19980725)28:9<963::AID-SPE179>3.0.CO;2-9
   Weyns D, 2012, ACM T AUTON ADAP SYS, V7, DOI 10.1145/2168260.2168268
   Wirsing Martin, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P54, DOI 10.1007/978-3-642-34005-5_4
NR 44
TC 12
Z9 12
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 7
PY 2015
VL 99
BP 75
EP 94
DI 10.1016/j.scico.2013.11.043
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CA5PI
UT WOS:000348959900004
OA Green Accepted, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Baeten, J
   Markovski, J
AF Baeten, Jos
   Markovski, Jasen
TI The role of supervisory controller synthesis in automatic control
   software development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Supervisory control theory; Model-driven development; Software synthesis
ID SAFETY; BISIMULATION; VERIFICATION
AB We give an overview of a model-driven systems engineering approach for high-tech systems that relies on supervisory controller synthesis. The proposed framework has a process-theoretic foundation and supports extensions with quantitative features. We briefly discuss several industrial case studies that highlight the advantages of the proposed approach. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Baeten, Jos] Ctr Wiskunde & Informat, NL-1090 GB Amsterdam, Netherlands.
   [Baeten, Jos; Markovski, Jasen] Eindhoven Univ Technol, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Markovski, J (corresponding author), Eindhoven Univ Technol, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM jos.baeten@cwi.nl; j.markovski@tue.nl
FU Dutch NWO project: ProThOS [600.065.120.11N124]
FX Supported by Dutch NWO project: ProThOS, no. 600.065.120.11N124.
CR Anderson S, 2003, RELIAB ENG SYST SAFE, V81, P235, DOI 10.1016/S0951-8320(03)00088-7
   [Anonymous], 2011, COSY
   Baeten JCM, 2011, P AMER CONTR CONF, P4496
   Baeten J, 2011, ELECTRON P THEOR COM, P36, DOI 10.4204/EPTCS.60.3
   Barrett G, 1998, DISCRETE EVENT DYN S, V8, P377, DOI 10.1023/A:1008301317459
   Cassandras C., 2004, INTRO DISCRETE EVENT
   Cassez F, 2005, LECT NOTES COMPUT SC, V3653, P66, DOI 10.1007/11539452_9
   Cha S, 2003, RELIAB ENG SYST SAFE, V82, P11, DOI 10.1016/S0951-8320(03)00059-0
   Forschelen STJ, 2012, DISCRETE EVENT DYN S, V22, P511, DOI 10.1007/s10626-012-0130-6
   Heymann M, 1998, IEEE T AUTOMAT CONTR, V43, P3, DOI 10.1109/9.654883
   Hinchey M., 1995, INT SERIES COMPUTER
   Iwu F, 2007, RELIAB ENG SYST SAFE, V92, P156, DOI 10.1016/j.ress.2005.11.060
   Kelly T, 2009, COMPUTER, V42, P52, DOI 10.1109/MC.2009.391
   Kim T, 2005, RELIAB ENG SYST SAFE, V87, P351, DOI 10.1016/j.ress.2004.06.005
   Lahtinen J, 2012, RELIAB ENG SYST SAFE, V105, P104, DOI 10.1016/j.ress.2012.03.021
   LEVESON NG, 1990, IEEE SOFTWARE, V7, P55, DOI 10.1109/52.60589
   MA C, 2005, LECT NOTES CONTROL I, V317
   Markovski J., 2012, 2012 12th International Conference on Application of Concurrency to System Design (ACSD), P52, DOI 10.1109/ACSD.2012.24
   Markovski J, 2010, IEEE DECIS CONTR P, P3481, DOI 10.1109/CDC.2010.5717095
   Markovski J., 2010, 10 INT WORKSH DISCR, P300, DOI DOI 10.3182/20100830-3-DE-4013.00048
   Mertke T, 2000, IEEE SYS MAN CYBERN, P2455, DOI 10.1109/ICSMC.2000.884360
   Morgenstern A, 2011, ELECTRON P THEOR COM, P33, DOI 10.4204/EPTCS.50.3
   Overkamp A, 1997, IEEE T AUTOMAT CONTR, V42, P498, DOI 10.1109/9.566659
   Piterman N, 2006, LECT NOTES COMPUT SC, V3855, P364
   R.T.C.A. Inc, 1992, DO178B EUROCAE
   RAMADGE PJ, 1987, SIAM J CONTROL OPTIM, V25, P206, DOI 10.1137/0325013
   Rutten J, 2000, P WODES 2000 KLUW, P31
   Schiffelers R. R. H., 2009, ELECT COMM EASST, V21, P1
   Sutter H., 2005, ACM Queue, V3, P54, DOI 10.1145/1095408.1095421
   Tabuada P, 2006, IEEE T AUTOMAT CONTR, V51, P1862, DOI 10.1109/TAC.2006.886494
   Theunissen R.J. M., 2009, Proceedings of the 10th European control conference. EUCA, P1
   *UK MIN DEF, 1997, 0055 UK MIN DEF
   Walia GS, 2009, INFORM SOFTWARE TECH, V51, P1087, DOI 10.1016/j.infsof.2009.01.004
   Wang Y., 2010, P WODES 2010 IFAC, P269
   Wang Y, 2009, ACM SIGPLAN NOTICES, V44, P252, DOI 10.1145/1594834.1480913
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
   Zhou CY, 2006, IEEE T AUTOMAT CONTR, V51, P754, DOI 10.1109/TAC.2006.875036
NR 37
TC 4
Z9 4
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 17
EP 22
DI 10.1016/j.scico.2013.11.016
PN 1
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100004
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Stevens, R
   De Roover, C
   Noguera, C
   Kellens, A
   Jonckers, V
AF Stevens, Reinout
   De Roover, Coen
   Noguera, Carlos
   Kellens, Andy
   Jonckers, Viviane
TI A logic foundation for a general-purpose history querying tool
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE History queries; Meta-programming; Smalltalk; Logic programming; Program
   analysis
AB Version control systems (VCS) have become indispensable software development tools. The version snapshots they store to provide support for change coordination and release management, effectively track the evolution of the versioned software and its development process. Despite this wealth of historical information, it has only been leveraged by tools that are dedicated to a specific task such as empirical validation of software engineering practices or fault prediction. General-purpose tool support for reasoning about the historical information stored in a version control system is limited. This paper provides a comprehensive description of a logic-based, general-purpose history query tool called ABSINTHE. ABSINTHE supports querying versioned Smalltalk system using logic queries in which quantified regular path expressions are embedded. These expressions lend themselves to specifying the properties that each individual version in a sequence of successive software versions ought to exhibit. To demonstrate the general-purpose nature of our history query tool, we use it to verify development process constraints, to identify temporal bad smells and to answer questions that developers commonly ask. Finally, we compare a query written in ABSINTHE to an equivalent one written in Smalltalk. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Stevens, Reinout; De Roover, Coen; Noguera, Carlos; Kellens, Andy; Jonckers, Viviane] Vrije Univ Brussel, B-1050 Brussels, Belgium.
C3 Vrije Universiteit Brussel
RP Stevens, R (corresponding author), Vrije Univ Brussel, Pl Laan 2, B-1050 Brussels, Belgium.
EM resteven@vub.ac.be; cderoove@vub.ac.be; cnoguera@vub.ac.be;
   akellens@vub.ac.be; vejoncke@soft.vub.ac.be
OI De Roover, Coen/0000-0002-1710-1268; Jonckers,
   Viviane/0000-0001-7724-3412
FU FWO Vlaanderen; IWT Vlaanderen
FX Funded by a doctoral scholarship provided by "IWT Vlaanderen".; Funded
   by the Cha-Q SBO project funded by "IWT Vlaanderen".; Funded by the
   AIRCO project of "FWO Vlaanderen".
CR Aho A.V., 1990, ALGORITHMS FINDING P
   [Anonymous], 2010, Eval. Usability Program, DOI DOI 10.1145/1937117.1937125
   BERARD B, 2001, SYSTEM SOFTWARE VERI
   Black A.P., 2009, PHARO EXAMPLE
   Bradley A.W., 2011, Proc. 8th Working Conf. Mining Software Repositories, P193, DOI DOI 10.1145/1985441.1985469
   Cohen T, 2006, ACM SIGPLAN NOTICES, V41, P89, DOI 10.1145/1167515.1167481
   D'Ambros Marco, 2010, Proceedings of the 2010 7th IEEE Working Conference on Mining Software Repositories (MSR 2010), P31, DOI 10.1109/MSR.2010.5463279
   de Moor O., 2002, HIGHER ORDER SYMBOLI, P15
   De Roover Coen, 2011, P 9 INT C PRINCIPLES, P71, DOI [10.1145/2093157.2093168, DOI 10.1145/2093157.2093168]
   De Volder K, 2006, LECT NOTES COMPUT SC, V3819, P88
   Fritz T., 2010, Proceedings of the 32nd International Conference on Software Engineering - Volume 1, ICSE '10, V1, P175
   Giger E, 2011, P 8 WORK C MIN SOFTW, P83, DOI [10.1145/1985441.1985456, DOI 10.1145/1985441.1985456]
   Gîrba T, 2006, J SOFTW MAINT EVOL-R, V18, P207, DOI 10.1002/smr.325
   Gomez V.U., 2012, THESIS VRIJE U BRUSS
   Hindle A., 2005, P 2005 WORK C MIN SO, P100
   Hou DQ, 2006, IEEE T SOFTWARE ENG, V32, P404, DOI 10.1109/TSE.2006.60
   Kellens A., 2011, 2011 18th Working Conference on Reverse Engineering, P389, DOI 10.1109/WCRE.2011.54
   Khomh F., 2012, 2012 9th IEEE Working Conference on Mining Software Repositories (MSR 2012), P179, DOI 10.1109/MSR.2012.6224279
   Laval J, 2011, SCI COMPUT PROGRAM, V76, P1177, DOI 10.1016/j.scico.2010.11.014
   Mougenot A, 2009, LECT NOTES COMPUT SC, V5523, P16, DOI 10.1007/978-3-642-02164-0_2
   Stevens R., 2011, THESIS VRIJE U BRUSS
   Zimmermann T, 2004, PROC INT CONF SOFTW, P563, DOI 10.1109/ICSE.2004.1317478
NR 22
TC 2
Z9 2
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 107
EP 120
DI 10.1016/j.scico.2014.02.014
PN 1
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8JX
UT WOS:000345180800008
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Mousavi, MR
   Ravara, A
AF Mousavi, Mohammad Reza
   Ravara, Antonio
TI Foreword
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Workshop on the Foundation of Coordination Languages
   and Software Architectures (FOCLASA)
CT 10th International Workshop on the Foundation of Coordination Languages
   and Software Architectures (FOCLASA)
CY SEP 10-10, 2011
CY SEP 10-10, 2011
CL Aachen, GERMANY
CL Aachen, GERMANY
C1 [Mousavi, Mohammad Reza] Halmstad Univ, Ctr Res Embedded Syst CERES, Halmstad, Sweden.
   [Ravara, Antonio] Univ Nova Lisboa, Dept Informat, Fac Sci & Technol, Lisbon, Portugal.
C3 Halmstad University; Universidade Nova de Lisboa
RP Mousavi, MR (corresponding author), Halmstad Univ, Ctr Res Embedded Syst CERES, Halmstad, Sweden.
RI Mousavi, Mohammad Reza/A-3410-2013; Ravara, Antonio/G-1667-2016
OI Mousavi, Mohammad Reza/0000-0002-4869-6794; Ravara,
   Antonio/0000-0001-8074-0380
NR 0
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 1
EP 1
DI 10.1016/j.scico.2013.11.039
PN A
PG 1
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AJ8BX
UT WOS:000337928800001
DA 2024-07-18
ER

PT J
AU van Dooren, M
   Jacobs, B
   Joosen, W
AF van Dooren, Marko
   Jacobs, Bart
   Joosen, Wouter
TI Modular type checking of anchored exception declarations
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Exception; Anchored exception declaration; Modular; Soundness
ID STATIC ANALYSIS
AB Checked exceptions improve the robustness of software, but they also decrease its adaptability because they must be propagated explicitly, and because they must often be handled even if they cannot be thrown. Anchored exception declarations solve both problems by allowing a method to declare its exceptional behavior in terms of other methods.
   The original type checking analyses for anchored exception declarations, however, are not modular. In this paper, we present algorithms for modular verification of soundness in an object-oriented language without parametric polymorphism. (C) 2013 Elsevier B.V. All rights reserved.
C1 [van Dooren, Marko; Jacobs, Bart; Joosen, Wouter] Katholieke Univ Leuven, Dept Comp Sci, DistriNet, B-3001 Louvain, Belgium.
C3 KU Leuven
RP van Dooren, M (corresponding author), Katholieke Univ Leuven, Dept Comp Sci, DistriNet, Celestijnenlaan 200A, B-3001 Louvain, Belgium.
EM Marko.vanDooren@cs.kuleuven.be; Bart.jacobs@cs.kuleuven.be;
   Wouter.Joosen@cs.kuleuven.be
RI Jacobs, Bart/B-1271-2014
OI Jacobs, Bart/0000-0002-3605-249X
CR Allen M., 2003, SIGPLAN Notices, V38, P284, DOI 10.1145/966049.777394
   Chang B.-M., 2001, SAC
   Fahndrich M., 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P114, DOI 10.1007/BFb0032737
   FAHNDRICH M, 1997, P 1 WORKSH TYP COMP
   Flatt Matthew., 1999, FORMAL SYNTAX SEMANT, V1523, P241, DOI [10.1007/3-540-48737-9_7, DOI 10.1007/3-540-48737-9_7]
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Glynn K, 2002, ACM SIGPLAN NOTICES, V37, P98, DOI 10.1145/583852.581488
   GUZMAN J, 1994, 5 ACM SIGPLAN WORKSH
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Jo JW, 2004, J SYST SOFTWARE, V72, P59, DOI 10.1016/S0164-1212(03)00057-8
   Kennedy A.J., 2007, FOOL WOOD 07
   Kwangkeun Yi, 1997, Static Analysis. 4th International Symposium, SAS '97 Proceedings, P98
   Kwangkeun Yi, 1994, Static Analysis. First International Static Analysis Symposium, SAS '94 Proceedings, P238
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Pessaux F., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P276, DOI 10.1145/292540.292565
   Robillard M. P., 2000, Software Engineering Notes, V25, P2, DOI 10.1145/357474.355046
   Robillard MP, 2003, ACM T SOFTW ENG METH, V12, P191, DOI 10.1145/941566.941569
   SCHAEFER CF, 1993, SOFTWARE PRACT EXPER, V23, P1157, DOI 10.1002/spe.4380231007
   Sinha S, 1998, PROC IEEE INT CONF S, P348, DOI 10.1109/ICSM.1998.738526
   van Dooren M, 2005, ACM SIGPLAN NOTICES, V40, P455, DOI 10.1145/1103845.1094847
   van Dooren M., ANAL ANCHORED EXCEPT
NR 21
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2014
VL 87
BP 44
EP 61
DI 10.1016/j.scico.2013.10.007
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AH3GP
UT WOS:000336012000004
OA Green Accepted, hybrid
DA 2024-07-18
ER

PT J
AU Barboni, E
   Martinie, C
   Navarre, D
   Palanque, P
   Winckler, M
AF Barboni, Eric
   Martinie, Celia
   Navarre, David
   Palanque, Philippe
   Winckler, Marco
TI Bridging the gap between a behavioural formal description technique and
   a user interface description language: Enhancing ICO with a graphical
   user interface markup language
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based approaches; User interface description language; Formal
   description techniques; Behavioural modelling; Graphical user interface
   markup language
ID SPECIFICATION
AB In the last years, User Interface Description Languages (UIDLs) appeared as a suitable solution for developing interactive systems. In order to implement reliable and efficient applications, we propose to employ a formal description technique called ICO (Interactive Cooperative Object) that has been developed to cope with complex behaviours of interactive systems including event-based and multimodal interactions. So far, ICO is able to describe most of the parts of an interactive system, from functional core concerns to fine grain interaction techniques, but, even if it addresses parts of the rendering, it still not has means to describe the effective rendering of such interactive system. This paper presents a solution to overcome this gap using markup languages. A first technique is based on the Java technology called JavaFX and a second technique is based on the emergent UsiXML language for describing user interface components for multi-target platforms. The proposed approach offers a bridge between markup language based descriptions of the user interface components and a robust technique for describing behaviour using ICO modelling. Furthermore, this paper highlights how it is possible to take advantage from both behavioural and markup language description techniques to propose a new model-based approach for prototyping interactive systems. The proposed approach is fully illustrated by a case study using an interactive application embedded into interactive aircraft cockpits. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Barboni, Eric; Martinie, Celia; Navarre, David; Palanque, Philippe; Winckler, Marco] Univ Toulouse, Inst Res Informat Toulouse, ICS Team, F-31042 Toulouse 9, France.
RP Navarre, D (corresponding author), Univ Toulouse, Inst Res Informat Toulouse, ICS Team, 118 Route Narbonne, F-31042 Toulouse 9, France.
EM barboni@irit.fr; martinie@irit.fr; navarre@irit.fr; palanque@irit.fr;
   winckler@irit.fr
RI Winckler, Marco/AAV-4113-2020; Navarre, David/HMD-6597-2023; Palanque,
   Philippe/IAM-9981-2023
OI Navarre, David/0000-0002-2900-2056; Palanque,
   Philippe/0000-0002-5381-971X
FU Research & Technology Project (RT) ALDABRA (Architecture and Language
   for Dynamic and Behaviourally Rich interactive Application) (IRIT-CNES)
FX This work is supported by the Research & Technology Project (RT) ALDABRA
   (Architecture and Language for Dynamic and Behaviourally Rich
   interactive Application) (IRIT-CNES).
CR [Anonymous], 2004, P 6 INT C MULTIMODAL, DOI DOI 10.1145/1027933.1027969
   Anson E., 1982, Computer Graphics, V16, P107, DOI 10.1145/965145.801269
   Appert C., 2006, Proceedings of the 19th Annual ACM Symposium on User Interface Software and Technology, P319
   *ARINC, 2002, 661 ARINC
   *ARINC, 2005, 6612 ARINC AIRL EL E
   BARBONI E, 2006, LNCS
   Barboni E, 2010, ACM SIGCHI C ENG INT, P143
   Barboni E., 2007, P SIES 2007 IEEE 2 I
   Bastide R, 2000, CONCURRENCY-PRACT EX, V12, P1379, DOI 10.1002/1096-9128(20001210)12:14<1379::AID-CPE514>3.0.CO;2-B
   Bastide R, 1998, SPRING COMP SCI, P171
   Bastide R., P 3 IFIP TC13 C HUM
   Blanch Renaud., 2006, P WORKING C ADV VISU, p51. isbn
   Book M, 2009, J WEB ENG, V8, P48
   BUXTON WAS, 1990, HUMAN-COMPUTER INTERACTION : INTERACT 90, P449
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   Cardelli L., 1985, Computer Graphics, V19, P199, DOI 10.1145/325165.325238
   CARR DA, 1994, HUMAN FACTORS IN COMPUTING SYSTEMS, CHI '94 CONFERENCE PROCEEDINGS - CELEBRATING INTERDEPENDENCE, P372, DOI 10.1145/191666.191793
   Coninx K, 2007, LECT NOTES COMPUT SC, V4323, P95, DOI 10.1007/978-3-540-69554-7_8
   Conversy S., 2008, LECT NOTES COMPUTER
   Dix A.J., 1991, Formal Methods for Interactive Systems
   Dumas B., 2008, Proc. of the 2nd int. Conf. 159on Tangible and Embedded interaction (Bonn, Germany, P47, DOI DOI 10.1145/1347390.1347403
   ESTEBAN O, 1995, P INT 95 C, P121
   Garcia Josefina Guerrero, 2008, International Journal of Web Engineering and Technology, V4, P163, DOI 10.1504/IJWET.2008.018096
   GENRICH HJ, 1991, HIGH LEVEL PETRI NET, P3
   Guerrero-García J, 2009, LA-WEB: 2009 LATIN AMERICAN WEB CONGRESS, P36, DOI 10.1109/LA-WEB.2009.40
   Hinckley K., 1998, 11th Annual Symposium on User Interface Software and Technology. UIST. Proceedings of the ACM Symposium, P49, DOI 10.1145/288392.288572
   Huan Chao Keh, 1991, 1991 ACM Computer Science Conference. Preparing for the 21st Century. Proceedings, P487
   Hudson S. E., 1989, UIST. Proceedings of the ACM SIGGRAPH Symposium on User Interface Software and Technology, P105, DOI 10.1145/73660.73673
   Hudson S.E., 2005, CHI, P381
   JACOB RJK, 1986, ACM T GRAPHIC, V5, P283, DOI 10.1145/27623.27624
   KATSURADA K, 2003, P 5 INT C MULT INT I, P281
   KIERAS D, 1983, P SIGCHI C HUM FACT, P103
   Ladry J-F, 2009, INT C MULT INT WORKS, P135
   Latoschik ME, 2002, FOURTH IEEE INTERNATIONAL CONFERENCE ON MULTIMODAL INTERFACES, PROCEEDINGS, P411, DOI 10.1109/ICMI.2002.1167030
   Martinie C., 2012, 12 INT C SPAC OP SPA
   Martinie C., 2012, LNCS
   Michotte B, 2008, FOURTH INTERNATIONAL CONFERENCE ON AUTONOMIC AND AUTONOMOUS SYSTEMS (ICAS 2008), P15, DOI 10.1109/ICAS.2008.29
   Montero F, 2006, LECT NOTES COMPUT SC, V3941, P161
   Navarre D., 2001, 12 IEEE INT WORKSH R
   Navarre D., 2005, P INTERACT 2005 ROM
   Navarre D., 2008, 15 INT WORKSH DES VE
   NAVARRE D, 2004, HCI AER 04 TOUL FRAN
   Navarre D, 2009, ACM T COMPUT-HUM INT, V16, DOI 10.1145/1614390.1614393
   Schaefer R., 2006, Task Models and Diagrams for Users Interface Design. 5th International Workshop, TAMODIA 2006. Revised Papers (Lecture Notes in Computer Science Vol. 4385), P39
   Shaer O., 2008, P CHI 08, P3949
   Sibert J. L., 1986, Computer Graphics, V20, P259, DOI 10.1145/15886.15915
   Silva C.E., 2012, HUM CTR SOFTW ENG HC
   Smith S., 1999, 321 YCS U YORK
   *SVG W3C, 2003, SCAL VECT GRAPH SVG
   SZEKELY PA, 1988, SIGPLAN NOTICES, V23, P36, DOI 10.1145/62084.62088
   Tatsukawa K., 1991, Human Factors in Computing Systems. Reaching Through Technology. CHI '91. Conference Proceedings, P323, DOI 10.1145/108844.108934
   Trindade FM, 2007, LECT NOTES COMPUT SC, V4849, P293
   VANDERDONCKT J, 2003, P 9 IFIP TC 13 INT C, P455
   Tran V, 2010, ICEIS 2010: PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON ENTERPRISE INFORMATION SYSTEMS, VOL 5: HUMAN-COMPUTER INTERACTION, P155
   Willans JS, 2001, LECT NOTES COMPUT SC, V2254, P91
   WINCKLER M, 2003, INT WORKSH DES SPEC
   Winckler M, 2008, LECT NOTES COMPUT SC, V5136, P121, DOI 10.1007/978-3-540-70569-7_12
   World Wide Web Consortium, 2011, STAT CHART XML SCXML
   1992, SIGCHI B, V24, P32
NR 59
TC 4
Z9 4
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2014
VL 86
SI SI
BP 3
EP 29
DI 10.1016/j.scico.2013.04.001
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AG7OW
UT WOS:000335608500002
OA Green Accepted, Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Kolandouz-Rahimi, S
   Lano, K
   Pillay, S
   Troya, J
   Van Gorp, P
AF Kolandouz-Rahimi, S.
   Lano, K.
   Pillay, S.
   Troya, J.
   Van Gorp, P.
TI Evaluation of model transformation approaches for model refactoring
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model transformation; Measurement; Quality characteristics; Model
   restructuring
AB This paper provides a systematic evaluation framework for comparing model transformation approaches, based upon the ISO/IEC 9126-1 quality characteristics for software systems. We apply this framework to compare five transformation approaches (QVT-R. ATL, Kermeta, UML-RSDS and GrGen.NET) on a complex model refactoring case study: the amalgamation of apparent attribute clones in a class diagram.
   The case study highlights the problems with the specification and design of the refactoring category of model transformations, and provides a challenging example by which model transformation languages and approaches can be compared. We take into account a wide range of evaluation criteria aspects such as correctness, efficiency, flexibility, interoperability, re-usability and robustness, which have not been comprehensively covered by other comparative surveys of transformation approaches.
   The results show clear distinctions between the capabilities and suitabilities of different approaches to address the refactoring form of transformation problem. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Kolandouz-Rahimi, S.; Lano, K.; Pillay, S.; Troya, J.; Van Gorp, P.] Kings Coll London, London WC2R 2L5, England.
RP Lano, K (corresponding author), Kings Coll London, London WC2R 2L5, England.
EM kevin.lano@kcl.ac.uk
RI Van Gorp, Pieter/L-9144-2013; Troya, Javier/B-6951-2017
OI Van Gorp, Pieter/0000-0001-5197-3986; Troya, Javier/0000-0002-1314-9694
CR [Anonymous], INT J SOFTW INFORM
   [Anonymous], 2007, JTC1SC7 ISOIEC
   [Anonymous], 2001, 912612001 ISOIEC
   [Anonymous], 2012, Medini QVT
   [Anonymous], 2001, StandardISO/IEC9126
   Basil V. R., 1994, ENCY SOFTWARE ENG
   Buttner F., 2011, MODEVVA
   Carvallo J., 2004, SOFTW MEAS EUR FOR S
   Chhabra J., 2011, P WCE 2011 LOND UK
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Drey Z., 2009, Kermeta Language, Reference Manual
   Goldschmidt T., 2011, REFINEMENT TRANSFORM
   Gray J, 2006, COMPUTER, V39, P51, DOI 10.1109/MC.2006.45
   Gronback R.C., 2009, ECLIPSE MODELLING PR
   GRONMO R, 2009, ECMDA FA, V5562, P2
   Guerra E, 2010, LECT NOTES COMPUT SC, V6394, P106
   Jakumeit Edgar, 2010, International Journal on Software Tools for Technology Transfer, V12, P263, DOI 10.1007/s10009-010-0148-8
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Kapová L, 2010, LECT NOTES COMPUT SC, V6093, P151, DOI 10.1007/978-3-642-13821-8_12
   Kolandouz-Rahimi S., 2012, QUALITY IMPROVEMENT
   Lano K., 2012, MODEVVA MOD
   Lano K., 2011, ICSEA
   Lano K., 2011, INT C MOD TRANSF
   Lano K., 2012, THE UML RSDS TOOLSET
   Mens T., 2005, P DAGST SEM LANG ENG
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P143, DOI 10.1016/j.entcs.2005.10.022
   Moha N., 2010, INT J SOFTW TOOLS TE
   MOHAGHEGHI P, 2007, LNCS, V5002, P275
   Muller PA, 2005, LECT NOTES COMPUT SC, V3713, P264, DOI 10.1007/11557432_19
   Object Management Group, 2010, QUER VIEW TRANSF SPE
   Object Management Group, 2009, FORMAL20100505 OMG
   Rahimi S. Kolandouz, 2013, THESIS KINGS COLL LO
   Rose L., 2010, INT C MOD TRANSF
   Rose L. M., 2012, SOFTWARE SYSTEMS MOD
   Rose LM, 2010, LECT NOTES COMPUT SC, V6394, P61
   Sendall S., MODEL TRANSFORMATION, P42
   System and Software Engineering Lab Vrije Universiteit Brussel Belgium, MDE CAS STUD
   TAENTZER G, 2005, MOD TRANSF PRACT WOR
   van Amstel M., 2008, 12 ECOOP WORKSH QUAN
   van Amstel Marcel F., 2011, Theory and Practice of Model Transformations. Proceedings of the 4th International Conference, ICMT 2011, P108, DOI 10.1007/978-3-642-21732-6_8
   van Amstel MF, 2009, LECT NOTES COMPUT SC, V5563, P239, DOI 10.1007/978-3-642-02408-5_17
   Van Corp P., 2012, SOFTW SYST MODELL, V11
   Varró D, 2008, LECT NOTES COMPUT SC, V5088, P540
   Vignaga A., 2008, METRICS MEASURING AT
NR 44
TC 31
Z9 32
U1 1
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2014
VL 85
SI SI
BP 5
EP 40
DI 10.1016/j.scico.2013.07.013
PN A
PG 36
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KW
UT WOS:000350618600002
OA hybrid
DA 2024-07-18
ER

PT J
AU Dal Lago, U
   Petit, B
AF Dal Lago, Ugo
   Petit, Barbara
TI Linear dependent types in a call-by-value scenario
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Complexity analysis; Implicit computational complexity; Type systems;
   Linear logic
ID TERMINATION; GEOMETRY; LANGUAGE; SYSTEM
AB Linear dependent types were introduced recently (Dal Lago and Gaboardi, 2012) [26] as a formal system that allows to precisely capture both the extensional behavior and the time complexity of A-terms, when the latter are evaluated by Krivine's abstract machine. In this work, we show that the same paradigm can be applied to call-by-value computation. A system of linear dependent types for Plotkin's PCF is introduced, called dlPCF(v), whose types reflect the complexity of evaluating terms in the CEK machine. dlPCF(v) is proved to be sound, but also relatively complete: every true statement about the extensional and intentional behavior of terms can be derived, provided all true index term inequalities can be used as assumptions. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Dal Lago, Ugo] INRIA Sophia Antipolis, Bologna, Italy.
   [Dal Lago, Ugo] Univ Bologna, I-40126 Bologna, Italy.
   [Petit, Barbara] INRIA Rhone Alpes, Grenoble, France.
C3 University of Bologna
RP Dal Lago, U (corresponding author), INRIA Sophia Antipolis, Bologna, Italy.
EM dallago@cs.unibo.it; barbara.petit@inria.fr
RI Dal Lago, Ugo/K-9621-2015; Dal Lago, Ugo/AAA-6022-2020
OI Dal Lago, Ugo/0000-0001-9200-070X; Dal Lago, Ugo/0000-0001-9200-070X
CR [Anonymous], 1989, Studies in Logic and the Foundations of Mathematics
   Asperti A, 2001, INFORM COMPUT, V170, P49, DOI 10.1006/inco.2001.2869
   Asperti A., 1998, OPTIMAL IMPLEMENTATI
   Ayache N., CERTIFYING REASONING, P32
   Baader Franz, 1998, TERM REWRITING ALL
   Baillot P, 2010, LECT NOTES COMPUT SC, V6012, P104, DOI 10.1007/978-3-642-11957-6_7
   Baillot P, 2009, INFORM COMPUT, V207, P41, DOI 10.1016/j.ic.2008.08.005
   Bakker J.W. de, 1980, PRENTICE HALL INT SE
   Barthe G, 2008, LECT NOTES COMPUT SC, V5213, P493, DOI 10.1007/978-3-540-87531-4_35
   Benzinger R, 2004, THEOR COMPUT SCI, V318, P79, DOI 10.1016/j.tcs.2003.10.022
   COOK SA, 1978, SIAM J COMPUT, V7, P70, DOI 10.1137/0207005
   Coppo M., 1980, Notre Dame Journal of Formal Logic, V21, P685, DOI 10.1305/ndjfl/1093883253
   Crary K., 2000, Conference Record of POPL'00: 27th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages. Papers Presented at the Symposium, P184, DOI 10.1145/325694.325716
   Dal Lago U, 2009, ACM T COMPUT LOG, V10
   Dal Lago U, 2013, ACM SIGPLAN NOTICES, V48, P167, DOI 10.1145/2480359.2429090
   Danner N., 2013, WORKSH PROGR LANG ME, P25
   de Carvalho D., 2009, EXECUTION TIME LAMBD
   Felleisen M., 1986, 197 IND U COMP SCI D
   Ghica DR, 2011, ACM SIGPLAN NOTICES, V46, P345, DOI 10.1145/1925844.1926425
   GIRARD JY, 1992, THEOR COMPUT SCI, V97, P1, DOI 10.1016/0304-3975(92)90386-T
   Gulwani S, 2009, LECT NOTES COMPUT SC, V5643, P51, DOI 10.1007/978-3-642-02658-4_7
   Hoffmann J, 2011, ACM SIGPLAN NOTICES, V46, P357, DOI 10.1145/1925844.1926427
   Hofmann M., 1999, Proceedings. 14th Symposium on Logic in Computer Science (Cat. No. PR00158), P464, DOI 10.1109/LICS.1999.782641
   Jost S, 2010, ACM SIGPLAN NOTICES, V45, P223, DOI 10.1145/1707801.1706327
   Karlbary S., 2000, POPL, P184
   Kobayashi N, 2009, IEEE S LOG, P179, DOI 10.1109/LICS.2009.29
   Krivine Jean-Louis, 2007, Higher-Order and Symbolic Computation, V20, P199, DOI 10.1007/S10990-007-9018-9
   LAMPING J, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P16, DOI 10.1145/96709.96711
   Maraist John, 1995, P 11 ANN MATH FDN PR, P370, DOI [10.1016/S1571-0661(04)00022-2, DOI 10.1016/S1571-0661(04)00022-2]
   Martini Simone, 2012, LOGICAL METHODS COMP, V8
   Plotkin G. D., 1977, Theoretical Computer Science, V5, P223, DOI 10.1016/0304-3975(77)90044-5
   Rosendahl M., FPCA, P144
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   Sands D., 1990, LNCS, V432, P361
   Volpano D., 1996, Journal of Computer Security, V4, P167
   Xi HW, 2001, IEEE S LOG, P231, DOI 10.1109/LICS.2001.932500
NR 36
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2014
VL 84
SI SI
BP 77
EP 100
DI 10.1016/j.scico.2013.07.010
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE6EZ
UT WOS:000334084700005
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Bauer, SS
   Larsen, KG
   Legay, A
   Nyman, U
   Wasowski, A
AF Bauer, Sebastian S.
   Larsen, Kim G.
   Legay, Axel
   Nyman, Ulrik
   Wasowski, Andrzej
TI A modal specification theory for components with data
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Modal transition systems; Specifications; Interfaces; Data abstraction;
   Modal specifications with data
ID REFINEMENT
AB Modal specification is a well-known formalism used as an abstraction theory for transition systems. Modal specifications are transition systems equipped with two types of transitions: must-transitions that are mandatory to any implementation, and may-transitions that are optional. The duality of transitions allows for developing a unique approach for both logical and structural compositions, and eases the step-wise refinement process for building implementations. We propose Modal Specifications with Data (MSDs), the first modal specification theory with explicit representation of data. Our new theory includes the most commonly seen ingredients of a specification theory; that is parallel composition, conjunction and quotient. As MSDs are by nature potentially infinite-state systems, we propose symbolic representations based on effective predicates. Our theory serves as a new abstraction-based formalism for transition systems with data. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bauer, Sebastian S.] Univ Munich, Inst Informat, D-80539 Munich, Germany.
   [Larsen, Kim G.; Legay, Axel; Nyman, Ulrik] Aalborg Univ, Aalborg, Denmark.
   [Legay, Axel] INRIA IRISA, Rennes, France.
   [Wasowski, Andrzej] IT Univ Copenhagen, Copenhagen, Denmark.
C3 University of Munich; Aalborg University; Universite de Rennes; IT
   University Copenhagen
RP Nyman, U (corresponding author), Aalborg Univ, Aalborg, Denmark.
EM bauerse@pst.ifi.lmu.de; kgl@cs.aau.dk; axel.legay@irisa.fr;
   ulrik@cs.aau.dk; wasowski@itu.dk
RI Bauer, Sebastian/HHR-9319-2022; Nyman, Ulrik/HNJ-5352-2023
OI Nyman, Ulrik/0000-0001-6430-540X; Wasowski, Andrzej/0000-0003-0532-2685;
   Guldstrand Larsen, Kim/0000-0002-5953-3384
CR Abdulla PA, 2000, INFORM COMPUT, V160, P109, DOI 10.1006/inco.1999.2843
   Abdulla PA, 2008, J LOGIC COMPUT, V18, P153, DOI 10.1093/logcom/exm062
   Alur R, 1998, LECT NOTES COMPUT SC, V1466, P163, DOI 10.1007/BFb0055622
   [Anonymous], 1980, CALCULUS COMMUNICATI, DOI DOI 10.1007/3-540-10235-3
   [Anonymous], 2001, LNCS, DOI [DOI 10.1007/3-540-45449-7_11, DOI 10.1007/3-540-45449-711]
   [Anonymous], 1989, CWI Q.
   Antonik A, 2008, LECT NOTES COMPUT SC, V4962, P112, DOI 10.1007/978-3-540-78499-9_9
   Barros T, 2009, ANN TELECOMMUN, V64, P25, DOI 10.1007/s12243-008-0069-7
   Basu A, 2011, IEEE SOFTWARE, V28, P41, DOI 10.1109/MS.2011.27
   Bauer S., 2012, LECT NOTES COMPUTER, V7253
   Bauer SS, 2011, LECT NOTES COMPUT SC, V6996, P418, DOI 10.1007/978-3-642-24372-1_30
   Bauer SS, 2011, THEOR COMPUT SCI, V412, P3101, DOI 10.1016/j.tcs.2011.04.007
   Bauer SS, 2010, LECT NOTES COMPUT SC, V6015, P175, DOI 10.1007/978-3-642-12002-2_15
   Benes N, 2009, THEOR COMPUT SCI, V410, P4026, DOI 10.1016/j.tcs.2009.06.009
   Benes N, 2011, LECT NOTES COMPUT SC, V6996, P275, DOI 10.1007/978-3-642-24372-1_20
   Bengtsson J., 1996, Hybrid Systems III. Verification and Control, P232, DOI 10.1007/BFb0020949
   Bruns G, 2004, LECT NOTES COMPUT SC, V3142, P281
   BRYANT RE, 1992, COMPUT SURV, V24, P293, DOI 10.1145/136035.136043
   Caillaud Benoit, 2012, Theoretical Aspects of Computing - ICTAC 2012. Proceedings of the 9th International Colloquium, P213, DOI 10.1007/978-3-642-32943-2_17
   de Alfaro L, 2005, LECT NOTES COMPUT SC, V3717, P81
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   Fecher H., 2008, J LOG ALGEBR PROGRAM, V77
   Fernandes F, 2008, ELECTRON NOTES THEOR, V215, P131, DOI 10.1016/j.entcs.2008.06.025
   Godefroid P., 2001, CONCUR 2001 - Concurrency Theory. 12th International Conference. Proceedings (Lecture Notes in Computer Science Vol.2154), P426
   Goessler G, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P295, DOI 10.1109/SEFM.2009.26
   Graf S, 1997, LECT NOTES COMPUT SC, V1254, P72
   Grumberg O, 2007, INFORM COMPUT, V205, P1130, DOI 10.1016/j.ic.2006.10.009
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Holzmann GJ, 2004, The SPIN model checker: primer and reference manual, V1003
   Huth M, 2001, LECT NOTES COMPUT SC, V2028, P155
   Larsen K. G., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P108, DOI 10.1109/LICS.1990.113738
   Larsen K.G., 1989, LECT NOTES COMPUTER, V407
   Larsen KG, 2007, LECT NOTES COMPUT SC, V4703, P105
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   NYMAN U, 2008, THESIS AALBORG U
   Nyman U, 2007, LECT NOTES COMPUT SC, V4421, P64
   Raclet J-B., 2009, EMSOFT
   Raclet JB, 2011, FUND INFORM, V108, P119, DOI 10.3233/FI-2011-416
   Raclet JB, 2008, ELECTRON NOTES THEOR, V215, P93, DOI 10.1016/j.entcs.2008.06.023
   Tripakis S, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1985342.1985345
   Espada MV, 2007, FORM METHOD SYST DES, V30, P249, DOI 10.1007/s10703-006-0029-7
   van de Pol J, 2004, LECT NOTES COMPUT SC, V3116, P409
NR 42
TC 5
Z9 6
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2014
VL 83
SI SI
BP 106
EP 128
DI 10.1016/j.scico.2013.06.003
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AE4IK
UT WOS:000333945900006
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Gan, X
   Dubrovin, J
   Heljanko, K
AF Gan, Xiang
   Dubrovin, Jori
   Heljanko, Keijo
TI A symbolic model checking approach to verifying satellite onboard
   software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Symbolic model checking; AOCS; NuSMV 2; Liveness; Safety
AB This paper discusses the use of symbolic model checking technology to verify the design of an embedded satellite software control system called the attitude and orbit control system (AOCS). This system is mission critical because it is responsible for maintaining the attitude of the satellite and for performing fault detection, isolation, and recovery decisions. An executable AOCS implementation by Space Systems Finland has been provided in Ada source code form, and we use the input language of the symbolic model checker NuSMV 2 to model the implementation at a detailed level. We describe the modeling techniques and abstractions used to alleviate the state space explosion due to the handling of timers and the large number of system components controlled by the AOCS. The required behavior has been specified as extended state machine diagrams and translated to temporal logic properties. Besides well-known LTL and CTL model checking algorithms, we adapt a previously unexplored form of the liveness-to-safety approach to the problem. The latter new technique turns out to successfully prove all desired properties of the system, outperforming both the LTL and CTL implementations of NuSMV 2. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Gan, Xiang; Dubrovin, Jori; Heljanko, Keijo] Aalto Univ, Sch Sci, Dept Informat & Comp Sci, FI-00076 Aalto, Finland.
C3 Aalto University
RP Heljanko, K (corresponding author), Aalto Univ, Sch Sci, Dept Informat & Comp Sci, POB 15400, FI-00076 Aalto, Finland.
EM xiang.gan@aalto.fi; jori.dubrovin@iki.fi; keijo.heljanko@aalto.fi
RI Dubrovin, Jori/E-7355-2012; Heljanko, Keijo/C-7603-2011
OI Heljanko, Keijo/0000-0002-4547-2701
FU RECOMP project; ARTEMIS-JU; Tekes - Finnish Funding Agency for
   Technology and Innovation; Space Systems Finland; Academy of Finland
   [128050, 139402]; Helsinki Doctoral Programme in Computer Science -
   Advanced Computing and Intelligent Systems (Hecse); Conformiq Software;
   Academy of Finland (AKA) [139402, 128050] Funding Source: Academy of
   Finland (AKA)
FX This work has been financially supported by the RECOMP project funded by
   ARTEMIS-JU, Tekes - Finnish Funding Agency for Technology and
   Innovation, Conformiq Software, Space Systems Finland, Academy of
   Finland (projects 128050 and 139402) and Helsinki Doctoral Programme in
   Computer Science - Advanced Computing and Intelligent Systems (Hecse).
CR [Anonymous], 1995, P IWLS
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Behrmann G, 2006, INT CONF QUANT EVAL, P125
   Beyer Dirk, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P25, DOI 10.1109/FMCAD.2009.5351147
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:5)2006
   Bjorkman K., 2009, P 6 AM NUCL SOC INT
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Cimatti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P359
   CLARKE EM, 1994, ACM T PROGR LANG SYS, V16, P1512, DOI 10.1145/186025.186051
   Clarke EM, 1999, MODEL CHECKING, P1
   Gan X., 2012, P 11 INT WORKSH AUT, P1
   Heljanko K, 2005, LECT NOTES COMPUT SC, V3576, P98
   ILIASOV A, 2010, EVENT B MODEL ATTITU
   Iliasov A, 2010, LECT NOTES COMPUT SC, V6371, P50, DOI 10.1007/978-3-642-15898-8_4
   Iliasov A, 2010, LECT NOTES COMPUT SC, V6351, P126, DOI 10.1007/978-3-642-15651-9_10
   Lahtinen J, 2012, RELIAB ENG SYST SAFE, V105, P104, DOI 10.1016/j.ress.2012.03.021
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Schuppan V., 2004, International Journal on Software Tools for Technology Transfer, V5, P185, DOI 10.1007/s10009-003-0121-x
   Valmari A., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P429
   Varpaaniemi K., 2010, DEPRPSSFR005
NR 21
TC 13
Z9 13
U1 1
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 2
PY 2014
VL 82
SI SI
BP 44
EP 55
DI 10.1016/j.scico.2013.03.005
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB5VR
UT WOS:000331857300004
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Dam, HK
   Ghose, A
AF Dam, Hoa Khanh
   Ghose, Aditya
TI Supporting change impact analysis for intelligent agent systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Change impact analysis; Multi-agent systems
AB Software maintenance and evolution is an important and lengthy phase in the software life-cycle which can account for as much as two-thirds of the total software development costs. Intelligent agent technology has evolved rapidly over the past few years as evidenced by the increasing number of agent systems in many different domains. Intelligent agent systems with their distinct characteristics and behaviours introduce new problems in software maintenance. However, in contrast to a substantial amount of work in providing methodologies for analysing, designing and implementing agent-based systems, there has been very little work on maintenance and evolution of agent systems. A critical issue in software maintenance and evolution is change impact analysis: estimating the potential effects of changes before they are made as an agent system evolves. In this paper, we propose two distinct approaches to change impact analysis for the well-known and widely-developed Belief Desire Intention agent systems. On the one hand, our static technique computes the impact of a change by analysing the source code and identifying various dependencies within the agent system. On the other hand, our dynamic technique builds a representation of an agent's behaviour by analysing its execution traces which consist of goals and plans, and uses this representation to estimate impacts. We have implemented both techniques and in this paper we also report on the experimental results that compare their effectiveness in practice. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Dam, Hoa Khanh; Ghose, Aditya] Univ Wollongong, Sch Comp Sci & Software Engn, Wollongong, NSW 2522, Australia.
C3 University of Wollongong
RP Dam, HK (corresponding author), Univ Wollongong, Sch Comp Sci & Software Engn, Wollongong, NSW 2522, Australia.
EM hoa@uow.edu.au; aditya@uow.edu.au
RI Dam, Hoa Khanh/C-6058-2014
OI Dam, Hoa Khanh/0000-0003-4246-0526
CR Apiwattanapong T, 2005, PROC INT CONF SOFTW, P432
   Arnold Robert S., 1996, SOFTWARE CHANGE IMPA
   Benfield S.S, 2006, P 5 INT JOINT C AUT, P10
   Bohner SA, 2002, PROC IEEE INT CONF S, P263, DOI 10.1109/ICSM.2002.1167777
   Bordini R.H., 2007, PROGRAMMING MULTIAGE
   Bordini R.H., 2005, Multi- Agent Programming : Languages, Platforms and Applications
   Bordini RH, 2009, J LOGIC COMPUT, V19, P1385, DOI 10.1093/logcom/exp029
   Bordini RF, 2005, JASSS-J ARTIF SOC S, V8
   Bratman M.E., 1987, Intention, Plans, and Practical Reason
   Burmeister B., 2008, AAMAS'8: proceedings of the 7th international joint conference on autonomous agents and multiagent systems, P37
   Busetta P., 2000, ATAL '99: 6th international workshop on intelligent agents VI, agent theories, architectures, and languages (ATAL), P277
   Dam H. K., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P33, DOI 10.1109/ICSM.2011.6080770
   Dam H. K., 2010, P 26 IEEE INT C SOFT, P1
   Dam H. K., 2012, P 11 INT C AUT AG MU, P1433
   Dam HK, 2011, AUTON AGENT MULTI-AG, V23, P384, DOI 10.1007/s10458-010-9163-0
   Dastani M, 2008, AUTON AGENT MULTI-AG, V16, P214, DOI 10.1007/s10458-008-9036-y
   Hassan AE, 2004, PROC IEEE INT CONF S, P284, DOI 10.1109/ICSM.2004.1357812
   Hindriks K., 2001, INTELLIGENT AGENTS 6
   Dam HK, 2010, ASIA PAC SOFWR ENG, P156, DOI 10.1109/APSEC.2010.27
   Dam HK, 2010, IEEE INT ENTERP DIST, P24, DOI 10.1109/EDOC.2010.23
   JONES C, 2008, APPL SOFTWARE MEASUR
   Kagdi H, 2007, INT C PROGRAM COMPRE, P145
   Law J, 2003, PROC INT CONF SOFTW, P308, DOI 10.1109/ICSE.2003.1201210
   Li LF, 1996, PROCEEDINGS OF INTERNATIONAL WORKSHOP ON CSCW IN DESIGN, P171, DOI 10.1109/ICSM.1996.565004
   Malik H., 2008, ICSM 08
   Mathieson I., 2004, P 27 AUSTR COMP SCI, V26, P351
   Mens T., 2008, Software Evolution
   Monostori L, 2006, CIRP ANN-MANUF TECHN, V55, P697, DOI 10.1016/j.cirp.2006.10.004
   Munroe S, 2006, KNOWL ENG REV, V21, P345, DOI 10.1017/S0269888906001020
   Maia MCO, 2010, EUR CON SFTWR MTNCE, P252, DOI 10.1109/CSMR.2010.48
   Padgham L., 2004, Developing Intelligent Agent Systems: A practical guide
   Pechoucek M, 2008, AUTON AGENT MULTI-AG, V17, P397, DOI 10.1007/s10458-008-9050-0
   Petrenko M, 2009, INT C PROGRAM COMPRE, P10, DOI 10.1109/ICPC.2009.5090023
   Rao A. S., 1995, ICMAS-95 Proceedings. First International Conference on Multi-Agent Systems, P312
   Rao A. S., 1996, Agents Breaking Away. 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '96 Proceedings, P42, DOI 10.1007/BFb0031845
   RICCI A, 2007, P AAMAS 2007, P1, DOI DOI 10.1145/1329125.1329308
   SUTHERLAND J, 1995, ACM COMPUT SURV, V27, P274, DOI 10.1145/210376.210394
   Thangarajah L., 2003, 80 INT CONFARTIF INT, P721
   UEDA K, 1986, LECT NOTES COMPUT SC, V221, P168
   Van Vliet H., 2001, SOFTWARE ENG PRINCIP
   Winikoff M., 2010, P 8 EUR WORKSH MULT
   Wooldridge M., 2002, INTRO MULTIAGENT SYS
   Zhao JJ, 1996, 1996 INTERNATIONAL CONFERENCE ON PARALLEL AND DISTRIBUTED SYSTEMS, PROCEEDINGS, P282, DOI 10.1109/ICPADS.1996.517574
NR 43
TC 4
Z9 4
U1 0
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1728
EP 1750
DI 10.1016/j.scico.2013.04.008
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100026
OA hybrid
DA 2024-07-18
ER

PT J
AU Poroor, J
   Jayaraman, B
AF Poroor, Jayaraj
   Jayaraman, Bharat
TI Modeling mobile stateful channels in πZ
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mobility; Process algebra; Z language; Abstract type; Bisimilarity;
   Stateful channel
ID RECURSION; CALCULUS
AB We investigate a principled extension of the pi-calculus for formal modeling of mobile communicating systems with stateful channels. In our proposed extension, called pi Z, a channel is associated with a stateful abstract type in the Z specification language. We develop both reduction as well as labeled transition semantics for pi Z. We show that the important properties of the pi-calculus are preserved in pi Z: (1) tau-transitions match reductions; and (2) bisimilarity induced by the labeled transitions is closed under parallel composition, name restriction, and a restricted recursion. The paper illustrates the use of stateful channels by modeling the 'hidden node problem' in a wireless network. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Poroor, Jayaraj] Amrita Vishwa Vidyapeetham, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India.
   [Jayaraman, Bharat] SUNY Buffalo, Dept Comp Sci & Engn, Buffalo, NY 14260 USA.
C3 Amrita Vishwa Vidyapeetham; Amrita Vishwa Vidyapeetham Coimbatore; State
   University of New York (SUNY) System; State University of New York
   (SUNY) Buffalo
RP Poroor, J (corresponding author), Amrita Vishwa Vidyapeetham, Dept Comp Sci & Engn, Coimbatore, Tamil Nadu, India.
EM jayaraj@am.amrita.edu
RI Poroor, Jayaraj/HLQ-2171-2023
CR Abadi M, 2001, ACM SIGPLAN NOTICES, V36, P104, DOI 10.1145/373243.360213
   Amadio RM, 2003, ACM T PROGR LANG SYS, V25, P549, DOI 10.1145/937563.937564
   [Anonymous], ECSLFCS91180 U ED DE
   Aranda J, 2007, LECT NOTES COMPUT SC, V4709, P185
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Bengtson J, 2009, IEEE S LOG, P39, DOI 10.1109/LICS.2009.20
   Buscemi MG, 2007, LECT NOTES COMPUT SC, V4421, P18
   Carbone M., 2003, Nordic Journal of Computing, V10, P70
   Dam M, 1996, INFORM COMPUT, V129, P35, DOI 10.1006/inco.1996.0072
   Fischer C., 1997, Formal Methods for Open Object-based Distributed Systems. Vol.2 IFIP TC6 WG6.1 International Workshop on Formal Methods for Open Object-based Distributed Systems (FMOODS '97), P423
   Fischer C., 1998, P 11 INT C Z US Z FO, P5
   Galloway A.J., 1996, THESIS U TEESSIDE
   Galloway AJ, 1997, FIRST IEEE INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P272, DOI 10.1109/ICFEM.1997.630434
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hennessy M, 2007, DISTRIBUTED PI-CALCULUS, P1
   Hym S, 2007, THEOR COMPUT SCI, V373, P182, DOI 10.1016/j.tcs.2006.12.017
   ISO/IEC, 2002, 135682002E ISOIEC
   Karkinsky D, 2007, LECT NOTES COMPUT SC, V4591, P373
   Mahony B, 1998, PROC INT CONF SOFTW, P95, DOI 10.1109/ICSE.1998.671106
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Nestmann U, 2000, INFORM COMPUT, V156, P287, DOI 10.1006/inco.1999.2822
   Quaglia P., 1998, BRICS LECT SERIES
   Rahman A, 2006, 2006 23RD BIENNIAL SYMPOSIUM ON COMMUNICATIONS, P270, DOI 10.1109/BSC.2006.1644620
   Roscoe A. W., 1994, Computer Security - ESORICS 94. Third European Symposium on Research in Computer Security. Proceedings, P33
   Sangiorgi D., 1998, Mathematical Structures in Computer Science, V8, P447, DOI 10.1017/S0960129598002527
   Sangiorgi D., 2009, ACM T PROGR LANG SYS, V15, P41
   Sangiorgi D., 1992, PhD thesis
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Taguchi K, 2004, IEEE INT C ENG COMP, P97, DOI 10.1109/ICECCS.2004.1310908
   Taguchi K, 2002, LECT NOTES COMPUT SC, V2495, P144
   Vajar B., ELECT COMMUNICATIONS, V23
   Weber M., 1994, THESIS EPFL SWITZERL
   Wischik L, 2005, THEOR COMPUT SCI, V340, P606, DOI 10.1016/j.tcs.2005.03.017
   Woodcock J., 2002, ZB 2002: Formal Specification and Development in Z and B. 2nd International Conference of B and Z Users. Proceedings (Lecture Notes in Computer Science Vol.2272), P184
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Woodcock J.C.P., 2001, IWFM 01 5 IR WORLSH
   Yang P., 2003, MODEL CHECKING ABSTR, P116
NR 38
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2013
VL 78
IS 9
BP 1470
EP 1489
DI 10.1016/j.scico.2012.10.010
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 179QJ
UT WOS:000321536100014
OA hybrid
DA 2024-07-18
ER

PT J
AU Fortino, G
   Rango, F
AF Fortino, Giancarlo
   Rango, Francesco
TI An application-level technique based on recursive hierarchical state
   machines for agent execution state capture
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software agents; Distilled StateCharts; Execution state capture; JADE;
   Strong mobility
ID STATECHARTS; SYSTEMS
AB The capture of the execution state of agents in agent-based and multi-agent systems is a system feature needed to enable agent checkpointing, persistency and strong mobility that are basic mechanisms supporting more complex, distributed policies and algorithms for fault tolerance, load balancing, and transparent migration. Unfortunately, the majority of the currently available platforms for agents, particularly those based on the standard Java Virtual Machine, do not provide this important feature at the system-level. Several system-level and application-level approaches have been to date proposed for agent state execution capture. Although system-level approaches are effective, they modify the underlying virtual machine so endangering compatibility. Conversely, application-level approaches do not modify any system layer but they provide sophisticated agent programming models and/or agent converters that only allow a coarse-grain capture of agent state execution.
   In this paper, we propose an application-level technique that allows for a programmable -grain capture of the execution state of agents ranging from a per-instruction to a statement-driven state capture. The technique is based on the Distilled StateCharts Star (DSC*) formalism that offers an agent-oriented type of recursive hierarchical state machines. According to the proposed technique a single-threaded agent program can be translated into a DSC* machine, containing agent data, code and execution state, by preserving the original agent program semantics. The proposed technique can notably be applied to any agent program written through an imperative-style, procedural or object-oriented programming language. Currently, it is implemented in Java and fully integrated into the JADE framework, being JADE one of the most diffused agent platforms. In particular, agents, which are specified through a generic Java-like agent language, can be automatically translated into JADE agents according to the JADE DSCStarBehaviour framework by means of a translator tool. A simple yet effective running example is used to exemplify the proposed technique from modeling to implementation. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Fortino, Giancarlo; Rango, Francesco] Univ Calabria, DEIS, I-87036 Arcavacata Di Rende, CS, Italy.
C3 University of Calabria
RP Fortino, G (corresponding author), Univ Calabria, DEIS, Via P Bucci Cubo 41C, I-87036 Arcavacata Di Rende, CS, Italy.
EM g.fortino@unical.it; frango@si.deis.unical.it
RI Fortino, Giancarlo/J-2950-2017
OI Fortino, Giancarlo/0000-0002-4039-891X
CR Acharya A., 1997, LNCS, V1222
   Alur R., 2005, ACM T PROGRAMMING LA, V27
   Baumer C., 1999, P IATA 99 LNAI 1699, P19
   Bellifemine F, 2001, SOFTWARE PRACT EXPER, V31, P103, DOI 10.1002/1097-024X(200102)31:2<103::AID-SPE358>3.0.CO;2-O
   Bettini L., 2001, Mobile Agents. 5th International Conference Proceedings (Lecture Notes in Computer Science Vol.2240), P182
   BOUCHENAK S, 2000, P TECHN OBJ OR LANG
   BOUCHENAK S, 2002, 0261 INRIA
   Dimitrov B, 1998, IEEE T PARALL DISTR, V9, P459, DOI 10.1109/71.679216
   Fecher H., 2006, P 11 INT WORKSH FMIC
   Fortino G, 2004, INFORM SOFTWARE TECH, V46, P907, DOI 10.1016/j.infsof.2004.04.005
   Fortino G., 2002, P IEEE IPDPS 02 WORK
   Fortino G., 2010, INT J AGENT ORIENTED, V4
   Fortino G, 2008, INFORM SOFTWARE TECH, V50, P322, DOI 10.1016/j.infsof.2007.02.016
   Fortino G, 2010, LECT NOTES ARTIF INT, V6276, P240, DOI 10.1007/978-3-642-15387-7_28
   Fuggetta A, 1998, IEEE T SOFTWARE ENG, V24, P342, DOI 10.1109/32.685258
   Funfrocken S., 1998, Mobile Agents. Second International Workshop, MA'98. Proceedings, P26, DOI 10.1007/BFb0057646
   Gray R.S., 2001, HDB AGENT T IN PRESS
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Hohlfeld M., 1998, MIGRATE AGENTS
   Ji Y., 2005, P 2005 ACM S APPL CO
   Lange D. B., 1998, PROGRAMMING DEPLOYIN
   Peine H, 1997, LECT NOTES COMPUT SC, V1219, P50
   Quitadamo R., 2006, SCALABLE COMPUTING P, V7
   Sakamoto T., 2000, P 4 INT S MOB AG ZUR
   Sekiguchi T., 1999, LNCS, V1594
   Stojmenovic I, 2000, IEEE T EDUC, V43, P273, DOI 10.1109/13.865200
   Suezawa T., 2000, P ACM 2000 JAV GRAND
   Sun N., 2000, P 4 INT S MOB AG ZUR, P79
   TRIPATHI A, 2002, J SYSTEMS SOFTWARE
   Tripathi A. R., 1998, IEEE CONCURRENCY
   TRUYEN E, 2000, P 2 INT WORKSH MOB A
   Wang X., 2001, TECHNICAL REPORT, P2
   White J., 1996, Software Agents
   Wicke C., 1998, Mobile Agents. Second International Workshop, MA'98. Proceedings, P68, DOI 10.1007/BFb0057649
   WOOLDRIDGE M, 1995, KNOWL ENG REV, V10, P115, DOI 10.1017/S0269888900008122
   Zhang M., 2002, LECT NOTES ARTIF INT, V1733, P84
NR 36
TC 1
Z9 1
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 725
EP 746
DI 10.1016/j.scico.2011.10.001
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400010
OA Bronze
DA 2024-07-18
ER

PT J
AU Viroli, M
AF Viroli, Mirko
TI On competitive self-composition in pervasive services
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination models and languages; Self-organisation; Self-composition;
   Chemical-inspired computing
AB This paper aims at promoting the application of self-organising techniques to software service coordination in the context of highly dynamic and mobile environments, such as those of pervasive computing. We describe a framework where a network of shared tuple spaces handles services provided by situated agents, enabling their composition and competition in a fully distributed, self-organised way. This is achieved by a set of coordination laws structured as chemical-resembling reactions, designed so as to enact feedback loops that regulate and balance the "activity level" of (atomic or composite) services. (C) 2012 Elsevier B.V. All rights reserved.
C1 Alma Mater Studiorum Univ Bologna, I-47521 Cesena, FC, Italy.
C3 University of Bologna
RP Viroli, M (corresponding author), Alma Mater Studiorum Univ Bologna, Via Venezia 52, I-47521 Cesena, FC, Italy.
EM mirko.viroli@unibo.it
OI Viroli, Mirko/0000-0003-2702-5702
FU EU [256873]
FX This work is supported by the EU SAPERE Project ("Self-Aware pervasive
   Ecosystems") under contract no. 256873.
CR Agha G, 2008, COMMUN ACM, V51, P68, DOI 10.1145/1327452.1327484
   [Anonymous], 1996, COORDINATION PROGRAM
   [Anonymous], P FED C COMP SCI INF
   [Anonymous], P 25 ANN ACM S APPL
   [Anonymous], 2009, P 2009 ACM S APPL CO, DOI DOI 10.1145/1529282.1529585
   Babaoglu O, 2006, ACM T AUTON ADAP SYS, V1, P26, DOI 10.1145/1152934.1152937
   Bandara A, 2008, LECT NOTES COMPUT SC, V5036, P434, DOI 10.1007/978-3-540-68083-3_42
   Beal J, 2006, IEEE INTELL SYST, V21, P10, DOI 10.1109/MIS.2006.29
   Beal J., ABS12025509 CORR
   Berardi D., 2005, P 31 INT C VER LARG, P624
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   BERRYMAN AA, 1992, ECOLOGY, V73, P1530, DOI 10.2307/1940005
   Bobillo F, 2008, IEEE INT CONF FUZZY, P923, DOI 10.1109/FUZZY.2008.4630480
   Busi N, 2000, INFORM COMPUT, V156, P90, DOI 10.1006/inco.1999.2823
   Casadei M, 2007, LECT NOTES ARTIF INT, V4676, P255
   Gardelli L., 2007, LECT NOTES ARTIF INT, V4696, P123
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GILLESPIE DT, 1977, J PHYS CHEM-US, V81, P2340, DOI 10.1021/j100540a008
   Hu S., 2008, P 2 INT C DISTR EV B, P233, DOI DOI 10.1145/1385989.1386019
   Jelasity M, 2005, ACM T COMPUT SYST, V23, P219, DOI 10.1145/1082469.1082470
   Kalasapur S, 2007, IEEE T PARALL DISTR, V18, P907, DOI 10.1109/TPDS.2007.1039
   Kona S., 2007, ICWS 07 P 2007 IEEE
   Mamei M, 2009, ACM T SOFTW ENG METH, V18, DOI 10.1145/1538942.1538945
   Milanovic N, 2004, IEEE INTERNET COMPUT, V8, P51, DOI 10.1109/MIC.2004.58
   Milanovic N, 2006, INT J WEB SERV RES, V3, P1, DOI 10.4018/jwsr.2006040101
   Nardini E., 2011, 26 ANN ACM S APPL CO
   Omicini A., 1999, Autonomous Agents and Multi-Agent Systems, V2, P251, DOI 10.1023/A:1010060322135
   Omicini A, 2006, LECT NOTES COMPUT SC, V3914, P71
   Omicini A, 2011, KNOWL ENG REV, V26, P53, DOI 10.1017/S026988891000041X
   Pianini Danilo, 2010, 2010 Proceedings of 4th IEEE International Conference on Self-Adaptive and Self-Organizing Systems (SASO 2010), P114, DOI 10.1109/SASO.2010.35
   Picco G. P., 1999, 1999 INT C SOFTW ENG, P368
   Priami C, 1995, COMPUT J, V38, P578, DOI 10.1093/comjnl/38.7.578
   Quitadamo Raffaele, 2007, First International Workshop on Software Engineering for Pervasive Computing Applications, Systems, and Environments (SEPCASE '07), DOI 10.1109/SEPCASE.2007.11
   Rao JH, 2005, LECT NOTES COMPUT SC, V3387, P43
   Rathinam M., J CHEM PHYS, V119
   van Dyke Parunak H., 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P449
   Vargo Stephen L., 2008, European Management Journal, V26, P145, DOI 10.1016/j.emj.2008.04.003
   Viroli M., 2012, 27 ANN ACM S APPL CO
   Viroli M., 2012, LECT NOTES COMPUTER
   Viroli M, 2011, ACM T AUTON ADAP SYS, V6, DOI 10.1145/1968513.1968517
   Viroli M, 2010, INFORM SCIENCES, V180, P1876, DOI 10.1016/j.ins.2009.11.021
   Viroli M, 2009, LECT NOTES COMPUT SC, V5521, P143, DOI 10.1007/978-3-642-02053-7_8
   Zambonelli F, 2011, INT J PERVASIVE COMP, V7, P186, DOI 10.1108/17427371111172997
NR 43
TC 6
Z9 6
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2013
VL 78
IS 5
BP 556
EP 568
DI 10.1016/j.scico.2012.10.002
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 125MS
UT WOS:000317544500010
OA Bronze
DA 2024-07-18
ER

PT J
AU Klein, D
   Radmacher, FG
   Thomas, W
AF Klein, Dominik
   Radmacher, Frank G.
   Thomas, Wolfgang
TI Moving in a network under random failures: A complexity analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Game theory; Sabotage games; Probabilistic systems; Fault-tolerant
   systems
ID GAME
AB We analyze a model of fault-tolerant systems in a probabilistic setting, exemplified by a simple routing problem in networks. We introduce a randomized variant of a model called the "sabotage game", where an agent, called "Runner", and a probabilistic adversary, "Nature", act in alternation. Runner generates a path from a given start vertex of the network, traversing one edge in each move, while after each move of Runner, Nature deletes some edge of the current network (each edge with the same probability). Runner wins if the generated finite path satisfies a "winning condition", namely that a vertex of some predefined target set is reached, or - more generally - that the generated path satisfies a given formula of the temporal logic LTL. We determine the complexity of these games by showing that for any probability p and epsilon > 0, the following problem is PSPACE-complete: Given a network, a start vertex u, and a set F of target vertices (resp. an LTL formula phi), and also a probability p' is an element of vertical bar p - epsilon, p + epsilon vertical bar, is there a strategy for Runner to reach F (resp. to satisfy phi) with a probability >= p'? This PSPACE-completeness establishes the same complexity as was known for the non-randomized sabotage games (by the work of Wing and Rohde), and it sharpens the PSPACE-completeness of Papadimitriou's "dynamic graph reliability" (where probabilities of edge failures may depend on both the edges and positions of Runner). Thus, the "coarse" randomized setting, even with uniform distributions, gives no advantage in terms of complexity over the non-randomized case. (c) 2010 Elsevier B.V. All rights reserved.
C1 [Radmacher, Frank G.; Thomas, Wolfgang] Rhein Westfal TH Aachen, D-52056 Aachen, Germany.
   [Klein, Dominik] JAIST, Nomi City, Ishikawa 9231292, Japan.
C3 RWTH Aachen University; Japan Advanced Institute of Science & Technology
   (JAIST)
RP Radmacher, FG (corresponding author), Rhein Westfal TH Aachen, Lehrstuhl Informat 7, D-52056 Aachen, Germany.
EM dominik.klein@jaist.ac.jp; radmacher@automata.rwth-aachen.de;
   thomas@automata.rwth-aachen.de
FU RWTH Aachen Research Cluster UMIC (Ultra High-Speed Mobile Information
   and Communication) of the German Excellence Initiative, German Research
   Foundation [DFG EXC 89]
FX This research was supported by the RWTH Aachen Research Cluster UMIC
   (Ultra High-Speed Mobile Information and Communication) of the German
   Excellence Initiative, German Research Foundation grant DFG EXC 89.
CR [Anonymous], 2003, Modern Computer Algebra
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Clarke Edmund M., 2001, Model Checking
   COURCOUBETIS C, 1995, J ASSOC COMPUT MACH, V42, P857, DOI 10.1145/210332.210339
   Gabbay DM, 2008, LECT NOTES COMPUT SC, V4800, P292, DOI 10.1007/978-3-540-78127-1_17
   Gierasirnczuk N, 2009, LECT NOTES ARTIF INT, V5834, P119, DOI 10.1007/978-3-642-04893-7_10
   Klein D., 2008, THESIS RWTH AACHEN
   Klein D, 2010, LECT NOTES COMPUT SC, V5961, P162
   Littman ML, 2001, J AUTOM REASONING, V27, P251, DOI 10.1023/A:1017584715408
   Löding C, 2003, LECT NOTES COMPUT SC, V2914, P302
   Löding C, 2003, LECT NOTES COMPUT SC, V2747, P531
   Loding Christof, 2003, AIB052003 RWTH AACH
   Papadimitriou C. H., 1994, Computational Complexity
   PAPADIMITRIOU CH, 1985, J COMPUT SYST SCI, V31, P288, DOI 10.1016/0022-0000(85)90045-5
   PNUELI A, 1989, LECT NOTES COMPUT SC, V372, P652
   Radmacher FG, 2008, ELECTRON NOTES THEOR, V200, P21, DOI 10.1016/j.entcs.2008.02.010
   Rohde P, 2004, LECT NOTES COMPUT SC, V3210, P310
   Rohde P., 2005, THESIS RWTH AACHEN
   van Benthem J, 2005, LECT NOTES ARTIF INT, V2605, P268
NR 19
TC 2
Z9 2
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 940
EP 954
DI 10.1016/j.scico.2010.05.009
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400010
OA Bronze
DA 2024-07-18
ER

PT J
AU Meng, S
   Arbab, F
   Baier, C
AF Meng, Sun
   Arbab, Farhad
   Baier, Christel
TI Synthesis of Reo circuits from scenario-based interaction specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Connector; Reo circuits; Scenario-based specification; UML; Synthesis
ID COMPONENT CONNECTORS; CONCURRENT; CHECKING; MODELS
AB It is difficult to construct correct models for distributed large-scale service-oriented applications. Typically, the behavior of such an application emerges from the interaction and collaboration of multiple components/services. On the other hand, each component, in general, takes part in multiple scenarios. Consequently, not only components, but also their interaction protocols are important in the development process for distributed systems. Coordination models and languages, like Reo, offer powerful "glue-code" to encode interaction protocols. In this paper we propose a novel synthesis technique, which can be used to generate Reo circuits directly from scenario specifications. Inspired by the way UML2.0 sequence diagrams can be algebraically composed, we define an algebraic framework for merging connectors generated from partial specifications by exploiting the algebraic structure of UML sequence diagrams. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Meng, Sun; Arbab, Farhad] CWI, NL-1009 AB Amsterdam, Netherlands.
   [Baier, Christel] Tech Univ Dresden, Inst Theoret Comp Sci, Dresden, Germany.
C3 Technische Universitat Dresden
RP Meng, S (corresponding author), CWI, NL-1009 AB Amsterdam, Netherlands.
EM M.Sun@cwi.nl; Farhad.Arbab@cwi.nl; baier@tcs.inf.tu-dresden.de
FU Dutch National Organization for Scientific Research (NWO)
   [600.643.000.05N12]; DFG-NWO
FX Comments of the anonymous referees are gratefully acknowledged. We are
   indebted to Luis Barbosa and Jan Rutten for the fruitful discussions
   regarding the coalgebraic semantics of UML sequence diagrams, and to all
   the members of SEN3 for helpful discussions. We are particularly
   grateful for Erik de Vink's interest in this work and his help on
   improving the paper. Parts of this paper have been presented in the
   Proceedings of FOCLASA'08. We are thankful for the attention and
   discussion with the participants in FOCLASA'08, and to the anonymous
   reviewers for their valuable comments. The work reported in this paper
   is supported by a grant from the GLANCE funding program of the Dutch
   National Organization for Scientific Research (NWO), through project
   CooPer (600.643.000.05N12), and the DFG-NWO-project SYANCO.
CR [Anonymous], ECLIPSE COORDINATION
   [Anonymous], UML PROF SCHED PERF
   Arbab F, 2005, LECT NOTES COMPUT SC, V3454, P236
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Arbab F, 2007, SOFTW SYST MODEL, V6, P59, DOI 10.1007/s10270-006-0009-9
   Arbab F, 2007, LECT NOTES COMPUT SC, V4467, P286
   Arbab F, 2008, LECT NOTES COMPUT SC, V5282, P114, DOI 10.1007/978-3-540-87891-9_8
   Autili M, 2006, LECT NOTES COMPUT SC, V4344, P17
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   BALEMI S, 1993, IEEE T AUTOMAT CONTR, V38, P1040, DOI 10.1109/9.231459
   Blechmann T, 2008, ELECTRON NOTES THEOR, V215, P209, DOI 10.1016/j.entcs.2008.06.029
   Brogi A, 2004, LECT NOTES COMPUT SC, V3116, P42
   Damm W, 2001, FORM METHOD SYST DES, V19, P45, DOI 10.1023/A:1011227529550
   Eichner C, 2005, LECT NOTES COMPUT SC, V3530, P133
   Harel D, 2005, LECT NOTES COMPUT SC, V3393, P309
   Harel D., 2002, International Journal of Foundations of Computer Science, V13, P5, DOI 10.1142/S0129054102000935
   Jacobs Bart., 1996, B EATCS, V62, P222
   Khriss I, 1999, LECT NOTES COMPUT SC, V1618, P132
   Klüppelholz S, 2007, ELECTRON NOTES THEOR, V175, P19, DOI 10.1016/j.entcs.2007.03.003
   Koehler C, 2009, LECT NOTES COMPUT SC, V5486, P221, DOI 10.1007/978-3-642-03429-9_15
   Koehler C, 2008, ELECTRON NOTES THEOR, V194, P77, DOI 10.1016/j.entcs.2008.03.100
   Kruger I., 1999, Distributed and Parallel Embedded Systems. IFIP WG10.3/WG10.5 International Workshop on Distributed and Parallel Embedded Systems (DIPES'98), P61
   Krüger IH, 2005, LECT NOTES COMPUT SC, V3466, P255
   Küster-Filipe J, 2006, THEOR COMPUT SCI, V351, P203, DOI 10.1016/j.tcs.2005.09.068
   Mäkinen E, 2001, PROC INT CONF SOFTW, P15, DOI 10.1109/ICSE.2001.919077
   Mauw S, 1997, SDL '97 - TIME FOR TESTING, P291, DOI 10.1016/B978-044482816-3/50020-4
   Meng S, 2008, INT CONF QUAL SOFTW, P17, DOI 10.1109/QSIC.2008.13
   *OBJ MAN GROUP, 2007, UN MOD LANG SUP VERS
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Sun J, 2006, IEEE T SOFTWARE ENG, V32, P349, DOI 10.1109/TSE.2006.55
   Tivoli M., 2006, RSTI OBJET J, V12, P77
   Uchitel S, 2001, PROC INT CONF SOFTW, P188, DOI 10.1109/ICSE.2001.919093
   UCHITEL S, 2001, P JOINT 8 EUR SOFTW, P74
   Uchitel S, 2007, PROC INT CONF SOFTW, P34
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
   Ziadi T, 2004, PROC INT CONF SOFTW, P242, DOI 10.1109/ICSE.2004.1317446
NR 37
TC 12
Z9 12
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2011
VL 76
IS 8
SI SI
BP 651
EP 680
DI 10.1016/j.scico.2010.03.002
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 766JL
UT WOS:000290778300004
DA 2024-07-18
ER

PT J
AU Freitas, L
   Woodcock, J
   Fu, Z
AF Freitas, Leo
   Woodcock, Jim
   Fu, Zheng
TI POSIX file store in Z/Eves: An experiment in the verified software
   repository
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Grand challenge; Verification; POSIX; File systems; Flash memory;
   Theorem proving
AB We present results from the second pilot project in the international Verification Grand Challenge: a formally verified specification of a POSIX-compliant file store using the Z/Eves theorem prover. The project's overall objective is to build a verified file store for space-flight missions. Our specification of the file store is based on Morgan and Sufrin's specification of the UNIX filing system; the proof and its mechanisation in Z/Eves are novel. We show how our work contributes towards building a verified software repository: a set of general theories, proof techniques, and experiments reusable across different domains. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Freitas, Leo; Woodcock, Jim; Fu, Zheng] Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
C3 University of York - UK
RP Freitas, L (corresponding author), Univ York, Dept Comp Sci, York YO10 5DD, N Yorkshire, England.
EM leo@cs.york.ac.uk; jim@cs.york.ac.uk; zhengfu@itee.uq.edu.au
RI Freitas, Leo/G-5733-2012
OI Woodcock, James/0000-0001-7955-2702
FU EPSRC [EP/E025366/1, EP/G061947/1] Funding Source: UKRI
CR [Anonymous], B METHOD INTRO
   Barnes F, 2003, CONCUR SYST ENGN SER, V61, P269
   Bloch J., 2001, EFFECTIVE JAVA PROGR
   Burdy L, 2003, LECT NOTES COMPUT SC, V2805, P422
   BURDY L, 2003, 8 INT WORKSH FORM ME, P73
   Butterfield A, 2007, IEEE INT C ENG COMP, P251, DOI 10.1109/ICECCS.2007.23
   COOPER D, 2002, YCS2002347 U YORK
   FREITAS L, 2006, VERIFIED SOFTWARE RE
   FREITAS L, 2006, WORKSH VSR GRAND CHA
   Freitas L, 2007, LECT NOTES COMPUT SC, V4700, P255
   Freitas L, 2007, IEEE INT C ENG COMP, P3, DOI 10.1109/ICECCS.2007.36
   FU Z, 2007, CRG13 U YORK
   Hoare T, 2003, J ACM, V50, P63, DOI 10.1145/602382.602403
   Huisman M, 2002, LECT NOTES COMPUT SC, V2386, P175
   Huisman M, 2001, THESIS U NIJMEGEN
   *IEEE POSIX WORK G, 1995, P100321 IEEE POSIX W
   *INT CORP, 2004, INT FLASH FIL SYST C
   Josey A., 2004, SINGLE UNIX SPECIFIC
   JOSHI R, 2005, VERIFIED SOFTWARE TH
   LAKATOS I, 2005, PROOFS REFUTATIONS L
   Lim SH, 2006, IEEE T COMPUT, V55, P906, DOI 10.1109/TC.2006.96
   LIM SH, 2007, ADV COMMUNICATION TE, V1, P273
   MEISELS I, 1997, TR97549303D ORA CAN
   MORGAN C, 1984, T SOFTWARE ENG, V10, P128
   *ONFI, 2006, 10 ONFI
   *OP GROUP, C702 OP GROUP
   PLACE PRH, 1995, POSIX 1003 21 REAL T
   Polya G., 2004, How to solve it: A new aspect of mathematical method
   POPPER K, 2006, ROUTLEDGE CLASSICS
   RUSSELL B, 1901, INT MONTHLY
   SAALTINK M, 1999, TR99549306A ORA CAN
   SAALTINK M, 2003, TR03549305B ORA CAN
   Spivey J.M., 1998, Z NOTATION REFERENCE, V2nd
   *SRI, 2005, WORKSH VER GRAND CHA
   STEPNEY S, 2000, PRG, V126
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
   Woodcock JCP, 2001, IWFM 01
   Woodcock J, 2006, LECT NOTES COMPUT SC, V4281, P15
   ZHENG F, 2006, THESIS U YORK
   2006, YAFFS DIRECT INTERFA
NR 40
TC 13
Z9 14
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2009
VL 74
IS 4
BP 238
EP 257
DI 10.1016/j.scico.2008.08.001
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 410ZK
UT WOS:000263616600005
DA 2024-07-18
ER

PT J
AU Eshuis, R
AF Eshuis, Rik
TI Reconciling statechart semantics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Statecharts; Formal semantics
ID PROCESS-CONTROL SYSTEMS; MODEL CHECKING; UML; SPECIFICATION; STATEMATE;
   DESIGN
AB Statecharts are a visual technique for modelling reactive behaviour. Over the years, a plethora of statechart semantics have been proposed. The three most widely used are the fixpoint, STATEMATE, and UML semantics. These three semantics differ considerably from each other. In general, they interpret the same statechart differently, which impedes the communication of statechart designs among both designers and tools. In this paper, we identify a set of constraints on statecharts that ensure that the fixpoint, STATEMATE and UML semantics coincide, if observations are restricted to linear, stuttering-closed, separable properties. Moreover, we show that for a subset of these constraints, a slight variation of the STATEMATE semantics coincides for linear stuttering-closed properties with the UML semantics. (c) 2008 Elsevier B.V. All rights reserved.
C1 Eindhoven Univ Technol, Dept Technol Management, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Eshuis, R (corresponding author), Eindhoven Univ Technol, Dept Technol Management, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM h.eshuis@tue.nl
RI Eshuis, Rik/D-7042-2011
OI Eshuis, Rik/0000-0003-2314-7155
CR Aguado Joaquin, 2005, P GAM LOG PROGR LANG, P16
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], IEEE COMPUT
   [Anonymous], 1994, LNCS
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   BROWNE MC, 1988, THEOR COMPUT SCI, V59, P115, DOI 10.1016/0304-3975(88)90098-9
   Chan W, 1998, IEEE T SOFTWARE ENG, V24, P498, DOI 10.1109/32.708566
   Crane ML, 2005, LECT NOTES COMPUT SC, V3713, P97, DOI 10.1007/11557432_8
   Damm W, 1998, LECT NOTES COMPUT SC, V1536, P186, DOI 10.1007/3-540-49213-5_8
   Damm W, 2005, SCI COMPUT PROGRAM, V55, P81, DOI 10.1016/j.scico.2004.05.012
   Douglass B. P., 1998, Lectures on Embedded Systems. European Educational Forum School on Embedded Systems, P368
   Douglass BrucePowell., 2004, REAL TIME UML ADV UM
   Emerson EA, 1997, LECT NOTES COMPUT SC, V1217, P19, DOI 10.1007/BFb0035378
   Eshuis R, 2006, ACM T SOFTW ENG METH, V15, P1, DOI 10.1145/1125808.1125809
   Eshuis R., 2002, Requirements Engineering, V7, P243, DOI 10.1007/s007660200019
   Franzle M., 2003, Formal Aspects of Computing, V15, P390, DOI 10.1007/s00165-003-0015-4
   Harel D., 1987, Proceedings of the Symposium on Logic in Computer Science (Cat. No.87CH2464-6), P54
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Harel D, 2004, LECT NOTES COMPUT SC, V3147, P325
   HAREL D, 1990, IEEE T SOFTWARE ENG, V16, P403, DOI 10.1109/32.54292
   HAREL D, 1985, NATO ASI SER, V13, P447
   HAREL D, 2007, HOPL, V3
   Harel D., 1998, MODELING REACTIVE SY
   HUIZING C, 1991, INFORM PROCESS LETT, V37, P205, DOI 10.1016/0020-0190(91)90190-S
   HUIZING C, 1992, LECT NOTES COMPUTER, V600, P291
   LAMPORT L, 1983, P IFIP C INF PROC, P657
   Latella D., 1999, Formal Aspects of Computing, V11, P637, DOI 10.1007/s001659970003
   Leveson NG, 1999, LECT NOTES COMPUT SC, V1687, P127, DOI 10.1145/318774.318937
   LEVESON NG, 1994, IEEE T SOFTWARE ENG, V20, P684, DOI 10.1109/32.317428
   Levi F, 1999, THEOR COMPUT SCI, V216, P271, DOI 10.1016/S0304-3975(97)00245-4
   Luttgen G., 2002, ACM Transactions on Computational Logic, V3, P1, DOI 10.1145/504077.504078
   LUTTGEN G, 2002, ELECT NOTES THEORETI, V65, P95
   Maggiolo-Schettini A, 2003, THEOR COMPUT SCI, V290, P465, DOI 10.1016/S0304-3975(01)00381-4
   *MATHW, 2005, STAT STAT COD US GUI
   MIKK E, 1997, LNCS, V1345, P181
   Peled D, 1997, THEOR COMPUT SCI, V186, P135, DOI 10.1016/S0304-3975(96)00225-3
   Peled D., 1993, Proceedings of the 5th International Conference on Computer Aided Verification, V697, P409
   PNUELI A, 1991, LECT NOTES COMPUT SC, V526, P244
   Rumbaugh J., 1991, OBJECT ORIENTED MODE
   Selic B., 1994, REAL TIME OBJECT ORI
   *UML REV TASKF, 2003, PTC030706 OMG UML RE
   von der Beeck M., 2002, Softw. Syst. Model., V1, DOI [10.1007/s10270-002-0012-8, DOI 10.1007/S10270-002-0012-8]
   Wieringa R.J., 2003, Design Methods for Reactive Systems: Yourdon, Statemate
NR 43
TC 33
Z9 34
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2009
VL 74
IS 3
BP 65
EP 99
DI 10.1016/j.scico.2008.09.001
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 402NY
UT WOS:000263021600001
DA 2024-07-18
ER

PT J
AU Bravenboer, M
   Kalleberg, KT
   Vermaas, R
   Visser, E
AF Bravenboer, Martin
   Kalleberg, Karl Trygve
   Vermaas, Rob
   Visser, Eelco
TI Stratego/XT 0.17. A language and toolset for program transformation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Advanced Software Development Tools and
   Techniques
CY JUL, 2008
CL Paphos, CYPRUS
DE stratego; stratego/XT; program transformation; rewriting strategies;
   rewrite rules; concrete syntax; dynamic rewrite rules
ID REWRITING STRATEGIES; DISAMBIGUATION
AB Stratego/XT is a language and toolset for program transformation. The Stratego language provides rewrite rules for expressing basic transformations, programmable rewriting strategies for controlling the application of rules, concrete syntax for expressing the patterns of rules in the syntax of the object language, and dynamic rewrite rules for expressing context-sensitive transformations, thus supporting the development of transformation components at a high level ofabstraction. The XT toolset offers a collection offlexible, reusable transformation components, and tools for generating such components from declarative specifications. Complete program transformation systems are composed from these components.
   This paper gives an overview ofStratego/XT 0.17, including a description ofthe Stratego language and XT transformation tools: a discussion of the implementation techniques and software engineering process; and a description of applications built with Stratego/XT. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Bravenboer, Martin; Visser, Eelco] Delft Univ Technol, Fac Elect Engn Math & Comp Sci EWI, Dept Software Technol, NL-2628 CD Delft, Netherlands.
   [Kalleberg, Karl Trygve] Univ Bergen, Dept Informat, N-5020 Bergen, Norway.
   [Vermaas, Rob] Machina, Utrecht, Netherlands.
C3 Delft University of Technology; University of Bergen
RP Visser, E (corresponding author), Delft Univ Technol, Fac Elect Engn Math & Comp Sci EWI, Dept Software Technol, Mekelweg 4, NL-2628 CD Delft, Netherlands.
EM martin.bravenboer@gmail.com; karltk@strategoxt.org;
   rob.vermaas@gmail.com; visser@acm.org
OI Visser, Eelco/0000-0002-7384-3370
CR [Anonymous], 1998, Modern Compiler Implementation in C
   Bagge OS, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P65, DOI 10.1109/SCAM.2003.1238032
   BALLAND E, 2007, LECT NOTES COMPUTER
   Baxter ID, 2004, PROC INT CONF SOFTW, P625, DOI 10.1109/ICSE.2004.1317484
   BAXTER ID, 1992, COMMUN ACM, V35, P73, DOI 10.1145/129852.129859
   BOROVANSKY P, 1996, ELECT NOTES THEORETI, V4
   Boyle JM, 1997, MODERN SOFTWARE TOOLS FOR SCIENTIFIC COMPUTING, P353
   BOYLE JM, 1974, INFORM PROCESSING, V74, P542
   Bravenboer M, 2005, LECT NOTES COMPUT SC, V3676, P157
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   Bravenboer M, 2002, LECT NOTES COMPUT SC, V2378, P237
   BRAVENBOER M, 2006, ACM SIGPLAN 2006 WOR
   Bravenboer M., 2005, Fundamenta Informaticae, V69, P1
   BRAVENBOER M, 2003, THESIS UTRECHT U UTR
   Bravenboer M, 2006, LECT NOTES COMPUT SC, V4143, P297
   Bravenboer Martin., 2006, OOPSLA 06, P209, DOI DOI 10.1145/1167473
   Cordy J.R., 2004, Electron. Notes Theor. Comput. Sci, V110, P3, DOI [DOI 10.1016/J.ENTCS.2004.11.006, 10.1016/j.entcs.2004.11.006, https://doi.org/10.1016/j.entcs.2004.11.006]
   DEJONGE M, 2000, P 2 INT S CONSTR SOF
   DEJONGE M, 2001, ENTCS, V44
   DOLSTRA E, 2004, 18 LARG INST SYST AD, P79
   DOLSTRA E, 2002, ELECT NOTES THEORETI
   EKMAN T, 2004, THESIS LUND U
   FISCHER B, 2004, LNCS, P239
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   JOHANN P, 2003, UUCS2003050 I INF CO
   JOHANN P, 2001, ELECT NOTES THEORETI, V57
   KALLEBERG KT, 2005, ENTCS
   Lämmel R, 2003, ACM SIGPLAN NOTICES, V38, P26, DOI 10.1145/640136.604179
   LAMMEL R, 2002, LNCS, P137
   Luttik Bas, 1997, 2 INT WORKSH THEOR P
   Olmos K, 2005, LECT NOTES COMPUT SC, V3443, P204, DOI 10.1007/978-3-540-31985-6_14
   Olmos K, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P141, DOI 10.1109/SCAM.2003.1238040
   PARR TJ, 1995, SOFTWARE PRACT EXPER, V25, P789, DOI 10.1002/spe.4380250705
   van den Brand M, 2003, LECT NOTES COMPUT SC, V2706, P424
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   Van den Brand MGJ, 2003, ACM T SOFTW ENG METH, V12, P152, DOI 10.1145/941566.941568
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   VANDENBRAND M, 2001, COMPUT COMPLEX, P365
   VERMAAS RB, 2004, THESIS UTRECHT U UTR
   Visser E, 2005, J SYMB COMPUT, V40, P831, DOI 10.1016/j.jsc.2004.12.011
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
   Visser E, 2002, LECT NOTES COMPUT SC, V2487, P299
   VISSER E, 1999, LNCS, V1631, P30
   VISSER E, 2005, STRATEGO XT BIBTEX T
   Visser E, 2008, LECT NOTES COMPUTER
   VISSER E, 2001, ELECT NOTES THEORETI
   Visser Eelco, 1998, ACM INT C FUNCT PROG, DOI DOI 10.1145/289423.289425
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
   Visser Eelco., 2001, REWRITING TECHNIQUES, V2051, P357, DOI DOI 10.1007/3-540-45127-7_27.URL
   Visser J, 2001, ACM SIGPLAN NOTICES, V36, P270, DOI 10.1145/504311.504302
   WADDINGTON DG, 2005, P 5 WORKSH LANG DESC
   WARD M, 2005, COMPSAC 2005 P 29 AN
   WARD M, 1993, WORK C REV ENG BALT, P212
NR 53
TC 159
Z9 178
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2008
VL 72
IS 1-2
BP 52
EP 70
DI 10.1016/j.scico.2007.11.003
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330AX
UT WOS:000257912800006
DA 2024-07-18
ER

PT J
AU Tivoli, M
   Inverardi, P
AF Tivoli, Massimo
   Inverardi, Paola
TI Failure-free coordinators synthesis for component-based architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component-based software engineering; component assembly; component
   composition; component adaptation; adaptor synthesis
ID SPECIFICATIONS
AB One of the main problems in component assembly is how to establish properties on the assembly code by only assuming a limited knowledge of the single component properties. Our answer to this problem is an architectural approach in which the software architecture imposed on the assembly prevents black-box integration anomalies. The basic idea is to build applications by assuming a "coordinator-based" architectural style. We, then,operate on the coordinating part of the system architecture to obtain an equivalent version of the system which is failure-free. A failure-free system is a deadlock-free one and it does not violate any specified coordination policy. A coordination policy models those interactions of components that are actually needed for the overall purpose of the system. We illustrate our approach by means of an explanatory example and validate it on an industrial case study that concerns the development of systems for safeguarding, fruiting, and supporting the Cultural Heritage. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Tivoli, Massimo; Inverardi, Paola] Univ Aquila, Dip Informat, I-67100 Laquila, Italy.
C3 University of L'Aquila
RP Tivoli, M (corresponding author), Univ Aquila, Dip Informat, Via Vetoio 1, I-67100 Laquila, Italy.
EM tivoli@di.univaq.it; inverard@di.univaq.it
RI Tivoli, Massimo/A-7289-2008
OI TIVOLI, Massimo/0000-0001-9290-1997
CR ALFONSO A, 26 ICSE04 ED SCOTL U
   ANDRE C, 4 IEEE INT S OO REAL
   [Anonymous], SFCS 1977
   [Anonymous], 1991, The Temporal Logic of Reactive and Concurrent Systems
   ARNOLD A, 1994, INT SERIES COMPUTER
   AUTILI M, 2007, INT C SOFTW ENG ICSE
   AUTILI M, 2004, P SAVCBS 04 WORKSH F
   AUTILI M, 2007, ASE J
   AUTILI M, 2006, P EUR WORKSH SOFT AR
   Autili M, 2008, J SYST SOFTWARE, V81, P2210, DOI 10.1016/j.jss.2008.04.006
   Boehm B, 1999, COMPUTER, V32, P6
   Braberman V, 2005, IEEE T SOFTWARE ENG, V31, P1028, DOI 10.1109/TSE.2005.131
   Bracciali A, 2005, J SYST SOFTWARE, V74, P45, DOI 10.1016/j.jss.2003.05.007
   Brandin B., 1994, IEEE T AUTOMATIC CON, V39
   BROOKS FP, 1987, COMPUTER, V20, P10, DOI 10.1109/MC.1987.1663532
   Buchi, P INT C LOG METH PHI
   Canal C., 2006, LNCS, V4037
   Clarke Edmund M., 2001, Model Checking
   Clarke Jr Edmund M, MODEL CHECKING
   Compare D, 1999, SCI COMPUT PROGRAM, V33, P101, DOI 10.1016/S0167-6423(98)00006-9
   *CUSPIS, EUR COMM 6 FRAM PROG
   DEALFARO L, 2001, ACM P JOINT 8 ESEC 9
   DILLON LK, ACM TOSEM, V3
   DWYER MB, ICSE99, P411
   GARLAN D, 1995, IEEE SOFTWARE, V12, P17, DOI 10.1109/52.469757
   GERTH R, SIMPLE ON THE FLY AU, P318
   Giannakopoulou D., 2005, Automated Software Engineering, V12, P297, DOI 10.1007/s10515-005-2641-y
   Giannakopoulou D., 1999, Automated Software Engineering, V6, P7, DOI 10.1023/A:1008645800955
   GROCE A, 2002, TOOLS ALGORITHMS CON
   HOLZMANN G, 1995, P 7 IFIP WG 6 1 INT
   HOLZMANN GJ, 2002, P FDN SOFTWARE ENG
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Inverardi P, 2003, J SYST SOFTWARE, V65, P173, DOI 10.1016/S0164-1212(02)00037-7
   INVERARDI P, 2003, LNCS, V2804
   INVERARDI P, 2001, ACM P JOINT 8 ESEC 9
   INVERARDI P, 2004, LNCS, V2941
   INVERARDI P, 2000, ACM TOSEM, V9, P3
   *ITU, 1996, ITU TEL STAND SECT
   *ITU T, ISOIEC95941
   KAVEH N, 2001, OBJECT SYSTEM
   KELLER RM, 1976, COMMUN ACM, V19, P371, DOI 10.1145/360248.360251
   KNIGHT K, 1989, COMPUT SURV, V21, P93, DOI 10.1145/62029.62030
   KUGLER H, 11 INT C TACAS05 SPR
   LEE I, HIGH ASS SYST ENG WO
   MANNA Z, 1984, ACM T PROGR LANG SYS, V6, P68, DOI 10.1145/357233.357237
   Milner R., 1989, Communication and concurrency
   Passerone R, 2002, IEEE/ACM INTERNATIONAL CONFERENCE ON CAD-02, DIGEST OF TECHNICAL PAPERS, P132, DOI 10.1109/ICCAD.2002.1167525
   Ramadge P.J., 1987, SIAM J. Control Optim, V25, p206 230
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Shaw M., 1996, SOFTWARE ARCHITECTUR
   SMITH MH, 5 INT S REQ ENG
   SMITH RL, ICSE2002, P11
   Szyperski Clemens., 1998, COMPONENT SOFTWARE
   Taubner D., 1989, LNCS, V369
   TIVOLI M, 2004, LNCS, V3054
   TIVOLI M, 2006, OBJECT J SPECIAL ISS, V12, P77
   Uchitel S, 2004, ACM T SOFTW ENG METH, V13, P37, DOI 10.1145/1005561.1005563
   VANGLABBEEK RJ, 1998, THEORETICAL COMPUTER, V177, P329
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
   ZANOLIN L, SAVCBS2003
NR 60
TC 18
Z9 21
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2008
VL 71
IS 3
BP 181
EP 212
DI 10.1016/j.scico.2008.03.001
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 322VD
UT WOS:000257402500002
DA 2024-07-18
ER

PT J
AU Chiba, Y
AF Chiba, Yuji
TI Java heap protection for debugging native methods
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Conference on Principles and Practices of Programming in
   Java
CY 2006
CL Mannheim, GERMANY
DE Java; memory protection; protection domain; debugging
AB Java virtual machine (JVM) crashes are often due to an invalid memory reference to the JVM heap. Before the bug that caused the invalid reference can be fixed, its location must be identified. It can be in either the JVM implementation or the native library written in C invoked from Java applications. To help system engineers identify the location, we implemented a feature using page protection that prevents threads executing native methods from referring to the JVM heap. This feature protects the JVM heap during native method execution; if the heap is referred to invalidly, it interrupts the execution by generating a page-fault exception. It then reports the location where the exception was generated. The runtime overhead for using this feature depends on the frequency of native method calls because the protection is switched on each time a native method is called. We evaluated the runtime overhead by running the SPECjvm98, SPECjbb2000, VolanoMark, and JFCMark benchmark suites on a PC with two Intel Xeong (R) 1.6 GHz processors. The performance loss was less than 2% for the benchmark items that do not call native methods so frequently (similar to 10(4) times per second) and 5%-20% for the benchmark items that do (10(4)-10(5) times per second). The worst performance loss was 54%, which was recorded for a benchmark item that calls native methods 2.0 x 10(6) times per second. (C) 2007 Elsevier B.V. All rights reserved.
C1 Hitachi Ltd, Syst Dev Lab, Kawasaki, Kanagawa 215, Japan.
C3 Hitachi Limited
RP Chiba, Y (corresponding author), Hitachi Ltd, Syst Dev Lab, 1099 Ozenji, Kawasaki, Kanagawa 215, Japan.
EM yuji.chiba.pd@hitachi.com
CR *ALPH ARCH COMM, 1998, ALPH AXP ARCH REF MA
   [Anonymous], 2002, ACM SIGPLAN NOTICES, DOI [DOI 10.1145/565816.503286, 10.1145/503272.503286, DOI 10.1145/503272.503286]
   Arnold K., 2005, The Java programming language
   Austin ToddM., 1994, P ACM SIGPLAN 1994 C, P290
   CHASE JS, 1994, ACM T COMPUT SYST, V12, P271, DOI 10.1145/195792.195795
   Chiueh TC, 1999, OPERATING SYSTEMS REVIEW, VOL 33, NO 5, DECEMBER 1999, P140, DOI 10.1145/319344.319161
   COHEN E, 1975, P 5 ACM S OP SYST PR, P141
   Czajkowski G, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P298, DOI 10.1109/ISSRE.2001.989483
   CZAJKOWSKI G, 2001, P GEN TRACK USENIX A, P85
   DEMETRESCU C, 2004, P 2004 ACM S APPL CO, P1524
   DENNIS JB, 1966, COMMUN ACM, V9, P143, DOI 10.1145/365230.365252
   Hastings Reed., 1992, WINTER USENIX C, P125
   *INT BUS MACH CORP, JAV WEBSPH PERF IBM
   *INT BUS MACH CORP, POWERPC ARCH BOOK
   *INT CORP, 2006, IA32 INT CORP
   Intel Corporation, 2006, INT IT ARCH SOFTW DE
   Jones Richard WM, 1997, AADEBUG, V97, P13
   KOJU T, 2005, IPSJ J, V46, P3040
   Koldinger E.J., PROC 5 INTNL C ARCHI
   Lampson B.W., 1971, P 5 PRINCETON C INFO, P437
   LEVIN R, 1975, P 5 ACM S OP SYST PR, P132
   Liang S., 1999, Java native interface: programmers guide and reference, V1
   MCKENNEY RE, 1998, P IASTED INT C PAR D, P509
   Microsoft Corporation, 2001, MICR C LANG SPEC
   *MIPS TECHN, 2005, MIPS32 MIPS TECHN
   Necula G.C., 1997, 24 ANN S PRINCIPLES, P106
   Necula GC, 1996, PROCEEDINGS OF THE SECOND SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDI '96), P229, DOI 10.1145/248155.238781
   NETHERCOTE N, 2004, INF P 2 WORKSH SEM P
   Paleczny M, 2001, USENIX ASSOCIATION PROCEEDINGS JAVA(TM) VIRTUAL MACHINE RESEARCH AND TECHNOLOGY SYMPOSIUM, P1
   *REN TECHN CORP, 2003, SH7706 REN TECHN COR
   SHINAGAWA T, 2003, P INT S SOFTW SEC, P172
   SOSIC R, 1992, P SIGPLAN 92 C PROGR, P12
   *SPARC INT INC, 2000, SPARC ARCH MAN VERS
   *STAND PERF EV COR, 2000, SPEC JBB2000
   *STAND PERF EV COR, 1998, SPEC JVM98 BENCHM
   Takahashi M, 1999, INT CON DISTR COMP S, P64, DOI 10.1109/ICDCS.1999.776507
   Witchel E., 2005, ACM SIGOPS Operating Systems Review, V39, P31, DOI [DOI 10.1145/1095810.1095814, 10.1145/1095810.1095814]
   WITCHEL E, 2003, P 9 WORKSH HOT TROPI, P139
   WITCHEL E, 2002, P 10 INT C ARCH SUPP, P304, DOI DOI 10.1145/605397.605429
   WULF WA, 1975, P INT C REL SOFTW LO, P122
   VOLANO SOFTWARE VULA
   [No title captured]
NR 42
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2008
VL 70
IS 2-3
BP 149
EP 167
DI 10.1016/j.scico.2007.07.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 278EJ
UT WOS:000254266600005
OA Bronze
DA 2024-07-18
ER

PT J
AU Kurtev, I
   van den Berg, K
   Jouault, F
AF Kurtev, Ivan
   van den Berg, Klaas
   Jouault, Frederic
TI Rule-based modularization in model transformation languages illustrated
   with ATL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Model Transformation Track held at the 21st Annual ACM Symposium on
   Applied Computing
CY APR 23-27, 2006
CL Dijon, FRANCE
SP ACM
DE model transformation; transformation language; modularity; reusability;
   adaptability; ATL
ID SOFTWARE
AB This paper studies ways for modularizing transformation definitions in current rule-based model transformation languages. Two scenarios are shown in which the modular units are identified on the basis of relations between source and target metamodels and on the base of generic transformation functionality. Both scenarios justify modularization by requiring adaptability and reusability in transformation definitions. To enable representation and composition of the identified units, a transformation language must provide proper modular constructs and mechanisms for their integration. We evaluate several implementations of the scenarios by applying different transformation techniques: usage of explicit and implicit rule calls, and usage of rule inheritance. ATLAS Transformation Language (ATL) is used to illustrate these implementations. The experience with these scenarios shows that current languages provide a reasonably full set of modular constructs but may have problems in handling some composition tasks. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Kurtev, Ivan; van den Berg, Klaas] Univ Twente, Software Engn Grp, Enschede, Netherlands.
   [Jouault, Frederic] Univ Nantes, ARLAS Grp, INRIA & LINA, F-44035 Nantes, France.
   [Jouault, Frederic] Univ Alabama, Dept Comp & Informat Sci, Birmingham, AL 35294 USA.
C3 University of Twente; Nantes Universite; University of Alabama System;
   University of Alabama Birmingham
RP Kurtev, I (corresponding author), Univ Twente, Software Engn Grp, Enschede, Netherlands.
EM kurtev@ewi.utwente.nl; vdberg@cs.utwente.nl;
   frederic.jouault@univ-nantes.fr
RI Van den Berg, Klaas/AAU-8601-2021
OI Kurtev, Ivan/0009-0003-3783-405X
CR AGRAWAL A, 2003, ASE IEEE COMPUTER SO
   [Anonymous], 1997, Object-oriented software construction
   BALOGH A, 2006, SAC 06 P 2006 ACM S
   Bruel J. -M., 2006, LECT NOTES COMPUTER, V3844
   CONEJERO JM, 2006, AOSD FORMALIZATION B, P325
   CUADRADO JS, 2006, LECT NOTES COMPUTER, V4066
   Czarnecki K, 2006, IBM SYST J, V45, P621, DOI 10.1147/sj.453.0621
   Darcy DP, 2005, IEEE T SOFTWARE ENG, V31, P982, DOI 10.1109/TSE.2005.130
   Filman R., 2004, ASPECT ORIENTED SOFT
   Gyimóthy T, 2005, IEEE T SOFTWARE ENG, V31, P897, DOI 10.1109/TSE.2005.112
   JOUAULT F, 2005, ECMDA WORKSH TRAC NU
   KURTEV I, 2005, THESIS U TWENTE
   LOPES CV, 2005, AOSD 05 P 4 INT C AS
   Mitchell BS, 2006, IEEE T SOFTWARE ENG, V32, P193, DOI 10.1109/TSE.2006.31
   *OMG QVT MOF, 2002, 20020410 OMG
   Ossher H., 2000, P S SOFTW ARCH COMP
   TARR PL, 1999, INT C SOFTW ENG
   VANDENBERG K, 2006, ECMDA TW TRAC WORKSH
   VARRO D, 2004, LECT NOTES COMPUTER, V3273
NR 19
TC 10
Z9 11
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2007
VL 68
IS 3
BP 138
EP 154
DI 10.1016/j.scico.2007.05.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 243BZ
UT WOS:000251771200003
OA Green Published
DA 2024-07-18
ER

PT J
AU Heule, MJH
   Rothkrantz, LJM
AF Heule, M. J. H.
   Rothkrantz, L. J. M.
TI Solving games dependence of applicable solving procedures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE 2-player board games; solving procedures; solvability
AB We introduce an alternative concept to determine the solvability of two-player games with perfect information. This concept based on games currently solved - claims that the applicable solving procedures have a significant influence on the solvability of games. This contrasts with current views that suggest that solvability is related to state-space and game-tree complexity. Twenty articles on this topic are discussed, including those that describe the currently obtained solutions. Results include a description of the available solving procedures as well as an overview of essential techniques from the past. Besides well-known classic games, the solvability of popular and recent games zertz, dvonn, and yinsh are analyzed. We conclude that our proposed concept could determine the solvability of games more accurately. Based on our concept, we expect that new solving techniques are required to obtain solutions for unsolved games. (c) 2007 Elsevier B.V. All rights reserved.
C1 Delft Univ Technol, Dept Software Technol, Fac Elect Engn Math & Comp Sci, NL-2600 AA Delft, Netherlands.
   Delft Univ Technol, Dept Mediamat, Fac Elect Engn Math & Comp Sci, NL-2600 AA Delft, Netherlands.
C3 Delft University of Technology; Delft University of Technology
RP Heule, MJH (corresponding author), Delft Univ Technol, Dept Software Technol, Fac Elect Engn Math & Comp Sci, NL-2600 AA Delft, Netherlands.
EM marijn@heule.nl; l.j.m.rothkrantz@tudelft.nl
OI Heule, Marijn/0000-0002-5587-8801
CR ALLIS LV, 1994, THESIS U LIMBURG NET
   ALLIS LV, GOMOKU THREAT SPACE
   ALLIS LV, 1991, HEURISTIC PROGRAMMIN, V2, P232
   [Anonymous], 1980, MATH MAG
   BOUZY B, 2001, GO PATTERNS GENERATE
   Breuker DM, 2000, THEOR COMPUT SCI, V230, P195, DOI 10.1016/S0304-3975(99)00082-1
   BREUKER DM, 1994, ICCA J, V17, P183, DOI 10.3233/ICG-1994-17402
   Bullock N, 2002, ICGA J, V25, P67
   Gasser R., 1996, Games o fNo Chance, MSRI Publications, V29, P101
   Ginsberg ML, 1996, PROCEEDINGS OF THE THIRTEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE EIGHTH INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE CONFERENCE, VOLS 1 AND 2, P228
   LINCKE TR, 2002, THESIS ETH ZURICH SW
   ORMAN HK, 1996, GAMES NO CHANCE, V29, P339
   Romein JW, 2003, COMPUTER, V36, P26, DOI 10.1109/MC.2003.1236468
   SAKUTA M, 2001, ADV COMPUTER GAMES, V9, P203
   SCHAEFFER J, 2003, BUILDING CKECKERS 10
   Thomas MK, 2004, ECON EDUC REV, V23, P203, DOI 10.1016/j.econedurev.2003.07.003
   Uiterwijk J., 1989, HEURISTIC PROGRAMMIN, P113
   van den Herik HJ, 2002, ARTIF INTELL, V134, P277, DOI 10.1016/S0004-3702(01)00152-7
   van Rijswijck Jack., 2002, Search and evaluation in hex
   Wágner J, 2001, ICGA J, V24, P30, DOI 10.3233/ICG-2001-24104
   Yang J., 2001, International Conference on Application and Development of Computer Games in the 21st Century, P96
NR 21
TC 5
Z9 5
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2007
VL 67
IS 1
BP 105
EP 124
DI 10.1016/j.scico.2007.01.004
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 187HK
UT WOS:000247838100007
DA 2024-07-18
ER

PT J
AU van Hee, K
   Oanea, O
   Serebrenik, A
   Sidorova, N
   Voorhoeve, M
AF van Hee, Kees
   Oanea, Olivia
   Serebrenik, Alexander
   Sidorova, Natalia
   Voorhoeve, Marc
TI LogLogics: A logic for history-dependent business processes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Modelling, Simulation, Verification, and
   Validation of Enterprise Information Systems
CY MAY, 2006
CL Paphos, CYPRUS
DE history-dependent processes; log; temporal logic; business processes;
   workflow
ID TEMPORAL LOGIC; REAL-TIME; SYSTEMS; VERIFICATION
AB Choices in business processes are often based on the process history saved as a log-file listing events and their lime stamps. In this paper we introduce LogLogics, a finite-path variant of the Timed Propositional Temporal Logic with Past, which can be in particular used for specifying guards in business process models. The novelty is due to the presence of boundary points corresponding to the starting and current observation points, which gives rise to a three-valued logic allowing us to distinguish between temporal formulas that hold for any log extended with some possible past and future (true). those that do not hold for any extended log (false) and those that hold for some but not all extended logs (unknown). We reduce the check of the truth Value of a LogLogics formula to a check on a finite abstraction and present an evaluation algorithm. We also define LogLogics patterns for commonly occurring properties. (c) 2006 Elsevier B.V. All rights reserved.
C1 Eindhoven Univ Technol, Dept Math & Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 Eindhoven University of Technology
RP Sidorova, N (corresponding author), Eindhoven Univ Technol, Dept Math & Comp Sci, POB 513, NL-5600 MB Eindhoven, Netherlands.
EM k.m.v.hee@tue.nl; o.i.oanea@tue.nl; a.serebrenik@tue.nl;
   n.sidorova@tue.nl; m.voorhoeve@tue.nl
RI Serebrenik, Alexander/E-1132-2012; Sidorova, Natalia/AGD-4016-2022
OI Serebrenik, Alexander/0000-0002-1418-0095; Sidorova,
   Natalia/0000-0002-9223-938X
CR ALUR R, 1994, J ACM, V41, P181, DOI 10.1145/174644.174651
   ALUR R, 1992, LECT NOTES COMPUT SC, V600, P74, DOI 10.1007/BFb0031988
   [Anonymous], 1952, INTRO METAMATHEMATIC
   [Anonymous], 2002, Workflow management: models, methods, and systems
   Bouyer P, 2005, LECT NOTES COMPUT SC, V3821, P432, DOI 10.1007/11590156_35
   Cousot Patrick, 1977, P 4 ACM S PRINC PROG, P238, DOI [10.1145/512950.512973, DOI 10.1145/512950.512973]
   Dams D, 1997, ACM T PROGR LANG SYS, V19, P253, DOI 10.1145/244795.244800
   Dang Z, 2004, THEOR COMPUT SCI, V313, P57, DOI 10.1016/j.tcs.2003.10.004
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   LOISEAUX C, 1995, FORM METHOD SYST DES, V6, P11, DOI 10.1007/BF01384313
   Markey N, 2003, LECT NOTES COMPUT SC, V2761, P251
   Morikawa O., 2001, Notre Dame Journal of Formal Logic, V42, P55, DOI 10.1305/ndjfl/1054301355
   NAKAMURA A, 1995, 1 I EL INF COMM ENG
   Raskin J.F., 1999, THESIS FACULTES U NO
   Rinderle S, 2004, DATA KNOWL ENG, V50, P9, DOI 10.1016/j.datak.2004.01.002
   Russell N, 2005, LECT NOTES COMPUT SC, V3520, P216
   Thati P, 2005, ELECTRON NOTES THEOR, V113, P145, DOI 10.1016/j.entcs.2004.01.029
   van der Aalst WMP, 2005, LECT NOTES COMPUT SC, V3760, P130
   van Hee KM, 2006, LECT NOTES COMPUT SC, V4024, P241
NR 20
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2007
VL 65
IS 1
BP 30
EP 40
DI 10.1016/j.scico.2006.08.004
PG 11
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 144CB
UT WOS:000244771700005
DA 2024-07-18
ER

PT J
AU Altisen, K
   Maraninchi, F
   Stauch, D
AF Altisen, K.
   Maraninchi, F.
   Stauch, D.
TI Aspect-oriented programming for reactive systems: Larissa, a proposal in
   the synchronous framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE reactive systems; aspect-oriented programming; synchronous languages;
   formal semantics
ID SEMANTICS; LANGUAGE
AB Aspect-oriented programming (AOP) has emerged recently as a language concept for expressing cross-cutting concerns, mainly in object-oriented software. Since then, the concept has been applied to a wide variety of other contexts. In this paper, we explore some cross-cutting concerns for parallel programs of reactive systems: we propose an aspect language, Larissa, and a weaving mechanism, in a core language based on parallel communicating Mealy machines. (c) 2006 Elsevier B.V. All rights reserved.
C1 Verimag, Ctr Equat, F-38610 Gieres, France.
C3 Communaute Universite Grenoble Alpes; Institut National Polytechnique de
   Grenoble; Universite Grenoble Alpes (UGA); Centre National de la
   Recherche Scientifique (CNRS)
RP Altisen, K (corresponding author), Verimag, Ctr Equat, 2 Ave Vignate, F-38610 Gieres, France.
EM Karine.Altisen@imag.fr
CR ALTISEN K, 2004, WORKSH FDN ASP OR LA
   Andrews J.H., 2001, Reflection, P187
   [Anonymous], POPL 2000
   BENVENISTE A, P IEEE, V79
   BERRY G, 1992, SCI COMPUT PROGRAM, V19, P87, DOI 10.1016/0167-6423(92)90005-V
   Douence Remi, 2005, P 4 INT C ASP OR SOF, P27
   Douence Remi, 2005, Aspect-Oriented Software Development, P201
   FELLEISEN M, 1990, LECT NOTES COMPUT SC, V432, P134
   FEY JJ, 1999, VHS CASE STUDY 4 MOD
   Filman RobertE., 2005, ASPECT ORIENTED SOFT, P21
   GRISWOLD W, 2006, ASPECT ORIENTED PROG
   HALBWACHS N., 1993, 3 INT C ALG METH SOF
   HALBWACHS N, IEEE T SOFTW ENG
   Halbwachs Nicolas., 1993, Synchronous Programming of Reactive Systems
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   KATZ S, 1993, ACM T PROGR LANG SYS, V15, P337, DOI 10.1145/169701.169682
   Katz S., 2004, WORKSH FDN ASP OR LA
   Kiczales G, 2005, PROC INT CONF SOFTW, P49
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   KLOSE K, 2005, WORKSH FDN ASP OR LA
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Ligatti J., 2005, J. Inf. Secur., V4, P2, DOI [10.1007/s10207-004-0046-8, DOI 10.1007/S10207-004-0046-8]
   MAHONEY M, 2004, 5 AS OR MOD WORKSH L
   Maraninchi F, 2001, COMPUT LANG, V27, P61, DOI 10.1016/S0096-0551(01)00016-9
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   SIPMA H, 2003, WORKSH FDN ASP OR LA
   WALKER RJ, 2004, SIGSOFT 04 FSE 12, P159
   Wand M, 2004, ACM T PROGR LANG SYS, V26, P890, DOI 10.1145/1018203.1018208
   COMPILER ARGOS LARIS
NR 29
TC 12
Z9 13
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2006
VL 63
IS 3
SI SI
BP 297
EP 320
DI 10.1016/j.scico.2005.12.001
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 110CL
UT WOS:000242355800005
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Aldini, A
AF Aldini, Alessandro
TI Classification of security properties in a Linda-like process algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Security Issues in Coordination Models,
   Languages, and Systems
CY JUN 28-29, 2003
CL Eindhoven, NETHERLANDS
DE information flow analysis; noninterference properties; coordination
   model; process algebra; behavioural equivalence
ID INFORMATION-FLOW; COORDINATION
AB We provide a classification of noninterference-based security properties for the formal analysis of secure information flow in concurrent and distributed systems. This is done in the setting of a process algebra modeling some Linda coordination primitives (asynchronous communication and read operation). For this purpose, we define relaxed notions of behavioural equivalence that take into account the observational power of the external observer. The resulting taxonomy is compared with analogous security definitions based on synchronous communication models, thus emphasizing the influence of the Linda coordination model upon the expressivity of the security properties, by giving a new intuition to the relative merits. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Urbino Carlo Bo, Ist Sci & Tecnol Informaz, Urbino, Italy.
C3 Consiglio Nazionale delle Ricerche (CNR); Istituto di Scienza e
   Tecnologie dell'Informazione "Alessandro Faedo" (ISTI-CNR); University
   of Urbino
RP Aldini, A (corresponding author), Univ Urbino Carlo Bo, Ist Sci & Tecnol Informaz, Urbino, Italy.
EM aldini@sti.uniurb.it
OI Aldini, Alessandro/0000-0002-7250-5011
CR ALDINI A, 2003, ENTCS
   Amadio RM, 1998, THEOR COMPUT SCI, V195, P291, DOI 10.1016/S0304-3975(97)00223-5
   [Anonymous], 1995, J COMPUT SECUR, DOI [DOI 10.3233/JCS-1994/1995-3103, 10.3233/JCS-1994/1995-3103]
   Bell D.E., 1976, ESDTR75306 MITRE COR
   Boreale M, 2002, INFORM COMPUT, V172, P139, DOI 10.1006/inco.2001.3080
   BORRIONE D, 2003, P INT C VER LARG SCA, P86
   Bossi A, 2004, COMPUT LANG SYST STR, V30, P231, DOI 10.1016/j.cl.2004.02.005
   Boudol G, 2002, THEOR COMPUT SCI, V281, P109, DOI 10.1016/S0304-3975(02)00010-5
   Busi N, 1998, THEOR COMPUT SCI, V192, P167, DOI 10.1016/S0304-3975(97)00149-7
   Busi N, 2000, LECT NOTES COMPUT SC, V1816, P198
   Carriero N., 1992, COMMUN ACM, V35, P97
   CARRIERO N, 1992, WRITE PARALLEL PROGR
   CIANCARINI P, 1999, LECT NOTES COMPUT SC, V1757, P250
   FOCARDI R, 2001, SPRINGER LNCS, V2171
   FOCARDI R, 2004, SPRINGER LNCS, V2946
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Goguen J. A., 1982, Proceedings of the 1982 Symposium on Security and Privacy, P11
   Guttman J.D., 1988, 8 IEEE COMPUTER SECU, P34
   Hennessy M, 2002, ACM T PROGR LANG SYS, V24, P566, DOI 10.1145/570886.570890
   HENNESSY M, 2003, ENTCS, V83
   HONDA K, 1992, LECT NOTES COMPUT SC, V612, P21
   Honda K, 2000, LECT NOTES COMPUT SC, V1782, P180
   Mantel H, 2000, LECT NOTES COMPUT SC, V1895, P238
   Merro M, 1998, LECT NOTES COMPUT SC, V1443, P856, DOI 10.1007/BFb0055108
   Milner R., 1989, Communication and concurrency
   MONTANARI U, 1991, LECT NOTES COMPUT SC, V520, P346
   Orzan S, 2003, LECT NOTES COMPUT SC, V2890, P192
   Piazza C, 2004, LECT NOTES COMPUT SC, V2988, P144
   ROSCOE AW, 1995, P IEEE S SECUR PRIV, P114, DOI 10.1109/SECPRI.1995.398927
   Sabelfeld A, 2003, IEEE J SEL AREA COMM, V21, P5, DOI 10.1109/JSAC.2002.806121
   SANGIORGI D, 1992, LECT NOTES COMPUT SC, V630, P32
   Sewell P, 2000, P IEEE CSFW, P269, DOI 10.1109/CSFW.2000.856943
   Smith EA, 1998, FEMS MICROBIOL ECOL, V25, P355, DOI 10.1016/S0168-6496(98)00004-X
   Wittbold J. T., 1990, Proceedings. 1990 IEEE Computer Society Symposium on Research in Security and Privacy (Cat. No.90CH2884-5), P144, DOI 10.1109/RISP.1990.63846
NR 34
TC 5
Z9 5
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2006
VL 63
IS 1
BP 16
EP 38
DI 10.1016/j.scico.2005.07.010
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 096DD
UT WOS:000241356300003
OA Bronze
DA 2024-07-18
ER

PT J
AU Kondoh, H
   Futatsugi, K
AF Kondoh, H
   Futatsugi, K
TI To use or not to use the goto statement: Programming styles viewed from
   Hoare Logic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE structured programming; verification pattern; Hoare logic; finite state
   modeling
AB There has been a vast amount of debate on the goto issue: i.e., the issue whether to use or not to use the goto statement initiated by Dijkstra in his famous Letter to the Editor of CACM and his proposal of 'Structured Programming'. However, except for the goto-less programming style by Mills based on theoretical results on the expressibility of control flow diagrams, there have hardly been any scientific accounts on this issue from Dijkstra's own viewpoint of the correctness of programs. In this work, we reconsider this seemingly old-tired issue from the viewpoint of Hoare Logic, the most well-known framework for correctness proof of programs. We show that, in two cases, the with-goto programming styles are more suitable for proving correctness in Hoare Logic than the corresponding without-goto ones; that is, in each of two cases, the without-goto style requires more complicated assertions in the proof-outline than the with-goto one. The first case is on the use of the goto statement for escaping from nested loops and the second case is on the use of the goto statement for expressing state transitions in programming through the finite state machine model. Hence, in both cases, the use of the goto statement can be justified from the viewpoint of the correctness proof in Hoare Logic. (c) 2005 Elsevier B.V. All rights reserved.
C1 Hitachi Ltd, Syst Dev Lab, Kawasaki, Kanagawa 2150013, Japan.
   JAIST, Tatsunokuchi, Ishikawa 9231292, Japan.
C3 Hitachi Limited; Japan Advanced Institute of Science & Technology
   (JAIST)
RP Hitachi Ltd, Syst Dev Lab, 1099 Ohzenji Asao, Kawasaki, Kanagawa 2150013, Japan.
CR [Anonymous], 1981, SCI PROGRAMMING, DOI DOI 10.1007/978-1-4612-5983-1
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], VERIFICATION SEQUENT
   ASHCROFT EA, 1971, P IFIP C LJUBLJ YUG, V1, P250
   Back R.-J., 1998, Refinement Calculus
   Backhouse R., 1986, Program construction and verification
   Backhouse Roland, 2003, PROGRAM CONSTRUCTION
   BASILI VR, 1981, TUTORIAL STRUCTURED
   BECKER SA, 1997, CLEANROOM SOFTWARE E
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   Clint M., 1972, Acta Informatica, V1, P214, DOI 10.1007/BF00288686
   Cooper D.C., 1967, MACH INTELL, V2, P21
   COOPER DC, 1967, COMMUN ACM, V10, P463, DOI 10.1145/363534.363539
   Dahl O.-J., 1972, STRUCTURED PROGRAMMI
   de Bakker Jaco., 1980, Mathematical Theory of Program Correctness
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   DEBRUIN A, 1981, ACTA INFORM, V15, P385, DOI 10.1007/BF00264536
   Dijkstra E. W., 1976, A Discipline of Pro-gramming
   Dijkstra E.W., 1988, A Method of Programming
   DIJKSTRA EW, 1975, COMMUN ACM, V18, P453, DOI [10.1145/360933.360975, 10.1145/390016.808417]
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   DIJKSTRA EW, 1969, SOFTW ENG CONCEPTS T, P222
   DIJKSTRA S J, 1972, Palaeontologia Africana, V14, P1
   Dyer M., 1992, CLEANROOM APPROACH Q
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   GRIES D., 1978, PROGRAMMING METHODOL
   Gries David., 1974, Communications of the ACM, V17, P655
   Hehner E.C.R., 1993, A Practical Theory of Programming
   HEHNER ECR, 1984, LOGIC PROGRAMMING
   Hoare C. A. R., 1973, Acta Informatica, V2, P335, DOI 10.1007/BF00289504
   Hoare C. A. R., 1989, Essays in Computing Science
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hopkins MartinE., 1972, Proceedings of the ACM Annual Conference - Volume, V2, P787
   Jezequel Jean-Marc., 2000, Design Patterns and Contracts
   Kaldewaij A., 1990, Programming: The Derivation of Algorithms
   Kfoury A.J., 1982, PROGRAMMING APPROACH
   Knuth D. E., 1971, Information Processing Letters, V1, P23, DOI 10.1016/0020-0190(71)90018-4
   Knuth D.E., 1974, COMPUT SURV, V6, P260
   Kondoh H, 2000, LECT NOTES COMPUT SC, V1783, P163
   LEAVENWORTH B, 1972, ACM SIGPLAN NOTICES, V7, P53
   Linger R.C., 1979, Structured Programming; Theory and Practice the Systems Programming Series
   LINGER RC, 1977, CURRENT TRENDS PROGR, P120
   Miller MD, 2001, OPER TECHN SPORT MED, V9, P101
   Mills H.D., 1986, Principles of Computer Programming, A Mathematical Approach
   Mills H.D., 1986, Principles of information systems analysis and design
   Mills H.D., 1988, SOFTWARE PRODUCTIVIT
   MILLS HD, 1975, COMMUN ACM, V18, P43, DOI 10.1145/360569.360659
   MILLS HD, 1972, 726012 FSC, P18
   Morgan Carroll, 1994, Programming from specifications
   PLAUGER PJ, 1993, PROGRAMMING PURPOSE
   POORE JH, 1996, CLEANROOM SOFTWARE E
   Prowell S.J., 1999, SEI S SOFTW
   Reynolds J. C., 1981, CRAFT PROGRAMMING
   Stavely A., 1999, Toward Zero Defect Programming
   Strachey Christopher, 1974, TECHNICAL MONOGRAPH, V11
   TENNENT RD, 1982, PRINCIPLES PROGRAMMI
   WASSERMAN AI, 1980, TUTORIAL PROGRAMMING
   WIRTH N, 1971, COMMUN ACM, V14, P221, DOI 10.1145/362575.362577
   Wirth N., 1973, SYSTEMATIC PROGRAMMI
   Wulf W. A., 1972, P ACM ANN C, V2, P791
   YEH RT, 1977, CURRENT TRENDS PROGR, V1
   YOURDON E, 1982, WRITINGS REVOLUTION
   Yourdon E.N., 1979, CLASSICS SOFTWARE EN
NR 64
TC 2
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2006
VL 60
IS 1
BP 82
EP 116
DI 10.1016/j.scico.2005.05.003
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 008MV
UT WOS:000235045800004
DA 2024-07-18
ER

PT J
AU Greenhouse, A
   Halloran, TJ
   Scherlis, WL
AF Greenhouse, A
   Halloran, TJ
   Scherlis, WL
TI Observations on the assured evolution of concurrent Java programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Concurrency and Synchronization in Java Programs
CY JUL 25-26, 2004
CL St Johns, CANADA
DE Java; concurrency; program assurance; static analysis; program
   transformation; refactoring; program evolution
AB Evolving and refactoring concurrent Java software can be error-prone, resulting in race conditions and other concurrency difficulties. We suggest that there are two principal causes: concurrency design intent is often not explicit in code and, additionally, consistency of intent and code cannot easily be established through either testing or inspection.
   We explore several aspects of this issue in this paper. First, we describe a tool-assisted approach to modeling and assurance for concurrent programs. Second, we give an account of recent case study experience on larger-scale production Java systems. Third, we suggest an approach to scalable co-evolution of code and models that is designed to support working programmers without special training or incentives. Fourth, we propose some concurrency-related refactorings that, with suitable analysis and tool support, can potentially offer assurances of soundness. (c) 2005 Elsevier B.V. All rights reserved.
C1 Inst Software Engn, Pittsburgh, PA 15213 USA.
   USAF, Inst Technol, Dept Elect & Comp Engn, Wright Patterson AFB, OH 45433 USA.
   Carnegie Mellon Univ, Sch Comp Sci, Pittsburgh, PA 15213 USA.
C3 Software Engineering Institute; United States Department of Defense;
   United States Air Force; US Air Force Research Laboratory; Carnegie
   Mellon University
RP Inst Software Engn, 4500 5th Ave, Pittsburgh, PA 15213 USA.
EM aarong@sei.cmu.edu; thallora@afit.edu; scherlis@cmu.edu
CR Aldrich J, 2003, SCI COMPUT PROGRAM, V47, P91, DOI 10.1016/S0167-6423(02)00129-6
   [Anonymous], 2000, Programming Language Design and Implementation, DOI [DOI 10.1145/358438.349328, 10.1145/349299.349328]
   [Anonymous], 1999, P OBJ OR SYST LANG
   BACON D, 2000, P ACM C OBJ OR PROGR, P382
   BLANCHET B, 1999, P 1999 ACM SIGPLAN C, P20
   Bogda J, 1999, ACM SIGPLAN NOTICES, V34, P35, DOI 10.1145/320385.320388
   BOLLELL AG, 2000, REAL TIME SPECIFICAT
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Chan EC, 1998, PROC INT CONF SOFTW, P167, DOI 10.1109/ICSE.1998.671113
   DINIZ P, 1996, P 9 WORKSH LANG COMP, P285
   DINIZ P, 1997, P 24 ANN ACM S PRINC, P187
   Flanagan Cormac., 2003, Pro- ceedings of the ACM SIGPLAN 2003 Conference on Programming Language Design and Implementation, PLDI '03, P338
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Greenhouse A, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P453, DOI 10.1109/ICSE.2002.1007990
   GREENHOUSE A, 2003, THESIS CARNEGIEMELLO
   GREENHOUSE A, 1999, OBJ OR PROGR 13 EUR, P205
   GREENHOUSE A, 2003, P OOPSAL WORKSH ECL, P101, DOI DOI 10.1145/965660.965681
   Hansen PB, 1999, ACM SIGPLAN NOTICES, V34, P38, DOI 10.1145/312009.312034
   Hovemeyer D, 2004, ACM SIGPLAN NOTICES, V39, P92, DOI 10.1145/1052883.1052895
   Lea D., 2000, CONCURRENT PROGRAMMI
   NOBLE J, 2000, P C OBJ OR PROGR SYS, P13
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   PLEVYAK J, 1995, P ACM S PRINC PROGR, P311
   Scherlis WL, 1998, LECT NOTES COMPUT SC, V1381, P252, DOI 10.1007/BFb0053575
   SCHWARZ PM, 1984, ACM T COMPUT SYST, V2, P223, DOI 10.1145/989.1188
   Sutherland DeanF., 2002, PASTE 02, P77
   Whaley J., 1999, P 14 ACM SIGPLAN C O, P187, DOI [10.1145/320384.320400, DOI 10.1145/320384.320400]
NR 27
TC 9
Z9 14
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC
PY 2005
VL 58
IS 3
SI SI
BP 384
EP 411
DI 10.1016/j.scico.2005.03.002
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 986BR
UT WOS:000233424300007
DA 2024-07-18
ER

PT J
AU Liu, HB
   Moore, JS
AF Liu, HB
   Moore, JS
TI Executable JVM model for analytical reasoning: A study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st Workshop on Interpreters, Virtual Machines and Emulators (IVME 03)
CY JUN   12, 2003
CL San Diego, CA
DE JVM model; bytecode verification; simulator; virtual machine; formal
   methods; program verification; software specification
AB To study the properties of the Java Virtual Machine (JVM) and Java programs, our research group has produced a series of JVM models written in a functional subset of Common Lisp. In this paper, we present our most complete JVM model from this series, namely, M6, which is derived from a careful study of the J2ME KVM [Connected Limited Device Configuration (CLDC) and the K Virtual Machine, http://java.sun.com/products/cldc/] implementation.
   On the one hand, our JVM model is a conventional machine emulator. M6 implements dynamic class loading, class initialization and synchronization via monitors. It executes most J2ME CLDC Java programs that do not use any I/O or floating point operations. Engineers may consider M6 an implementation of the JVM. The June 2003 version is implemented with around I OK lines of Lisp in 28 modules.
   On the other hand, M6 is novel because it allows for analytical reasoning in addition to conventional testing. M6 is written in an applicative (side-effect free) subset of Common Lisp, for which we have given precise meaning in terms of axioms and inference rules. Properties of M6 and its bytecoded programs can be expressed as formulas and proved as theorems. Proofs are constructed interactively with a mechanical theorem prover. Its concreteness, completeness, executability and mechanized reasoning support make our model unique among JVM models.
   We argue that our approach of building an executable model of the system with an axiomatically described functional language can bring benefits from both the testing and the formal reasoning worlds. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Texas, Dept Comp Sci, Austin, TX 78712 USA.
C3 University of Texas System; University of Texas Austin
RP Liu, HB (corresponding author), Univ Texas, Dept Comp Sci, 1 Univ Stn C0500, Austin, TX 78712 USA.
EM hbl@cs.utexas.edu; moore@cs.utexas.edu
CR [Anonymous], Connected Limited Device Configuration (CLDC)
   [Anonymous], 2000, Computer-Aided Reasoning: An Approach
   [Anonymous], 1999, The Coq Proof Assistant
   [Anonymous], JAVA 2 PLATFORM
   Barthe G., 2001, Proceedings of ESOP'01
   Boyer RS, 1996, J ACM, V43, P166, DOI 10.1145/227595.227603
   Burger D, 1997, 1342 U WISC MAD COMP
   Cohen R.M., 1997, The defensive Java Virtual Machine specification
   Greve D. A., 1998, Formal Methods in Computer-Aided Design. Second International Conference, FMCAD '98. Proceedings, P321
   HARDIN D, 1999, 52498 IA ROCKW COLL
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   LIU H, 2003, JVM MODEL M6 SOURCE
   Moore J. S., 2001, P 2001 JVM US S MONT
   Moore J, 2003, LEADERSHIP UNPLUGGED: THE NEW RENAISSANCE OF VALUE PROPOSITIONS, P289
   Moore JS, 2002, ACM T PROGR LANG SYS, V24, P193, DOI 10.1145/514188.514189
   MOORE JS, 2002, LECT NOTES MARKTOBER
   MOORE JS, 2001, WORKSH FORM TECHN JA
   PORTER G, 2001, CSTR0127 U TEX AUST
   RAY S, 2004, IN PRESS P FMCAD 04
   Russinoff D., 1998, LMS J Comput Math, V1, P148, DOI DOI 10.1112/S1461157000000176
   WILDING M, 2001, FORMAL METHODS SYSTE, V18
NR 21
TC 7
Z9 9
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP
PY 2005
VL 57
IS 3
BP 253
EP 274
DI 10.1016/j.scico.2004.07.004
PG 22
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 957YP
UT WOS:000231409800002
DA 2024-07-18
ER

PT J
AU Coallier, F
   Champagne, R
AF Coallier, F
   Champagne, R
TI A product line engineering practices model
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Workshop on System/Software Architectures (IWSSA 04)
CY JUN, 2004
CL Las Vegas, NV
DE modeling; product lines; software engineering; system analysis and
   design
AB This paper describes work in progress towards the elaboration of a Product Line practices model that combines concepts proposed by various authors. The strengths of existing Product Line frameworks and models are summarized and a new model is proposed in the form of 31 Product Line practice areas, grouped in five categories. An important objective of this Product Line practices model is that it should be easily incorporated into existing development methodologies, while remaining aligned with existing systems engineering standards. (c) 2005 Elsevier B.V. All rights reserved.
C1 Ecole Technol Super, Dept Software & IT Engn, Montreal, PQ H3C 1K3, Canada.
C3 University of Quebec; Ecole de Technologie Superieure - Canada
RP Champagne, R (corresponding author), Ecole Technol Super, Dept Software & IT Engn, 1100,Rue Notre Dame Quest, Montreal, PQ H3C 1K3, Canada.
EM Roger.Champagne@etsmtl.ca
OI Coallier, Francois/0000-0002-2730-2469
CR [Anonymous], SOFTWARE ARCHITECTUR
   BOSH J, 2002, 2 SOFTW PROD LIN C S
   BROWNSWORD L, 1996, CMUSEI96TR016
   Clements P., 2004, FRAMEWORK SOFTWARE P
   Clements P., 2002, Software product lines
   *CMMI PROD TEAM, 2002, CMMI PROD TEAM CAP M
   Dikel D, 1997, COMPUTER, V30, P49, DOI 10.1109/2.607064
   *E WHITN MUS, INV WHITN CHANG FAC
   *IBM, RAT UN PROC OV
   *INT ORG STAND, 1998, ISOIEC15504
   Jones L. G., 2002, CMUSEI2002TN012
   KANE D, TEMPLATES COLLECTING
   *SOFTW ENG I, PROD LIN TECHN PROB
   SUNDBERGFERAR, PRODUCT LINE DEFINIT
NR 14
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2005
VL 57
IS 1
BP 73
EP 87
DI 10.1016/j.scico.2004.10.006
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 935UU
UT WOS:000229809700006
DA 2024-07-18
ER

PT J
AU Canright, G
   Engo-Monsen, K
AF Canright, G
   Engo-Monsen, K
TI Roles in networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE graphs; clusters; centrality; security
AB In this paper we offer a topology-driven ('natural') definition of subclusters of an undirected graph or network. In addition we find rules for assigning unique roles (from a small set of possible roles) to each node in the network. Our approach is based on the use of a 'smooth' index for well-connectedness (eigenvector centrality) which is computed for each node. This index, viewed as a height function, then guides the decomposition of the graph into regions (associated with local peaks of the index), and borders (valleys) between regions. We propose and compare two rules for assigning nodes to regions. We illustrate our approach with simple test graphs, and also by applying it to snapshots of the Gnutella peer-to-peer network from late 2001. This latter analysis suggests that our method implies novel ways of interpreting the notion of well-connectedness for a graph, as these snapshots represent very well connected networks. We argue that our approach is well suited for analyzing computer networks, towards the goal of enhancing their security. (C) 2004 Elsevier B.V. All rights reserved.
C1 Telenor Res & Dev, N-1331 Fornebu, Norway.
RP Telenor Res & Dev, Snaroyveien 30, N-1331 Fornebu, Norway.
EM geoffrey.canright@telenor.com; kenth.engo-monsen@telenor.com
RI Engø-Monsen, Kenth/M-3223-2019
OI Engø-Monsen, Kenth/0000-0003-1618-7597
CR [Anonymous], P 24 ANN INT ACM SIG
   BATISTA GD, 1999, GRAPH DRAWING ALGORI
   BONACICH P, 1972, J MATH SOCIOL, V2, P113, DOI 10.1080/0022250X.1972.9989806
   BURGESS M, 2003, IN PRESS INT J INFOR
   CANRIGHT G, 2003, UNPUB INT J STRUCTUR
   Girvan M, 2002, P NATL ACAD SCI USA, V99, P7821, DOI 10.1073/pnas.122653799
   JOVANOVIC M, COMMUNICATION
   Kleinberg JM, 1999, J ACM, V46, P604, DOI 10.1145/324133.324140
   Newman MEJ, 2003, SIAM REV, V45, P167, DOI 10.1137/S003614450342480
   Oram A., 2001, Peer-to-Peer: Harnessing the Power of Disruptive Technologies
   Page L., 1999, PAGERANK CITATION RA
   Pastor-Satorras R, 2001, PHYS REV LETT, V86, P3200, DOI 10.1103/PhysRevLett.86.3200
   STANG TH, 2003, P 17 ANN LARG INST S
NR 13
TC 34
Z9 39
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2004
VL 53
IS 2
BP 195
EP 214
DI 10.1016/j.scico.2003.12.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 858DB
UT WOS:000224169400005
DA 2024-07-18
ER

PT J
AU Hinze, R
   Jeuring, J
   Löb, A
AF Hinze, R
   Jeuring, J
   Löb, A
TI Type-indexed data types
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE polytypic programming; generic Haskell; digital searching
AB A polytypic function is a function that can be instantiated on many data types to obtain data type specific functionality. Examples of polytypic functions are the functions that can be derived in Haskell, such as show, read, and '=='. More advanced examples are functions for digital searching, pattern matching, unification, rewriting, and structure editing. For each of these problems, we not only have to define polytypic functionality, but also a type-indexed data type: a data type that is constructed in a generic way from an argument data type. For example, in the case of digital searching we have to define a search tree type by induction on the structure of the type of search keys. This paper shows how to define type-indexed data types, discusses several examples of type-indexed data types, and shows how to specialize type-indexed data types. The approach has been implemented in Generic Haskell, a generic programming extension of the functional language Haskell. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Bonn, Inst Informat 3, D-53117 Bonn, Germany.
   Univ Utrecht, Inst Informat & Comp Sci, NL-3508 TB Utrecht, Netherlands.
   Open Univ, Heerlen, Netherlands.
C3 University of Bonn; Utrecht University; Open University Netherlands
RP Univ Bonn, Inst Informat 3, Romerstr 164, D-53117 Bonn, Germany.
EM ralf@informatik.uni-bonn.de; johanj@cs.uu.nl; andres@cs.uu.nl
OI Loh, Andres/0000-0002-7492-7293
CR Abbott M, 2003, LECT NOTES COMPUT SC, V2701, P16
   AUGUSTSSON L, 1999, HASKELL 98 NONSTRICT
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   BIRD R, 1996, J FUNCTIONAL PROGRAM, V6, P1
   CHAKRAVARTY MMT, 2000, P 5 ACM SIGPLAN INT, P94
   CLAESSEN K, 2000, P HASK WORKSH 2000
   Clarke D, 2003, INT FED INFO PROC, V115, P21
   Crary K, 1999, ACM SIGPLAN NOTICES, V34, P233, DOI 10.1145/317765.317906
   CRARY K, 1998, P 1998 ACM SIGPLAN I, P301
   DEWIT J, 2002, THESIS UTRECHT U
   DUBOIS C, 1995, 22 ACM SIGACT SIGPLA, P118
   FOKKINGA MM, 1992, THESIS U TWENTE ENSC
   Gibbons J., 1998, Mathematics of Program Construction. 4th International Conference, MPC'98. Proceedings, P207, DOI 10.1007/BFb0054292
   HAGG P, 2002, THEIS UTRECHT U
   HARPER R, 1995, 22 ACM S PRINC PROGR, P130
   Hinze R, 2003, LECT NOTES COMPUT SC, V2793, P57
   Hinze R, 2002, LECT NOTES COMPUT SC, V2386, P148
   Hinze R, 2000, LECT NOTES COMPUT SC, V1837, P2
   HINZE R, 2001, P 2000 ACM SIGPLAN H
   HINZE R, 2000, J FUNCTIONAL PROGRAM, V10, P327
   Hinze Ralf., 2000, Proceedings of the 27th ACM SIGPLAN-SIGACT symposium on Principles of programming languages, POPL '00, P119, DOI [DOI 10.1145/325694.325709, 10.1145/325694.325709]
   HUET G, 2003, 35 YEARS AUTOMATING
   Huet Gerard P., 1997, Journal of Functional Programming, V7, P549
   Jansson P., 1998, Journal of Functional Programming, V8, P527, DOI 10.1017/S095679689800313X
   Jansson P., 1997, POPL 1997, P470
   Jay C. B., 1998, Journal of Functional Programming, V8, P573, DOI 10.1017/S0956796898003128
   JEURING J, 1995, RPCA 95 SIGPLAN SIGA, P238
   Jones MP, 2000, LECT NOTES COMPUT SC, V1782, P230
   KNUTH D, 1978, SIAM J COMPUT, V6, P323
   LAMMEL R, 2001, P 7 INT C REV ENT IN, P113
   MALCOLM G, 1990, SCI COMPUT PROGRAM, V14, P255, DOI 10.1016/0167-6423(90)90023-7
   MCCRACKEN NJ, 1979, THESIS SYRACUSE U
   Meertens L., 1992, Formal Aspects of Computing, V4, P413, DOI 10.1007/BF01211391
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Mitchell John C., 1996, Foundation of computing series
   Trifonov Valery, 2000, P 5 ACM SIGPLAN INT, P27, DOI [10.1145/351240.351248, DOI 10.1145/351240.351248]
   VESTIN M, 1997, EXAMENSARBETEN, P36
   Weirich S, 2002, LECT NOTES COMPUT SC, V2305, P98
   Weirich S, 2001, LECT NOTES COMPUT SC, V2028, P92
   YANG Z, 1998, P 1998 ACM SIGPLAN I, P289
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 44
TC 34
Z9 34
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2004
VL 51
IS 1-2
BP 117
EP 151
DI 10.1016/j.scico.2003.07.001
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 817WR
UT WOS:000221208100006
DA 2024-07-18
ER

PT J
AU Yang, B
   Guo, HR
   Liu, H
AF Yang, Bo
   Guo, Haoran
   Liu, Huai
TI Evaluation and assessment of machine learning based user story grouping:
   A framework and empirical studies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE User story; User story grouping; Deep neural networks; Clustering
ID MODELS
AB User stories are the main approach to specifying requirements in agile development. Nowadays, a software project normally involves a huge amount of user stories, which makes it a challenging job to efficiently manage these stories. One mainstream way for user story management is to allocate different user stories into a number of groups based on the similarity among them. However, most of existing user story grouping techniques involve lots of manual work, which is not only time-consuming but also fault-prone. In this paper, we propose an automated framework for grouping user stories based on a family of machine learning techniques. Data preprocessing is first conducted to analyze user stories and obtain keywords in them. Features are then extracted, based on which user stories can be automatically clustered into different groups. We conduct a series of experiments to evaluate the framework, using five feature extraction algorithms and seven clustering techniques, on 13 datasets. Our experimental results show that TextCNN is the best feature extraction algorithm for user story grouping, while K-means and hierarchical clustering are superior to other clustering techniques. This study demonstrates the applicability and effectiveness of the proposed framework. It also provides some practical guidelines on further improving the efficacy of user story grouping, for example, via adjusting parameters for better feature extraction and clustering.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Yang, Bo] Beijing Forestry Univ, Sch Informat Sci & Technol, Beijing 100183, Peoples R China.
   [Guo, Haoran] North China Univ Technol, Sch Informat Sci & Technol, Beijing 100144, Peoples R China.
   [Liu, Huai] Swinburne Univ Technol, Dept Comp Technol, Hawthorn, Vic 3122, Australia.
C3 Beijing Forestry University; North China University of Technology;
   Swinburne University of Technology
RP Yang, B (corresponding author), Beijing Forestry Univ, Sch Informat Sci & Technol, Beijing 100183, Peoples R China.
EM yangbo@bjfu.edu.cn; ghr0822@qq.com; hliu@swin.edu.au
RI guo, haoran/HGA-6958-2022; Liu, Huai/M-4871-2019
OI Liu, Huai/0000-0003-3125-4399
FU Fundamental Research Funds for the Central Universities [BLX202003];
   Australian Research Council Discovery Project [DP210102447]
FX We thank anonymous reviewers for their thoughtful comments. This work
   was sponsored by the Fundamental Research Funds for the Central
   Universities (BLX202003) , the Australian Research Council Discovery
   Project (Grant No. DP210102447) .
CR Alvarez, 2018, ARXIV180903664
   Ankerst M., 1999, SIGMOD 99
   Barbosa R, 2016, I C DEPENDABLE SYST, P2, DOI [10.1109/DSN-W.2016.7, 10.1109/DSN-W.2016.27]
   Belkin M, 2002, ADV NEUR IN, V14, P585
   Chao A, 2005, ECOL LETT, V8, P148, DOI 10.1111/j.1461-0248.2004.00707.x
   CHENG YZ, 1995, IEEE T PATTERN ANAL, V17, P790, DOI 10.1109/34.400568
   Cohn Mike., 2004, User Stories Applied: For Agile Software Development
   CORPET F, 1988, NUCLEIC ACIDS RES, V16, P10881, DOI 10.1093/nar/16.22.10881
   Dalpiaz F, 2018, LECT NOTES COMPUT SC, V10753, P119, DOI 10.1007/978-3-319-77243-1_8
   De Boom C, 2015, 2015 IEEE INTERNATIONAL CONFERENCE ON DATA MINING WORKSHOP (ICDMW), P1229, DOI 10.1109/ICDMW.2015.86
   Dimitrijevic S, 2015, INFORM SOFTWARE TECH, V57, P352, DOI 10.1016/j.infsof.2014.05.012
   Ester M., 1996, KDD 96, P226, DOI DOI 10.5555/3001460.3001507
   Fodeh S, 2011, KNOWL INF SYST, V28, P395, DOI 10.1007/s10115-010-0370-4
   H.P. Labs, 2009, CLUST SHORT TEXTS US
   Hartigan J. A., 1979, Applied Statistics, V28, P100, DOI 10.2307/2346830
   Hua W, 2015, PROC INT CONF DATA, P495, DOI 10.1109/ICDE.2015.7113309
   Joachims T., 1997, International conference on machine learning, P143, DOI DOI 10.1016/J.ESWA.2016.09.009
   Joulin A., 2017, P 15 C EUR CHAPT ASS, P427, DOI DOI 10.18653/V1/E17-2068
   kanboard, US
   Kenter T, 2015, P 24 ACM INT C INFOR, P1411, DOI 10.1145/2806416.2806475
   Kim Y, 2014, ARXIV PREPRINT ARXIV, DOI 10.3115/v1/D14-1181
   Lai SW, 2015, AAAI CONF ARTIF INTE, P2267
   leangoo, US
   Li CL, 2017, ACM T INFORM SYST, V36, DOI 10.1145/3091108
   Liang SS, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P995, DOI 10.1145/2939672.2939748
   Lucassen G, 2016, LECT NOTES COMPUT SC, V9974, P463, DOI 10.1007/978-3-319-46397-1_35
   Lucassen G, 2015, INT REQUIR ENG CONF, P126, DOI 10.1109/RE.2015.7320415
   MANN WR, 1953, P AM MATH SOC, V4, P506, DOI 10.2307/2032162
   Mathew J., 2000, SIGN PROC C 2000 EUR, P1
   Mesquita R., 2015, ISTAR, P103
   Mukherjee D, 2013, IEEE T IMAGE PROCESS, V22, P5022, DOI 10.1109/TIP.2013.2281423
   Quan XJ, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P2270
   Ravi S, 2018, 2018 CONFERENCE ON EMPIRICAL METHODS IN NATURAL LANGUAGE PROCESSING (EMNLP 2018), P887
   Robeer M, 2016, INT REQUIR ENG CONF, P196, DOI 10.1109/RE.2016.40
   Rodeghero P, 2017, PROC INT CONF SOFTW, P49, DOI 10.1109/ICSE.2017.13
   ROUSSEEUW PJ, 1987, J COMPUT APPL MATH, V20, P53, DOI 10.1016/0377-0427(87)90125-7
   ROUSSEEUW PJ, 1984, J AM STAT ASSOC, V79, P871, DOI 10.2307/2288718
   Seifzadeh S, 2015, WWW'15 COMPANION: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON WORLD WIDE WEB, P805, DOI 10.1145/2740908.2742474
   Trkman M, 2016, INFORM SOFTWARE TECH, V71, P58, DOI 10.1016/j.infsof.2015.10.006
   Le QV, 2014, Arxiv, DOI [arXiv:1405.4053, 10.48550/arXiv.1405.4053, DOI 10.48550/ARXIV.1405.4053]
   visual -paradigm, US
   Wang J, 2020, AAAI CONF ARTIF INTE, V34, P9169
   Wang MX, 2015, PROCEEDINGS OF THE TWENTY-FOURTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE (IJCAI), P1354
   Wang P., 2015, ACL
   Wautelet Yves, 2016, 2016 IEEE Tenth International Conference on Research Challenges in Information Science (RCIS), P1, DOI 10.1109/RCIS.2016.7549299
   Wautelet Y, 2014, LECT NOTES COMPUT SC, V8484, P211, DOI 10.1007/978-3-319-07881-6_15
   Xie JY, 2016, PR MACH LEARN RES, V48
   Xu J, 2015, P 1 WORKSH VECT SPAC, P62
   Yin JH, 2018, KDD'18: PROCEEDINGS OF THE 24TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY & DATA MINING, P2634, DOI 10.1145/3219819.3220094
   Yin JH, 2014, PROCEEDINGS OF THE 20TH ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING (KDD'14), P233, DOI 10.1145/2623330.2623715
   Zhang HL, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3385
   Zhang X, 2015, ADV NEUR IN, V28
   Zhao L, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3444689
   Zuo Y, 2016, KDD'16: PROCEEDINGS OF THE 22ND ACM SIGKDD INTERNATIONAL CONFERENCE ON KNOWLEDGE DISCOVERY AND DATA MINING, P2105, DOI 10.1145/2939672.2939880
NR 54
TC 0
Z9 0
U1 3
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2023
VL 227
AR 102943
DI 10.1016/j.scico.2023.102943
EA MAR 2023
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA E1WE4
UT WOS:000973513900001
DA 2024-07-18
ER

PT J
AU Kuehn, EM
AF Kuehn, Eva Maria
TI The Peer-Model tool-chain
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Peer Model; Tool-chain; Coordination modeling; Coordination simulation
AB Distributed coordination scenarios place high demands on concurrency and interaction. They are therefore a typical source of errors in design and implementation. The Peer Model is a modeling tool for coordination based on blackboard-based collaboration. Its goal is to help developers of coordination software better understand algorithms and identify deficiencies from the beginning. This paper describes the open source implementation of the Peer Model tool-chain, which is made available on GitHub1 and Zenodo2 including a tutorial video published at YouTube3 and Zenodo4. The tool-chain consists of a modeler, translator and simulator. (c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY-NC-ND license (http://creativecommons.org/licenses/by-nc-nd/4.0/).
C1 [Kuehn, Eva Maria] TU Wien Informat, Compilers & Languages Grp, Argentinierstr 8, A-1040 Vienna, Austria.
C3 Technische Universitat Wien
RP Kuehn, EM (corresponding author), TU Wien Informat, Compilers & Languages Grp, Argentinierstr 8, A-1040 Vienna, Austria.
EM eva.kuehn@tuwien.ac.at
FU FFG project "Smart Toolbox for Community Blockchains";  [874724]
FX This work was partially supported by FFG project 874724 "Smart Toolbox
   for Community Blockchains".
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   Agha G., 1990, ACTORS-A Model of Concurrent Computation in Distributed Systems, Artificial Intelligence
   Altschach M., 2016, THESIS TU WIEN
   Androutsellis-Theotokis S, 2004, ACM COMPUT SURV, V36, P335, DOI 10.1145/1041680.1041681
   Buravlev V., 2012, THESIS IMT SCH ADV S
   Buravlev V, 2016, LECT NOTES COMPUT SC, V9686, P51, DOI 10.1007/978-3-319-39519-7_4
   Crass S., 2009, INT DATABASE ENG APP, P301, DOI [/10.1145/1620432.1620466, DOI 10.1145/1620432.1620466]
   Elaraby N, 2018, LECT NOTES COMPUT SC, V11176, P367, DOI 10.1007/978-3-030-04771-9_27
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Kuehn E., 2021, LNCS, V2717, P239, DOI [10.1007/978-3-030-78142-2_15, DOI 10.1007/978-3-030-78142-2_15]
   Kuehn E, 2012, PEER MODEL AGILE MID
   Kuehn E., 2005, US Patent, Patent No. [6848109B1, 6848109]
   Kuehn E., 2014, S APPL COMPUTING SAC, P1352, DOI [/10.1145/2554850.2555153, DOI 10.1145/2554850.2555153]
   Kühn E, 2018, LECT NOTES COMPUT SC, V10729, P574, DOI 10.1007/978-3-319-74781-1_38
   Kühn E, 2016, INT J COOP INF SYST, V25, DOI 10.1142/S0218843017400019
   Kuehn E, 2013, LECT NOTES COMPUT SC, V7890, P121, DOI 10.1007/978-3-642-38493-6_9
   Kühn E, 2009, 2009 JOINT WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE AND EUROPEAN CONFERENCE ON SOFTWARE ARCHITECTURE, P313, DOI 10.1109/WICSA.2009.5290786
   Petri C.A., 1962, THESIS TECHN HOCHSCH
   Ratzer AV, 2003, LECT NOTES COMPUT SC, V2679, P450
NR 19
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2022
VL 223
AR 102876
DI 10.1016/j.scico.2022.102876
PG 8
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5K3WT
UT WOS:000869660600001
OA hybrid
DA 2024-07-18
ER

PT J
AU Azzeh, M
   Nassif, AB
   Elsheikh, Y
   Angelis, L
AF Azzeh, Mohammad
   Nassif, Ali Bou
   Elsheikh, Yousef
   Angelis, Lefteris
TI On the value of project productivity for early effort estimation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 35th European Conference on Object-Oriented Programming (ECOOP)
CY JUL 11-17, 2021
CL ELECTR NETWORK
DE Use Case Points; Software productivity; Software effort estimation;
   Software size measures; Regression to mean
ID SOFTWARE EFFORT ESTIMATION; TRANSACTIONS; REGRESSION; ANALOGY; SIZE
AB In general, estimating software effort using a Use Case Point (UCP) size requires the use of productivity as a second prediction factor. However, there are three drawbacks to this approach: (1) there is no clear procedure for predicting productivity in the early stages, (2) the use of fixed or limited productivity ratios does not allow research to reflect the realities of the software industry, and (3) productivity from historical data is often challenging. The new UCP datasets now available allow us to perform further empirical investigations of the productivity variable in order to estimate the UCP effort. Accordingly, four different prediction models based on productivity were used. The results showed that learning productivity from historical data is more efficient than using classical approaches that rely on default or limited productivity values. In addition, predicting productivity from historical environmental factors is not often accurate. From here we conclude that productivity is an effective factor for estimating the software effort based on the UCP in the presence and absence of previous historical data. Moreover, productivity measurement should be flexible and adjustable when historical data is available.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Azzeh, Mohammad] Princess Sumaya Univ Technol, Dept Data Sci, Amman, Jordan.
   [Nassif, Ali Bou] Univ Sharjah, Dept Comp Engn, Sharjah, U Arab Emirates.
   [Elsheikh, Yousef] Appl Sci Private Univ, Dept Comp Sci, Amman, Jordan.
   [Angelis, Lefteris] Aristotle Univ Thessaloniki, Sch Informat, Thessaloniki, Greece.
C3 Princess Sumaya University for Technology; University of Sharjah;
   Aristotle University of Thessaloniki
RP Azzeh, M (corresponding author), Princess Sumaya Univ Technol, Dept Data Sci, Amman, Jordan.
EM m.azzeh@psut.edu.jo; anassif@sharjah.ac.ae; y_elsheikh@asu.edu.jo;
   lef@csd.auth.gr
RI Azzeh, Mohammad/G-5472-2017
OI Azzeh, Mohammad/0000-0002-0323-6452
CR Acharya A.A., 2011, COST ESTIMATION DIST, DOI DOI 10.1007/978-3-642-18440-6_20
   Ajitha S., 2010, 2010 5th International Conference on Industrial and Information Systems (ICIIS 2010), P372, DOI 10.1109/ICIINFS.2010.5578675
   Alqasrawi Y, 2022, SCI COMPUT PROGRAM, V214, DOI 10.1016/j.scico.2021.102744
   Alves L.M., 2013, EMPIRICAL STUDY ESTI, DOI DOI 10.1109/FIE.2013.6684796
   Alves R., 2013, P 5 ACM SIGCHI S ENG, P287, DOI [10.1145/2494603.2480300, DOI 10.1145/2494603.2480300]
   Anda B., 2002, EMPIRICAL ASSESSMENT, P101
   Anda B., 2001, ESTIMATING SOFTWARE, DOI DOI 10.1007/3-540-45441-1_35
   Anda B., 2002, IMPROVING ESTIMATION, DOI DOI 10.1007/3-540-36209-6_32
   [Anonymous], 2008, INFOCOMP J COMPUTER
   [Anonymous], 1979, PROC JT SHARE GUIDE
   Arumugam C, 2013, INT J SOFTW ENG KNOW, V23, P289, DOI 10.1142/S0218194013500083
   Azzeh M, 2021, SOFTWARE QUAL J, V29, P309, DOI 10.1007/s11219-021-09547-0
   Azzeh M, 2021, SCI COMPUT PROGRAM, V204, DOI 10.1016/j.scico.2020.102596
   Azzeh M, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.2110
   Azzeh M, 2017, J SOFTW-EVOL PROC, V29, DOI 10.1002/smr.1882
   Azzeh M, 2016, APPL SOFT COMPUT, V49, P981, DOI 10.1016/j.asoc.2016.05.008
   Azzeh M, 2015, IET SOFTW, V9, P39, DOI 10.1049/iet-sen.2013.0165
   Braz M.R., 2004, USING FUZZY THEORY E, DOI DOI 10.1109/ICTAI.2004.119
   Catal C., 2011, SEKE, P331
   Engels G., 2008, REVISED USE CASE POI
   Gencel C., 2006, SOFTWARE MEASUREMENT, P121
   Humphrey W. S., 2002, ENCY SOFTWARE ENG
   Iraji M.S., 2012, INT J INTELLIGENT SY, V4, P14, DOI [DOI 10.5815/IJISA.2012.06.02, 10.5815/ijisa.2012.06.02]
   Jorgensen M, 2003, J SYST SOFTWARE, V68, P253, DOI 10.1016/S0164-1212(03)00066-9
   Kamal M., 2011, PROPOSED FRAMEWORK U
   Kamal MW, 2011, COMM COM INF SC, V181, P735
   Kang D, 2011, SOFTWARE PRACT EXPER, V41, P551, DOI 10.1002/spe.1030
   Karner G., 1993, Resource Estimation for Objectory Projects
   Kitchenham B, 2004, IEEE T SOFTWARE ENG, V30, P1023, DOI 10.1109/TSE.2004.104
   Kitchenham B. A., 2001, IEE Proceedings-Software, V148, P81, DOI 10.1049/ip-sen:20010506
   Kocaguneli E, 2013, IEEE T SOFTWARE ENG, V39, P1040, DOI 10.1109/TSE.2012.88
   Kocaguneli E, 2013, J SYST SOFTWARE, V86, P1879, DOI 10.1016/j.jss.2013.02.053
   Kocaguneli E, 2012, IEEE T SOFTWARE ENG, V38, P1403, DOI 10.1109/TSE.2011.111
   López-Martín C, 2008, J SYST SOFTWARE, V81, P949, DOI 10.1016/j.jss.2007.08.027
   Mohagheghi P., 2005, EFFORT ESTIMATION US, DOI DOI 10.1007/3-540-32179-9_17
   Nassif A. B., 2012, Proceedings of the 2012 13th ACIS International Conference on Software Engineering, Artificial Intelligence, Networking and Parallel & Distributed Computing (SNPD 2012), P589, DOI 10.1109/SNPD.2012.40
   Nassif A.B., 2010, INT C EMERGING TREND, P5
   Nassif A.B., 2012, ESTIMATING SOFTWARE, DOI DOI 10.1109/ICMLA.2012.138
   Nassif AB, 2011, 3 INT C INTELLIGENT, P615
   Nassif AB, 2012, 2012 11TH INTERNATIONAL CONFERENCE ON MACHINE LEARNING AND APPLICATIONS (ICMLA 2012), VOL 2, P301, DOI 10.1109/ICMLA.2012.155
   Nassif AB, 2013, J SYST SOFTWARE, V86, P144, DOI 10.1016/j.jss.2012.07.050
   Ochodek M, 2011, INFORM SOFTWARE TECH, V53, P885, DOI 10.1016/j.infsof.2011.02.004
   Ochodek M, 2011, INFORM SOFTWARE TECH, V53, P200, DOI 10.1016/j.infsof.2010.10.005
   Ochodek M, 2008, LECT NOTES COMPUT SC, V5082, P55
   Periyasamy K, 2009, COST ESTIMATION USIN, DOI DOI 10.1109/CISE.2009.5364515
   Petersen K, 2011, INFORM SOFTWARE TECH, V53, P317, DOI 10.1016/j.infsof.2010.12.001
   Robiolo G, 2008, INNOV SYST SOFTW ENG, V4, P31, DOI 10.1007/s11334-007-0043-y
   Robiolo G, 2009, INT SYMP EMP SOFTWAR, P423
   Rodríguez D, 2012, J SYST SOFTWARE, V85, P562, DOI 10.1016/j.jss.2011.09.009
   Satapathy S.M., 2014, ARXIV PREPRINT ARXIV, P1
   Schneider G., 2001, Applying Use Cases: A Practical Guide
   Sentas P., 2022, 9 PANHELLENIC C INFO, P1
   Shepperd M, 2005, 2005 11th International Symposium on Software Metrics (METRICS), P348
   Shepperd M, 2012, INFORM SOFTWARE TECH, V54, P820, DOI 10.1016/j.infsof.2011.12.008
   SYMONS CR, 1988, IEEE T SOFTWARE ENG, V14, P2, DOI 10.1109/32.4618
   Tannure R., 2009, COMPARING SOFTWARE E
   Trendowicz A., 2014, Software project effort estimation: Foundations and best practice guidelines for success, DOI DOI 10.1007/978-3-319-03629-8
   Vinsen K, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P10
   Wang F., 2009, P INT C COMP INT SOF, P1, DOI 10.1109/cise.2009.5364706
   York N., 2011, PRACTICAL SOFTWARE P
   Zimmermann T., 2007, P ICSE 2007 WORK 3 I, DOI [10.1109/PROMISE.2007.10, DOI 10.1109/PROMISE.2007.10]
NR 61
TC 4
Z9 4
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2022
VL 219
AR 102819
DI 10.1016/j.scico.2022.102819
EA MAY 2022
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 1L0VT
UT WOS:000799011900003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Chen, XH
   Liu, QQ
   Mallet, F
   Li, Q
   Cai, SB
   Jin, Z
AF Chen, Xiaohong
   Liu, Qianqian
   Mallet, Frederic
   Li, Qin
   Cai, Shubin
   Jin, Zhi
TI Formally verifying consistency of sequence diagrams for safety critical
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Rigorous State-Based Methods (ABZ)
CY MAY 27-29, 2020
CL Ulm, GERMANY
DE Safety critical systems; Sequence diagram; Behavior models; Clock graph;
   Formal verification
AB UML interactions, aka sequence diagrams, are frequently used by engineers to describe expected scenarios of good or bad behaviors of systems under design, as they provide allegedly a simple enough syntax to express a quite large variety of behaviors. This paper uses them to express safety requirements for safety critical systems in an incremental way, where the scenarios are progressively refined after checking the consistency of the requirements. The semantics of these scenarios are expressed by transforming them into an intermediate semantic model amenable to formal verification. In this paper, we rely on the Clock Constraint Specification Language (CCSL) as the intermediate semantic language. In some sense, sequence diagrams and CCSL constraints both express a family of acceptable infinite traces that must include the behaviors given by the finite set of finite execution traces against which we validate. We compare these requirements to actual execution traces to prove the validity of our transformation. As to check the consistency of the sequence diagrams, we present two verification methods based on SMT and clock graphs respectively. The SMT based method relies on our analysis tool called MyCCSL to analyze CCSL constraints. The clock graph based method transforms CCSL constraints into a clock graph, and does the analysis through traversing the clock graph. Finally, these two methods are evaluated against real cases from the railway transit systems. The results show that the SMT based method provides accurate but slow analysis, while the clock graph based method dramatically increases the verification efficiency aiming at two kinds of typical inconsistencies found by the SMT based method. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Chen, Xiaohong; Li, Qin] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
   [Mallet, Frederic] Univ Cote Azur, CNRS, Inria, I3S, Nancy, France.
   [Cai, Shubin] Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen, Peoples R China.
   [Jin, Zhi] Peking Univ, Sch Comp Sci, Beijing, Peoples R China.
C3 East China Normal University; Inria; Centre National de la Recherche
   Scientifique (CNRS); Universite Cote d'Azur; Shenzhen University; Peking
   University
RP Mallet, F (corresponding author), Univ Cote Azur, CNRS, Inria, I3S, Nancy, France.; Cai, SB (corresponding author), Shenzhen Univ, Coll Comp Sci & Software Engn, Shenzhen, Peoples R China.
EM xhchen@sei.ecnu.edu.cn; Frederic.Mallet@inria.fr; shubin@szu.edu.cn
RI cheng, cheng/JBR-8359-2023; Liu, Qianqian/AAP-5785-2020; chen,
   chen/JBJ-4242-2023; Chen, Xiao/JBJ-7561-2023; Wang, Jin/GYA-2019-2022;
   Chen, Xiao/GQA-8928-2022; Jin, Zhi/E-1288-2013; shi, chen/KEH-8339-2024;
   xin, liang/JFS-5770-2023; Cheng, Yuan/JKJ-0794-2023; Mallet,
   Frederic/HKW-6782-2023; Mallet, Frédéric/H-3942-2011
OI Liu, Qianqian/0000-0002-5798-2549; Chen, Xiao/0000-0002-9797-8384; Chen,
   Xiao/0000-0002-9797-8384; Mallet, Frédéric/0000-0002-9088-9821; Chen,
   Xiahong/0000-0003-2217-6659; Jin, Zhi/0000-0003-1087-226X; Li,
   Qin/0000-0001-7476-4079
FU National Natural Science Foundation of China [62192731]; Shanghai
   Science and Technology Committee (STCSM) [20DZ1100300, 20ZR1416000];
   French National Research Agency [SIM ANR-19-CE25-0008-02]; foundation of
   Shenzhen Institute of Artificial Intelligence and Robotics for Society
   [AC01202005020]
FX This research was supported by the National Natural Science Foundation
   of China (62192731), Shanghai Science and Technology Committee(STCSM
   20DZ1100300, 20ZR1416000), and the French National Research Agency SIM
   ANR-19-CE25-0008-02. The author Qin Li is supported by the foundation of
   Shenzhen Institute of Artificial Intelligence and Robotics for Society
   (AC01202005020).
CR Alwanain M, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P384
   Andre C., 2009, RES REPORT
   Araújo J, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P58
   Bernardi Simona., 2002, Proceedings of the 3rd international workshop on Software and performance, P35, DOI DOI 10.1145/584369.584376
   Bowles J, 2010, ASIA PAC SOFWR ENG, P216, DOI 10.1109/APSEC.2010.33
   CENELEC, 2018, 50129 RAILWAY APPL C
   Chen XH, 2020, 2020 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2020), P217, DOI 10.1109/TASE49443.2020.00037
   Cunha E, 2011, BRAZ SYM COMPUT SYST, P39, DOI 10.1109/SBESC.2011.18
   Soares JAC, 2018, PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P668, DOI 10.5220/0006731806680679
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Dhaou F, 2017, ENASE: PROCEEDINGS OF THE 12TH INTERNATIONAL CONFERENCE ON EVALUATION OF NOVEL APPROACHES TO SOFTWARE ENGINEERING, P47, DOI 10.5220/0006314100470056
   Doc V.V., 2018, IND NETWORKS INTELLI, P122
   Eichner C, 2005, LECT NOTES COMPUT SC, V3530, P133
   Fernandes J M., 2007, Proceedings of the Sixth International Workshop on Scenarios and State Machines, P2, DOI [10.1109/SCESM.2007.1, DOI 10.1109/SCESM.2007.1]
   Han DS, 2016, P INT COMP SOFTW APP, P474, DOI 10.1109/COMPSAC.2016.118
   Jin Z., 2018, Environment Modeling-Based Requirements Engineering for Software Intensive Systems
   LEVESON NG, 1984, COMPUTER, V17, P48, DOI 10.1109/MC.1984.1659054
   Li XS, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P168
   Liang HZ, 2008, LECT NOTES COMPUT SC, V5301, P204, DOI 10.1007/978-3-540-87875-9_15
   Lima V, 2009, ELECTRON NOTES THEOR, V254, P143, DOI 10.1016/j.entcs.2009.09.064
   Mallet F, 2013, P ACM IEEE INT CONF, P157
   Mallet F, 2008, INNOV SYST SOFTW ENG, V4, P309, DOI 10.1007/s11334-008-0055-2
   Muram FU, 2016, ASIA PAC SOFWR ENG, P73, DOI [10.1109/APSEC.2016.021, 10.1109/APSEC.2016.61]
   Object Management Group, 2018, UML 241 SUPERSTRUCTU
   OMG, 2011, UML PROFILE MODELLIN
   Peng T, 2012, 2012 IEEE INTERNATIONAL CONFERENCE ON GRANULAR COMPUTING (GRC 2012), P370
   Shen H, 2008, IEEE HI ASS SYS ENGR, P437, DOI 10.1109/HASE.2008.51
   Staines Tony Spiteri., 2013, Journal of communication and computer, V10, P72
   Widl M., 2013, LNCS, V7745, P164, DOI [10.1007/978-3-642-36089-310, DOI 10.1007/978-3-642-36089-310]
   Yin L, 2013, ASIA PAC SOFWR ENG, P414, DOI 10.1109/APSEC.2013.62
   Yu XF, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P76, DOI 10.1109/TASE.2018.00018
   Zhang M, 2019, LECT NOTES COMPUT SC, V11424, P61, DOI 10.1007/978-3-030-16722-6_4
   Zhang M, 2018, SCI COMPUT PROGRAM, V154, P42, DOI 10.1016/j.scico.2017.08.015
NR 33
TC 6
Z9 6
U1 2
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2022
VL 216
AR 102777
DI 10.1016/j.scico.2022.102777
EA FEB 2022
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA ZG5YX
UT WOS:000760335200004
OA Bronze
DA 2024-07-18
ER

PT J
AU Lethbridge, TC
   Forward, A
   Badreddin, O
   Brestovansky, D
   Garzon, M
   Aljamaan, H
   Eid, S
   Orabi, AH
   Orabi, MH
   Abdelzad, V
   Adesina, O
   Alghamdi, A
   Algablan, A
   Zakariapour, A
AF Lethbridge, Timothy C.
   Forward, Andrew
   Badreddin, Omar
   Brestovansky, Dusan
   Garzon, Miguel
   Aljamaan, Hamoud
   Eid, Sultan
   Orabi, Ahmed Husseini
   Orabi, Mahmoud Husseini
   Abdelzad, Vahdat
   Adesina, Opeyemi
   Alghamdi, Aliaa
   Algablan, Abdulaziz
   Zakariapour, Amid
TI Umple: Model-driven development for open source and education
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-driven development; Code generation; Compiler
ID SPECIFICATION
AB Umple is an open-source software modeling tool and compiler. It incorporates textual language constructs for UML modeling, including associations and state machines. It includes traits, aspects, and mixins for separation of concerns. It supports embedding methods written in many object-oriented languages, enabling it to generate complete multilingual systems. It provides comprehensive analysis of models and generates many kinds of diagrams, some of which can be edited to update the Umple code. Umple runs on the command line, in a web browser or in integrated development environments. It is designed to help developers reduce code volume, while they develop in an agile, model-driven manner. Umple is also targeted at educational users where students are motivated by its ability to generate real systems from their software models. (C) 2021 The Author(s). Published by Elsevier B.V.
C1 [Lethbridge, Timothy C.; Forward, Andrew; Badreddin, Omar; Brestovansky, Dusan; Garzon, Miguel; Aljamaan, Hamoud; Eid, Sultan; Orabi, Ahmed Husseini; Orabi, Mahmoud Husseini; Abdelzad, Vahdat; Adesina, Opeyemi; Alghamdi, Aliaa; Algablan, Abdulaziz; Zakariapour, Amid] Univ Ottawa, Ottawa, ON, Canada.
C3 University of Ottawa
RP Lethbridge, TC (corresponding author), Univ Ottawa, Ottawa, ON, Canada.
EM timothy.lethbridge@uottawa.ca
RI Abdelzad, Vahdat/Y-3602-2019; Aljamaan, Hamoud/N-9756-2019; Badreddin,
   Omar/A-8116-2015
OI Aljamaan, Hamoud/0000-0002-2146-9348; Almaghthawi,
   Sultan/0000-0002-6129-5645; Forward, Andrew/0000-0003-1642-0985
FU NSERC [453224, 483509, 569913, 657301]; Ontario Research Fund
   [RE-05-044]; Google; Facebook
FX The authors of this paper are the lead professor and graduate students
   who have worked on the Umple compiler since its inception. However,
   contributions have also been received from numerous others, including
   masters student Julian Solano, the following 4thyear students through
   the UCOSP program [30,20](listed in Chronological order of
   contribution): Joshua Horacsek, Joel Hobson, Alvina Lee, Jordan Johns,
   Sonya Adams, James Zhao, Adam Dzialoszynski, Luna Lu, Song Bae Choi,
   Thomas Morrison, Sacha Bagasan, Andrew Paugh, Stuart Erskine, Russell
   Staughton, Christopher Hogan, Geoffrey Guest, Gabriel Blais Bourget,
   Robin Jastrzebski, Quinlan Jung, Blakeley Quebec Desloges, Tianyuan Chu,
   Fiodar Kazhamiaka, Greg Hysen, Jean-Christophe Charbonneau, Kenan
   Kigunda, Adriaan Cody Schuffelen, Marc Antoine Gosselin-Lavigne, Pedro
   Augusto Vincente, Ellen Arteca, Alexi Turcotte, Karin Ng, Mark Galloway,
   Alexander Ringeri, Eric Telmer, Charles Wang, Chan Chun Kit, Nabil
   Maadarani, John Zweip, Kevin Brightwell, Warren Marivel, Ashley Merman,
   Xinxin Kou, Aymen Ben Rkhis, Curtis Meerkerk, Adam Kereliuk, Matthew
   Fritze, Michael Mkicik, Victoria Lacroix, Morgan Redshaw, Matthew
   Rodusek, Shikib Mehri, Marc de Niverville, Alex Hochheiden, Noah Murad,
   Katharine Cavers, Jackie Lang, Adam Bolding Jones, Chang Ding, Joshua
   McManus, Balaji Venkatesh, Runqing Zhang, Finn Hackett, Daniel Mitchell,
   Richard Hugessen, Bowei (Bernard) Yuan, Gloria Law, Yiran Shu, Evgeniya
   Vashkevich, and Paul Wang. These 4thyear students have attended the
   Universities of Ottawa, Guelph, British Columbia, Regina, Saskatchewan,
   Sherbrooke, Waterloo, New Brunswick, Alberta, Toronto, Windsor,
   Lethbridge and Illinois, as well as Laurentian, Bishops, Simon Fraser,
   Dalhousie, Western, Wilfrid Laurier, Brock, Carnegie Mellon and Cornel
   Universities plus the Massachusetts Institute of Technology.; Several
   postdocs, visiting professors, employees and interns have also
   contributed to Umple: Ali Fatolahi, Antonio Resende, Julie Filion, Jesus
   Zambrano, Tiago Nascimento, Craig Bryan, Jason Canto, Zainab Al Showely,
   Firas Jribi and Jingyi Pan. Funding for the travel of the undergraduate
   students was provided by Google and Facebook through the UCOSP and
   Facebook Open Academy programs. Funding for the graduate students was
   from NSERC under grants 453224, 483509, 569913, and 657301 as well as
   from the Ontario Research Fund under grant RE-05-044.
CR Abdelzad V, 2017, SOFTW SYST MODEL, V16, P997, DOI 10.1007/s10270-015-0505-x
   Adesina O., 2019, 16 WORKSH MOD DRIV E, P523
   Agner LTW, 2019, SOFTW SYST MODEL, V18, P3025, DOI 10.1007/s10270-018-00709-6
   Agner LTW, 2017, 2017 ACM/IEEE 20TH INTERNATIONAL CONFERENCE ON MODEL DRIVEN ENGINEERING LANGUAGES AND SYSTEMS (MODELS 2017), P303, DOI 10.1109/MODELS.2017.1
   Aljamaan H., 2015, STATE MACHINES ASS, P101
   Aljamaan H, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P79
   Badreddin O., 2012, Proceedings 2012 First International Workshop on User Evaluation for Software Engineering Researchers (USER 2012), P1, DOI 10.1109/USER.2012.6226575
   Badreddin O., 2014, SOFTWARE ENG RES MAN, V496, P33
   Badreddin O, 2014, PROCEEDINGS OF THE 2014 2ND INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT (MODELSWARD 2014), P235
   Badreddin Omar., 2014, SOFTWARE ENG RES MAN, P129
   Garzon M.A., 2014, CASCON 2014, P91
   Gogolla M, 2007, SCI COMPUT PROGRAM, V69, P27, DOI 10.1016/j.scico.2007.01.013
   Lanusse Agnes., 2009, Proc. of the Fifth BIBLIOGRAPHY 84 European Conference on Model-Driven Architecture Foundations and Applications ECMDA-FA 2009, P1
   Lethbridge Timothy C., 2018, Leveraging Applications of Formal Methods, Verification and Validation. Modeling. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11244), P69, DOI 10.1007/978-3-030-03418-4_5
   Lethbridge T. C., 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P220, DOI 10.1109/WCRE.2010.32
   Lethbridge T.C., 2019, CAN ENG ED C, DOI [10.24908/pceea.vi0.13730, DOI 10.24908/PCEEA.VI0.13730]
   Lethbridge T.C., 2020, IGI GLOBAL ADVANCEME, P1
   Lethbridge TC, 2003, IEEE SOFTWARE, V20, P35, DOI 10.1109/MS.2003.1241364
   Lethbridge TC, 2016, LECT NOTES COMPUT SC, V9953, P187, DOI 10.1007/978-3-319-47169-3_14
   Lethbridge TC, 2014, CONF SOFTW ENG EDUC, P23, DOI 10.1109/CSEET.2014.6816777
   Lethbridge TC, 2011, 2011 24TH IEEE-CS CONFERENCE ON SOFTWARE ENGINEERING EDUCATION AND TRAINING (CSEET), P421, DOI 10.1109/CSEET.2011.5876118
   Liebel G, 2017, CONF SOFTW ENG EDUC, P124, DOI 10.1109/CSEET.2017.29
   Orabi MH, 2020, COMM COM INF SC, V1161, P127, DOI 10.1007/978-3-030-37873-8_6
   Orabi MH, 2019, MODELSWARD: PROCEEDINGS OF THE 7TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, 2019, P96, DOI 10.5220/0007382000960104
   Orabi MH, 2018, PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P247, DOI 10.5220/0006715902470255
   Orabi MH, 2018, PROCEEDINGS OF THE 6TH INTERNATIONAL CONFERENCE ON MODEL-DRIVEN ENGINEERING AND SOFTWARE DEVELOPMENT, P575, DOI 10.5220/0006713005750585
   Petre M, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P722, DOI 10.1109/ICSE.2013.6606618
   ROCKSTROM A, 1982, IEEE T COMMUN, V30, P1310, DOI 10.1109/TCOM.1982.1095599
   Sendall Shane., 2004, Proceedings of Workshop on Best Practices for Model-Driven Software Development, P1
   Stroulia E., 2011, P 2011 COMM BUILD WO, P20, DOI DOI 10.1145/1984665.1984670
NR 30
TC 14
Z9 16
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2021
VL 208
AR 102665
DI 10.1016/j.scico.2021.102665
EA APR 2021
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF6EZ
UT WOS:000652847700007
OA hybrid
DA 2024-07-18
ER

PT J
AU Shimari, K
   Ishio, T
   Kanda, T
   Ishida, N
   Inoue, K
AF Shimari, Kazumasa
   Ishio, Takashi
   Kanda, Tetsuya
   Ishida, Naoto
   Inoue, Katsuro
TI NOD4J: Near-omniscient debugging tool for Java using size-limited
   execution trace
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic analysis; Logging; Software visualization
AB Logging is an important feature of a software system to record run-time information. Detailed logging allows developers to collect run-time information in situations where they cannot use an interactive debugger, such as continuous integration and web application server cases. However, extensive logging leads to larger execution traces because few instructions can be repeated many times. This paper presents our tool NOD4J, which monitors a Java program's execution within limited storage space constraints and annotates the source code with observed values in an HTML format. Developers can easily investigate the execution and share the report on a web server. We show two examples that our tool can debug defects using incomplete execution traces. (C) 2021 The Author(s). Published by Elsevier B.V.
C1 [Shimari, Kazumasa; Kanda, Tetsuya; Ishida, Naoto; Inoue, Katsuro] Osaka Univ, Grad Sch Informat Sci & Technol, Osaka, Japan.
   [Ishio, Takashi] Nara Inst Sci & Technol, Grad Sch Sci & Technol, Nara, Japan.
C3 Osaka University; Nara Institute of Science & Technology
RP Shimari, K (corresponding author), Osaka Univ, Grad Sch Informat Sci & Technol, Osaka, Japan.
EM k-simari@ist.osaka-u.ac.jp; ishio@is.naist.jp;
   t-kanda@ist.osaka-u.ac.jp; n-isida@ist.osaka-u.ac.jp;
   inoue@ist.osaka-u.ac.jp
RI Shimari, Kazumasa/GXZ-7968-2022
OI Ishio, Takashi/0000-0003-4106-699X
FU JSPS KAKENHI [JP18H03221, JP18KT0013, JP18H04094, JP19K20239]
FX This work has been supported by JSPS KAKENHI Nos. JP18H03221,
   JP18KT0013, JP18H04094 and JP19K20239.
CR [Anonymous], 2016, Effective Debugging: 66 Specific Ways to Debug Software and Systems
   Chilimbi T., 2001, P 4 ACM WORKSH FEED
   Cleve H, 2005, PROC INT CONF SOFTW, P342
   Cornelissen B, 2008, PROC IEEE INT CONF S, P107, DOI 10.1109/ICSM.2008.4658059
   Dunlap GW, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE FIFTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION, P211, DOI 10.1145/1060289.1060309
   Gestwicki PaulV., 2004, COMPANION 19 ANN ACM, P226
   Hilsdale E., 2004, INT C ASPECT ORIENTE, P26
   Honarmand Nima, 2014, 2014 ACM/IEEE 41st International Symposium on Computer Architecture (ISCA), P455, DOI 10.1109/ISCA.2014.6853229
   Johnson NM, 2011, P IEEE S SECUR PRIV, P347, DOI 10.1109/SP.2011.41
   Kabinna S, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P154, DOI [10.1145/2901739.2901769, 10.1109/MSR.2016.025]
   Lewis Bil., 2003, CoRR
   Matsumura T., 2014, P ICPC, P253, DOI DOI 10.1145/2597008.2597803
   Mirghasemi Salman., 2011, P 19 ACM SIGSOFT S 1, P436
   O'Callahan R, 2017, 2017 USENIX ANNUAL TECHNICAL CONFERENCE (USENIX ATC '17), P377
   Pothier G, 2007, ACM SIGPLAN NOTICES, V42, P535, DOI 10.1145/1297105.1297067
   Shimari K, 2019, PROC IEEE INT CONF S, P398, DOI 10.1109/ICSME.2019.00068
   Wang T, 2004, PROC INT CONF SOFTW, P512, DOI 10.1109/ICSE.2004.1317473
   Yuan D, 2011, ACM SIGPLAN NOTICES, V46, P3, DOI 10.1145/1961296.1950369
NR 18
TC 3
Z9 3
U1 0
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2021
VL 206
AR 102630
DI 10.1016/j.scico.2021.102630
EA MAR 2021
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RI2XD
UT WOS:000636771400001
OA hybrid
DA 2024-07-18
ER

PT J
AU Benes, N
   Brim, L
   Pastva, S
   Safránek, D
AF Benes, Nikola
   Brim, Lubos
   Pastva, Samuel
   Safranek, David
TI Parallel parameter synthesis algorithm for hybrid CTL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Parameter synthesis; Hybrid CTL; Parallelism; Model checking
ID MODEL-CHECKING APPROACH; SYSTEMS; LOGIC
AB Parametrised models of dynamical systems arise in various areas of science. In this work, we focus on models described as parametrised Kripke structures with properties formulated in a hybrid extension of the Computation Tree Logic. Our goal is to identify all the parametrisations under which the given model satisfies the properties. To that end, we propose a novel semi-symbolic parallel parameter synthesis algorithm. The algorithm is built on top of an existing approach that utilises the so-called Extended Dependency Graphs. We extend this approach to deal with parameters. To demonstrate the usefulness of our approach, we show its application to several case studies taken from systems biology. (C) 2019 Published by Elsevier B.V.
C1 [Benes, Nikola; Brim, Lubos; Pastva, Samuel; Safranek, David] Masaryk Univ, Fac Informat, Syst Biol Lab, Bot 68a, Brno 60200, Czech Republic.
C3 Masaryk University Brno
RP Benes, N (corresponding author), Masaryk Univ, Fac Informat, Syst Biol Lab, Bot 68a, Brno 60200, Czech Republic.
EM xbenes3@fi.muni.cz; brim@fi.muni.cz; xpastva@fi.muni.cz;
   xsafran1@fi.muni.cz
RI Safranek, David/ABD-9906-2020; Pastva, Samuel/ABF-2532-2020
OI Safranek, David/0000-0002-0713-2431; Brim, Lubos/0000-0001-9393-7545;
   Benes, Nikola/0000-0003-0164-4046; Pastva, Samuel/0000-0003-1993-0331
FU Czech Science Foundation [GA18-00178S]
FX This work has been supported by the Czech Science Foundation grant no.
   GA18-00178S.
CR AKERS SB, 1978, IEEE T COMPUT, V27, P509, DOI 10.1109/TC.1978.1675141
   Areces C, 2007, STUD LOGIC PRACT REA, V3, P821
   Arellano G, 2011, BMC BIOINFORMATICS, V12, DOI 10.1186/1471-2105-12-490
   Arney D., 2010, P 1 ACM IEEE INT C C, P139
   Bacci G, 2018, LECT NOTES COMPUT SC, V11024, P71, DOI 10.1007/978-3-319-99154-2_5
   Barnat J, 2012, IEEE ACM T COMPUT BI, V9, P693, DOI 10.1109/TCBB.2011.110
   Barnat J, 2010, BRIEF BIOINFORM, V11, P301, DOI 10.1093/bib/bbp074
   Batt G, 2007, BIOINFORMATICS, V23, P2415, DOI 10.1093/bioinformatics/btm362
   Batt G, 2007, LECT NOTES COMPUT SC, V4424, P323
   Batt G, 2010, BIOINFORMATICS, V26, pi603, DOI 10.1093/bioinformatics/btq387
   Benes N, 2019, LECT NOTES COMPUT SC, V11428, P339, DOI 10.1007/978-3-030-17465-1_19
   Benes N, 2016, LECT NOTES COMPUT SC, V9938, P192, DOI 10.1007/978-3-319-46520-3_13
   Benes N, 2016, LECT NOTES COMPUT SC, V9995, P85, DOI 10.1007/978-3-319-48989-6_6
   Bogomolov Sergiy, 2015, Hardware and Software: Verification and Testing. 11th International Haifa Verification Conference, HVC 2015. Proceedings: LNCS 9434, P19, DOI 10.1007/978-3-319-26287-1_2
   Brim L., 2005, International Journal on Software Tools for Technology Transfer, V7, P61, DOI 10.1007/s10009-004-0163-8
   Brim L, 2014, INFORM COMPUT, V236, P52, DOI 10.1016/j.ic.2014.01.012
   Brim L., 2015, LNCS, P58, DOI DOI 10.1007/978-3-319-26916-0
   Brim L, 2015, LECT N BIOINFORMAT, V9308, P251, DOI 10.1007/978-3-319-23401-4_21
   Cardelli L, 2008, INT FED INFO PROC, V273, P261
   Chiang HD, 2016, IEEE T AUTOMAT CONTR, V61, P485, DOI 10.1109/TAC.2015.2438416
   Dalsgaard AE, 2017, LECT NOTES COMPUT SC, V10258, P139, DOI 10.1007/978-3-319-57861-3_10
   Dang T, 2008, IEEE DECIS CONTR P, P4049, DOI 10.1109/CDC.2008.4739371
   Dilao R, 2014, J THEOR BIOL, V340, P199, DOI 10.1016/j.jtbi.2013.09.010
   Donze Alexandre, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P92, DOI 10.1007/978-3-642-33386-6_9
   Donzé A, 2011, PLOS ONE, V6, DOI 10.1371/journal.pone.0024246
   Donzé A, 2009, LECT NOTES COMPUT SC, V5469, P165, DOI 10.1007/978-3-642-00602-9_12
   Dvorak P, 2015, MICROB CELL FACT, V14, DOI 10.1186/s12934-015-0393-3
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   Enevoldsen S, 2019, LECT NOTES COMPUT SC, V11427, P316, DOI 10.1007/978-3-030-17462-0_18
   Fisher J, 2007, NAT BIOTECHNOL, V25, P1239, DOI 10.1038/nbt1356
   Gardner TS, 2000, NATURE, V403, P339, DOI 10.1038/35002131
   Giacobbe Mirco, 2015, Tools and Algorithms for the Construction and Analysis of Systems. 21st International Conference, TACAS 2015, held as part of the European Joint Conferences on Theory and Practice of Software, ETAPS 2015. Proceedings: LNCS 9035, P469, DOI 10.1007/978-3-662-46681-0_47
   Grosu Radu, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P396, DOI 10.1007/978-3-642-22110-1_31
   Jensen MC, 2019, LECT NOTES COMPUT SC, V11460, P298, DOI 10.1007/978-3-030-20652-9_20
   Jha S, 2006, LECT NOTES COMPUT SC, V4230, P107
   Li WS, 2015, IND ENG CHEM RES, V54, P7668, DOI 10.1021/acs.iecr.5b00572
   Liu XX, 1998, LECT NOTES COMPUT SC, V1443, P53
   Madsen C, 2015, LECT N BIOINFORMAT, V9308, P182, DOI 10.1007/978-3-319-23401-4_16
   Maler O, 2004, LECT NOTES COMPUT SC, V3253, P152, DOI 10.1007/978-3-540-30206-3_12
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5311, P48, DOI 10.1007/978-3-540-88387-6_6
   Milias-Argeitis A, 2015, J R SOC INTERFACE, V12, DOI 10.1098/rsif.2015.0831
   Raman V., 2015, P 18 INT C HYBRID SY, P239, DOI DOI 10.1145/2728606.2728628
   RANJAN P, 2006, IFAC P, V39, P297, DOI DOI 10.3182/20060628-3-FR-3903.00052
   Rizk A, 2009, BIOINFORMATICS, V25, pI169, DOI 10.1093/bioinformatics/btp200
   Sicun Gao, 2013, Automated Deduction - CADE-24. 24th International Conference on Automated Deduction. Proceedings: LNCS 7898, P208, DOI 10.1007/978-3-642-38574-2_14
   Swat M, 2004, BIOINFORMATICS, V20, P1506, DOI 10.1093/bioinformatics/bth110
   ter Beek MH, 2011, SCI COMPUT PROGRAM, V76, P119, DOI 10.1016/j.scico.2010.07.002
NR 47
TC 4
Z9 4
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2020
VL 185
AR 102321
DI 10.1016/j.scico.2019.102321
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JR6VU
UT WOS:000499761400001
OA Bronze
DA 2024-07-18
ER

PT J
AU Emara, TZ
   Huang, JZX
AF Emara, Tamer Z.
   Huang, Joshua Zhexue
TI RRPlib: A spark library for representing HDFS blocks as a set of random
   sample data blocks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE HDFS; Random sample; Data partitioning; Distributed systems
AB Analyzing big data is a challenging problem in cluster computing systems especially when the data volume goes beyond the available computing resources. Sampling is the favored solution for such problems. It summarizes or reduces the amount of data, taking into consideration the statistical characteristics of data distribution. However, the traditional method to sample the massive data by drawing record-by-record is a computationally expensive process because a full scan of the whole data is needed to be performed. While if the massive data is partitioned into a set of data blocks with each block is a random sample data block, the processing time for selecting some blocks as a sample (or different samples) is computationally cheaper. The main purpose of the software described in this paper is to represent the HDFS blocks as a set of random sample data blocks which also stored in HDFS. Our empirical results show that the performance of the partitioning operation is acceptable in the real application especially this operation is only performed once, thereby analysis on terabyte data becomes more natural. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Emara, Tamer Z.; Huang, Joshua Zhexue] Shenzhen Univ, Coll Comp Sci & Software Engn, Big Data Inst, Shenzhen 518060, Guangdong, Peoples R China.
   [Emara, Tamer Z.; Huang, Joshua Zhexue] Shenzhen Univ, Natl Engn Lab Big Data Syst Comp Technol, Shenzhen 518060, Guangdong, Peoples R China.
   [Emara, Tamer Z.] Higher Inst Engn & Technol Kafrelsheikh, Kafrelsheikh, Egypt.
C3 Shenzhen University; Shenzhen University
RP Emara, TZ (corresponding author), Shenzhen Univ, Coll Comp Sci & Software Engn, Big Data Inst, Shenzhen 518060, Guangdong, Peoples R China.
EM tamer@szu.edu.cn; zx.huang@szu.edu.cn
RI Emara, Tamer/P-6644-2014
OI Emara, Tamer/0000-0001-6730-9449
FU National Natural Science Foundation of China [61972261]
FX This work is supported by the National Natural Science Foundation of
   China under grant No. 61972261.
CR [Anonymous], 2010, P 2 USENIX C HOT TOP
   EFRON B, 1979, ANN STAT, V7, P1, DOI 10.1214/aos/1176344552
   Emara TZ, 2019, J SYST SOFTWARE, V148, P105, DOI 10.1016/j.jss.2018.11.007
   Kleiner A, 2014, J R STAT SOC B, V76, P795, DOI 10.1111/rssb.12050
   Politis Dimitris N., 1999, Subsampling
   Salloum S., ARXIV171204146
   Shvachko K., 2010, 2010 IEEE 26th Symposium on Mass Storage Systems and Technologies (MSST), P1
   Wei CH, 2018, LECT NOTES COMPUT SC, V10967, P347, DOI 10.1007/978-3-319-94295-7_24
   Zaharia M, 2016, COMMUN ACM, V59, P56, DOI 10.1145/2934664
NR 9
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2019
VL 184
AR 102301
DI 10.1016/j.scico.2019.102301
PG 7
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JM6QO
UT WOS:000496336900009
OA Bronze
DA 2024-07-18
ER

PT J
AU Silva, BCE
   Carvalho, G
   Sampaio, A
AF Silva, Bruno Cesar E.
   Carvalho, Gustavo
   Sampaio, Augusto
TI CPN simulation-based test case generation from controlled
   natural-language requirements
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 18th Brazilian Symposium on Formal Methods (SBMF) as part of 6th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 21-22, 2015-2018
CL Belo Horizonte, BRAZIL
DE Model-based testing; Controlled natural language; Data-flow reactive
   system; Coloured Petri nets; Model simulation
ID MODEL
AB We propose a test generation strategy from natural language (NL) requirements via translation into Coloured Petri Nets (CPN), an extension of Petri Nets that supports model structuring and provides a mature theory and powerful tool support. This approach extends our previous work on the NAT2TEST framework, which involves syntactic and semantic analyses of NL requirements and the generation of Data-Flow Reactive Systems (DFRS) as an intermediate representation, from which target formal models can be obtained for the purpose of test case generation. Our contributions include automating a systematic translation of DFRS5 into CPN models, an extension to deal with time aspects, besides an empirical analysis of the CPN-based test generation strategy. The analyses considered examples both from the literature (a vending machine and a nuclear power plant control system), and from the aerospace and the automotive domain (a priority command control system and a turn indicator control system, respectively). We analysed performance and the ability to detect defects generated via mutation. The results provide evidence that the contribution proposed here is more efficient, besides being able to detect at least as many defects as our previous efforts. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Silva, Bruno Cesar E.; Carvalho, Gustavo; Sampaio, Augusto] Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
C3 Universidade Federal de Pernambuco
RP Carvalho, G (corresponding author), Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
EM bcfs@cin.ufpe.br; ghpc@cin.ufpe.br; acas@cin.ufpe.br
OI Carvalho, Gustavo/0000-0002-3700-9709
FU National Institute of Science and Technology for Software Engineering
   (INES11) - CNPq; FACEPE [573964/2008-4, APQ-1037-1.03/08]
FX This work was supported by the National Institute of Science and
   Technology for Software Engineering (INES<SUP>11</SUP>), funded by CNPq
   and FACEPE, grants 573964/2008-4 and APQ-1037-1.03/08.
CR Barros F.A., 2011, SEKE 2011 P 23 INT C, P250
   Boddu R, 2004, 12TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P262
   Brottier E, 2007, IEEE INT ENTERP DIST, P390, DOI 10.1109/EDOC.2007.44
   Carvalho G., 2013, SAC, P1217
   Carvalho G., 2014, INT WORKSHOP FORMAL, P19, DOI DOI 10.1007/978-3-319-05416-2_3
   Carvalho G, 2016, THESIS
   Carvalho G, 2016, FORM ASP COMPUT, V28, P725, DOI 10.1007/s00165-016-0387-x
   Carvalho G, 2014, SCI COMPUT PROGRAM, V95, P275, DOI 10.1016/j.scico.2014.06.007
   Carvalho G, 2014, LECT NOTES COMPUT SC, V8829, P43, DOI 10.1007/978-3-319-11737-9_4
   Carvalho G, 2013, LECT NOTES COMPUT SC, V8144, P148, DOI 10.1007/978-3-642-41202-8_11
   Carvalho Gustavo, 2015, INT C SOFTW ENG FORM
   de Santiago VA, 2012, SOFTWARE QUAL J, V20, P77, DOI 10.1007/s11219-011-9155-6
   ESSER M.W., 2007, INT WORKSHOP PRINCIP, P75
   Farooq U, 2008, ASWEC 2008: 19TH AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P441, DOI 10.1109/ASWEC.2008.64
   Fillmore C.J., 1968, UNIVERSALS LINGUIST, P1, DOI DOI 10.4236/ENG
   Jensen K., 1996, COLOURED PETRI NETS
   Jensen K, 2009, COLOURED PETRI NETS: MODELLING AND VALIDATION OF CONCURRENT SYSTEMS, P1, DOI 10.1007/b95112
   Jing Liu, 2011, 2011 IEEE Symposium on Computers and Communications (ISCC 2011), P967, DOI 10.1109/ISCC.2011.5983967
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Kof L., 2004, P WORKSH 2004, P2004
   Larsen K., 2004, P DAGST SEM PERSP MO
   Leonard E. I., 2003, Higher-Order and Symbolic Computation, V16, P63, DOI 10.1023/A:1023072104553
   Lizhi Cai, 2011, Journal of Software, V6, P468, DOI 10.4304/jsw.6.3.468-474
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Milner R., 1990, The Definition of Standard ML
   Myers G J., 2004, The Art of Software Testing, V2nd ed.
   Nogueira S., 2012, FORM ASP COMPUT, P1
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Peleska J, 2011, LECT NOTES COMPUT SC, V7019, P146, DOI 10.1007/978-3-642-24580-0_11
   Silva Bruno Cesar F., 2016, Formal Methods: Foundations and Applications. 18th Brazilian Symposium, SBMF 2015. Proceedings: LNCS 9526, P178, DOI 10.1007/978-3-319-29473-5_11
   Sinha Avik, 2010, Proceedings of the Third IEEE International Conference on Software Testing, Verification and Validation (ICST 2010), P155, DOI 10.1109/ICST.2010.19
   Sneed HM, 2007, USIC 2007: PROCEEDINGS OF THE SEVENTH INTERNATIONAL CONFERENCE ON QUALITY SOFTWARE, P380
   Somé SS, 2006, INFORM SOFTWARE TECH, V48, P43, DOI 10.1016/j.infsof.2005.02.006
   Tjell S., 2006, LNI, V94, P274
   Tretmans Jan, 2008, Formal Methods and Testing. An Outcome of the FORTEST Network. Revised Selected Papers, P1, DOI 10.1007/978-3-540-78917-8_1
   Visser E., 2015, DECLARE YOUR LANGUAG
   Watanabe H., 1995, Proceedings 1995 Asia Pacific Software Engineering Conference, P242, DOI 10.1109/APSEC.1995.496973
   Yue T, 2011, LECT NOTES COMPUT SC, V6698, P115, DOI 10.1007/978-3-642-21470-7_9
NR 38
TC 6
Z9 7
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 15
PY 2019
VL 181
BP 111
EP 139
DI 10.1016/j.scico.2019.04.001
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA IW0MB
UT WOS:000484654900007
OA hybrid
DA 2024-07-18
ER

PT J
AU Budde, CE
   D'Argenio, PR
   Hartmanns, A
AF Budde, Carlos E.
   D'Argenio, Pedro R.
   Hartmanns, Arnd
TI Automated compositional importance splitting
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Rare event simulation; Importance splitting; Statistical model checking;
   Transient analysis; Steady-state analysis
ID OUT-OF-N; RESTART SIMULATION; EFFICIENCY; SYSTEMS; CHECKING; MODEST
AB In the formal verification of stochastic systems, statistical model checking uses simulation to overcome the state space explosion problem of probabilistic model checking. Yet its runtime explodes when faced with rare events, unless a rare event simulation method like importance splitting is used. The effectiveness of importance splitting hinges on nontrivial model-specific inputs: an importance function with matching splitting thresholds. This prevents its use by non-experts for general classes of models. In this paper, we present an automated method to derive the importance function. It considers both the structure of the model and of the formula characterising the rare event. It is memory-efficient by exploiting the compositional nature of formal models. We experimentally evaluate it in various combinations with two approaches to threshold selection as well as different splitting techniques for steady-state and transient properties. We find that RESTART splitting combined with thresholds determined via a new expected success method most reliably succeeds and performs very well for transient properties. It remains competitive in the steady-state case, which is however challenging to all combinations we consider. All methods are implemented in the modes tool of the MODEST TOOLSET and in the FIG rare event simulator. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Budde, Carlos E.; Hartmanns, Arnd] Univ Twente, Enschede, Netherlands.
   [D'Argenio, Pedro R.] Univ Nacl Cordoba, Cordoba, Argentina.
   [D'Argenio, Pedro R.] Saarland Univ, Saarbrucken, Germany.
C3 University of Twente; National University of Cordoba; Saarland
   University
RP Hartmanns, A (corresponding author), Univ Twente, Enschede, Netherlands.
EM a.hartmanns@utwente.nl
RI D'Argenio, Pedro R./R-7137-2019; Budde, Carlos E./JDC-4950-2023
OI D'Argenio, Pedro R./0000-0002-8528-9215; Budde, Carlos
   E./0000-0001-8807-1548
FU 3TU.BSR project; ERC [695614]; NWO SEQUOIA project [15474]; NWO VENI
   grant [639.021.754]; SeCyT-UNC [05/B1312, 05/B497]
FX This work is supported by the 3TU.BSR project, ERC grant 695614
   (PowvER), the NWO SEQUOIA project (grant no. 15474), NWO VENI grant no.
   639.021.754, and SeCyT-UNC projects 05/B1312 and 05/B497.
CR Amrein M, 2011, ACM T MODEL COMPUT S, V21, DOI 10.1145/1899396.1899401
   [Anonymous], 2009, Rare Event Simulation Using Monte Carlo methods
   [Anonymous], RARE EVENT SIMULATIO
   [Anonymous], 2014, Simulation modeling and analysis
   [Anonymous], ELECT COMMUN EASST
   Baier C, 1999, LECT NOTES COMPUT SC, V1664, P146
   Bayes A. J., 1970, Australian Computer Journal, V2, P180
   BAYES AJ, 1972, J ACM, V19, P734, DOI 10.1145/321724.321736
   Benasciutti D, 2007, INT J FATIGUE, V29, P232, DOI 10.1016/j.ijfatigue.2006.03.013
   BLANCHET J., 2009, RARE EVENT SIMULATIO, P171, DOI 10.1002/
   Blanchet J., 2009, RARE EVENT SIMULATIO, P87
   Bohnenkamp H, 2006, IEEE T SOFTWARE ENG, V32, P812, DOI 10.1109/TSE.2006.104
   Booth Thomas., 2009, Rare Event Simulation Using Monte Carlo Methods, P215
   Budde Carlos E., 2017, Dependable Software Engineering. Theories, Tools, and Applications. Third International Symposium, SETTA 2017. Proceedings: LNCS 10606, P42, DOI 10.1007/978-3-319-69483-2_3
   Budde C.E., 2016, VALUETOOLS
   Budde C.E., 2017, THESIS
   Budde CE, 2018, LECT NOTES COMPUT SC, V10806, P340, DOI 10.1007/978-3-319-89963-3_20
   Budde CE, 2017, LECT NOTES COMPUT SC, V10206, P151, DOI 10.1007/978-3-662-54580-5_9
   Cérou F, 2012, STAT COMPUT, V22, P795, DOI 10.1007/s11222-011-9231-6
   Cérou F, 2007, STOCH ANAL APPL, V25, P417, DOI 10.1080/07362990601139628
   D'Argenio P, 2015, INT J SOFTW TOOLS TE, V17, P469, DOI 10.1007/s10009-015-0383-0
   D'Argenio PR, 2018, LECT NOTES COMPUT SC, V11187, P132, DOI 10.1007/978-3-030-02508-3_8
   D'Argenio PR, 2016, LECT NOTES COMPUT SC, V9884, P53, DOI 10.1007/978-3-319-44878-7_4
   D'Argenio PR, 2016, LECT NOTES COMPUT SC, V9681, P99, DOI 10.1007/978-3-319-33693-0_7
   D'Argenio PR, 2005, INFORM COMPUT, V203, P1, DOI 10.1016/j.ic.2005.07.001
   Fishman G. S., 1997, INFORMS Journal on Computing, V9, P296, DOI 10.1287/ijoc.9.3.296
   Garvels M. J. J., 2000, THESIS
   Garvels MJJ, 1998, 1998 WINTER SIMULATION CONFERENCE PROCEEDINGS, VOLS 1 AND 2, P601, DOI 10.1109/WSC.1998.745040
   Garvels MJJ, 2002, EUR T TELECOMMUN, V13, P363, DOI 10.1002/ett.4460130408
   Glasserman P, 1999, OPER RES, V47, P585, DOI 10.1287/opre.47.4.585
   Glasserman P, 1998, IEEE T AUTOMAT CONTR, V43, P1666, DOI 10.1109/9.736061
   GOYAL A, 1992, IEEE T COMPUT, V41, P36, DOI 10.1109/12.123381
   Hahn EM, 2013, FORM METHOD SYST DES, V43, P191, DOI 10.1007/s10703-012-0167-z
   Hansson H., 1994, Formal Aspects of Computing, V6, P512, DOI 10.1007/BF01211866
   Hartmanns A, 2017, WINT SIMUL C PROC, P1419
   Hartmanns A, 2009, INT CONF QUANT EVAL, P187, DOI 10.1109/QEST.2009.41
   Hartmanns Arnd, 2014, LNCS, V8413, P593
   Hartmanns Arnd, 2016, EMSOFT, P1
   Heidelberger P., 1995, ACM Transactions on Modeling and Computer Simulation, V5, P43, DOI 10.1145/203091.203094
   Hérault T, 2004, LECT NOTES COMPUT SC, V2937, P73
   Hui KP, 2005, ANN OPER RES, V134, P101, DOI 10.1007/s10479-005-5726-x
   Jegourel Cyrille, 2013, Computer Aided Verification. 25th International Conference, CAV 2013. Proceedings. LNCS 8044, P576, DOI 10.1007/978-3-642-39799-8_38
   Jegourel C, 2016, LECT NOTES COMPUT SC, V9984, P163, DOI 10.1007/978-3-319-47677-3_11
   Jegourel C, 2014, LECT NOTES COMPUT SC, V8803, P143, DOI 10.1007/978-3-662-45231-8_11
   Jegourel Cyrille, 2015, ELECT COMMUN EASST, V72
   Kahn H, 1951, National Bureau of Standards applied mathematics series, V12, P27
   Kroese DP, 1999, PERFORM EVALUATION, V36-7, P471, DOI 10.1016/S0166-5316(99)00036-X
   Kwiatkowska Marta, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P585, DOI 10.1007/978-3-642-22110-1_47
   Kwiatkowska M, 2002, THEOR COMPUT SCI, V282, P101, DOI 10.1016/S0304-3975(01)00046-9
   L'Ecuyer P., 2009, Rare Event Simulation Using Monte Carlo Methods, P39
   L'Ecuyer P, 2007, ACM T MODEL COMPUT S, V17, DOI 10.1145/1225275.1225280
   LAW AM, 1979, OPER RES, V27, P1011, DOI 10.1287/opre.27.5.1011
   LeGland F., 2005, 2005 13th European Signal Processing Conference, P1
   LUTES LD, 1990, J STRUCT ENG-ASCE, V116, P1149, DOI 10.1061/(ASCE)0733-9445(1990)116:4(1149)
   Paolieri M, 2016, IEEE T SOFTWARE ENG, V42, P153, DOI 10.1109/TSE.2015.2468717
   Reijsbergen Daniel, 2013, Quantitative Evaluation of Systems. 10th International Conference, QEST 2013. Proceedings: LNCS 8054, P372, DOI 10.1007/978-3-642-40196-1_31
   Rubino G., 2009, RARE EVENT SIMULATIO
   SMITH WL, 1955, PROC R SOC LON SER-A, V232, P6, DOI 10.1098/rspa.1955.0198
   Steiger NM, 2001, INFORMS J COMPUT, V13, P277, DOI 10.1287/ijoc.13.4.277.9737
   Villen-Altamirano J, 1998, AEU-INT J ELECTRON C, V52, P183
   Villén-Altamirano J, 2007, EUR J OPER RES, V179, P148, DOI 10.1016/j.ejor.2006.02.026
   Villén-Altamirano J, 2010, RELIAB ENG SYST SAFE, V95, P247, DOI 10.1016/j.ress.2009.10.005
   Villén-Altamirano M, 2002, EUR T TELECOMMUN, V13, P373, DOI 10.1002/ett.4460130409
   Villen-Altamirano M, 2011, LECT NOTES COMPUT SC, V5233, P509, DOI 10.1007/978-3-642-02742-0_22
   Villén-Altamirano M, 2006, ACM T MODEL COMPUT S, V16, P251, DOI 10.1145/1147224.1147227
   Villen-Altamiranoz Jose, 2009, Proceedings of the 2009 Winter Simulation Conference (WSC 2009), P1146, DOI 10.1109/WSC.2009.5429635
   VILLENALTAMIRANO M, 1991, NORTH HOLL STUD TELE, V15, P71
   VILLENALTAMIRANO M, 1994, 1994 WINTER SIMULATION CONFERENCE PROCEEDINGS, P282
   VillenAltamirano M, 1994, TELETRAF SCI ENG, V1, P797
   Xiao G, 2007, RELIAB ENG SYST SAFE, V92, P293, DOI 10.1016/j.ress.2006.04.004
   Younes H. L. S., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P223
   Zimmermann A., 2012, 9 INT WORKSHOP RARE, P8
   Zimmermann Armin, 2016, RESIM, P1
NR 73
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2019
VL 174
BP 90
EP 108
DI 10.1016/j.scico.2019.01.006
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HP2VJ
UT WOS:000461533200004
OA Green Submitted, Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Bessa, T
   Gull, C
   Quintao, P
   Frank, M
   Nacif, J
   Pereira, FMQ
AF Bessa, Tarsila
   Gull, Christopher
   Quintao, Pedro
   Frank, Michael
   Nacif, Jose
   Quintao Pereira, Fernando Magno
TI JetsonLEAP: A framework to measure power on a heterogeneous
   system-on-a-chip device
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 20th Brazilian Symposium on Programing Languages (SBLP)
CY SEP 22-23, 2016
CL Maringa, BRAZIL
DE Energy measurement; Code optimizations; SOC; GPU; Heterogeneous
   architecture
AB Computer science marches towards energy-aware practices. This trend impacts not only the design of computer architectures, but also the design of programs. However, developers still lack affordable and accurate technology to measure energy consumption in computing systems. The goal of this paper is to mitigate such problem. To this end, we introduce JetsonLEAP, a framework that supports the implementation of energy-aware programs. JetsonLEAP consists of an embedded hardware, in our case, the NVIDIA Jetson TK1 development board, a circuit to control the flow of energy, of our own design, plus a library to instrument program parts. We discuss two different circuit setups. The most precise setup lets us reliably measure the energy spent by 225,000 instructions, the least precise, although more affordable setup, gives us a window of 975,000 instructions. To probe the precision of our system, we use it in tandem with a high-precision, high-cost acquisition system, and show that results do not differ in any significant way from those that we get using our simpler apparatus. Our entire infrastructure - board, power meter and both circuits - can be reproduced with about $500.00. To demonstrate the efficacy of our framework, we have used it to measure the energy consumed by programs running on ARM cores, on the GPU, and on a remote server. Furthermore, we have studied the impact of OpenACC directives on the energy efficiency of high-performance applications. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Bessa, Tarsila; Quintao, Pedro; Quintao Pereira, Fernando Magno] Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
   [Gull, Christopher; Nacif, Jose] Univ Fed Vicosa, Vicosa, MG, Brazil.
   [Frank, Michael] LG Mobile Res, San Diego, CA USA.
C3 Universidade Federal de Minas Gerais; Universidade Federal de Vicosa
RP Pereira, FMQ (corresponding author), Univ Fed Minas Gerais, Belo Horizonte, MG, Brazil.
EM fernando@dcc.ufmg.br
RI Pereira, Fernando/HNR-7786-2023; Nacif, Jose Augusto M./O-7552-2016
OI Nacif, Jose Augusto M./0000-0003-0703-5620; Gull,
   Christopher/0000-0001-5179-2747
FU LG Electronics; Brazilian Ministry of Science, Technology, Innovation
   and Communication through the National Research Council (CNPq);
   Brazilian Ministry of Education; EUBra-BIGSEA (EC Cooperation Programme
   H2020) [690116]; Brazilian MCTI/RNP [GA-0000000650/04]
FX This work has been partially funded by LG Electronics, by the Brazilian
   Ministry of Science, Technology, Innovation and Communication through
   the National Research Council (CNPq), by the Brazilian Ministry of
   Education, and by EUBra-BIGSEA (EC Cooperation Programme H2020 690116)
   and Brazilian MCTI/RNP (GA-0000000650/04).
CR [Anonymous], 2013, P 26 INT WORKSH LANG
   Beloglazov A, 2012, FUTURE GENER COMP SY, V28, P755, DOI 10.1016/j.future.2011.04.017
   Bessa T, 2016, LECT NOTES COMPUT SC, V9889, P16, DOI 10.1007/978-3-319-45279-1_2
   Demontiê F, 2015, LECT NOTES COMPUT SC, V9325, P1, DOI 10.1007/978-3-319-24012-1_1
   Mendonça GSD, 2016, INT SYM COMP ARCHIT, P34, DOI 10.1109/SBAC-PAD.2016.13
   Dolz Manuel F., 2015, 2015 Sixth International Green and Sustainable Computing Conference (IGSC), P1, DOI 10.1109/IGCC.2015.7393692
   Dunkels F., 2007, P 4 WORKSH EMB NETW, P28
   Epperson J. F., 2013, INTRO NUMERICAL METH
   Ge R, 2010, IEEE T PARALL DISTR, V21, P658, DOI 10.1109/TPDS.2009.76
   Hahnel Marcus, 2012, Performance Evaluation Review, V40, P13
   McIntire D, 2006, IPSN 2006: THE FIFTH INTERNATIONAL CONFERENCE ON INFORMATION PROCESSING IN SENSOR NETWORKS, P449
   McIntire D, 2012, ACM T EMBED COMPUT S, V11, DOI 10.1145/2220336.2220339
   Mendonça G, 2017, ACM T ARCHIT CODE OP, V14, DOI 10.1145/3084540
   Nazaré H, 2014, ACM SIGPLAN NOTICES, V49, P791, DOI [10.1145/2714064.2660205, 10.1145/2660193.2660205]
   Nethercote N, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P89, DOI 10.1145/1250734.1250746
   Neto J. L. D., 2016, NETW OP MAN S, P831
   Neto Jose, 2016, THESIS
   Nyquist H., 1928, T AM I ELECT ENG, V47, P617, DOI DOI 10.1109/T-AIEE.1928.5055024
   Peterson P. A. H., 2011, P 4 C CYB SEC EXP TE, P1
   Pinto G, 2014, ACM SIGPLAN NOTICES, V49, P345, DOI [10.1145/2714064.2660235, 10.1145/2660193.2660235]
   Poesia Gabriel., 2017, Proceedings of the ACM on Programming Languages, V1, P1
   Reyes R, 2012, LECT NOTES COMPUT SC, V7484, P871, DOI 10.1007/978-3-642-32820-6_86
   Saputra H, 2002, ACM SIGPLAN NOTICES, V37, P2, DOI 10.1145/566225.513832
   Sartori J., 2012, Proc. of DAC, P1301
   Silva B, 2014, IEEE SYS MAN CYBERN, P3364, DOI 10.1109/SMC.2014.6974447
   Steinke S, 2002, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, 2002 PROCEEDINGS, P409, DOI 10.1109/DATE.2002.998306
   Stokke K., 2015, Proceedings of the 6th ACM Multimedia Systems Conference, P81, DOI DOI 10.1145/2713168.2713186
   Stokke K. R., 2016, INT S EMB MULT MAN C, P1
   Valluri M, 2001, SPRINGER INT SER ENG, V613, P101
   Vetro Antonio., 2013, P ENERGY 2013 3 INT, P34
   Weaver V. M., 2012, 2012 41st International Conference on Parallel Processing Workshops (ICPPW 2012), P262, DOI 10.1109/ICPPW.2012.39
   Wienke S, 2012, LECT NOTES COMPUT SC, V7484, P859, DOI 10.1007/978-3-642-32820-6_85
   Zheng  X., 2016, ANN DES AUT C
NR 33
TC 2
Z9 2
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 15
PY 2019
VL 173
BP 21
EP 36
DI 10.1016/j.scico.2017.08.017
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA HO3WK
UT WOS:000460853500003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Bonchi, F
   van Bussel, T
   Lee, MD
   Rot, J
AF Bonchi, Filippo
   van Bussel, Tom
   Lee, Matias David
   Rot, Jurriaan
TI Bisimilarity of open terms in stream GSOS
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Bisimilarity; Streams; Open terms; GSOS; Operational semantics
ID OPERATIONAL SEMANTICS; PROCESS ALGEBRA; BISIMULATION; COINDUCTION;
   SYSTEM
AB Stream GSOS is a specification format for operations and calculi on infinite sequences. The notion of bisimilarity provides a canonical proof technique for equivalence of closed terms in such specifications. In this paper, we focus on open terms, which may contain variables, and which are equivalent whenever they denote the same stream for every possible instantiation of the variables. Our main contribution is to capture equivalence of open terms as bisimilarity on certain Mealy machines, providing a concrete proof technique. Moreover, we introduce an enhancement of this technique, called bisimulation up-to substitutions, and show how to combine it with other up-to techniques to obtain a powerful method for proving equivalence of open terms. (C) 2018 Elsevier B.V. All rights reserved.
C1 [van Bussel, Tom; Rot, Jurriaan] Radboud Univ Nijmegen, ICIS, Nijmegen, Netherlands.
   [Bonchi, Filippo] Univ Pisa, Dept Comp Sci, Pisa, Italy.
   [Lee, Matias David] Univ Lyon, CNRS, ENS Lyon, UCBL,LIP, 46 Allee Italie, Lyon, France.
C3 Radboud University Nijmegen; University of Pisa; Centre National de la
   Recherche Scientifique (CNRS); Universite Claude Bernard Lyon 1; Ecole
   Normale Superieure de Lyon (ENS de LYON)
RP Rot, J (corresponding author), Radboud Univ Nijmegen, ICIS, Nijmegen, Netherlands.; Bonchi, F (corresponding author), Univ Pisa, Dept Comp Sci, Pisa, Italy.
EM filippo.bonchi@unipi.it
RI Bonchi, Filippo/E-7955-2018
OI Bonchi, Filippo/0000-0002-3433-723X
FU European Research Council [320571]; LABEX MILYON [ANR-10-LABX-0070,
   ANR-11-IDEX-0007, ANR-12IS02001, ANR-16-CE25-0011]; Agence Nationale de
   la Recherche (ANR) [ANR-16-CE25-0011] Funding Source: Agence Nationale
   de la Recherche (ANR)
FX The research leading to these results has received funding from the
   European Research Council (FP7/2007-2013, grant agreement nr. 320571);
   as well as from the LABEX MILYON (ANR-10-LABX-0070, ANR-11-IDEX-0007),
   the project PACE (ANR-12IS02001) and the project REPAS
   (ANR-16-CE25-0011).
CR Aceto L, 2005, LECT NOTES COMPUT SC, V3838, P338
   Aceto L, 2012, MATH STRUCT COMP SCI, V22, P291, DOI 10.1017/S0960129511000417
   [Anonymous], 2004, THESIS
   Baldan P, 2007, THEOR COMPUT SCI, V389, P446, DOI 10.1016/j.tcs.2007.09.004
   Basold  H., 2017, 7 C ALG COALG COMP S
   BLOOM B, 1995, J ASSOC COMPUT MACH, V42, P232, DOI 10.1145/200836.200876
   Bonchi F, 2017, LECT NOTES COMPUT SC, V10522, P35, DOI 10.1007/978-3-319-68972-2_3
   Bonchi F, 2017, ACTA INFORM, V54, P127, DOI 10.1007/s00236-016-0271-4
   DESIMONE R, 1985, THEOR COMPUT SCI, V37, P245, DOI 10.1016/0304-3975(85)90093-3
   Endrullis J, 2013, LECT NOTES COMPUT SC, V7998, P354, DOI 10.1007/978-3-642-39634-2_26
   GROOTE JF, 1993, THEOR COMPUT SCI, V118, P263, DOI 10.1016/0304-3975(93)90111-6
   GROOTE JF, 1992, INFORM COMPUT, V100, P202, DOI 10.1016/0890-5401(92)90013-6
   Hansen HH, 2017, LOG METH COMPUT SCI, V13, DOI 10.23638/LMCS-13(1:3)2017
   Hansen HH, 2010, SCI ANN COMPUT SCI, V20, P97
   Hansen HH, 2011, MATH STRUCT COMP SCI, V21, P321, DOI 10.1017/S096012951000054X
   Jacobs B, 2006, LECT NOTES COMPUT SC, V4060, P375, DOI 10.1007/11780274_20
   Jan Rut01, 2001, ENTCS, V45, P358
   Klin B., 2015, 6 C ALGEBRA COALGEBR, P190, DOI DOI 10.4230/LIPICS.CALCO.2015.190
   Klin B, 2011, THEOR COMPUT SCI, V412, P5043, DOI 10.1016/j.tcs.2011.03.023
   Lenisa M., 2000, Electronic Notes in Theoretical Computer Science, V33, DOI 10.1016/S1571-0661(05)80350-0
   Lucanu D, 2009, LECT NOTES COMPUT SC, V5728, P433, DOI 10.1007/978-3-642-03741-2_30
   MILNER R, 1984, J COMPUT SYST SCI, V28, P439, DOI 10.1016/0022-0000(84)90023-0
   Mousavi MR, 2007, THEOR COMPUT SCI, V373, P238, DOI 10.1016/j.tcs.2006.12.019
   Popescu A, 2010, LECT NOTES COMPUT SC, V6014, P109
   Pous D, 2017, LECT NOTES COMPUT SC, V10203, P106, DOI 10.1007/978-3-662-54458-7_7
   Pous Damien, 2011, Advanced Topics in Bisimulation and Coinduction, P233, DOI DOI 10.1017/CBO9780511792588.007
   Power J, 2002, THEOR COMPUT SCI, V280, P137, DOI 10.1016/S0304-3975(01)00024-X
   Rensink A, 2000, INFORM COMPUT, V156, P345, DOI 10.1006/inco.1999.2818
   Rutten JJMM, 2005, THEOR COMPUT SCI, V343, P443, DOI 10.1016/j.tcs.2005.06.019
   Rutten JJMM, 2000, THEOR COMPUT SCI, V249, P3, DOI 10.1016/S0304-3975(00)00056-6
   Silva  A., 2010, KLEENE COALGEBRA
   Turi D, 1997, IEEE S LOG, P280, DOI 10.1109/LICS.1997.614955
   Watanabe H., 2002, ELECT NOTES THEOR CO, V65, P337, DOI DOI 10.1016/S1571-0661(04)80372-4
   Zantema H, 2011, LEIBNIZ INT PR INFOR, V10, P393, DOI 10.4230/LIPIcs.RTA.2011.393
NR 34
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2019
VL 172
BP 1
EP 26
DI 10.1016/j.scico.2018.10.007
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HK8HC
UT WOS:000458229000001
OA Green Published, Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Varshosaz, M
   Beohar, H
   Mousavi, MR
AF Varshosaz, Mahsa
   Beohar, Harsh
   Mousavi, Mohammad Reza
TI Basic behavioral models for software product lines: Revisited
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software product lines; Behavioral model; Featured transition systems;
   Calculus of communicating systems; Product line labeled transition
   systems
ID TRANSITION-SYSTEMS; CHECKING
AB In Beohar et al. (2016) [9], we established an expressiveness hierarchy and studied the notions of refinement and testing for three fundamental behavioral models for software product lines. These models were featured transition systems, product line labeled transition systems, and modal transition systems. It turns out that our definition of product line labeled transition systems is more restrictive than the one introduced by Gruler, Leucker, and Scheidemann. Adopting the original and more liberal notion changes the expressiveness results, as we demonstrate in this paper. Namely, we show that the original notion of product line labeled transition systems and featured transition systems are equally expressive. As an additional result, we show that there are featured transition systems for which the size of the corresponding product line labeled transition system, resulting from any sound encoding, is exponentially larger than the size of the original model. Furthermore, we show that each product line labeled transition system can be encoded into a featured transition system, such that the size of featured transition system is linear in terms of the size of the corresponding model. To summarize, featured transition systems are equally expressive as, but exponentially more succinct than, product line labeled transition systems. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Varshosaz, Mahsa] Halmstad Univ, Ctr Res Embedded Syst CERES, Halmstad, Sweden.
   [Beohar, Harsh] Univ Duisburg Essen, Duisburg, Germany.
   [Mousavi, Mohammad Reza] Univ Leicester, Leicester, Leics, England.
C3 Halmstad University; University of Duisburg Essen; University of
   Leicester
RP Varshosaz, M (corresponding author), Halmstad Univ, Ctr Res Embedded Syst CERES, Halmstad, Sweden.
EM mahsa.varshosaz@hh.se; harsh.beohar@uni-due.de; mm789@le.ac.uk
OI Varshosaz, Mahsa/0000-0002-4776-883X
FU Swedish Knowledge Foundation(Stiftelsen for Kunskaps-och
   Kompetensutveckling) [20140312]; Swedish Research Council
   (Vetenskapsradet) [621-2014-5057]; ELLIIT Strategic Research Environment
FX This work has been supported by grants from the Swedish Knowledge
   Foundation(Stiftelsen for Kunskaps-och Kompetensutveckling) in the
   context of the AUTO-CAAS HoG project (number: 20140312), Swedish
   Research Council (Vetenskapsradet) award number: 621-2014-5057
   (Effective Model-Based Testing of Concurrent Systems), and the ELLIIT
   Strategic Research Environment.
CR Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Benavides D, 2010, INFORM SYST, V35, P615, DOI 10.1016/j.is.2010.01.001
   Benes N, 2011, LECT NOTES COMPUT SC, V6996, P275, DOI 10.1007/978-3-642-24372-1_20
   Beohar H, 2016, SCI COMPUT PROGRAM, V123, P42, DOI 10.1016/j.scico.2015.06.005
   Classen A, 2013, IEEE T SOFTWARE ENG, V39, P1069, DOI 10.1109/TSE.2012.86
   Fecher H, 2008, J LOGIC ALGEBR PROGR, V77, P20, DOI 10.1016/j.jlap.2008.05.003
   Gruler A, 2008, LECT NOTES COMPUT SC, V5051, P113, DOI 10.1007/978-3-540-68863-1_8
   Kang Kyo C, 1990, Technical Report
   Larsen K. G., 1990, Proceedings. Fifth Annual IEEE Symposium on Logic in Computer Science (90CH2897-7), P108, DOI 10.1109/LICS.1990.113738
   Larsen U, 1988, Eur J Popul, V3, P203, DOI 10.1109/LICS.1988.5119
   Lochau M, 2016, J LOG ALGEBR METHODS, V85, P245, DOI 10.1016/j.jlamp.2015.09.004
   Milner R., 1982, LECT NOTES COMPUTER, V92
   ter Beek MH, 2016, J LOG ALGEBR METHODS, V85, P287, DOI 10.1016/j.jlamp.2015.11.006
   Tribastone M, 2014, 18TH INTERNATIONAL SOFTWARE PRODUCT LINE CONFERENCE (SPLC 2014), VOL 1, P82, DOI 10.1145/2648511.2648520
NR 14
TC 7
Z9 7
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2018
VL 168
BP 171
EP 185
DI 10.1016/j.scico.2018.09.001
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HA6JG
UT WOS:000450385200010
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Brock-Nannestad, T
AF Brock-Nannestad, Taus
TI Space-efficient acyclicity constraints: A declarative pearl
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Acyclicity; Graph embeddings; Turning numbers
AB Many constraints on graphs, e.g. the existence of a simple path between two vertices, or the connectedness of the subgraph induced by some selection of vertices, can be straightforwardly represented by means of a suitable acyclicity constraint. One method for encoding such a constraint in terms of simple, local constraints uses a 3-valued variable for each edge, and an (N + 1)-valued variable for each vertex, where N is the number of vertices in the entire graph. For graphs with many vertices, this can be somewhat inefficient in terms of space usage.
   In this paper, we show how to refine this encoding into one that uses only a single bit of information, i.e. a 2-valued variable, per vertex, assuming the graph in question is planar. More generally, for graphs that are embeddable in genus g (i.e. on a torus with g handles), we show that 2g + 1 bits per vertex suffices. We furthermore show how this same constraint can be used to encode connectedness constraints, and a variety of other graph-related constraints. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Brock-Nannestad, Taus] Inria, Lille, France.
   [Brock-Nannestad, Taus] Ecole Polytech, LIX, Palaiseau, France.
C3 Inria; Institut Polytechnique de Paris; Ecole Polytechnique
RP Brock-Nannestad, T (corresponding author), Inria, Lille, France.; Brock-Nannestad, T (corresponding author), Ecole Polytech, LIX, Palaiseau, France.
EM tausbn@gmail.com
FU ERC Advanced Grant ProofCert
FX This work was funded by the ERC Advanced Grant ProofCert. The author
   would like to thank the anonymous reviewers for their thorough comments
   and for pointing out several pieces of related work.
CR Brock-Nannestad Taus, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P94, DOI 10.1007/978-3-319-29604-3_7
   Gebser M, 2014, LECT NOTES ARTIF INT, V8761, P137, DOI 10.1007/978-3-319-11558-0_10
   GRUNBAUM B, 1990, T AM MATH SOC, V322, P169, DOI 10.2307/2001527
   MILLER CE, 1960, J ACM, V7, P326, DOI 10.1145/321043.321046
   Otten R. H. J. M., 1978, Proceedings of the 1978 IEEE International Symposium on Circuits and Systems, P914
   Prestwich S, 2003, DISCRETE APPL MATH, V130, P329, DOI 10.1016/S0166-218X(02)00410-9
   ROSENSTIEHL P, 1986, DISCRETE COMPUT GEOM, V1, P343, DOI 10.1007/BF02187706
   Soh T, 2014, LECT NOTES ARTIF INT, V8761, P684, DOI 10.1007/978-3-319-11558-0_52
   Tamura N., 2008, SLIDES           AUG
   Tamura N, 2009, CONSTRAINTS, V14, P254, DOI 10.1007/s10601-008-9061-0
   Velev MN, 2009, LECT NOTES ARTIF INT, V5866, P517, DOI 10.1007/978-3-642-10439-8_52
   Whitney H., 1937, Compositio Mathematica, V4, P276
NR 12
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2018
VL 164
SI SI
BP 66
EP 81
DI 10.1016/j.scico.2017.10.016
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GR5WX
UT WOS:000442713700006
DA 2024-07-18
ER

PT J
AU Costiou, S
   Kerboeuf, M
   Cavarlé, G
   Plantec, A
AF Costiou, Steven
   Kerboeuf, Mickael
   Cavarle, Glenn
   Plantec, Alain
TI Lub: A pattern for fine grained behavior adaptation at runtime
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Unanticipated adaptation; Dynamic behavior; Dynamic lookup; Runtime
   evolution
AB Autonomous systems have to evolve in complex environments and their software must adapt to various situations. Although it is common to anticipate adaptations at design time, it becomes a more complex issue when facing unpredictable contexts at runtime, especially if applications cannot be stopped. We introduce Lub, a pattern designed to extend object oriented languages with fine grained unanticipated adaptations. Lub is based on dynamic instrumentation of the lookup, and allows objects to acquire behaviors from another class than their own. A Pharo Smalltalk implementation of Lub is evaluated through a performance analysis and a running example of a fleet of drones facing unexpected GPS problems. Lub is then discussed from the unanticipated software adaptation perspective. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Costiou, Steven; Kerboeuf, Mickael; Cavarle, Glenn; Plantec, Alain] Univ Bretagne Occidentale, Lab STICC, CNRS, UMR 6285, F-29200 Brest, France.
C3 Universite de Bretagne Occidentale; Centre National de la Recherche
   Scientifique (CNRS)
RP Costiou, S (corresponding author), Univ Bretagne Occidentale, Lab STICC, CNRS, UMR 6285, F-29200 Brest, France.
EM steven.costiou@univ-brest.fr; mickael.kerboeuf@univ-brest.fr;
   glenn.cavarle@univ-brest.fr; alain.plantec@univ-brest.fr
CR Adaili F., 2015, 5 INT C PERV EMB COM
   [Anonymous], 2013, DEEP PHARO
   [Anonymous], 2013, P INT C ASP OR SOFTW, DOI [DOI 10.1145/2451436, DOI 10.1145/2451436.2451461, 10.1145/2451436.2451461]
   Appeltauer Malte, 2011, Information and Media Technologies, V6, P399
   Beugnard A., 2002, 9 INT WORKSH FDN OBJ
   Black A.P., 2009, PHARO EXAMPLE
   Bockisch Christoph., 2004, AOSD 04 P 3 INT C AS, P83
   Costanza P., 2005, P DYN LANG S DLS 05, P1
   Da K., 2011, INT J INTERNET DISTR, V2, P1
   David P.A., 2003, FRAMEWORK SELF ADAPT, P1, DOI DOI 10.1007/978-3-540-40010-3_1
   Ducasse S, 1999, J OBJECT-ORIENT PROG, V12, P39
   Ebraert P., 2005, P RAM SE 05 ECOOP 05, P41
   Gjerlufsen T, 2009, COMPUTER, V42, P61, DOI 10.1109/MC.2009.325
   Goldberg A., 1983, Smalltalk 80: The Language and Its Implementation
   Hammer M, 2010, ELECTRON NOTES THEOR, V260, P91, DOI 10.1016/j.entcs.2009.12.033
   Hirschfeld R, 2003, LECT NOTES COMPUT SC, V2591, P216
   Hirschfeld R., 2017, J OBJECT TECHNOL, V7
   Hirschfeld R, 2008, LECT NOTES COMPUT SC, V5235, P396, DOI 10.1007/978-3-540-88643-3_9
   Kamina T., 2011, P 10 INT C ASP OR SO, P253, DOI DOI 10.1145/1960275.1960305
   Kamina T., 2016, LNCS T MODUL COMPOS, V9800, P123
   Kamina Tetsuo, 2009, INT WORKSHOP CONTEXT, P4
   Keeney J, 2003, IEEE 4TH INTERNATIONAL WORKSHOP ON POLICIES FOR DISTRIBUTED SYSTEMS AND NETWORKS, PROCEEDINGS, P3, DOI 10.1109/POLICY.2003.1206953
   Keeney John, 2004, THESIS
   Kniesel G., 2002, EUR C OBJ OR PROGR, P92
   Lowis M., 2007, Proceedings of the 2007 International Conference on Dynamic Languages: In Conjunction with the 15th International Smalltalk Joint Conference, P143, DOI DOI 10.1145/1352678.1352688
   Nierstrasz O, 2009, LECT NOTES COMPUT SC, V5525, P128, DOI 10.1007/978-3-642-02161-9_7
   Papoulias  N., 2013, THESIS
   Piechnick C., 2012, P ADAPTIVE CIT, P93
   Pina Luis., 2013, HotSWUp
   POPOVICI A., 2002, P 1 INT C ASPECT ORI, P141
   Preuveneers Davy., 2006, Context-aware adaptation for component-based pervasive computing systems
   Redmond B, 2002, LECT NOTES COMPUT SC, V2374, P205
   Ressia J, 2014, SOFTWARE PRACT EXPER, V44, P413, DOI 10.1002/spe.2160
   Rosà A, 2016, LECT NOTES COMPUT SC, V9953, P531, DOI 10.1007/978-3-319-47169-3_42
   Rothlisberger D., 2006, Advances in Smalltalk. 14th International Smalltalk Conference, ISC 2006. Revised Selected Papers (Lecture Notes in Computer Science Vol.4406), P47
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Salvaneschi G, 2012, J SYST SOFTWARE, V85, P1801, DOI 10.1016/j.jss.2012.03.024
   Schärli N, 2003, LECT NOTES COMPUT SC, V2743, P248
   Sullivan GT, 2001, COMMUN ACM, V44, P95, DOI 10.1145/383845.383865
   Taing N., 2016, P 8 ACM INT WORKSH C, P33
   Taing N, 2016, COMPANION PROCEEDINGS OF THE 15TH INTERNATIONAL CONFERENCE ON MODULARITY (MODULARITY COMPANION'16), P137, DOI 10.1145/2892664.2892687
   Tamai T, 2005, PROC INT CONF SOFTW, P166
   Vandewoude Y, 2005, PLC '05: Proceedings of the 2005 International Conference on Programming Languages and Compilers, P230
   Vandewoude Y., 2004, J. Integr. Des. Process Sci., V8, P77
   Wernli E., 2011, P INT WORKSH SMALLT, DOI 10.1145/2166929.2166931
   Weyns Danny., SOFTWARE ENG SELF AD
   Würthinger T, 2013, SCI COMPUT PROGRAM, V78, P481, DOI 10.1016/j.scico.2011.06.005
NR 47
TC 4
Z9 4
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2018
VL 161
SI SI
BP 149
EP 171
DI 10.1016/j.scico.2017.09.006
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GI7ZZ
UT WOS:000434742900009
DA 2024-07-18
ER

PT J
AU Hajisheykhi, R
   Ebnenasir, A
   Kulkarni, SS
AF Hajisheykhi, Reza
   Ebnenasir, Ali
   Kulkarni, Sandeep S.
TI A theory of integrating tamper evidence with stabilization
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Self-stabilization; Reactive systems; Adversary; Formal methods
ID FAULT-CONTAINMENT; CONVERGENCE
AB We propose the notions of tamper-evident stabilization and flexible tamper-evident stabilization - that combine stabilization with the concept of tamper evidence - for computing systems. On the first glance, these notions are contradictory; stabilization requires that eventually the system functionality is fully restored whereas tamper evidence requires that the system functionality is permanently degraded in the event of tampering. Tamper-evident stabilization and flexible tamper-evident stabilization capture the intuition that the system will tolerate perturbations upto a limit. In the event that it is perturbed beyond that limit, it will exhibit permanent evidence of tampering, where it may provide reduced (possibly none) functionality. We compare tamper-evident stabilization with (conventional) stabilization and with active stabilization and propose two approaches to verify tamper-evident and flexible tamper-evident stabilizing programs in polynomial time in the size of state space. We demonstrate tamper-evident stabilization with two examples and point out some of its potential applications. We also demonstrate how approaches for designing stabilization can be used to design tamper-evident and flexible tamper-evident stabilizations. Finally, we study issues of composition in tamper-evident and flexible tamper-evident stabilizations and discuss how tamper-evident stabilization can effectively be used to provide tradeoff between fault-prevention and fault tolerance. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Hajisheykhi, Reza; Kulkarni, Sandeep S.] Michigan State Univ, Dept Comp Sci & Engn, E Lansing, MI 48824 USA.
   [Ebnenasir, Ali] Michigan Technol Univ, Dept Comp Sci, Houghton, MI 49931 USA.
C3 Michigan State University; Michigan Technological University
RP Hajisheykhi, R (corresponding author), Michigan State Univ, Dept Comp Sci & Engn, E Lansing, MI 48824 USA.
EM hajishey@cse.msu.edu; aebnenas@mtu.edu; sandeep@cse.msu.edu
RI Kulkarni, Sameer/HTS-4583-2023
OI Hajisheykhi, Reza/0000-0002-0396-9701
FU NSF [CNS 1329807, CNS 1318678, CCF-1116546, XPS 1533802]
FX This work is supported by NSF CNS 1329807, NSF CNS 1318678, NSF
   CCF-1116546, and XPS 1533802. A preliminary version of this paper
   appears in FSEN 2015.
CR Abujarad F, 2011, THEOR COMPUT SCI, V412, P4228, DOI 10.1016/j.tcs.2011.02.008
   Abujarad F, 2009, LECT NOTES COMPUT SC, V5873, P47, DOI 10.1007/978-3-642-05118-0_4
   [Anonymous], 2000, Self-Stabilization
   Arora A, 1996, J HIGH SPEED NETW, V5, P293
   ARORA A, 1993, IEEE T SOFTWARE ENG, V19, P1015, DOI 10.1109/32.256850
   Arora A., 1994, Formal Techniques in Real-Time and Fault-Tolerant Systems. Third International Symposium Proceedings. ProCoS, P110
   Arora A., 1992, THESIS
   AWERBUCH B, 1991, PROCEEDINGS - 32ND ANNUAL SYMPOSIUM ON FOUNDATIONS OF COMPUTER SCIENCE, P268, DOI 10.1109/SFCS.1991.185378
   Beauquier Joffroy, 1997, 3 WORKSH SELF STAB S, P64
   Bonakdarpour B., 2009, 9 ACM IEEE INT C EMB, P29
   Bonakdarpour B., 2007, P IEEE INT C DISTRIB, P3, DOI 10.1109/ICDCS.2007.109
   Bonakdarpour B, 2011, LECT NOTES COMPUT SC, V6976, P77, DOI 10.1007/978-3-642-24550-3_8
   Bonakdarpour B, 2009, LECT NOTES COMPUT SC, V5850, P660, DOI 10.1007/978-3-642-05089-3_42
   BURNS JE, 1993, DISTRIB COMPUT, V7, P35, DOI 10.1007/BF02278854
   Devismes S, 2008, INT CON DISTR COMP S, P681, DOI 10.1109/ICDCS.2008.12
   Dijkstra E., 1990, DISCIPLINE PROGRAMMI
   DIJKSTRA EW, 1974, COMMUN ACM, V17, P643, DOI 10.1145/361179.361202
   Ebnenasir Ali, 2008, International Journal on Software Tools for Technology Transfer, V10, P455, DOI 10.1007/s10009-008-0083-0
   Ebnenasir A, 2012, 2012 NINTH EUROPEAN DEPENDABLE COMPUTING CONFERENCE (EDCC 2012), P13, DOI 10.1109/EDCC.2012.22
   Ebnenasir A, 2011, ACM T SOFTW ENG METH, V21, DOI 10.1145/2063239.2063240
   Edward Suh G., 2003, ACM INT C, P160, DOI 10.1145/782814.782838
   Farahat A, 2012, ACM T AUTON ADAP SYS, V7, DOI 10.1145/2382570.2382574
   Farahat A, 2012, INT CON DISTR COMP S, P496, DOI 10.1109/ICDCS.2012.66
   Ghosh S, 1996, INFORM PROCESS LETT, V59, P281, DOI 10.1016/0020-0190(96)00121-4
   Gouda M.G., 2001, P 5 INT WORKSHOP SEL, P114
   GOUDA MG, 1991, IEEE T COMPUT, V40, P448, DOI 10.1109/12.88464
   Gouda MG, 2001, INFORM PROCESS LETT, V77, P109, DOI 10.1016/S0020-0190(00)00207-6
   ISRAELI A, 1990, PROCEEDINGS OF THE NINTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P119, DOI 10.1145/93385.93409
   Klinkhamer A, 2013, LECT NOTES COMPUT SC, V8161, P17, DOI 10.1007/978-3-642-40213-5_2
   Klinkhamer A, 2015, IEEE T DEPEND SECURE, V12, P338, DOI 10.1109/TDSC.2014.2315191
   Kulkarni S., 1998, CHIC J THEOR COMPUT
   Kulkarni SS, 2000, LECT NOTES COMPUT SC, V1926, P82
   Kundur D., 2011, International Journal of Security and Networks, V6, P2, DOI 10.1504/IJSN.2011.039629
   Lie D, 2000, ACM SIGPLAN NOTICES, V35, P168, DOI 10.1145/384264.379237
   Malekpour MR, 2006, LECT NOTES COMPUT SC, V4280, P411
   Nesterenko M, 2002, SYM REL DIST SYST, P22, DOI 10.1109/RELDIS.2002.1180170
   Smith SW, 1999, COMPUT NETW, V31, P831, DOI 10.1016/S1389-1286(98)00019-X
   Varghese G., 1993, THESIS
   Zhang HW, 2006, COMPUT NETW, V50, P3585, DOI 10.1016/j.comnet.2006.03.001
NR 39
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2018
VL 160
SI SI
BP 93
EP 114
DI 10.1016/j.scico.2017.03.001
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GG2HS
UT WOS:000432511400006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Arcaini, P
   Bonfanti, S
   Gargantini, A
   Mashkoor, A
   Riccobene, E
AF Arcaini, Paolo
   Bonfanti, Silvia
   Gargantini, Angelo
   Mashkoor, Atif
   Riccobene, Elvinia
TI Integrating formal methods into medical software development: The ASM
   approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Medical device software; Hemodialysis device; Certification; Abstract
   State Machines; Formal analysis
ID HEMODIALYSIS MACHINE; MODEL; SIMULATION; LANGUAGE; DESIGN; SYSTEM
AB Medical devices are safety-critical systems since their malfunctions can seriously compromise human safety. Correct operation of a medical device depends upon the controlling software, whose development should adhere to certification standards. However, these standards provide general descriptions of common software engineering activities without any indication regarding particular methods and techniques to assure safety and reliability. This paper discusses how to integrate the use of a formal approach into the current normative for the medical software development. The rigorous process is based on the Abstract State Machine (ASM) formal method, its refinement principle, and model analysis approaches the method supports. The hemodialysis machine case study is used to show how the ASM-based design process covers most of the engineering activities required by the related standards, and provides rigorous approaches for medical software validation and verification. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Arcaini, Paolo] Charles Univ Prague, Fac Math & Phys, Prague, Czech Republic.
   [Bonfanti, Silvia; Gargantini, Angelo] Univ Bergamo, Dept Econ & Technol Management, Informat Technol & Prod, Bergamo, Italy.
   [Bonfanti, Silvia; Mashkoor, Atif] Software Competence Ctr Hagenberg GmbH, Hagenberg, Austria.
   [Riccobene, Elvinia] Univ Milan, Dipartimento Informat, Milan, Italy.
C3 Charles University Prague; University of Bergamo; Softwarepark
   Hagenberg; University of Milan
RP Arcaini, P (corresponding author), Charles Univ Prague, Fac Math & Phys, Prague, Czech Republic.
EM arcaini@d3s.mff.cuni.cz
RI Arcaini, Paolo/J-3616-2017; Gargantini, Angelo/E-6060-2012; Riccobene,
   Elvinia/B-7517-2013; Bonfanti, Silvia/AAD-9350-2019; Mashkoor,
   Atif/AAK-6747-2020
OI Arcaini, Paolo/0000-0002-6253-4062; Gargantini,
   Angelo/0000-0002-4035-0131; Bonfanti, Silvia/0000-0001-9679-4551;
   Mashkoor, Atif/0000-0003-1210-5953
FU Czech Science Foundation [17-12465S]; Austrian Ministry for Transport,
   Innovation and Technology; Federal Ministry of Science, Research and
   Economy; Province of Upper Austria
FX The research reported in this paper has been partially supported by the
   Czech Science Foundation project number 17-12465S, and by the Austrian
   Ministry for Transport, Innovation and Technology, the Federal Ministry
   of Science, Research and Economy, and the Province of Upper Austria in
   the frame of the COMET center SCCH.
CR Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   [Anonymous], 2019, MEDICAL LAB ACCREDIT
   [Anonymous], 2006, 623042006 IEC
   Arcaini P, 2014, CCIS, P95, DOI DOI 10.1007/978-3-319-07512-9_7
   Arcaini P., 2016, LECT NOTES COMPUT SC, V9675
   Arcaini P., 2016, IND P 23 EUROASIASPI, P1111
   Arcaini P., 2012, LNCS, V7186, P223, DOI [10.1007/978-3-642-29860-817, DOI 10.1007/978-3-642-29860-817]
   Arcaini P, 2017, INT J SOFTW TOOLS TE, V19, P247, DOI 10.1007/s10009-015-0394-x
   Arcaini P, 2016, LECT NOTES COMPUT SC, V9946, P163, DOI 10.1007/978-3-319-50230-4_12
   Arcaini P, 2016, LECT NOTES COMPUT SC, V9763, P253, DOI 10.1007/978-3-319-41591-8_17
   Arcaini P, 2016, FORM ASP COMPUT, V28, P567, DOI 10.1007/s00165-016-0371-5
   Arcaini P, 2015, 2015 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CODESIGN (MEMOCODE), P80, DOI 10.1109/MEMCOD.2015.7340473
   Arcaini P, 2013, IEEE ICST WORKSHOP, P178, DOI 10.1109/ICSTW.2013.29
   Arcaini P, 2011, SOFTWARE PRACT EXPER, V41, P155, DOI 10.1002/spe.1019
   Arcaini P, 2010, LECT NOTES COMPUT SC, V5977, P61, DOI 10.1007/978-3-642-11811-1_6
   Arcaini Paolo., 2010, NASA Formal Methods Symposium, P4
   Arney D, 2007, 2007 JOINT WORKSHOP ON HIGH CONFIDENCE MEDICAL DEVICES, SOFTWARE AND SYSTEMS AND MEDICAL DEVICE PLUG-AND PLAY INTEROPERABILITY, P23, DOI 10.1109/HCMDSS-MDPnP.2007.36
   Banach R, 2016, LECT NOTES COMPUT SC, V9675, P376, DOI 10.1007/978-3-319-33600-8_32
   Banach R, 2015, SCI COMPUT PROGRAM, V105, P92, DOI 10.1016/j.scico.2015.02.003
   Bonfanti S., 2017, J SOFTW EVOL P UNPUB
   Bonfanti S, 2017, LECT NOTES COMPUT SC, V10227, P295, DOI 10.1007/978-3-319-57288-8_21
   Borger E., 2003, ABSTRACT STATE MACHI
   Bowen J., 2013, P 5 ACM SIGCHI S ENG, P91, DOI DOI 10.1145/2494603.2480314
   Broadfoot GH, 2005, LECT NOTES COMPUT SC, V3582, P548
   Campos J. C., 2011, ELECT COMMUN EASST, V45
   Campos JC, 2008, LECT NOTES COMPUT SC, V5136, P72, DOI 10.1007/978-3-540-70569-7_6
   Carioni A, 2008, LECT NOTES COMPUT SC, V5238, P71
   Curzon P., 2014, HUMAN COMPUTER INTER
   Fayolle T, 2016, LECT NOTES COMPUT SC, V9675, P394, DOI 10.1007/978-3-319-33600-8_33
   Frappier M, 2008, 24 U SHERBR DEP INF
   Gargantini A, 2003, LECT NOTES COMPUT SC, V2589, P263
   Gargantini A, 2001, J UNIVERS COMPUT SCI, V7, P1050
   Gargantini A, 2008, J UNIVERS COMPUT SCI, V14, P1949
   Gomes AO, 2016, LECT NOTES COMPUT SC, V9675, P409, DOI 10.1007/978-3-319-33600-8_34
   Hierons R, 2000, SOFTW TEST VERIF BEH, V10, P201, DOI 10.1002/1099-1689(200012)10:4<201::AID-STVR214>3.3.CO;2-Q
   IEC, 2005, 6060112005 IEC IEC
   International Organization for Standardization, 2007, 149712007 ISO
   Jetley R, 2006, COMPUTER, V39, P61, DOI 10.1109/MC.2006.113
   Jiang Z., 2010, WIRELESS HLTH 2010 W, P208
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Jones P., 2010, ELECT ENG TIMES, V1579, P31
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   LEVESON NG, 1993, COMPUTER, V26, P18, DOI 10.1109/MC.1993.274940
   Macedo HD, 2008, LECT NOTES COMPUT SC, V5014, P181, DOI 10.1007/978-3-540-68237-0_14
   Mashkoor A, 2016, LECT NOTES COMPUT SC, V9675, P329, DOI 10.1007/978-3-319-33600-8_29
   Mashkoor A, 2016, SOFTWARE QUAL J, V24, P571, DOI 10.1007/s11219-015-9288-0
   Mashkoor A, 2016, IEEE EMBED SYST LETT, V8, P14, DOI 10.1109/LES.2015.2494459
   Mery D, 2013, ACM T EMBED COMPUT S, V12, DOI 10.1145/2406336.2406351
   Oliveira M, 2007, FORM ASP COMPUT, V21, P3
   Osaiweran A, 2013, ELECTRON NOTES THEOR, V295, P49, DOI 10.1016/j.entcs.2013.04.005
   Plagge D, 2007, LECT NOTES COMPUT SC, V4591, P480
   Slissenko A, 2008, J UNIVERS COMPUT SCI, V14, P1984
   Snook C, 2006, ACM T SOFTW ENG METH, V15, P92, DOI 10.1145/1125808.1125811
   Sommerville I., 2010, SOFTWARE ENG
   Spivey J. M., 1988, UNDERSTANDING Z A SP
   Hoang TS, 2016, LECT NOTES COMPUT SC, V9675, P360, DOI 10.1007/978-3-319-33600-8_31
   Utting M., 2006, Practical Model-Based Testing
NR 58
TC 18
Z9 19
U1 0
U2 16
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2018
VL 158
BP 148
EP 167
DI 10.1016/j.scico.2017.07.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GE4CX
UT WOS:000431163000009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Paredes-Valverde, MA
   Salas-Zárate, MD
   Colomo-Palacios, R
   Gómez-Berbís, JM
   Valencia-García, R
AF Andres Paredes-Valverde, Mario
   del Pilar Salas-Zarate, Maria
   Colomo-Palacios, Ricardo
   Miguel Gomez-Berbis, Juan
   Valencia-Garcia, Rafael
TI An ontology-based approach with which to assign human resources to
   software projects
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software project; Ontologies; Semantic indexing; Assigning human
   resources
ID SYSTEMATIC-APPROACH; MODEL
AB Human resources play a critical role in the success of software projects. Ensuring the correct assignment of them to a specific project is, therefore, an immediate requirement for Software development organizations. Within this context, this work explores the use of ontologies in the building of a decision support system that will help human resources managers or project leaders to select those employees who are best suited to participating in a new software development project. Ontologies allow the system to discover semantic relatedness among new and previous software projects by means of its requirements specification. The system can, therefore, suggest those people who have participated on similar projects. We have proved the effectiveness of our approach by conducting an evaluation in a software development organization. Our findings confirm the success of our approach and reveal that it may bring considerable benefits to the software development process. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Andres Paredes-Valverde, Mario; del Pilar Salas-Zarate, Maria; Valencia-Garcia, Rafael] Univ Murcia, Dept Informat & Sistemas, Campus Espinardo, E-30100 Murcia, Spain.
   [Colomo-Palacios, Ricardo] Ostfold Univ Coll, Comp Sci Dept, Halden, Norway.
   [Miguel Gomez-Berbis, Juan] Univ Carlos III Madrid, Comp Sci Dept, Madrid, Spain.
C3 University of Murcia; Ostfold University College; Universidad Carlos III
   de Madrid
RP Paredes-Valverde, MA (corresponding author), Univ Murcia, Dept Informat & Sistemas, Campus Espinardo, E-30100 Murcia, Spain.
EM marioandres.paredes@um.es; mariapilar.salas@um.es;
   ricardo.colomo-palacios@hiof.no; juanmiguel.gomez@uc3m.es;
   valencia@um.es
RI Valencia-García, Rafael/I-7610-2019; Salas-Zarate, Maria del
   Pilar/N-5583-2017; Valencia-Garcia, Rafael/L-4759-2014
OI Colomo-Palacios, Ricardo/0000-0002-1555-9726; Salas-Zarate, Maria del
   Pilar/0000-0003-1818-3434; Valencia-Garcia, Rafael/0000-0003-2457-1791
FU Spanish National Research Agency (AEI); European Regional Development
   Fund (FEDER / ERDF) through project KBS4FIA [KBS4FIA (TIN2016-76323-R)];
   National Council of Science and Technology (CONACYT); Secretariat of
   Public Education (SEP); Mexican government
FX This work has been supported by the Spanish National Research Agency
   (AEI) and the European Regional Development Fund (FEDER / ERDF) through
   project KBS4FIA (TIN2016-76323-R). Maria del Pilar Salas-Zarate and
   Mario Andres Paredes Valverde are supported by the National Council of
   Science and Technology (CONACYT), the Secretariat of Public Education
   (SEP) and the Mexican government.
CR Acuña ST, 2009, INFORM SOFTWARE TECH, V51, P627, DOI 10.1016/j.infsof.2008.08.006
   Alvarez-Rodriguez J. M., 2015, SCI PROGRAM, V2015, P3
   André M, 2011, INFORM SOFTWARE TECH, V53, P259, DOI 10.1016/j.infsof.2010.11.011
   Andrews P, 2012, SEMANT WEB, V3, P223, DOI 10.3233/SW-2011-0056
   [Anonymous], 1998, IEEE Standard 1233, P1
   [Anonymous], 1990, Implementing Discrete Mathematics: Combinatorics and Graph Theory with Mathematica
   [Anonymous], 2014, Software engineering: a practitioner's approach
   Berners-Lee T, 2001, SCI AM, V284, P34, DOI 10.1038/scientificamerican0501-34
   Silva LCE, 2013, INT J PROJ MANAG, V31, P100, DOI 10.1016/j.ijproman.2012.06.008
   Castells P, 2007, IEEE T KNOWL DATA EN, V19, P261, DOI 10.1109/TKDE.2007.22
   Chen WN, 2013, IEEE T SOFTWARE ENG, V39, P1, DOI 10.1109/TSE.2012.17
   Colomo-Palacios R, 2014, INFORM SYST FRONT, V16, P607, DOI 10.1007/s10796-012-9369-6
   Cunningham H, 2013, PLOS COMPUT BIOL, V9, DOI 10.1371/journal.pcbi.1002854
   del M., 2016, J INF SCI
   Gorla N, 2004, COMMUN ACM, V47, P79, DOI 10.1145/990680.990684
   Grau BC, 2008, J WEB SEMANT, V6, P309, DOI 10.1016/j.websem.2008.05.001
   Heimerl C, 2010, INT J PROD RES, V48, P3759, DOI 10.1080/00207540902852785
   Hripcsak G, 2005, J AM MED INFORM ASSN, V12, P296, DOI 10.1197/jamia.M1733
   I. C. S. S. E. S. Committee I.-S.S. Board, 1998, IEEE REC PRACT SOFTW
   IEEE-SA Standards Board, 1998, 8301998 IEEE, P207, DOI [10.1109/IEEESTD.1998.88286, DOI 10.1109/IEEESTD.1998.88286]
   Mendenhall W.M., 2016, Statistics for Engineering and the Sciences
   Mifflin E. H., 2001, AM HERITAGE DICT
   Musen Mark A, 2015, AI Matters, V1, P4
   Ngo-The A, 2008, SOFT COMPUT, V12, P95, DOI [10.1007/S00500-007-0219-2, 10.1007/s00500-007-0219-2]
   Novalija I, 2011, KNOWL-BASED SYST, V24, P1261, DOI 10.1016/j.knosys.2011.06.002
   Otero LD, 2009, COMPUT IND ENG, V56, P1333, DOI 10.1016/j.cie.2008.08.002
   Paredes-Valverde M.A., 2015, J INF SCI
   Prieto-Gonzalez Lisardo, 2014, International Journal of Metadata, Semantics and Ontologies, V9, P74, DOI 10.1504/IJMSO.2014.059128
   Rodriguez-Garcia M. A., 2012, LECT NOTES COMPUTER, P163
   Rodríguez-García MA, 2014, KNOWL-BASED SYST, V56, P15, DOI 10.1016/j.knosys.2013.10.006
   Salton G, 1986, Introduction to Modern Information Retrieval
   Schnaider L.R. Carvalho, 2003, THESIS
   Soares H.A., 2015, 2015 LAT AM COMP C C, P1, DOI DOI 10.1109/CLEI.2015.7360001
   Studer R, 1998, DATA KNOWL ENG, V25, P161, DOI 10.1016/S0169-023X(97)00056-6
   Tsai HT, 2003, EUR J OPER RES, V151, P167, DOI 10.1016/S0377-2217(02)00600-8
   Virtuoso O., 2009, UNIVERSAL SERVER PLA
   Zeineddine R, 2003, LECT NOTES COMPUT SC, V2869, P1027
   ZHANG DH, 2016, IEEE IC COMP COM NET, P825
   Zhu HB, 2006, IEEE T SYST MAN CY A, V36, P1110, DOI 10.1109/TSMCA.2006.883170
   Zobel J., 1998, SIGIR Forum, V32, P18, DOI 10.1145/281250.281256
NR 40
TC 22
Z9 23
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2018
VL 156
BP 90
EP 103
DI 10.1016/j.scico.2018.01.003
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GA7AE
UT WOS:000428486100005
DA 2024-07-18
ER

PT J
AU Bransen, J
   Dijkstra, A
   Swierstra, SD
AF Bransen, Jeroen
   Dijkstra, Atze
   Swierstra, S. Doaitse
TI Incremental evaluation of higher-order attributes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Incremental evaluation; Attribute grammars; Change propagation; Program
   transformation
AB Compilers, amongst other programs, often work with data that (slowly) changes over time. When the changes between subsequent runs of the compiler are small, one would hope the compiler to incrementally update its results, resulting in much lower rebuilding times. However, the manual construction of an incremental compiler is very hard and error prone and therefore usually not an option.
   Attribute grammars provide an attractive way of constructing compilers, as they are compositional in nature and allow for aspect oriented programming. In this paper we describe work on the automatic generation of incremental attribute grammar evaluators, with the purpose of (semi-)automatically generating an incremental compiler from a regular attribute grammar definition. The paper includes an informal introduction into attribute grammars, describes how to implement incremental evaluation for a simple example without higher-order attributes as well as for a larger example with higher order attributes. Higher-order attributes are a well known extension to classical attribute grammars which for example is used to model different compiler phases or iterative transformations of an abstract syntax tree.
   Incrementality for attribute evaluation is achieved by maintaining additional bookkeeping about which attribute values have changed. We show benchmarks for the implementation technique dealing with higher-order attributes. The benchmarks indicate that the bookkeeping overhead in our prototype implementation comes with a serious hit on performance, further investigation into the reasons and possible remedies for this falls outside the scope of this paper. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bransen, Jeroen; Dijkstra, Atze; Swierstra, S. Doaitse] Univ Utrecht, Dept Informat & Comp Sci, NL-3508 TC Utrecht, Netherlands.
C3 Utrecht University
RP Dijkstra, A (corresponding author), Univ Utrecht, Dept Informat & Comp Sci, NL-3508 TC Utrecht, Netherlands.
EM jeroen@bransen.nl; atze@uu.nl; doaitse@uu.nl
FU Netherlands Organisation for Scientific Research (NWO) [612.001.008]
FX This work is part of the research programme Non-Invasive Incremental
   Evaluation, which is (partly) financed by the Netherlands Organisation
   for Scientific Research (NWO), Grant No. 612.001.008.
CR Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   [Anonymous], 2003, The Fun of Programming
   Bransen J., 2015, THESIS
   Bransen J., 2013, P 9 ACM SIGPLAN WORK
   Bransen J, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P39, DOI 10.1145/2678015.2682541
   Bransen J, 2014, PEPM '14: PROCEEDINGS OF THE ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P145, DOI 10.1145/2543728.2543735
   Cai Y., 2014, P 35 ACM SIGPLAN C P, P145
   Chen Y., 2014, P 19 ACM SIGPLAN INT, P227
   Chen Y, 2014, J FUNCT PROGRAM, V24, P56, DOI 10.1017/S0956796814000033
   Chen Y, 2012, ACM SIGPLAN NOTICES, V47, P299, DOI 10.1145/2345156.2254100
   Çiçek E, 2015, LECT NOTES COMPUT SC, V9032, P406, DOI 10.1007/978-3-662-46669-8_17
   Dijkstra A, 2009, HASKELL'09: PROCEEDINGS OF THE 2009 ACM SIGPLAN HASKELL SYMPOSIUM, P93
   Doaitse Swierstra S., 1996, Advanced Functional Programming. Second International School. Tutorial Text, P184
   ENGELFRIET J, 1982, J COMPUT SYST SCI, V24, P283, DOI 10.1016/0022-0000(82)90030-7
   Hammer MA, 2014, ACM SIGPLAN NOTICES, V49, P156, DOI [10.1145/2594291.2594324, 10.1145/2666356.2594324]
   Hedin G, 2003, SCI COMPUT PROGRAM, V47, P37, DOI 10.1016/S0167-6423(02)00109-0
   Hinze Ralf, 2003, TR20031901 CORN U
   Hongwei Xi, 2003, SIGPLAN Notices, V38, P224, DOI 10.1145/640128.604150
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Jones S.L. Peyton, 2003, J FUNCT PROG SPEC IS, V13
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   REPS T, 1983, ACM T PROGR LANG SYS, V5, P449, DOI 10.1145/2166.357218
   Saraiva J, 2002, LECT NOTES COMPUT SC, V2487, P268
   Saraiva J, 2000, LECT NOTES COMPUT SC, V1781, P279
   Schrijvers T, 2008, ICFP'08: PROCEEDINGS OF THE 2008 SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING, P51
   Söderberg E, 2011, LECT NOTES COMPUT SC, V6563, P2, DOI 10.1007/978-3-642-19440-5_2
   Swierstra SD, 1999, LECT NOTES COMPUT SC, V1608, P150
   van Binsbergen LT, 2015, PROCEEDINGS OF THE 2015 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION (PEPM'15), P49, DOI 10.1145/2678015.2682543
   Van Wyk E, 2010, SCI COMPUT PROGRAM, V75, P39, DOI 10.1016/j.scico.2009.07.004
   VOGT H, 1991, LECT NOTES COMPUT SC, V528, P231
   VOGT HH, 1989, SIGPLAN NOTICES, V24, P131, DOI 10.1145/74818.74830
   WADLER P, 1990, PROCEEDINGS OF THE 1990 ACM CONFERENCE ON LISP AND FUNCTIONAL PROGRAMMING, P61, DOI 10.1145/91556.91592
NR 33
TC 1
Z9 1
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2017
VL 137
BP 98
EP 124
DI 10.1016/j.scico.2016.06.001
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EO8WY
UT WOS:000396972400004
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Störrle, H
AF Storrle, Harald
TI Cost-effective evolution of research prototypes into end-user tools: The
   MACH case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Academic Software Development Tools and
   Techniques
CY JUL 01, 2013
CL Montpellier, FRANCE
DE Architectural design process; Design decisions; Software tool research
   prototype; Architectural choice points; UML model analysis and checking
AB Much of Software Engineering research needs to provide an implementation as proof of -concept. Often such implementations are created as exploratory prototypes without polished user interfaces, making it difficult to (1) run user studies to validate the tool's contribution, (2) validate the author's claim by fellow scientists, and (3) demonstrate the utility and value of the research contribution to any interested parties. However, turning an exploratory prototype into a "proper" tool for end-users often entails great effort. Heavyweight mainstream frameworks such as Eclipse do not address this issue; their steep learning curves constitute substantial entry barriers to such ecosystems.
   In this paper, we present the Model Analyzer/Checker (MACH), a stand-alone tool with a command-line interpreter. MACH integrates a set of research prototypes for analyzing UML models. By choosing a simple command line interpreter rather than (costly) graphical user interface, we achieved the core goal of quickly deploying research results to a broader audience while keeping the required effort to an absolute minimum. We analyze MACH as a case study of how requirements and constraints in an academic environment influence design decisions in software tool development. We argue that our approach while perhaps unconventional, serves its purpose with a remarkable cost-benefit ratio. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Storrle, Harald] Tech Univ Denmark, Dept Appl Math & Comp Sci, Matemat Torvet, DK-2800 Lyngby, Denmark.
C3 Technical University of Denmark
RP Störrle, H (corresponding author), Tech Univ Denmark, Dept Appl Math & Comp Sci, Matemat Torvet, DK-2800 Lyngby, Denmark.
EM hsto@dtu.dk
CR Acretoaie V., 2012, LNCS, P328
   Acretoaie Vlad, 2014, P WS BIG MDE
   Acretoaie Vlad, 2014, PSRC MODELS, V1258, P1
   Batory D, 2013, LECT NOTES COMPUT SC, V8107, P121, DOI 10.1007/978-3-642-41533-3_8
   Chaudron M.R., 2007, P 2 WS MOD SIZ METR
   Genero M, 2005, METRICS FOR SOFTWARE CONCEPTUAL MODELS, P1, DOI 10.1142/9781860946066
   Genero M, 2005, J OBJECT TECHNOL, V4, P59, DOI 10.5381/jot.2005.4.9.a1
   Koschke Rainer, 2006, CASTLE
   Neczwid Andrij, 2006, P 1 WS MOD SIZ METR
   Nierstrasz Oscar, 2006, LNCS, V4199
   Roy C., 2007, 541 QUEENS U SCH COM
   Steinberg D., 2008, EMF: Eclipse Modeling Framework, Vsecond
   Störrle H, 2007, Proceedings of the IASTED International Conference on Software Engineering, P382
   Storrle Harald, 2013, MODELSWARD 2013. 1st International Conference on Model-Driven Engineering and Software Development. Proceedings, P39
   Störrle H, 2013, SOFTW SYST MODEL, V12, P307, DOI 10.1007/s10270-011-0217-9
   Storrle Harald, 2014, LNCS
   Storrle Harald, 2014, 201402 DTU
   Storrle Harald, 2014, ONLINE DEMO MACH 0 9
   Van Gorp P, 2011, PROCEDIA COMPUT SCI, V4, P589, DOI 10.1016/j.procs.2011.04.062
   Wielemaker J., 2005, TECHNICAL REPORT
NR 20
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2017
VL 134
SI SI
BP 47
EP 60
DI 10.1016/j.scico.2015.07.010
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA EF1GE
UT WOS:000390072500005
OA hybrid
DA 2024-07-18
ER

PT J
AU Benerecetti, M
   De Guglielmo, R
   Gentile, U
   Marrone, S
   Mazzocca, N
   Nardone, R
   Peron, A
   Velardi, L
   Vittorini, V
AF Benerecetti, M.
   De Guglielmo, R.
   Gentile, U.
   Marrone, S.
   Mazzocca, N.
   Nardone, R.
   Peron, A.
   Velardi, L.
   Vittorini, V.
TI Dynamic state machines for modelling railway control systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic Slate machines; Promela model; ERTMS/ETCS; Control system;
   Verification and validation
ID STATECHARTS
AB Verification and Validation of railway controllers is the most critical and time-consuming phase in a system development life-cycle. It is regulated by international standards, which explicitly recommend the usage of state machines to model the specification of the system under test. Despite the great deal of works addressing the usage of state machines and their extensions, model-based verification and validation processes still lack concise and expressive-enough notations able to easily capture peculiar features of the specific domain of multi-process control systems, on which proper tool chains can be implemented in order to realize effective and automated environments.
   This paper introduces a novel class of hierarchical state machines, called Dynamic STate Machines (DSTMs), and proposes an approach for modelling and validating railway control systems, based on the new specification language. Key features of DSTM are recursive execution, parallelism, parameter passing, abortion transition, and communication through global variables and channels, but its main peculiarity resides in the semantics of fork and join operators which allows for dynamic instantiation of machines (processes). The formal semantics of DSTM allows for the definition of verification and validation methodologies supported by automated tools. The paper also describes how DSTM specifications may be mapped to Promela models in order to achieve automated generation of test cases by model checking and Spin.
   The work presented in this paper was carried out in the context of an European project and is strongly driven by the industrial necessity of tackling issues concerning the automation of functional system-level testing of modern railway signalling systems. Hence, the language and the proposed approach are illustrated and motivated by applying them to a specific functionality of the Radio Block Centre, the vital core of the ERTMS/ETCS Control System. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Benerecetti, M.; Gentile, U.; Mazzocca, N.; Nardone, R.; Peron, A.; Vittorini, V.] Univ Naples Federico II, Dept Elect Engn & Informat Technol, Naples, Italy.
   [Marrone, S.] Univ Naples 2, Dept Math & Phys, Naples, Italy.
   [De Guglielmo, R.; Velardi, L.] Ansaldo STS, Naples, Italy.
C3 University of Naples Federico II; Universita della Campania Vanvitelli
RP Nardone, R (corresponding author), Univ Naples Federico II, Dept Elect Engn & Informat Technol, Naples, Italy.
EM roberto.nardone@unina.it
RI nardone, roberto/AAM-4095-2021; Marrone, Stefano/AAC-4997-2021
OI nardone, roberto/0000-0003-4938-9216; Marrone,
   Stefano/0000-0003-1927-6173; Mazzocca, Nicola/0000-0002-0401-9687;
   Gentile, Ugo/0000-0001-5158-1835
FU research project CRYSTAL (Critical System Engineering Acceleration);
   ARTEMIS Joint Undertaking [332830]; ARTEMIS member state Austria;
   ARTEMIS member state Belgium; ARTEMIS member state Czech Republic;
   ARTEMIS member state France; ARTEMIS member state Germany; ARTEMIS
   member state Italy; ARTEMIS member state Netherlands; ARTEMIS member
   state Spain; ARTEMIS member state Sweden; ARTEMIS member state United
   Kingdom
FX This paper is partially supported by research project CRYSTAL (Critical
   System Engineering Acceleration), funded by the ARTEMIS Joint
   Undertaking under Grant agreement No. 332830 and by ARTEMIS member
   states Austria, Belgium, Czech Republic, France, Germany, Italy,
   Netherlands, Spain, Sweden, United Kingdom.
CR Alur A., 1999, Automata, Languages and Programming. 26th International Colloquium, ICALP'99. Proceedings (Lecture Notes in Computer Science Vol.1644), P169
   Amalfitano D., 2014, Proceedings of the 2014 International Workshop on Long-term Industrial Collaboration on Software Engineering WISE '14, P29
   Anand S, 2013, J SYST SOFTWARE, V86, P1978, DOI 10.1016/j.jss.2013.02.061
   [Anonymous], 2011, OMGUML2
   [Anonymous], 2005, EMSOFT 2005
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   Artho Cyrille Valentin, 2013, Hardware and Software: Verification and Testing. 9th International Haifa Verification Conference, HVC 2013. Proceedings: LNCS 8244, P112, DOI 10.1007/978-3-319-03077-7_8
   Barberio G, 2014, LECT NOTES COMPUT SC, V8696, P147, DOI 10.1007/978-3-319-10557-4_18
   Benerecetti Massimo, 2010, Proceedings of the 2010 17th International Symposium on Temporal Representation and Reasoning (TIME 2010), P61, DOI 10.1109/TIME.2010.10
   Benerecetti M, 2016, THEOR COMPUT SCI, V625, P85, DOI 10.1016/j.tcs.2016.02.021
   Bernardi S, 2013, RELIAB ENG SYST SAFE, V120, P112, DOI 10.1016/j.ress.2013.06.032
   Bjerner D., 2003, P 4 S FORM METH RAIL
   Braunstein C, 2014, LECT NOTES COMPUT SC, V8829, P380, DOI 10.1007/978-3-319-11737-9_25
   CENELEC, 2011, EN50128 CENELEC
   CENELEC, 2003, EN50129 CENELEC
   Cimatti A., 2000, INT J SOFTW TOOLS TE
   Gentile Ugo, 2014, Formal Methods for Industrial Critical Systems. 19th International Conference, FMICS 2014. Proceedings: LNCS 8718, P170, DOI 10.1007/978-3-319-10702-8_12
   Glinz M., P ICSE 2002 INT WORK
   Hamon G., 2007, International Journal on Software Tools for Technology Transfer, V9, P447, DOI 10.1007/s10009-007-0049-7
   Harel D., 1996, ACM Transactions on Software Engineering and Methodology, V5, P293, DOI 10.1145/235321.235322
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Haxthausen A.E., 2015, FORMAL MODELING VERI, P82, DOI [10.1007/978-3-658-09994-74, DOI 10.1007/978-3-658-09994-74]
   Hierons RM, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1459352.1459354
   Jouault F, 2008, SCI COMPUT PROGRAM, V72, P31, DOI 10.1016/j.scico.2007.08.002
   Lanotte R., 2002, FUNDAM INF, V54, P237
   LEVESON NG, 1994, IEEE T SOFTWARE ENG, V20, P684, DOI 10.1109/32.317428
   Maggiolo-Schettini A, 2003, THEOR COMPUT SCI, V290, P465, DOI 10.1016/S0304-3975(01)00381-4
   Marrone S, 2015, COMPUT ELECTR ENG, V47, P275, DOI 10.1016/j.compeleceng.2015.07.011
   Marrone S, 2014, INT J SOFTW TOOLS TE, V16, P669, DOI 10.1007/s10009-014-0320-7
   Marrone S, 2013, INT J CRIT INFR PROT, V6, P217, DOI 10.1016/j.ijcip.2013.10.001
   Nardone R., 2014, FORMAL TECHNIQUES SA, P93
   Nardone R, 2016, COMM COM INF SC, V596, P121, DOI 10.1007/978-3-319-29510-7_7
   Peleska J, 2013, ELECTRON P THEOR COM, P3, DOI 10.4204/EPTCS.111.1
   Petrenko Alexandre, 2012, International Journal on Software Tools for Technology Transfer, V14, P383, DOI 10.1007/s10009-012-0240-3
   Pflugl H., 2013, ARTEMIS MAG, V14, P12
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   UIC, 2002, ERTMS ETCS CLASS SYS
   Utting M., 2007, PRACTICAL MODEL BASE
NR 38
TC 11
Z9 12
U1 0
U2 18
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
SI SI
BP 116
EP 153
DI 10.1016/j.scico.2016.09.002
PN 2
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EF1GC
UT WOS:000390072300003
OA hybrid
DA 2024-07-18
ER

PT J
AU Bygde, S
   Lisper, B
   Holsti, N
AF Bygde, Stefan
   Lisper, Bjorn
   Holsti, Niklas
TI Improved precision in polyhedral analysis with wrapping
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Abstract interpretation; Numerical abstract domains; Convex polyhedra;
   Widening; Wrapping
AB A Abstract interpretation using convex polyhedra is a common and powerful program analysis technique to discover linear relationships among variables in a program. A value analysis based on a polyhedral abstract domain can be very precise, thus reducing the number of false alarms when used to verify the absence of bugs in the code. However, the classical way of performing polyhedral analysis does not model the fact that values typically are stored as fixed-size binary strings and usually have wrap-around semantics in the case of overflows. In resource-constrained embedded systems, where 8 or 16 bit processors are used, wrapping behaviour may even be used intentionally to save instructions and execution time. Thus, to analyse such systems accurately and correctly, the wrapping has to be modelled.
   Simon and King [1] devised a technique to handle wrapping in polyhedral analysis in a sound way. However, their approach can sometimes yield large overapproximations. We show how the analysis can be made significantly more precise by simple means, thus making the approach more practically useful for program verification. An experimental evaluation shows that there indeed can be significant improvements in precision. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bygde, Stefan; Lisper, Bjorn] Malardalen Univ, Sch Innovat Design & Engn, SE-72123 Vasteras, Sweden.
   [Holsti, Niklas] Tidorum Ltd, Tiirasaarentie 32, FI-00200 Helsinki, Finland.
C3 Malardalen University
RP Lisper, B (corresponding author), Malardalen Univ, Sch Innovat Design & Engn, SE-72123 Vasteras, Sweden.
EM stefanbygde@gmail.com; bjorn.lisper@mdh.se; niklas.holsti@tidorum.fi
FU EU FP7 project APARTS [251413]; COST Action: Timing Analysis On
   Code-Level (TACLe) [IC1202]
FX This work was supported by the EU FP7 project APARTS, Grant Number
   251413, and by COST Action IC1202: Timing Analysis On Code-Level
   (TACLe).
CR Anand S, 2007, LECT NOTES COMPUT SC, V4424, P134
   Bagnara R, 2008, SCI COMPUT PROGRAM, V72, P3, DOI 10.1016/j.scico.2007.08.001
   Balakrishnan G, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749612
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2566, P85
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   Brauer J, 2011, LECT NOTES COMPUT SC, V6602, P97, DOI 10.1007/978-3-642-19718-5_6
   Bryant Randal, 2009, International Journal on Software Tools for Technology Transfer, V11, P95, DOI 10.1007/s10009-009-0101-x
   BYGDE S, 2008, P 8 INT WORKSH WORST, P9
   Bygde S, 2012, ELECTRON NOTES THEOR, V288, P3, DOI 10.1016/j.entcs.2012.10.003
   Clarke E, 2001, FORM METHOD SYST DES, V19, P7, DOI 10.1023/A:1011276507260
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Cousot Patrick, 1978, P 5 ACM SIGACT SIGPL, p84S96, DOI DOI 10.1145/512760.512770
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Ermedahl A., 2007, P 7 INT WORKSH WORST
   GRANGER P, 1991, LECT NOTES COMPUT SC, V493, P169
   GRANGER P, 1989, INT J COMPUT MATH, V30, P165, DOI 10.1080/00207168908803778
   Gustafsson J., 2005, P 10 IEEE INT WORKSH
   Gustafsson J., 2009, Proc. of the 9th International Workshop on Worst-Case Execution Time Analysis (WCET2009), P1
   Gustafsson J, 2006, REAL TIM SYST SYMP P, P57, DOI 10.1109/RTSS.2006.12
   Gustafsson Jan., 2010, WCET2010, P137
   Halbwachs N., 1993, Computer Aided Verification. 5th International Conference, CAV '93 Proceedings, P333
   Huber B., 2011, P 11 INT WORKSH WORS
   Lisper B., 2003, WORKSHOP WORST CASE, P77
   Mfiller-Olm M., 2007, ACM T PROGRAM LANG S, V29
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Nielson F., 2005, PRINCIPLES PROGRAM A
   Sen R, 2007, MEMOCODE'07: FIFTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P39
   Simon A, 2007, LECT NOTES COMPUT SC, V4634, P121
   Verdoolaege S, 2007, ALGORITHMICA, V48, P37, DOI 10.1007/s00453-006-1231-0
   Wilhelm R, 2008, ACM T EMBED COMPUT S, V7, DOI 10.1145/1347375.1347389
NR 30
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
BP 74
EP 87
DI 10.1016/j.scico.2016.07.006
PN 1
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EE2CJ
UT WOS:000389391000004
OA hybrid
DA 2024-07-18
ER

PT J
AU Lockefeer, L
   Williams, DM
   Fokkink, W
AF Lockefeer, Lars
   Williams, David M.
   Fokkink, Wan
TI Formal specification and verification of TCP extended with the Window
   Scale Option
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE mu CRL; Process algebra; Transmission control protocol; Window scale
   option; Sliding window protocol
ID BRANCHING TIME; PROTOCOL
AB We formally verify that TCP satisfies its requirements when extended with the Window Scale Option. With the aid of our mu CRL specification and the LTSmin toolset, we verify that our specification of unidirectional TCP Data Transfer extended with the Window Scale Option does not deadlock, and that its external behaviour is branching bisimilar to a FIFO queue for a significantly large instance. Separately, we verify that a connection may only be closed if both entities accept the CLOSE call from the Application Layer. Finally, we recommend a rewording of the specification regarding how a zero window is probed, ensuring deadlocks do not arise as a result of misinterpretation. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Lockefeer, Lars; Williams, David M.; Fokkink, Wan] Vrije Univ Amsterdam, Fac Sci, Dept Comp Sci, De Boelelaan 1081, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Fokkink, W (corresponding author), Vrije Univ Amsterdam, Fac Sci, Dept Comp Sci, De Boelelaan 1081, NL-1081 HV Amsterdam, Netherlands.
EM info@larslockefeer.nl; w.j.fokkink@vu.nl
OI Fokkink, Wan/0000-0001-7443-8978; Williams, David/0000-0002-5272-8058
CR [Anonymous], 1980, LNCS
   [Anonymous], LNCS
   [Anonymous], 1993, LECT NOTES COMPUTER, DOI DOI 10.1007/3-540-57208-26
   Badban B, 2005, FORM ASP COMPUT, V17, P342, DOI 10.1007/s00165-004-0070-0
   Badban B, 2008, CONCUR SYST ENGN SER, V66, P179, DOI 10.3233/978-1-58603-907-3-179
   BEZEM MA, 1994, COMPUT J, V37, P289, DOI 10.1093/comjnl/37.4.289
   Billington J., 2003, P 26 AUSTR COMP SCI, V16, P129
   Bishop S, 2005, ACM SIGCOMM COMP COM, V35, P265, DOI 10.1145/1090191.1080123
   Blom S., 2005, INT J SOFTW TOOLS TE, V7, P230
   Blom S., 2010, LNCS, V6174, P345
   Braden R., 1122 RFC
   Chkliaev D, 2003, LECT NOTES COMPUT SC, V2619, P113
   Floyd S., 1996, RFC 2018
   Fokkink Wan, 2007, AN EATCS SERIES
   Garavel Hubert, 2013, International Journal on Software Tools for Technology Transfer, V15, P89, DOI 10.1007/s10009-012-0244-z
   GROOTE JF, 1990, LECT NOTES COMPUT SC, V443, P626
   Han B, 2005, LECT NOTES COMPUT SC, V3536, P228
   Han B., 2002, P C APPL THEORY PETR, V12, P47
   Han B., 2004, Proc. 5th Workshop and Tutorial on Practical Use of Coloured Petri Nets and the CPN Tools (CPNWorkshop 2004), P57
   JACOBSON V, 1323 RFC
   Kozen D., 1932, LNCS, V140, P348
   KWIATKOWSKA MZ, 1989, INFORM SOFTWARE TECH, V31, P371, DOI 10.1016/0950-5849(89)90159-6
   Lockefeer Lars, 2014, Formal Methods for Industrial Critical Systems. 19th International Conference, FMICS 2014. Proceedings: LNCS 8718, P63, DOI 10.1007/978-3-319-10702-8_5
   Lockefeer L, 2013, THESIS
   Madelaine Eric., 1991, FORMAL DESCRIPTION T, VC-2, P495
   Mateescu R, 2003, SCI COMPUT PROGRAM, V46, P255, DOI 10.1016/S0167-6423(02)00094-1
   Murphy S. L., 1988, Computer Communication Review, V18, P88, DOI 10.1145/52325.52334
   Peled D.A., 2001, Software Reliability Methods
   Postel Jon., 1981, 793 RFC
   Ridge T, 2008, LECT NOTES COMPUT SC, V5014, P294, DOI 10.1007/978-3-540-68237-0_21
   Schieferdecker I., 1996, P COST 247 INT WORKS, P136
   Smith M. A. S., 1996, Formal Description Techniques IX. Theory, Application and Tools. IFIP TC6/6.1 International Conference on Formal Description Techniques IX/Protocol Specification, Testing and Verification XVI, P129
   Smith MA, 2002, IEEE ACM T NETWORK, V10, P193, DOI 10.1109/90.993301
   Smith Malcolm James, 1997, THESIS
   Stevens W, 1994, TCP/ IP Illustrated, V1
   Tanenbaum A.S., 2002, COMPUT NETW, VFourth
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
NR 37
TC 9
Z9 10
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2016
VL 118
BP 3
EP 23
DI 10.1016/j.scico.2015.08.005
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DX8JP
UT WOS:000384634200002
DA 2024-07-18
ER

PT J
AU Nguyen, T
   Nickovic, D
AF Nguyen, Thang
   Nickovic, Dejan
TI Assertion-based monitoring in practice - Checking correctness of an
   automotive sensor interface
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Assertion-based monitoring; Analog and mixed-signal verification; Case
   study; Temporal logic; Automotive airbag system
ID VERIFICATION; ROBUSTNESS; MODELS; ANALOG
AB This paper provides an evaluation of the assertion-based monitoring technology for mixed signal systems applied to a real-world case study from the automotive domain. We first motivate the case study by presenting the state-of-the-practice verification and validation work-flow typically used in the automotive industry. We identify the shortcomings of this work-flow, and propose a more rigorous and automated methodology based on monitoring correctness of simulated mixed signal designs with respect to Signal Temporal Logic (STL) assertions, which formalize the requirements from the design specification. We apply this assertion-based monitoring framework to check the correctness of a Distributed System Interface (DSI3) mixed-signal protocol implementation in a modern airbag system-on-chip application. We present all the relevant steps in our proposed work-flow and evaluate the results. We discuss potential benefits of the framework and identify its current shortcomings. Finally, we propose a number of future research directions based on the case study outcome. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Nguyen, Thang] Infineon Technol AG, Villach, Austria.
   [Nickovic, Dejan] AIT, Vienna, Austria.
C3 Infineon Technologies; Austrian Institute of Technology (AIT)
RP Nickovic, D (corresponding author), AIT, Vienna, Austria.
EM Thang.Nguyen@infineon.com; dejan.nickovic@ait.ac.at
OI Nickovic, Dejan/0000-0001-5468-0396
FU ARTEMIS Joint Undertaking [295311]; Austrian Research Promotion Agency
   FFG; MISTRAL project [A-1341-RT-GP]; IKT der Zukunft of Austrian FFG
   project HARMONIA [845631]
FX The research leading to these results has received funding from the
   ARTEMIS Joint Undertaking under grant agreement Nr. 295311 and the
   Austrian Research Promotion Agency FFG under the program "Forschung,
   Innovation and Technologie fur Informationstechnologien (FIT-IT)", the
   MISTRAL project A-1341-RT-GP coordinated by the European Defence Agency
   (EDA) and funded by 8 contributing Members (France, Germany, Italy,
   Poland, Austria, Sweden, the Netherlands and Luxembourg) in the
   framework of the Joint Investment Programme on Second Innovative
   Concepts and Emerging Technologies (JIP-ICET 2) and the IKT der Zukunft
   of Austrian FFG project HARMONIA (Nr. 845631).
CR Akazaki T, 2015, LECT NOTES COMPUT SC, V9207, P356, DOI 10.1007/978-3-319-21668-3_21
   Althoff M, 2011, ICCAD-IEEE ACM INT, P659, DOI 10.1109/ICCAD.2011.6105400
   ALUR R, 1995, THEOR COMPUT SCI, V138, P3, DOI 10.1016/0304-3975(94)00202-T
   Annapureddy Y, 2011, LECT NOTES COMPUT SC, V6605, P254, DOI 10.1007/978-3-642-19835-9_21
   [Anonymous], 262622011 ISO
   [Anonymous], FSTTCS LIPLCS SCH DA
   [Anonymous], DSI3 BUS STAND
   [Anonymous], 2015, HSCC 15, DOI [10.1145/2728606.2728633, DOI 10.1145/2728606.2728633]
   Asarin E, 2002, J ACM, V49, P172, DOI 10.1145/506147.506151
   Asarin Eugene, 2012, P 2 INT C RUNTIME VE, P147, DOI [DOI 10.1007/978-3-642-29860-8_12, DOI 10.1007/978-3-642-29860-812]
   Bartocci E., 2014, LNCS, V8711
   Bartocci E, 2015, THEOR COMPUT SCI, V587, P3, DOI 10.1016/j.tcs.2015.02.046
   Bartocci E, 2013, LECT N BIOINFORMAT, V8130, P164, DOI 10.1007/978-3-642-40708-6_13
   Basin D, 2015, J ACM, V62, DOI 10.1145/2699444
   Basin D, 2010, SACMAT 2010: PROCEEDINGS OF THE 15TH ACM SYMPOSIUM ON ACCESS CONTROL MODELS AND TECHNOLOGIES, P23, DOI 10.1145/1809842.1809849
   Bertrane J, 2005, LECT NOTES COMPUT SC, V3385, P97
   Brim L, 2013, ELECTRON P THEOR COM, P20, DOI 10.4204/EPTCS.125.2
   Brim L, 2014, INFORM COMPUT, V236, P52, DOI 10.1016/j.ic.2014.01.012
   Bufo S, 2014, LECT NOTES COMPUT SC, V8803, P391, DOI 10.1007/978-3-662-45231-8_30
   Dang T, 2004, LECT NOTES COMPUT SC, V3312, P21
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Dluhos P, 2012, ELECTRON P THEOR COM, P73, DOI 10.4204/EPTCS.92.6
   Dokhanchi A, 2014, LECT NOTES COMPUT SC, V8734, P231, DOI 10.1007/978-3-319-11164-3_19
   Donze Alexandre, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P92, DOI 10.1007/978-3-642-33386-6_9
   Donzé A, 2011, PLOS ONE, V6, DOI 10.1371/journal.pone.0024246
   Donzé A, 2010, LECT NOTES COMPUT SC, V6246, P92, DOI 10.1007/978-3-642-15297-9_9
   Donzé A, 2010, LECT NOTES COMPUT SC, V6174, P167, DOI 10.1007/978-3-642-14295-6_17
   Dreossi T, 2015, LECT NOTES COMPUT SC, V9058, P127, DOI 10.1007/978-3-319-17524-9_10
   Eisner C., 2008, P FORM METH COMP AID, P1
   Eisner C, 2006, INTEGR CIRCUIT SYST, P1
   Fainekos GE, 2012, P AMER CONTR CONF, P3567
   Fainekos GE, 2009, THEOR COMPUT SCI, V410, P4262, DOI 10.1016/j.tcs.2009.06.021
   Ferrère T, 2015, LECT NOTES COMPUT SC, V9207, P322, DOI 10.1007/978-3-319-21668-3_19
   Ferrère T, 2015, LECT NOTES COMPUT SC, V9364, P241, DOI 10.1007/978-3-319-24953-7_20
   Frehse G., 2011, COMPUTER AIDED VERIF, P379, DOI [DOI 10.1007/978-3-642-22110-1, 10.1007/978-3-642-22110-1_30]
   Frehse G, 2006, DES AUT TEST EUROPE, P255
   Gol EA, 2014, IEEE DECIS CONTR P, P108, DOI 10.1109/CDC.2014.7039367
   Havlicek J., 2011, 2011 Formal Methods in Computer-Aided Design (FMCAD), P155
   Hoxha B., 2014, INT WORKSH DES IMPL
   Jaksic S., 2015, P 13 ACM IEEE INT C
   Jones KD, 2010, FORM METHOD SYST DES, V36, P114, DOI 10.1007/s10703-009-0085-x
   Juniwal G., 2014, P INT C EMB SOFTW EM
   KOYMANS R, 1990, REAL-TIME SYST, V2, P255, DOI 10.1007/BF01995674
   Little S, 2007, LECT NOTES COMPUT SC, V4762, P114
   Maier O., 2008, PILLARS COMPUTER SCI, P415
   Maler O, 2004, LECT NOTES COMPUT SC, V3253, P152, DOI 10.1007/978-3-540-30206-3_12
   Maler Oded, 2013, International Journal on Software Tools for Technology Transfer, V15, P247, DOI 10.1007/s10009-012-0247-9
   Maler Oded., 1991, REAL TIME THEORY PRA, P447, DOI DOI 10.1007/BFB0032003
   Mobilia N, 2013, ELECTRON P THEOR COM, P92, DOI 10.4204/EPTCS.125.7
   Nickovic D, 2007, LECT NOTES COMPUT SC, V4763, P304
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Raman V., 2015, P 18 INT C HYBRID SY, P239, DOI DOI 10.1145/2728606.2728628
   Rizk A, 2008, LECT N BIOINFORMAT, V5307, P251, DOI 10.1007/978-3-540-88562-7_19
   Sankaranarayanan S, 2012, ANN ALLERTON CONF, P1610, DOI 10.1109/Allerton.2012.6483413
   Steinhorst S, 2008, DES AUT TEST EUROPE, P282
   Stoma S, 2013, PLOS COMPUT BIOL, V9, DOI 10.1371/journal.pcbi.1003056
   Nguyen T, 2014, SAE INT J PASSENG CA, V7, P125, DOI 10.4271/2014-01-0240
   Thang Nguyen, 2014, Formal Methods for Industrial Critical Systems. 19th International Conference, FMICS 2014. Proceedings: LNCS 8718, P16, DOI 10.1007/978-3-319-10702-8_2
   Ulus Dogan, 2014, Formal Modeling and Analysis of Timed Systems. 12th International Conference, FORMATS 2014. Proceedings. LNCS: 8711, P222, DOI 10.1007/978-3-319-10512-3_16
   Vijayaraghavan S., 2006, PRACTICAL GUIDE SYST
NR 60
TC 5
Z9 7
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2016
VL 118
BP 40
EP 59
DI 10.1016/j.scico.2015.11.002
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DX8JP
UT WOS:000384634200004
DA 2024-07-18
ER

PT J
AU Jacquet, JM
   Linden, I
   Darquennes, D
AF Jacquet, Jean-Marie
   Linden, Isabelle
   Darquennes, Denis
TI On the introduction of density in tuple-space coordination languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination; Service-oriented computing; Tuple spaces; Density;
   Expressivity
ID EXPRESSIVENESS; COMMUNICATION; CALCULUS; MODEL
AB Coordination languages have been proved very suitable for modeling and programming service-oriented applications. In particular, those based on tuple spaces offer an elegant way of making different components of such applications interact smoothly through the deposit and retrieval of tuples in a shared space. However, in their basic form, these languages only allow one tuple to be put at a time and, when more than one tuple matches a required one, the selection is made non-deterministically. This is obviously too weak to capture popularity or quality measures, which are nevertheless central in service-oriented applications. To that end, we propose an extension of a Linda-like language aiming at promoting the notion of density and, based on De Boer and Palamidessi's notion of modular embedding, study its expressiveness. We prove accordingly that it strictly increases the expressiveness of Linda while keeping the same implementation efficiency. We also compare it with languages based on multiset rewriting, such as Gamma, and establish that, although it is less expressive, it benefits from a much more efficient scheme. Finally we study the hierarchy of the sublanguages induced by considering subsets of tuple primitives and prove that it follows that of the Linda family of languages. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Jacquet, Jean-Marie; Darquennes, Denis] Univ Namur, Fac Comp Sci, Namur, Belgium.
   [Linden, Isabelle] Univ Namur, Dept Business Adm, Namur, Belgium.
C3 University of Namur; University of Namur
RP Darquennes, D (corresponding author), Univ Namur, Fac Comp Sci, Rue Grandgagnage 21, Namur, Belgium.
EM jean-marie.jacquet@unamur.be; isabelle.linden@unamur.be;
   denis.darquennes@unamur.be
RI Linden, Isabelle/H-5938-2015
OI Linden, Isabelle/0000-0001-8034-1857
CR Bonsangue Marcello M., 1999, SAC'99: Proceedings of the 1999 ACM Symposium on Applied Computing, P156, DOI DOI 10.1145/298151.298226
   Boreale M, 2015, MATH STRUCT COMP SCI, V25, P666, DOI 10.1017/S0960129512000953
   Bravetti M, 2005, THEOR COMPUT SCI, V346, P28, DOI 10.1016/j.tcs.2005.08.004
   Bravetti M, 2004, LECT NOTES COMPUT SC, V2949, P55
   Bravetti M, 2007, J LOGIC ALGEBR PROGR, V70, P3, DOI 10.1016/j.jlap.2006.05.002
   Brogi A, 2003, SCI COMPUT PROGRAM, V46, P71, DOI 10.1016/S0167-6423(02)00087-4
   Brogi A, 1999, LECT NOTES COMPUT SC, V1594, P134
   Brogi A., 1998, ELECTRONICAL NOTES T, V16, P61
   Brogi A, 2006, FUND INFORM, V73, P431
   Busi N, 1998, THEOR COMPUT SCI, V192, P167, DOI 10.1016/S0304-3975(97)00149-7
   Busi N., 1997, Electronic Notes in Theoretical Computer Science, V7, DOI 10.1016/S1571-0661(05)80467-0
   De Nicola R, 2007, THEOR COMPUT SCI, V382, P42, DOI 10.1016/j.tcs.2007.05.008
   DEBOER FS, 1994, INFORM COMPUT, V108, P128, DOI 10.1006/inco.1994.1004
   DEBOSSCHERE K, 1993, LOGIC PROGRAMM, P299
   Gorla D, 2008, INFORM COMPUT, V206, P931, DOI 10.1016/j.ic.2008.05.001
   Guidi C, 2006, LECT NOTES COMPUT SC, V4294, P327
   Jacquet J.-M., 2007, P 1 ERCIM WORKSHOP E, P107
   Jacquet J.-M., 2013, COMMUN COMPUT INF SC, V393
   Jacquet JM, 2001, NEW GENERAT COMPUT, V19, P23, DOI 10.1007/BF03037533
   Jongmans Sung-Shik T. Q., 2012, Service-Oriented and Cloud Computing. First European Conference, ESOCC 2012. Proceedings, P1, DOI 10.1007/978-3-642-33427-6_1
   Kitchin D, 2009, LECT NOTES COMPUT SC, V5522, P1, DOI 10.1007/978-3-642-02138-1_1
   Linden I, 2004, LECT NOTES COMPUT SC, V2949, P232
   Linden I., 2004, ELECTRONICAL NOTES T, V97, P125, DOI [10.1016/j.entcs.2004.04.034, DOI 10.1016/J.ENTCS.2004.04.034]
   Linden I, 2007, ELECTRON NOTES THEOR, V180, P71, DOI 10.1016/j.entcs.2006.10.047
   Pugliese R, 2012, J APPL LOGIC, V10, P2, DOI 10.1016/j.jal.2011.11.002
   Shapiro E., 1992, CONCUR '92. Third International Conference on Concurrency Theory. Proceedings, P486
   Tolksdorf R, 1998, SCI COMPUT PROGRAM, V31, P359, DOI 10.1016/S0167-6423(97)00027-0
   Viroli M, 2009, LECT NOTES COMPUT SC, V5521, P143, DOI 10.1007/978-3-642-02053-7_8
   ZAVATTARO G, 1998, ELECT NOTES THEOR CO, V16, P154, DOI DOI 10.1016/S1571-0661(04)00125-2
   Zavattaro G., 1998, ELECT T NUMER ANAL
NR 30
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 149
EP 176
DI 10.1016/j.scico.2015.10.011
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200009
OA hybrid
DA 2024-07-18
ER

PT J
AU Canavese, D
   Cesena, E
   Ouchary, R
   Pedicini, M
   Roversi, L
AF Canavese, D.
   Cesena, E.
   Ouchary, R.
   Pedicini, M.
   Roversi, L.
TI Light combinators for finite fields arithmetic
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Foundational Practical Aspects Resource Analysis (FOPARA)
CY MAY 19, 2011
CL Madrid, SPAIN
DE Lambda calculus; Finite fields arithmetic; Type assignments; Implicit
   computational complexity
AB This work completes the definition of a library which provides the basic arithmetic operations in binary finite fields as a set of functional terms with very specific features. Such a functional terms have type in Typeable Functional Assembly (TFA). TFA is an extension of Dual Light Affine Logic (DLAL). DIAL is a type assignment designed under the prescriptions of Implicit Computational Complexity (ICC), which characterises polynomial time costing computations.
   We plan to exploit the functional programming patterns of the terms in the library to implement cryptographic primitives whose running-time efficiency can be obtained by means of the least hand-made tuning as possible.
   We propose the library as a benchmark. It fixes a kind of lower bound on the difficulty of writing potentially interesting low cost programs inside languages that can express only computations with predetermined complexity. In principle, every known and future ICC compliant programming language for polynomially costing computations should supply a simplification over the encoding of the library we present, or some set of combinators of comparable interest and difficulty.
   We finally report on the applicative outcome that our library has and which is a reward we get by programming in the very restrictive scenario that TFA provides. The term of TFA which encodes the inversion in binary fields suggested us a variant of a known and efficient imperative implementation of the inversion itself given by Fong. Our variant, can outperform Fong's implementation of inversion on specific hardware architectures. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Canavese, D.; Ouchary, R.] Politecn Torino, Dipartimento Automat & Informat, I-10129 Turin, Italy.
   [Cesena, E.] Theneeds Inc, San Francisco, CA USA.
   [Pedicini, M.] Univ Rome Tre, Dipartimento Matemat & Fis, I-00146 Rome, Italy.
   [Roversi, L.] Univ Turin, Dipartimento Informat, I-10149 Turin, Italy.
C3 Polytechnic University of Turin; Roma Tre University; University of
   Turin
RP Canavese, D (corresponding author), Politecn Torino, Dipartimento Automat & Informat, I-10129 Turin, Italy.
EM daniele.canavese@polito.it; ec@theneeds.com; rachid.ouchary@polito.it;
   pedicini@mat.uniroma3.it; roversi@di.unito.it
RI Pedicini, Marco/K-3983-2012; Roversi, Luca/ABI-2818-2020; Roversi,
   Luca/C-9698-2011; Pedicini, Marco/L-9582-2019
OI Pedicini, Marco/0000-0002-9016-074X; Roversi, Luca/0000-0002-1871-6109;
   Roversi, Luca/0000-0002-1871-6109; Pedicini, Marco/0000-0002-9016-074X;
   Canavese, Daniele/0000-0002-4265-7743
CR ASPERTI A, 2002, ACM T COMPUT LOG, V3, P1
   Atassi V, 2007, LOG METH COMPUT SCI, V3, DOI 10.2168/LMCS-3(4:10)2007
   Avanzi R., 2005, HDB ELLIPTIC HYPEREL
   BACKUS J, 1978, COMMUN ACM, V21, P613, DOI 10.1145/359576.359579
   Baillot P, 2009, INFORM COMPUT, V207, P41, DOI 10.1016/j.ic.2008.08.005
   Canavese D, 2014, LECT NOTES COMPUT SC, V8552, P38, DOI 10.1007/978-3-319-12466-7_3
   Cesena E., 2012, LNCS, V7177, P19
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Fong K, 2004, IEEE T COMPUT, V53, P1047, DOI 10.1109/TC.2004.43
   Hutton G., 1999, Journal of Functional Programming, V9, P355, DOI 10.1017/S0956796899003500
   Pedicini M, 2007, ACM T COMPUT LOG, V8, DOI 10.1145/1243996.1243997
   Roversi L, 1999, LECT NOTES COMPUT SC, V1683, P469
NR 12
TC 1
Z9 1
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
SI SI
BP 365
EP 394
DI 10.1016/j.scico.2015.04.001
PN 3
PG 30
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DB5LY
UT WOS:000368556800002
OA Green Submitted, hybrid
DA 2024-07-18
ER

PT J
AU Besnard, L
   Bouakaz, A
   Gautier, T
   Le Guernic, P
   Ma, Y
   Talpin, JP
   Yu, HF
AF Besnard, Loic
   Bouakaz, Adnan
   Gautier, Thierry
   Le Guernic, Paul
   Ma, Yue
   Talpin, Jean-Pierre
   Yu, Huafeng
TI Timed behavioural modelling and affine scheduling of embedded software
   architectures in the AADL using Polychrony
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Dagstuhl Seminar on Architecture-Driven Semantic Analysis of Embedded
   Systems
CY JUL 01-06, 2012
CL GERMANY
DE Embedded systems; Software architectures; Formal methods; Model-based
   design
ID SIGNAL
AB High-level modelling languages and standards, such as Simulink, UML, SysML, MARTE and AADL (Architecture Analysis & Design Language), meet increasing adoption in the design of embedded systems in order to carry out system-level analysis, verification and validation (V&V) and architecture exploration, as early as possible. These analysis. V&V, architecture exploration techniques rely on mathematical foundations and formal methods in order to avoid semantics ambiguities in the design of safety-critical systems.
   In order to support integration validation, it is necessary to define a formal framework of virtual prototyping to integrate, verify, exercise and analyse the application code generated by modelling tools as early as possible and virtually integrate it with simulators of third-party middleware and hardware. Such a virtual prototyping platform makes it possible to validate the expected behaviour of the final application software and check that the resulting system indeed meets the specified performance requirements before the actual hardware even actually exists.
   In this paper, we present the definition, development and case-study validation of such a comprehensive framework, based on the synchronous paradigm and the polychronous model of computation and communication of its supportive open-source toolset: Polychrony. A longer-term aim of our work is to equip the AADL standard with an architecture-centric framework allowing for synchronous modelling, verification and synthesis of embedded software. (C) 2014 Published by Elsevier B.V.
C1 [Gautier, Thierry; Le Guernic, Paul; Talpin, Jean-Pierre] INRIA Rennes Bretagne Atlantique, F-35042 Rennes, France.
   [Besnard, Loic] IRISA CNRS, F-35042 Rennes, France.
   [Bouakaz, Adnan] Univ Rennes 1, F-35042 Rennes, France.
   [Yu, Huafeng] TOYOTA ITC USA, Mountain View, CA 94043 USA.
   [Ma, Yue] Itemis France SAS, F-92130 Issy Les Moulineaux, France.
C3 Universite de Rennes; Universite de Rennes; Centre National de la
   Recherche Scientifique (CNRS); Universite de Rennes
RP Talpin, JP (corresponding author), INRIA Rennes Bretagne Atlantique, 263 Ave Gen Leclerc, F-35042 Rennes, France.
OI Yu, Huafeng/0000-0003-0065-1340
CR [Anonymous], [No title captured]
   [Anonymous], 1994, Handbook of logic in computer science
   [Anonymous], 2019, OMG UML PROF MARTE
   [Anonymous], 1974, PROC IFIP C 74
   Audsley N.C., 1991, P 8 IEEE WORKSHOP RE, P133
   Bilsen G, 1996, IEEE T SIGNAL PROCES, V44, P397, DOI 10.1109/78.485935
   Blazewicz J., 1977, MODELING PERFORMANCE
   Bouakaz A., 2013, P 16 INT WORKSH SOFT, P58
   Bouakaz A., 2012, P 12 INT C APPL CONC
   Bouakaz A, 2013, ACM SIGPLAN NOTICES, V48, P133, DOI 10.1145/2499369.2465558
   Bouakaz Adnan, 2013, Thesis
   Bozzano M, 2011, COMPUT J, V54, P754, DOI 10.1093/comjnl/bxq024
   Buck J., 2002, READINGS HARDWARESOF, P527
   CHETTO H, 1990, REAL-TIME SYST, V2, P181, DOI 10.1007/BF00365326
   Chkouri M. Y, 2009, MODELS SOFTWARE ENG
   Cofer Darren, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P126, DOI 10.1007/978-3-642-28891-3_13
   Davis RI, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1978802.1978814
   Feiler P., 2007, FLOW LARENCY ANAL AR
   Forget Julien, 2010, Proceedings of the 16th IEEE Real-Time and Embedded Technology and Applications Symposium (RTAS 2010), P301, DOI 10.1109/RTAS.2010.26
   Gelade W, 2012, SIAM J COMPUT, V41, P160, DOI 10.1137/100814196
   Gilles O, 2010, IEEE INT C ENG COMP, P337, DOI [10.1109/ICECCS.2010.53, 10.1109/ICECCS.2010.26]
   IEEE, 2005, IEEE Std 1554-2005, P1
   Knijnenburg P., 1993, RUUCS9303
   Kountouris A., 1996, IEE C HARDW SOFTW CO
   Kozen D., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P214, DOI 10.1109/LICS.1991.151646
   Lasnier C., 2011, IEEE INT C ENG COMPL
   Le Guernic P, 2003, J CIRCUIT SYST COMP, V12, P261, DOI 10.1142/S0218126603000763
   LEE EA, 1987, IEEE T COMPUT, V36, P24, DOI 10.1109/TC.1987.5009446
   LEUNG JYT, 1982, PERFORM EVALUATION, V2, P237, DOI 10.1016/0166-5316(82)90024-4
   Ma Y., 2011, ELECT SYSTEM LEVEL S
   Mallet F, 2010, INNOV SYST SOFTW ENG, V6, P99, DOI 10.1007/s11334-009-0109-0
   Oleveczky P., 2010, FORMAL TECHNIQUES DI, V6117
   Potop-Butucaru D., 2007, COMPILING ESTEREL
   Ripoll I, 1996, REAL-TIME SYST, V11, P19, DOI 10.1007/BF00365519
   SAE Aerospace (Society of Automotive Engineers), AS5506A SAE AER
   Shukla SK, 2010, SYNTHESIS OF EMBEDDED SOFTWARE: FRAMEWORKS AND METHODOLOGIES FOR CORRECTNESS BY CONSTRUCTION, P1, DOI 10.1007/978-1-4419-6400-7
   Singhoff F., 2005, ACM SIGADA INT C ADA
   Smarandache I, 1997, LECT NOTES COMPUT SC, V1231, P233
   Talpin J.-P., 2013, DESIGN AUTOMATION TE
   Toom A., 2008, EUR C EMB REAL TIM S
   Yang Z., 2011, P 2011 16 IEEE INT C
   Yu H., 2011, ACM S APPL COMP SAC
   Zhang FX, 2009, IEEE T COMPUT, V58, P1250, DOI 10.1109/TC.2009.58
NR 43
TC 10
Z9 10
U1 0
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2015
VL 106
SI SI
BP 54
EP 77
DI 10.1016/j.scico.2014.05.014
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA CQ4RF
UT WOS:000360591600004
DA 2024-07-18
ER

PT J
AU Vidal, G
AF Vidal, German
TI Symbolic execution as a basis for termination analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program termination; Symbolic execution; Program analysis
ID PROGRAMS; PROOFS
AB Program termination is a relevant property that has been extensively studied in the context of many different formalisms and programming languages. Traditional approaches to proving termination are usually based on inspecting the source code. Recently, a new semantics-based approach has emerged, which typically follows a two-stage scheme: first, a finite data structure representing the computation space of the program is built; then, termination is analyzed by inspecting the transitions in this data structure using traditional, syntax-based techniques.
   Unfortunately, this approach is still specific to a programming language and semantics. In this work, we present instead a general, high-level framework that follows the semantics-based approach to proving termination. In particular, we focus on the first stage and advocate the use of symbolic execution, together with appropriate subsumption and abstraction operators, for producing a finite representation of the computations of a program. Hopefully, this higher level approach will provide useful insights for designing new semantics-based termination tools for particular programming languages. (C) 2015 Elsevier B.V. All rights reserved.
C1 Univ Politecn Valencia, DSIC, MiST, E-46022 Valencia, Spain.
C3 Universitat Politecnica de Valencia
RP Vidal, G (corresponding author), Univ Politecn Valencia, DSIC, MiST, E-46022 Valencia, Spain.
EM gvidal@dsic.upv.es
RI Vidal, German/B-2217-2014; Vidal, German/P-5548-2019
OI Vidal, German/0000-0002-1857-6951; 
FU EU (FEDER); Spanish Ministerio de Economia y Competitividad (Secretaria
   de Estado de Investigacion, Desarrollo e Innovacion)
   [TIN2013-44742-C4-1-R]; Generalitat Valenciana [PROMETEO/2011/052]
FX This work has been partially supported by the EU (FEDER) and the Spanish
   Ministerio de Economia y Competitividad (Secretaria de Estado de
   Investigacion, Desarrollo e Innovacion) under grant TIN2013-44742-C4-1-R
   and by the Generalitat Valenciana under grant PROMETEO/2011/052.
CR Albert E, 2002, NEW GENERAT COMPUT, V20, P3, DOI 10.1007/BF03037257
   Albert E, 2008, LECT NOTES COMPUT SC, V5382, P113, DOI 10.1007/978-3-540-92188-2_5
   Albert E, 2008, LECT NOTES COMPUT SC, V5051, P2, DOI 10.1007/978-3-540-68863-1_2
   Anand S, 2006, LECT NOTES COMPUT SC, V3925, P163
   Anand Saswat, 2009, International Journal on Software Tools for Technology Transfer, V11, P53, DOI 10.1007/s10009-008-0090-1
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   [Anonymous], 1960, Trans. Am. Math. Soc., DOI DOI 10.1090/S0002-9947-1960-0111704-1
   Arts T, 2000, THEOR COMPUT SCI, V236, P133, DOI 10.1016/S0304-3975(99)00207-8
   Baader Franz, 1998, TERM REWRITING ALL
   Brockschmidt M, 2011, LEIBNIZ INT PR INFOR, V10, P155, DOI 10.4230/LIPIcs.RTA.2011.155
   Brockschmidt M, 2010, LECT NOTES ARTIF INT, V6463, P17, DOI 10.1007/978-3-642-17172-7_2
   Clarke LoriA., 1976, Proc. of the 1976 annual conference, P488, DOI [10.1145/800191.805647, DOI 10.1145/800191.805647]
   Colon M. A., 2001, Tools and Algorithms for the Construction and Analysis of Systems. 7th International Conference, TACAS 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2031), P67
   Colon M. A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P442
   Cook B, 2011, COMMUN ACM, V54, P88, DOI 10.1145/1941487.1941509
   COUSOT P, 1992, LNCS, V631, P269
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   De Schreye D, 1994, J LOGIC PROGRAM, V20, P199, DOI 10.1016/0743-1066(94)90027-2
   DERSHOWITZ N, 1987, J SYMB COMPUT, V3, P69, DOI 10.1016/S0747-7171(87)80022-6
   Dershowitz Nachum, 1990, Handbook of Theoretical Computer Science, Volume B: Formal Models and Semantics, P243, DOI 10.1016/b978-0-444-88074-1.50011-1
   Falke S, 2011, LEIBNIZ INT PR INFOR, V10, P41, DOI 10.4230/LIPIcs.RTA.2011.41
   Giesl J., 2012, PPDP 2012, P1, DOI [DOI 10.1145/2370776.2370778, 10.1145/2370776.2370778]
   Giesl J, 2006, LECT NOTES ARTIF INT, V4130, P281
   Giesl J, 2011, ACM T PROGR LANG SYS, V33, DOI 10.1145/1890028.1890030
   Heizmann Matthias, 2013, Automated Technology for Verification and Analysis. 11th International Symposium, ATVA 2013. Proceedings: LNCS 8172, P365, DOI 10.1007/978-3-319-02444-8_26
   Henzinger TA, 2002, ACM SIGPLAN NOTICES, V37, P58, DOI 10.1145/565816.503279
   KING JC, 1976, COMMUN ACM, V19, P385, DOI 10.1145/360248.360252
   Lee CS, 2001, ACM SIGPLAN NOTICES, V36, P81, DOI 10.1145/373243.360210
   Leuschel M, 2002, LECT NOTES COMPUT SC, V2566, P379
   Leuschel M, 1998, ACM T PROGR LANG SYS, V20, P208, DOI 10.1145/271510.271525
   Lloyd J. W., 2012, Foundations of Logic Programming
   LLOYD JW, 1991, J LOGIC PROGRAM, V11, P217, DOI 10.1016/0743-1066(91)90027-M
   MARTENS B, 1995, P ICLP 95, P597
   Nishida N, 2010, APPL ALGEBR ENG COMM, V21, P177, DOI 10.1007/s00200-010-0122-4
   Otto C, 2010, LEIBNIZ INT PR INFOR, V6, P259, DOI 10.4230/LIPIcs.RTA.2010.259
   Plotkin G. D., 1972, Machine intelligence 7, P73
   Podelski A, 2004, IEEE S LOG, P32, DOI 10.1109/LICS.2004.1319598
   Podelski A, 2004, LECT NOTES COMPUT SC, V2937, P239
   Podelski A., ACM T PROGRAM LANG S, V29
   Ramsey FP, 1930, P LOND MATH SOC, V30, P264, DOI 10.1112/plms/s2-30.1.264
   Schneider-Kamp P, 2010, THEOR PRACT LOG PROG, V10, P365, DOI 10.1017/S1471068410000165
   Spoto F, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1709093.1709095
   Stix G, 2006, SCI AM, V295, P37, DOI 10.1038/scientificamerican1206-37
   Terese, 2003, CAMBRIDGE TRACTS THE, V55
   Vidal G., 2012, 2012 12th IEEE Working Conference on Source Code Analysis and Manipulation (SCAM 2012), P34, DOI 10.1109/SCAM.2012.13
   Vidal G, 2008, LECT NOTES COMPUT SC, V4989, P113
NR 46
TC 3
Z9 3
U1 0
U2 3
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2015
VL 102
BP 142
EP 157
DI 10.1016/j.scico.2015.01.007
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CE7UO
UT WOS:000352047500007
OA Green Published
DA 2024-07-18
ER

PT J
AU Fernández-Díaz, A
   Benac-Earle, C
   Fredlund, L
AF Fernandez-Diaz, A.
   Benac-Earle, C.
   Fredlund, L.
TI Adding distribution and fault tolerance to Jason
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Multi-agent systems; Fault tolerance; Jason programming language; Erlang
   programming language; eJason
ID AGENT
AB In this article we describe an extension of the multi-agent system programming language Jason with constructs for distribution and fault tolerance. This extension is completely integrated into Jason in the sense that distributing a Jason multi-agent system does not require the use of another programming language. This contrasts with the standard Java based Jason implementation, which often requires writing Java code in order to distribute Jason-based agent systems. These extensions to Jason are being implemented in eJason, an Erlang-based implementation of Jason.
   We introduce two different fault tolerance mechanisms that allow fault detection and recovery. A low-level agent monitoring mechanism allows a monitoring agent to detect, and possibly recover, when another agent experiences difficulties such as e.g. hardware failures or due to network partitioning.
   More novel is the second fault tolerance mechanism, supervision, whereby one agent acts as a supervisor to a second agent. The supervision mechanism is in addition to handling low-level faults such as the above, also capable of detecting higher-level failures such as e.g. "event overload" (an agent is incapable of timely handling all its associated events and plans) and "divergence" (an agent is not completing any iteration of its reasoning cycle). Moreover, mechanisms exist for another agent to inform a supervisor that one of its supervised agents is misbehaving.
   Although these extensions are inspired by the distribution and fault tolerance mechanisms of Erlang, due to the agent perspective, the details are quite different. For instance, the supervisor mechanism of eJason is much More capable than the supervisor behaviour of Erlang, corresponding to the more abstract/higher-level perspective offered by agent-oriented programming (Jason) compared with process-oriented programming (Erlang). As another example, from the perspective of agent programming we consider it natural to support the flexibility of the supervision trees, i.e. allow the evolution of supervision relations over time. For instance, the supervisor of an agent, as well as the supervision policy maintained for that same agent, may vary as the system evolves. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Fernandez-Diaz, A.; Benac-Earle, C.; Fredlund, L.] Univ Politecn Madrid, Fac Informat, DISIIS, Babel Grp, E-28040 Madrid, Spain.
C3 Universidad Politecnica de Madrid
RP Fernández-Díaz, A (corresponding author), Univ Politecn Madrid, Fac Informat, DISIIS, Babel Grp, E-28040 Madrid, Spain.
EM avalor@babel.ls.fi.upm.es; cbenac@babel.ls.fi.upm.es;
   lfredlund@babel.ls.fi.upm.es
RI Earle, Clara Benac/C-7402-2009; Benac-Earle, Clara/A-8678-2017; Earle,
   Clara Benac/JCE-6027-2023; Fredlund, Lars-Åke/AAA-9117-2019
OI Benac-Earle, Clara/0000-0002-8629-5289; Fredlund,
   Lars-Åke/0000-0002-8296-4609
CR Agha G., 1987, RES DIRECTIONS OBJEC, P49
   [Anonymous], 2000, Reasoning About Rational Agents
   [Anonymous], 2007, Developing Multi-Agent Systems with JADE
   Armstrong J., 2007, Programming Erlang: Software for a Concurrent World, V1st
   Bellifemine F, 2005, MU S ART SOC SIM ORG, V15, P125, DOI 10.1007/0-387-26350-0_5
   Bordini R., 2007, PROGRAMMING MULTIAGE
   Cesarini F., 2009, ERLANG PROGRAMMING
   Diaz A.F., 2012, P 10 INT WORKSHOP PR, P7
   Ductor S., 2011, 2011 IEEE/WIC/ACM International Joint Conferences on Web Intelligence (WI) and Intelligent Agent Technologies, P304, DOI 10.1109/WI-IAT.2011.206
   Fedoruk A., 2002, Proceedings of the First International Joint Conference on Autonomous Agents and Multiagent Systems, P737
   Fernandez A. Diaz, 2012, P 2 ED PROGR SYST LA, P95, DOI DOI 10.1145/2414639.2414651
   Hägg S, 1997, LECT NOTES ARTIF INT, V1286, P181, DOI 10.1007/BFb0030090
   Hoare C.A.R., 1985, INT SER COMPUT SCI
   Hübner JF, 2010, ANN MATH ARTIF INTEL, V59, P351, DOI 10.1007/s10472-010-9179-9
   Klein M, 2003, AUTON AGENT MULTI-AG, V7, P179, DOI 10.1023/A:1024145408578
   Klein M., 1999, Proceedings of the Third International Conference on Autonomous Agents, P62, DOI 10.1145/301136.301164
   Kumar S., 2000, Proceedings of the Fourth International Conference on Autonomous Agents, P459, DOI 10.1145/336595.337570
   Marin O., 2001, P 3 EUROPEAN RES SEM, P195
   Olsen MM, 2008, ARTIF INTELL, V172, P884, DOI 10.1016/j.artint.2007.10.015
   Potiron K, 2008, LECT NOTES ARTIF INT, V5118, P156, DOI 10.1007/978-3-540-85058-8_10
   Rao A. S., 1995, ICMAS-95 Proceedings. First International Conference on Multi-Agent Systems, P312
   Rao A. S., 1996, Agents Breaking Away. 7th European Workshop on Modelling Autonomous Agents in a Multi-Agent World, MAAMAW '96 Proceedings, P42, DOI 10.1007/BFb0031845
   Suna A., 2005, THESIS U PARIS 6
NR 23
TC 2
Z9 2
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 205
EP 232
DI 10.1016/j.scico.2014.01.007
PN 2
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LF
UT WOS:000347741000006
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Gómez, VU
   Ducasse, S
   D'Hondt, T
AF Gomez, Veronica Uquillas
   Ducasse, Stephane
   D'Hondt, Theo
TI Visually characterizing source code changes
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Source code; Visualizations; Change understanding
AB Revision Control Systems (e.g., SVN, Git, Mercurial) include automatic and advanced merging algorithms that help developers to merge their modifications with development repositories. While these systems can help to textually detect conflicts, they do not help to identify the semantic consequences of a change. Unfortunately, there is little support to help release masters (integrators) to take decisions about the integration of changes into the system release. Most of the time, the release master needs to read all the modified code, check the diffs to build an idea of a change, and dig for details from related unchanged code to understand the context and potential impact of some changes. As a result, such a task can be overwhelming. In this article we present a visualization tool to support integrators of object-oriented programs in comprehending changes. Our approach named Torch characterizes changes based on structural information, authors and symbolic information. It mixes text-based diff information with visual representation and metrics characterizing the changes. The current implementation of our approach analyses Smalltalk programs, and thus we describe our experiments applying it to Pharo, a large open-source system. We also report on the evaluations of our approach by release masters and developers of several open-source projects. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Gomez, Veronica Uquillas; D'Hondt, Theo] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
   [Gomez, Veronica Uquillas; Ducasse, Stephane] Univ Lille 1, INRIA Lille Nord Europe Res Ctr, Lab Informat Fondamentale Lille, RMoD Team, F-59655 Villeneuve Dascq, France.
C3 Vrije Universiteit Brussel; Universite de Lille
RP Ducasse, S (corresponding author), Univ Lille 1, INRIA Lille Nord Europe Res Ctr, Lab Informat Fondamentale Lille, RMoD Team, F-59655 Villeneuve Dascq, France.
EM vuquilla@vub.ac.be; stephane.ducasse@inria.fr; tjdhondt@vub.ac.be
FU Ministry of Higher Education and Research, Nord-Pas de Calais Regional
   Council; FEDER through the "Contrat de Projets Etat Region (CPER)''
FX This work was supported by Ministry of Higher Education and Research,
   Nord-Pas de Calais Regional Council and FEDER through the "Contrat de
   Projets Etat Region (CPER) 2007-2013".
CR [Anonymous], 26 IEEE INT C SOFTW
   Apel S., 2011, P 19 ACM SIGSOFT S 1, P190, DOI DOI 10.1145/2025113.2025141
   Asklund U., 1994, NORD WORKSH PROGR EN
   Berliner B., 1990, USENIX, P22
   Binkley D., 1995, ACM Transactions on Software Engineering and Methodology, V4, P3, DOI 10.1145/201055.201056
   Buffenbarger J., 1995, Software Configuration Management. ICSE SCM-4 and SCM-5 Workshops. Selected Papers, P153
   Coelho W., 2006, AOSD '06: Proceedings of the 5th international conference on Aspect-oriented software development, P158
   D'Ambros M, 2007, CSMR 2007: 11TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P333
   D'Ambros Marco., 2006, MINING SOFTWARE REPO, P26, DOI DOI 10.1145/1137983.1137992
   DAmbros M, 2010, P 1 WORKSHOP WEB 20, P14
   Dig D, 2008, IEEE T SOFTWARE ENG, V34, P321, DOI 10.1109/TSE.2008.29
   Dragan N., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P520, DOI 10.1109/ICSM.2011.6080822
   Dragan N, 2006, PROC IEEE INT CONF S, P24
   Dragan N, 2009, PROC IEEE INT CONF S, P567, DOI 10.1109/ICSM.2009.5306394
   Ducasse S, 2005, IEEE T SOFTWARE ENG, V31, P75, DOI 10.1109/TSE.2005.14
   Ducasse S, 2006, PROC IEEE INT CONF S, P203
   Ebraert P, 2008, WORK CONF REVERSE EN, P319, DOI 10.1109/WCRE.2008.43
   Elbaum S., 2000, Software Engineering Notes, V25, P102, DOI 10.1145/347636.348910
   Elbaum S., 2003, J SOFTWARE TESTING V
   Fabry J, 2011, CONF PROC INT SYMP C, P121, DOI 10.1109/ICPC.2011.11
   Fritz T., 2010, Proceedings of the 32nd International Conference on Software Engineering - Volume 1, ICSE '10, V1, P175
   Gomez Veronica Uquillas, 2010, Proceedings 17th Working Conference on Reverse Engineering (WCRE 2010), P55, DOI 10.1109/WCRE.2010.15
   Gómez VU, 2012, COMPUT LANG SYST STR, V38, P44, DOI 10.1016/j.cl.2011.11.001
   Haifeng Shen, 2004, Proceedings of the 28th Annual International Computer Software and Applications Conference. COMPSAC 2004, P293, DOI 10.1109/CMPSAC.2004.1342846
   Hunt J. W., 1976, 41 AT T BELL LAB INC
   Lanza M, 2003, IEEE T SOFTWARE ENG, V29, P782, DOI 10.1109/TSE.2003.1232284
   Lanza M., 2001, Proceedings of the 4th International Workshop on Principles of Software Evolution, P37
   LEBLANG DB, 1984, SIGPLAN NOTICES, V19, P104, DOI 10.1145/390011.808255
   Lindhom T., 2001, THESIS HELSINKI U TE
   Lippe E., 1992, SIGSOFT Software Engineering Notes, V17, P78, DOI 10.1145/142882.143753
   Lungu M, 2010, SCI COMPUT PROGRAM, V75, P264, DOI 10.1016/j.scico.2009.09.004
   Matthijssen Nick, 2010, Proceedings of the 18th IEEE International Conference on Program Comprehension (ICPC 2010), P216, DOI 10.1109/ICPC.2010.14
   Mens T, 2002, IEEE T SOFTWARE ENG, V28, P449, DOI 10.1109/TSE.2002.1000449
   Pfeiffer J.H., 2006, AOSD '06: Proceedings of the 5th international conference on Aspectoriented software development, P146
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   ROBBES R, 2008, THESIS U LUGANO SWIT
   ROBBES R, 2005, P ESUG 2005 13 INT S, P131
   Steyaert P, 1996, ACM SIGPLAN NOTICES, V31, P268, DOI 10.1145/236338.236363
   Storey MAD, 1997, PROCEEDINGS OF THE FOURTH WORKING CONFERENCE ON REVERSE ENGINEERING, P12, DOI 10.1109/WCRE.1997.624572
   Storey MAD, 1997, IEEE SYMPOSIUM ON INFORMATION VISUALIZATION, PROCEEDINGS, P38, DOI 10.1109/INFVIS.1997.636784
   Taenzer D., 1989, ECOOP '89. Proceedings of the 1989 European Conference on Object-Oriented Programming, P25
   THOMAS D, 1988, SIGPLAN NOTICES, V23, P135, DOI 10.1145/62084.62096
   TICHY WF, 1985, SOFTWARE PRACT EXPER, V15, P637, DOI 10.1002/spe.4380150703
   Westfechtel B., 1991, Proceedings of the 3rd International Workshop on Software Configuration Management, P68, DOI 10.1145/111062.111071
   WILDE N, 1992, IEEE T SOFTWARE ENG, V18, P1038, DOI 10.1109/TSE.1992.1263033
NR 45
TC 13
Z9 13
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 376
EP 393
DI 10.1016/j.scico.2013.08.002
PN 3
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LH
UT WOS:000347741200005
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Mongiovi, M
   Gheyi, R
   Soares, G
   Teixeira, L
   Borba, P
AF Mongiovi, Melina
   Gheyi, Rohit
   Soares, Gustavo
   Teixeira, Leopoldo
   Borba, Paulo
TI Making refactoring safer through impact analysis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 15th Brazilian Symposium on Programming Languages (SBLP)
CY SEP 26-30, 2011
CL Sao Paulo, BRAZIL
DE Refactoring; Change impact analysis
ID OBJECT-ORIENTED CODE; JAVA; TOOL
AB Currently most developers have to apply manual steps and use test suites to improve confidence that transformations applied to object-oriented (OO) and aspect-oriented (AO) programs are correct. However, it is not simple to do manual reasoning, due to the nontrivial semantics of OO and AO languages. Moreover, most refactoring implementations contain a number of bugs since it is difficult to establish all conditions required for a transformation to be behavior preserving. In this article, we propose a tool (SAFEREFACTORIMPACT) that analyzes the transformation and generates tests only for the methods impacted by a transformation identified by our change impact analyzer (SAFIRA). We compare SAFEREFACTORIMPACT with our previous tool (SAFEREFACTOR) with respect to correctness, performance, number of methods passed to the automatic test suite generator, change coverage, and number of relevant tests generated in 45 transformations. SAFEREFACTORIMPACT identifies behavioral changes undetected by SAFEREFACTOR. Moreover, it reduces the number of methods passed to the test suite generator. Finally, SAFEREFACTORIMPACT has a better change coverage in larger subjects, and generates more relevant tests than SAFEREFACTOR. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Mongiovi, Melina; Gheyi, Rohit; Soares, Gustavo] Univ Fed Campina Grande, Dept Comp & Syst, BR-58429900 Campina Grande, PB, Brazil.
   [Teixeira, Leopoldo; Borba, Paulo] Univ Fed Pernambuco, Informat Ctr, BR-50740540 Recife, PE, Brazil.
C3 Universidade Federal de Campina Grande; Universidade Federal de
   Pernambuco
RP Mongiovi, M (corresponding author), Univ Fed Campina Grande, Dept Comp & Syst, BR-58429900 Campina Grande, PB, Brazil.
EM melina@copin.ufcg.edu.br; rohit@dsc.ufcg.edu.br;
   gsoares@dsc.ufcg.edu.br; lmt@cin.ufpe.br; phmb@cin.ufpe.br
RI Teixeira, Leopoldo M/G-5937-2016; Borba, Paulo/C-5617-2013
OI Borba, Paulo/0000-0002-0381-2843; Mongiovi, Melina/0000-0002-9450-831X;
   Teixeira, Leopoldo/0000-0002-6154-1666; Gheyi, Rohit/0000-0002-5562-4449
CR [Anonymous], 2005, DESIGN PATTERNS ELEM
   [Anonymous], 2012, SOFTWARE TESTING VER
   Balaban I, 2005, ACM SIGPLAN NOTICES, V40, P265, DOI 10.1145/1103845.1094832
   Baresi L., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P281, DOI 10.1145/1810295.1810353
   BASILI VR, 1986, IEEE T SOFTWARE ENG, V12, P733, DOI 10.1109/TSE.1986.6312975
   Binkley D, 2005, PROC IEEE INT CONF S, P27
   Binkley D, 2006, IEEE T SOFTWARE ENG, V32, P698, DOI 10.1109/TSE.2006.95
   Borba P, 2004, SCI COMPUT PROGRAM, V52, P53, DOI 10.1016/j.scico.2004.03.003
   Coelho R, 2008, LECT NOTES COMPUT SC, V5142, P207, DOI 10.1007/978-3-540-70592-5_10
   Cole L., 2005, P FOAL 2005, P1
   Cole L., 2005, 4 INT C ASP OR SOFTW, P123, DOI DOI 10.1145/1052898.1052909
   Cornelio M., 2004, THESIS FEDERAL U PER
   Daniel B., 2007, P THE 6 JOINT M EURO, P185, DOI 10.1145/1287624.1287651
   Fraser Gordon, 2011, PROC 19 ACM SIGSOFT, P416, DOI 10.1145/2025113.2025179
   Fuhrer R, 2005, LECT NOTES COMPUT SC, V3586, P71
   Gligoric M., 2010, P 32 ACM IEEE INT C, P225, DOI 10.1145/1806799.1806835
   Gligoric M, 2013, LECT NOTES COMPUT SC, V7920, P629, DOI 10.1007/978-3-642-39038-8_26
   Goodenough J. B., 1975, SIGPLAN Notices, V10, P493, DOI 10.1145/390016.808473
   Hannemann J, 2002, ACM SIGPLAN NOTICES, V37, P161, DOI 10.1145/583854.582436
   Hannemann Jan., 2005, AOSD 05, P135
   Joanl F. B., 1987, Statistical Science, V2, P45, DOI [10.1214/ss/1177013437, DOI 10.1214/SS/1177013437]
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kim M., 2012, P ACM SIGSOFT 20 INT, P1, DOI DOI 10.1145/2393596.2393655
   KUNG D, 1994, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P202, DOI 10.1109/ICSM.1994.336774
   Laddad R., 2003, ASPECTJ ACTION PRACT
   Lahiri S., 2013, P 21 FDN SOFTW ENG F
   Lahiri Shuvendu K., 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P712, DOI 10.1007/978-3-642-31424-7_54
   Law J, 2003, PROC INT CONF SOFTW, P308, DOI 10.1109/ICSE.2003.1201210
   Leavens Gary T, 2006, SIGSOFT Softw. Eng. Notes, V31, P1, DOI [10.1145/1127878.1127884, DOI 10.1145/1127878.1127884]
   Li LF, 1996, PROCEEDINGS OF INTERNATIONAL WORKSHOP ON CSCW IN DESIGN, P171, DOI 10.1109/ICSM.1996.565004
   Malta MN, 2009, INFORM SOFTWARE TECH, V51, P138, DOI 10.1016/j.infsof.2008.02.001
   McKeeman William M., 1998, DIGIT TECH J, V10, P100
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Monteiro M., 2005, Proceedings of the 4th international conference on Aspect-oriented software development, P111
   Murphy GC, 2006, IEEE SOFTWARE, V23, P76, DOI 10.1109/MS.2006.105
   Murphy-Hill E, 2012, IEEE T SOFTWARE ENG, V38, P5, DOI 10.1109/TSE.2011.41
   Murphy-Hill E, 2009, PROC INT CONF SOFTW, P287, DOI 10.1109/ICSE.2009.5070529
   Opdyke W. F., 1992, Refactoring object-oriented frameworks
   Overbey J. L., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P303, DOI 10.1109/ASE.2011.6100067
   Pacheco C, 2007, PROC INT CONF SOFTW, P75
   Person Suzette, 2008, P 16 INT S FDN SOFTW, P226, DOI [DOI 10.1145/1453101.1453131, 10.1145/1453101.1453131]
   Rachatasumrit N, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P357, DOI 10.1109/ICSM.2012.6405293
   Raghavan S, 2004, PROC IEEE INT CONF S, P188, DOI 10.1109/ICSM.2004.1357803
   Rebelo H., 2009, SBLP 09, P117
   Rebêlo H, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P228
   Ren XX, 2004, ACM SIGPLAN NOTICES, V39, P432, DOI 10.1145/1035292.1029012
   Roberts D., 1999, Ph. D. Dissertation
   Robinson Brian, 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P23, DOI 10.1109/ASE.2011.6100059
   Schäfer M, 2010, ACM SIGPLAN NOTICES, V45, P286, DOI 10.1145/1932682.1869485
   Schäfer M, 2010, LECT NOTES COMPUT SC, V6183, P225, DOI 10.1007/978-3-642-14107-2_11
   Schäfer M, 2008, ACM SIGPLAN NOTICES, V43, P277, DOI 10.1145/1449955.1449787
   Schafer M., 2009, P 23 EUROPEAN C ECOO, P369, DOI [10.1007/978-3-642-03013-0_17, DOI 10.1007/978-3-642-03013-0_17]
   Schafer Max, 2008, P 3 WORKSH PROGR LAN, P67, DOI [10.1145/1481848.1481859., DOI 10.1145/1481848.1481859]
   SHAPIRO SS, 1965, BIOMETRIKA, V52, P591, DOI 10.1093/biomet/52.3-4.591
   Silva L, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P217, DOI 10.1109/SEFM.2008.29
   Soares G., 2011, 2011 IEEE 27th International Conference on Software Maintenance, P173, DOI 10.1109/ICSM.2011.6080784
   Soares G, 2013, J SYST SOFTWARE, V86, P1006, DOI 10.1016/j.jss.2012.10.040
   Soares G, 2013, IEEE T SOFTWARE ENG, V39, P147, DOI 10.1109/TSE.2012.19
   Soares G, 2010, IEEE SOFTWARE, V27, P52, DOI 10.1109/MS.2010.63
   Soares Gustavo., 2011, Proceedings of the 15th Brazilian Symposium on Programming Languages, SBLP, V11, P91
   Steimann F, 2009, LECT NOTES COMPUT SC, V5653, P419, DOI 10.1007/978-3-642-03013-0_19
   Taveira Julio Cesar, 2009, Proceedings of the 2009 23rd Brazilian Symposium on Software Engineering. SBES 2009, P22, DOI 10.1109/SBES.2009.21
   Tip F, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/949343.949308
   Tokuda L., 2001, Automated Software Engineering, V8, P89, DOI 10.1023/A:1008715808855
   van Deursen A., 2005, P WORKSH LINK ASP TE
   WILCOXON F, 1945, BIOMETRICS BULL, V1, P80, DOI 10.1093/jee/39.2.269
   Wloka J., 2008, 7th international conference on Aspect-oriented software development, P132, DOI DOI 10.1145/1353482.1353499
   Wloka J, 2010, IEEE SOFTWARE, V27, P66, DOI 10.1109/MS.2009.159
   Yang XJ, 2011, ACM SIGPLAN NOTICES, V46, P283, DOI 10.1145/1993316.1993532
   Yokomori R., 2011, P 10 ASP OR SOFTW DE, P215
   Zhang L, 2012, P 20 ACM SIGSOFT FDN
NR 71
TC 20
Z9 20
U1 0
U2 11
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2014
VL 93
SI SI
BP 39
EP 64
DI 10.1016/j.scico.2013.11.001
PN A
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AO7QS
UT WOS:000341548300004
DA 2024-07-18
ER

PT J
AU Hutchinson, J
   Whittle, J
   Rouncefield, M
AF Hutchinson, John
   Whittle, Jon
   Rouncefield, Mark
TI Model-driven engineering practices in industry: Social, organizational
   and managerial factors that lead to success or failure
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model driven engineering; Empirical software engineering; Industry
   practice
ID UML; UNDERSTANDABILITY; EXPERIENCES
AB In this article, we attempt to address the relative absence of empirical studies of model driven engineering (MDE) in two different but complementary ways. First, we present an analysis of a large online survey of MDE deployment and experience that provides some rough quantitative measures of MDE practices in industry. Second, we supplement these figures with qualitative data obtained from some semi-structured, in-depth interviews with MDE practitioners, and, in particular, through describing the practices of four commercial organizations as they adopted a model driven engineering approach to their software development practices. Using in-depth semi-structured interviewing, we invited practitioners to reflect on their experiences and selected four to use as exemplars or case studies. In documenting some details of their attempts to deploy model driven practices, we identify a number of factors, in particular the importance of complex organizational, managerial and social factors - as,opposed to simple technical factors - that appear to influence the relative success, or failure, of the endeavor. Three of the case study companies describe genuine success in their use of model driven development, but explain that as examples of organizational change management, the successful deployment of model driven engineering appears to require: a progressive and iterative approach; transparent organizational commitment and motivation; integration with existing organizational processes and a clear business focus. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Hutchinson, John; Whittle, Jon; Rouncefield, Mark] Univ Lancaster, Sch Comp & Commun, Lancaster LA1 4YW, England.
C3 Lancaster University
RP Hutchinson, J (corresponding author), Univ Lancaster, Sch Comp & Commun, Lancaster LA1 4YW, England.
EM johnhutchinson.uk@gmail.com; j.n.whittle@lancaster.ac.uk;
   m.rouncefield@lancaster.ac.uk
FU UK Engineering and Physical Sciences Research Council (EPSRC)
   [EP/H006249/1]; EPSRC [EP/H006249/1] Funding Source: UKRI
FX Our thanks go to the many MDE experts who agreed to speak to us about
   their experiences (although we have presented only four case studies,
   they have been chosen to represent much broader experiences). We also
   acknowledge the support of the UK Engineering and Physical Sciences
   Research Council (EPSRC) who funded this research: EP/H006249/1.
CR Afonso M., 2006, WORKSH MBD MOMPES
   Anda B, 2006, EMPIR SOFTW ENG, V11, P555, DOI 10.1007/s10664-006-9020-6
   [Anonymous], 2003, MOD DRIV DEV J2EE UT
   [Anonymous], 2004, MOD DRIV DEV J2EE UT
   Arisholm E., 2008, CEUR WORKSHOP P
   Arisholm E, 2006, IEEE T SOFTWARE ENG, V32, P365, DOI 10.1109/TSE.2006.59
   Biernacki P., 2011, J SOCIOLOGICAL METHO, V40
   Blanchette I, 2001, MEM COGNITION, V29, P730, DOI 10.3758/BF03200475
   Briand LC, 2005, IEEE T SOFTWARE ENG, V31, P833, DOI 10.1109/TSE.2005.105
   Cruz-Lemus JA, 2005, LECT NOTES COMPUT SC, V3713, P113, DOI 10.1007/11557432_9
   Cruz-Lemus JA, 2007, LECT NOTES COMPUT SC, V4802, P213
   Dobing B, 2006, COMMUN ACM, V49, P109, DOI 10.1145/1125944.1125949
   Forward A., 2008, WORKSH MOD SOFTW ENG, P27
   France R., 2007, FUTURE SOFTWARE ENG
   Frankel D.S., 2003, Model Driven Architecture: Applying MDA to Enterprise Computing
   Ganssle J., 2008, EMBEDDED        0921
   Genero M, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P207
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Grudin Jonathan, 1988, P 1988 ACM C COMPUTE, P85, DOI DOI 10.1145/62266.62273
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P633, DOI 10.1145/1985793.1985882
   Hutchinson J, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P471, DOI 10.1145/1985793.1985858
   Johnson-Laird PN, 2006, WE REASON
   Kramer J, 2007, COMMUN ACM, V50, P37
   Lange C.F.J., 2006, INT C SOFTW ENG
   MediaDev, 2005, WID GAP DEV PERC IMP
   Mohagheghi P, 2008, LECT NOTES COMPUT SC, V5095, P432, DOI 10.1007/978-3-540-69100-6_31
   Nugroho A., 2008, MODEL DRIVEN ENG LAN
   Razali R., 2007, C EV ASS SOFTW ENG E
   Segal J, 1996, EMPIRICAL STUDIES OF PROGRAMMERS: SIXTH WORKSHOP, P195
   Soley R., 2004, MDA J MODEL DRIVEN A
   Thomas D, 2004, IEEE SOFTWARE, V21, P15, DOI 10.1109/MS.2004.1293067
NR 31
TC 125
Z9 143
U1 1
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 144
EP 161
DI 10.1016/j.scico.2013.03.017
PN B
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CA
UT WOS:000337929100006
DA 2024-07-18
ER

PT J
AU Miñón, R
   Moreno, L
   Martínez, P
   Abascal, J
AF Minon, Raul
   Moreno, Lourdes
   Martinez, Paloma
   Abascal, Julio
TI An approach to the integration of accessibility requirements into a user
   interface development method
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Accessibility; User interface development method; Model driven
   development; User Interface Description Language
ID WEB SITES
AB It is a legal requirement in many countries to ensure accessibility for Web applications. Although there are numerous regulations and standards regarding accessibility in the development of user interfaces, accessibility is nevertheless quite difficult to achieve, let alone to maintain at a high level of quality throughout the development process. This difficulty is due to diverse factors including, but not limited to, the lack of proper development methods, authoring tools and accessibility training for user interface development professionals. In an attempt to offer a solution to these difficulties, this paper proposes a methodological approach for the integration of accessibility requirements into a user interface development method based on User Interface Description Language (UIDL) or, more specifically, on the USer Interface eXtensible Markup Language (UsiXML) framework. The proposed strategy involves the integration of accessibility requirements into design primitives of the user interface development method. This paper focuses on accessibility requirements related to navigation in the Task Model, Abstract User Interface Model and Transformation Model. The application of the approach shown for the SPA4USXML tool also includes a proof of concept and validation of the proposal. The study shows that accessibility requirements included at the design stage in the modelling of user interfaces can be systematized through mechanisms such as new transformation rules and the use of support tools such as SPA4USXML.As a result, the quality of accessibility can be guaranteed by taking advantage of developments in technologies based on User Interface Markup Languages such as UsiXML. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Minon, Raul; Abascal, Julio] Univ Basque Country, Lab HCI Special Needs, Donostia San Sebastian 20018, Spain.
   [Moreno, Lourdes; Martinez, Paloma] Univ Carlos III Madrid, Dept Comp, Leganes 28911, Spain.
C3 University of Basque Country; Universidad Carlos III de Madrid
RP Miñón, R (corresponding author), Univ Basque Country, Lab HCI Special Needs, Manuel Lardizabal 1, Donostia San Sebastian 20018, Spain.
EM raul.minon@ehu.es; lmoreno@inf.uc3m.es; paloma.martinez@inf.uc3m.es;
   julio.abascal@ehu.es
RI Moreno, Lourdes/E-5248-2011; Martínez, Paloma/AAE-5501-2020; Abascal,
   Julio/JBS-1157-2023
OI Moreno, Lourdes/0000-0002-9021-2546; Abascal, Julio/0000-0002-6551-1616;
   Minon, Raul/0000-0002-4319-0727; MARTINEZ, PALOMA/0000-0003-3013-3771
FU Department of Education, Universities and Research of the Basque
   Government; Research Network MAVIR [S2009/TIC-1542]; MULTIMEDICA Project
   [TIN2010-20644-C03-01]; Research Staff Training Programme of the
   Department of Education, Universities and Research of the Basque
   Government
FX This research work has been partly funded by the Department of
   Education, Universities and Research of the Basque Government and by the
   Research Network MAVIR (S2009/TIC-1542 (www.mavir.net), and MULTIMEDICA
   Project (TIN2010-20644-C03-01). In addition, RM enjoys a PhD scholarship
   from the Research Staff Training Programme of the Department of
   Education, Universities and Research of the Basque Government. We thank
   the INREDIS project, which has been the foundation for this work. We
   also want to thank the members of the ITEA Project for providing us with
   the documents of the UsiXML specification.
CR Abascal J, 2011, ASSETS 11: PROCEEDINGS OF THE 13TH INTERNATIONAL ACM SIGACCESS CONFERENCE ON COMPUTERS AND ACCESSIBILITY, P187
   [Anonymous], 13 INT WORLD WID WEB
   [Anonymous], 2008, World Population Prospects, the 2008 Revision
   [Anonymous], WAI WEB ACC EV TOOLS
   [Anonymous], PORT MOD ET
   [Anonymous], 2008, ACCESSIBLE IS PUBLIC
   [Anonymous], BARR INF VER BITV 2
   [Anonymous], WAI WEB CONT ACC GUI
   [Anonymous], INT C COMP INF SCI I
   Arrue M, 2008, J UNIVERS COMPUT SCI, V14, P2699
   Bohman P., 2005, W4A '05 Proceedings of the 2005 International Cross-Disciplinary Workshop on Web Accessibility, P85, DOI DOI 10.1145/1061811.1061828
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   Ceri S, 2007, COMMUN ACM, V50, P55, DOI 10.1145/1232743.1232748
   Freire AP, 2007, SIGDOC'07: PROCEEDINGS OF THE 25TH ACM INTERNATIONAL CONFERENCE ON DESIGN OF COMMUNICATION, P162
   Guerrero-García J, 2009, LA-WEB: 2009 LATIN AMERICAN WEB CONGRESS, P36, DOI 10.1109/LA-WEB.2009.40
   Harper S, 2007, J WEB SEMANT, V5, P175, DOI 10.1016/j.websem.2007.05.001
   ISO, 2012, 40500 ISOIEC DIS
   ISO, 2475122008 ISOIEC
   ISO, ISO 9241-171:2008
   Lazar J, 2004, COMPUT HUM BEHAV, V20, P269, DOI 10.1016/j.chb.2003.10.018
   Limbourg Q, 2005, LECT NOTES COMPUT SC, V3425, P200
   Martín A, 2010, WORLD WIDE WEB, V13, P419, DOI 10.1007/s11280-010-0091-3
   Meskens J., 2008, WORK C ADV VIS INT, DOI DOI 10.1145/1385569.1385607
   Michotte B, 2008, FOURTH INTERNATIONAL CONFERENCE ON AUTONOMIC AND AUTONOMOUS SYSTEMS (ICAS 2008), P15, DOI 10.1109/ICAS.2008.29
   Minon R., 2012, ACCESSIBILITY ASPECT
   MONTERO F, 2006, P 6 INT C COMP AID D, P245
   Montero F., 2010, Proc. of the 1st Workshop on USer Interface eXtensible Markup Language UsiXML2010, P39
   Moreno L., 2010, THESIS U CARLOS 3 MA
   Moreno L., 2005, DC INT C DUBL COR ME, P87
   Moreno L, 2011, COMPUTER, V44, P18, DOI 10.1109/MC.2010.370
   Narasimhan Nirmita, WEB ACCESSIBILITY PO
   Nykanen O., 2006, INT DES ALL C ROV FI
   Olalere A, 2011, GOV INFORM Q, V28, P303, DOI 10.1016/j.giq.2011.02.002
   Plessers Peter., 2005, P 14 INT C WORLD WID, P353, DOI DOI 10.1145/1060745.1060799
   Sloan D., 2006, P 2006 INT CROSS DIS, P121, DOI DOI 10.1145/1133219.1133242
   Vigo M, 2011, INTERACT COMPUT, V23, P137, DOI 10.1016/j.intcom.2011.01.001
   W3C, 2012, WEB ACC IN WAI TECHN
   W3C, 2005, MOD BAS US INT INC G
   W3C, 2011, WEB ACC IN WAI
   W3C WAI Web Content Accessibility Guidelines (WCAG) 2.0., 2008, WAI WEB CONT ACC GUI
   Xiong J, 2008, J WEB ENG, V7, P281
NR 41
TC 20
Z9 27
U1 1
U2 25
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2014
VL 86
SI SI
BP 58
EP 73
DI 10.1016/j.scico.2013.04.005
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AG7OW
UT WOS:000335608500005
OA Bronze
DA 2024-07-18
ER

PT J
AU Backhouse, R
AF Backhouse, Roland
TI First-past-the-post games
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Algorithmic problem solving; Penney-Ante; Regular language;
   Probabilistic game; Generating function
AB Informally, a first-past-the-post game is a (probabilistic) game where the winner is the person who predicts the event that occurs first among a set of events. Examples of first-past-the-post games include so-called block and hidden patterns and the Penney-Ante game invented by Walter Penney. We formalise the abstract notion of a first-past-the-post game, and the process of extending a probability distribution on symbols of an alphabet to the plays of a game. We establish a number of properties of such games, for example, the property that an incomplete first-past-the-post game is also a first-past-the-post game. Penney-Ante games are multi-player games characterised by a collection of regular, prefix-free languages. Analysis of such games is facilitated by a collection of simultaneous (nonlinear) equations in languages. Essentially, the equations are due to Guibas and Odlyzko. However, they did not formulate them as equations in languages but as equations in generating functions detailing lengths of words. For such games, we show how to use the equations in languages to calculate the probability of winning and how to calculate the expected length of a game for a given outcome. We also exploit the properties of first-past-the-post games to show how to calculate the probability of winning in the course of a play of the game. In this way, we avoid the construction of a deterministic finite-state machine or the use of generating functions, the two methods traditionally used for the task.
   We observe that Aho and Corasick's generalisation of the Knuth-Morris-Pratt pattern-matching algorithm can be used to construct the deterministic finite-state machine that recognises the language underlying a Penney-Ante game. The two methods of calculating the probabilities and expected values, one based on the finite-state machine and the other based on the non-linear equations in languages, have been implemented and verified to yield the same results. (C) 2013 Elsevier B.V. All rights reserved.
C1 Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
C3 University of Nottingham
RP Backhouse, R (corresponding author), Univ Nottingham, Sch Comp Sci, Nottingham NG8 1BB, England.
EM roland.backhouse@nottingham.ac.uk
OI Backhouse, Roland/0000-0002-0140-8089
CR Aho Alfred V., 1975, COMMUNICATIONS ACM, V18
   [Anonymous], 2007, UMAP J
   [Anonymous], 1989, Concrete mathematics: a foundation for computer science
   Backhouse R., 1975, THESIS U LONDON
   Backhouse R., 1986, Program construction and verification
   Backhouse R., 1977, LNCS, V52, P61
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Chrzastowski-Wachtel Piotr, 2005, LECT NOTES ARTIF INT, V3301, P131
   Collings, 1982, I MATH, V18, P227
   Conway J.H., 1971, Regular Algebra and Finite Machines
   Flajolet P., 2009, Analytic Combinatorics, Vfirst
   GARDNER M, 1974, SCI AM, V231, P120
   Gries D., 1993, LOGICAL APPROACH DIS
   GUIBAS LJ, 1981, J COMB THEORY A, V30, P183, DOI 10.1016/0097-3165(81)90005-4
   Knuth D.E., 1974, SIAM J COMPUT, V6, P325
   Nhu Loan Ngoc Do, 2012, THESIS U NOTTINGHAM
   Noonan J, 1999, J DIFFER EQU APPL, V5, P355, DOI 10.1080/10236199908808197
   Penney W., 1969, J RECREATIONAL MATH, V2, P241
   SOLOVEV AD, 1966, THEOR PROBAB APPL+, V11, P276, DOI 10.1137/1111022
   TARJAN RE, 1981, J ACM, V28, P577, DOI 10.1145/322261.322272
   Winkler P, 2013, COMMUN ACM, V56, P112, DOI 10.1145/2408776.2408800
NR 21
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2014
VL 85
SI SI
BP 166
EP 203
DI 10.1016/j.scico.2013.07.007
PN B
PG 38
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KX
UT WOS:000350618700005
OA hybrid
DA 2024-07-18
ER

PT J
AU Philippaerts, P
   Mühlberg, JT
   Penninckx, W
   Smans, J
   Jacobs, B
   Piessens, F
AF Philippaerts, Pieter
   Muhlberg, Jan Tobias
   Penninckx, Willem
   Smans, Jan
   Jacobs, Bart
   Piessens, Frank
TI Software verification with VeriFast: Industrial case studies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software verification; Industrial case studies; VeriFast
ID SHAPE-ANALYSIS; CHECKING; SYSTEM
AB In this article, we present a series of four industrial case studies in software verification. We applied VeriFast, a sound and modular software verifier based on separation logic, to two Java Card smart card applets, a Linux device driver, and an embedded Linux network management component, the latter two written in C. Our case studies have been carefully selected so as to evaluate the industrial applicability of VeriFast. We focus on proving the absence of safety violations, e.g., that the programs do not perform illegal operations such as dividing by zero or illegal memory accesses. Yet, given the sensitive application environment of our case studies, these safety properties typically have security implications. In this article we give a detailed description of the VeriFast approach to software verification based on two of the above case studies, one in Java and one in C. Finally, we draw conclusions on the overall feasibility of using VeriFast to verify software components in industrial domains that have stringent requirements on reliability and security. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Philippaerts, Pieter; Muhlberg, Jan Tobias; Penninckx, Willem; Smans, Jan; Jacobs, Bart; Piessens, Frank] Katholieke Univ Leuven, iMinds DistriNet, B-3001 Louvain, Belgium.
C3 IMEC; KU Leuven
RP Philippaerts, P (corresponding author), Katholieke Univ Leuven, iMinds DistriNet, Celestijnenlaan 200A, B-3001 Louvain, Belgium.
EM Pieter.Philippaerts@cs.kuleuven.be
RI Piessens, Frank/B-1695-2014; Jacobs, Bart/B-1271-2014
OI Philippaerts, Pieter/0000-0002-0940-8446; Jacobs,
   Bart/0000-0002-3605-249X; Muehlberg, Jan Tobias/0000-0001-5035-0576
FU IWT; Research Fund KU Leuven; EU; Prevention of and Fight against Crime
   Programme of the European Union (B-CCENTRE); Microsoft Research
   Cambridge as part of the Verified Software Initiative
FX We thank the editors and anonymous reviewers of Science of Computer
   Programming, AVoCS 2011 and NFM 2012 for their valuable comments on this
   article and the previously published extended abstracts, respectively.
   This research is partially funded by IWT, by the Research Fund KU
   Leuven, and by the EU FP7 projects SecureChange and NESSoS. Our work was
   carried out with financial support from the Prevention of and Fight
   against Crime Programme of the European Union (B-CCENTRE). Jan Smans is
   a postdoctoral fellow of the Fund for Scientific Research Flanders
   (FWO). We acknowledge support from Microsoft Research Cambridge as part
   of the Verified Software Initiative.
CR Ahrendt W., 2005, Softw. Syst. Model., V4, P32
   [Anonymous], 2007, P 22 IEEE ACM INT C, DOI [DOI 10.1145/1321631.1321719, 10.1145/1321631.1321719]
   [Anonymous], 2008, 100312008 IEEE
   [Anonymous], 2011, JAV CARD TECHN
   [Anonymous], 2011, 98992011 ISOIEC
   Ball T., 2006, Operating Systems Review, V40, P73, DOI 10.1145/1218063.1217943
   Berdine J, 2005, LECT NOTES COMPUT SC, V3780, P52
   Berdine J, 2007, LECT NOTES COMPUT SC, V4590, P178
   Bornat R, 2005, ACM SIGPLAN NOTICES, V40, P259, DOI 10.1145/1047659.1040327
   Brotherston J, 2008, ACM SIGPLAN NOTICES, V43, P101, DOI 10.1145/1328897.1328453
   Calcagno C, 2007, LECT NOTES COMPUT SC, V4634, P233
   Calcagno C, 2009, ACM SIGPLAN NOTICES, V44, P289, DOI 10.1145/1594834.1480917
   Cata~no N., 2002, FME 2002, V2391, P272
   Clarke E, 2003, J ACM, V50, P752, DOI 10.1145/876638.876643
   Cohen E, 2009, LECT NOTES COMPUT SC, V5674, P23, DOI 10.1007/978-3-642-03359-9_2
   Cook B, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P265
   De Cock D., 2004, LECT NOTES COMPUTER, V3093, P621
   Distefano D, 2006, LECT NOTES COMPUT SC, V3920, P287
   Distefano D, 2009, LECT NOTES COMPUT SC, V5825, P1, DOI 10.1007/978-3-642-04570-7_1
   Distefano D, 2008, ACM SIGPLAN NOTICES, V43, P213, DOI 10.1145/1449955.1449782
   Filliâtre JC, 2007, LECT NOTES COMPUT SC, V4590, P173
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Gomes B.E.G., 2005, ENTCS, V184, P81
   Gotsman A, 2007, LECT NOTES COMPUT SC, V4807, P19
   Heiser G., 2007, SIGOPS Oper. Syst. Rev, V41, P3, DOI [DOI 10.1145/1278901.1278904, 10.1145/1278901.1278904]
   Henzinger T.A., 2002, LNCS, V2402, P382
   Huisman M, 2004, LECT NOTES COMPUT SC, V2984, P84
   Jacobs B, 2011, LECT NOTES COMPUT SC, V6617, P41, DOI 10.1007/978-3-642-20398-5_4
   Jacobs B, 2010, LECT NOTES COMPUT SC, V6461, P304, DOI 10.1007/978-3-642-17164-2_21
   Jacobs B, 2011, ACM SIGPLAN NOTICES, V46, P271, DOI 10.1145/1925844.1926417
   Kim M, 2009, LECT NOTES COMPUT SC, V5902, P251
   Leinenbach D, 2009, LECT NOTES COMPUT SC, V5850, P806, DOI 10.1007/978-3-642-05089-3_51
   Leino K.R.M., 2000, ESC JAVA USERS MANUA
   Mostowski W., 2010, LNCS, V6527, P17
   Mostowski W., 2007, INT VER WORKSH VERIF
   Mühlberg JT, 2007, LECT NOTES COMPUT SC, V4346, P211
   Muhlberg JT, 2009, LECT NOTES COMPUT SC, V5902, P306, DOI 10.1007/978-3-642-10452-7_21
   O'Hearn P., 2001, Computer Science Logic. 15th International Workshop, CSL 2001 10th Annual Conference of the EACSL. Proceedings (Lecture Notes in Computer Science Vol.2142), P1
   Parkinson M., 2007, INT WORKSH AL CONF O
   Penninckx Willem, 2012, NASA Formal Methods. Proceedings of the 4th International Symposium, NFM 2012, P210, DOI 10.1007/978-3-642-28891-3_21
   Philippaerts P., 2011, P 11 INT WORKSH AUT, V46, P1
   Post H, 2009, SOFTW TEST VERIF REL, V19, P155, DOI 10.1002/stvr.399
   Schmitt PH, 2007, SEFM 2007: FIFTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P47, DOI 10.1109/SEFM.2007.30
   Vogels F, 2011, LECT NOTES COMPUT SC, V6722, P319, DOI 10.1007/978-3-642-21461-5_21
   Woodcock J, 2009, ACM COMPUT SURV, V41, DOI 10.1145/1592434.1592436
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
NR 46
TC 24
Z9 27
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 2
PY 2014
VL 82
SI SI
BP 77
EP 97
DI 10.1016/j.scico.2013.01.006
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AB5VR
UT WOS:000331857300006
OA hybrid, Green Accepted
DA 2024-07-18
ER

PT J
AU Paz-Lopez, A
   Varela, G
   Becerra, JA
   Vazquez-Rodriguez, S
   Duro, RJ
AF Paz-Lopez, A.
   Varela, G.
   Becerra, J. A.
   Vazquez-Rodriguez, S.
   Duro, R. J.
TI Towards ubiquity in ambient intelligence: User-guided component mobility
   in the HI<SUP>3</SUP> architecture
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ambient intelligence; Ubiquitous computing; Mobility; Service
   collaboration; Smartphone
ID SERVICES
AB Ambient Intelligence (AmI) systems need to be as transparent as possible, that is, their users should perceive only the effects of the features presented to them and, in some cases, some kind of interface. They should not be conscious of how these features are implemented, from a hardware or from a software point of view.
   In order to obtain such a high degree of transparency, it is necessary for the system to be able to provide its services regardless of location, adapting to the environment and the context in general and to the available hardware more specifically. This is known as ubiquity, and to achieve it requires considering many aspects, from security and privacy to system interoperability. This paper is mainly focused on the development of two elements related to ubiquity: physical migration of components between different platforms together with their associated runtime state, and the adaptation of those components to the destination platform and physical environment.
   These solutions are being addressed within our efforts for the development of a general-purpose middleware for Ambient Intelligence in the framework of the HI3 project. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Paz-Lopez, A.; Varela, G.; Becerra, J. A.; Vazquez-Rodriguez, S.; Duro, R. J.] Univ A Coruna, Integrated Grp Engn Res, Ferrol, Spain.
C3 Universidade da Coruna
RP Paz-Lopez, A (corresponding author), Univ A Coruna, Integrated Grp Engn Res, Ferrol, Spain.
EM alpaz@udc.es; gervasio.varela@udc.es
RI Fernández, Richard José Duro/R-5084-2019; Becerra Permuy, José
   Antonio/E-1006-2012; Paz-Lopez, Alejandro/R-5471-2018
OI Becerra Permuy, José Antonio/0000-0002-3259-3416; Paz-Lopez,
   Alejandro/0000-0003-4952-7308; Varela, Gervasio/0000-0002-7301-5348;
   Duro, Richard J./0000-0002-6807-524X
CR Aglets, JAV MOB AG PLATF LIB
   Aguilera U., 2010, 4 INT S UB COMP AMB, P229
   [Anonymous], SEM MARK WEB SERV
   Balme L, 2004, LECT NOTES COMPUT SC, V3295, P291
   Ben Mokhtar S, 2007, J SYST SOFTWARE, V80, P1941, DOI 10.1016/j.jss.2007.03.002
   Bourges-Waldegg D, 2005, 2005 SYMPOSIUM ON APPLICATIONS AND THE INTERNET, PROCEEDINGS, P54, DOI 10.1109/SAINT.2005.63
   Cucurull J, 2010, COMPUT COMMUN, V33, P2203, DOI 10.1016/j.comcom.2010.08.005
   Cucurull J, 2009, J SYST SOFTWARE, V82, P1927, DOI 10.1016/j.jss.2009.06.038
   Gal A, 2008, LECT NOTES COMPUT SC, V4891, P176
   Georgantas N, 2010, HANDBOOK OF AMBIENT INTELLIGENCE AND SMART ENVIRONMENTS, P1139, DOI 10.1007/978-0-387-93808-0_42
   Jade, JAVA AG DEV FRAM
   Lange DB, 1999, COMMUN ACM, V42, P88, DOI 10.1145/295685.298136
   Rodriguez JM, 2010, SCI COMPUT PROGRAM, V75, P1001, DOI 10.1016/j.scico.2010.01.002
   Martin D, 2007, WORLD WIDE WEB, V10, P243, DOI 10.1007/s11280-007-0033-x
   Pan G., 2010, IEEE INTELLIGENT SYS
   Pan G, 2011, IEEE INTELL SYST, V26, P50, DOI 10.1109/MIS.2010.32
   Papazoglou MP, 2008, INT J COOP INF SYST, V17, P223, DOI 10.1142/S0218843008001816
   Paz-Lopez A., 2008, 3 S UB COMP AMB INT, P11
   Paz-Lopez A., 2008, P AITAML 2008, P77
   Preuveneers D, 2008, LECT NOTES COMPUT SC, V5061, P46, DOI 10.1007/978-3-540-69293-5_6
   Rellermeyer J., 2006, THESIS
   Roman D, 2005, APPL ONTOL, V1, P77
   Roman M., 2002, IEEE Pervasive Computing, V1, P74, DOI 10.1109/MPRV.2002.1158281
   ROMAN M, 2002, 1 INT C MOB UB MULT
   Song X, 2007, 13TH IEEE INTERNATIONAL CONFERENCE ON EMBEDDED AND REAL-TIME COMPUTING SYSTEMS AND APPLICATIONS, PROCEEDINGS, P249, DOI 10.1109/RTCSA.2007.48
   Sousa J. P., 2002, Software Architecture. Systems Design, Development and Maintenance. IFIP 17th World Computer Congress - TC2 Stream/ 3rd Working IEEE/IFIP Conference on Software Architecture, P29
   Thevenin D., P INTERACT 99
   Varela G, 2011, SENSORS-BASEL, V11, P9361, DOI 10.3390/s111009361
NR 28
TC 2
Z9 2
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1971
EP 1986
DI 10.1016/j.scico.2012.10.014
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300013
OA Bronze
DA 2024-07-18
ER

PT J
AU Molesini, A
   Casadei, M
   Omicini, A
   Viroli, M
AF Molesini, Ambra
   Casadei, Matteo
   Omicini, Andrea
   Viroli, Mirko
TI Simulation in Agent-Oriented Software Engineering: The SODA case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE AOSE; Methodologies; Simulation; Method engineering; SODA
ID MULTIAGENT SYSTEMS; ARTIFACTS; METAMODEL; MODEL
AB The key role of simulation in the engineering of complex multiagent systems (MAS) is today generally acknowledged in the MAS community. However, the adoption of simulation in state-of-the-art Agent-Oriented Software Engineering (AOSE) methodologies is still incomplete at its best.
   In this paper we present a simulation-based approach to MAS engineering and discuss its integration within AOSE methodologies. Integration is first discussed in general by adopting standard method engineering techniques, then detailed by means of a case study that is, integrating simulation in SODA. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Molesini, Ambra; Casadei, Matteo; Omicini, Andrea; Viroli, Mirko] Alma Mater Studiorum Univ Bologna, Bologna, Italy.
C3 University of Bologna
RP Molesini, A (corresponding author), Alma Mater Studiorum Univ Bologna, Bologna, Italy.
EM ambra.molesini@unibo.it; m.casadei@unibo.it; andrea.omicini@unibo.it;
   mirko.viroli@unibo.it
RI Omicini, Andrea/G-5284-2013
OI Omicini, Andrea/0000-0002-6655-3869; Viroli, Mirko/0000-0003-2702-5702
CR [Anonymous], 2000, INT WORKSH AG OR SOF, DOI DOI 10.1007/3-540-44564-1_
   [Anonymous], 2009, IEEE FIPA DESIGN PRO
   Clarke Edmund M., 2001, Model Checking
   Cossentino Massimo, 2007, International Journal of Agent-Oriented Software Engineering, V1, P91, DOI 10.1504/IJAOSE.2007.013266
   Cossentino M, 2009, LECT NOTES COMPUT SC, V5386, P86, DOI 10.1007/978-3-642-01338-6_7
   Cossentino M., HENDERSON SELLERS AN, P79
   Cossentino M., 2008, J AGENT ORIENTED SOF, V2, P132
   Dalpiaz F., 2008, 9 WORKSH AG WOA 2008, P115
   Fortino G, 2004, LECT NOTES COMPUT SC, V3187, P213
   Fortino G., 2005, COMPUTER SYSTEMS SCI, V20
   Gardelli Luca, 2008, International Journal of Agent-Oriented Software Engineering, V2, P171, DOI 10.1504/IJAOSE.2008.017314
   Gardelli L., 2009, MULTI AGENT SYSTEMS, P1
   Henderson-Sellers Brian., 2005, AGENT ORIENTED METHO
   Hérault T, 2004, LECT NOTES COMPUT SC, V2937, P73
   Arcos JL, 2008, LECT NOTES ARTIF INT, V5049, P76
   Molesini Ambra, 2010, International Journal of Agent-Oriented Software Engineering, V4, P1, DOI 10.1504/IJAOSE.2010.029808
   Molesini A., 2009, ENGINEERING ENVIRONM, V5, P37, DOI [10.3233/MGS-2009-0118,, DOI 10.3233/MGS-2009-0118]
   Molesini A, 2006, LECT NOTES ARTIF INT, V3963, P49, DOI 10.1007/11759683_4
   Omicini A, 2008, AUTON AGENT MULTI-AG, V17, P432, DOI 10.1007/s10458-008-9053-x
   Pavon Juan, 2008, International Journal of Agent-Oriented Software Engineering, V2, P196, DOI 10.1504/IJAOSE.2008.017315
   Pavon J., HENDERSON SELLERS AN, P236
   Röhl M, 2005, LECT NOTES ARTIF INT, V3451, P292
   Sarjoughian HS, 2001, P IEEE, V89, P201, DOI 10.1109/5.910855
   Seidita V, 2010, INT J SOFTW ENG KNOW, V20, P575, DOI 10.1142/S0218194010004785
   Sierra C., 2004, EUROPEAN JOURNAL FOR, V4
   Zambonelli F, 2004, AUTON AGENT MULTI-AG, V9, P253, DOI 10.1023/B:AGNT.0000038028.66672.1e
NR 26
TC 8
Z9 8
U1 0
U2 21
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 705
EP 714
DI 10.1016/j.scico.2011.09.007
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400008
DA 2024-07-18
ER

PT J
AU Ireland, A
   Grov, G
   Llano, MT
   Butler, M
AF Ireland, Andrew
   Grov, Gudmund
   Llano, Maria Teresa
   Butler, Michael
TI Reasoned modelling critics: Turning failed proofs into modelling
   guidance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd International Conference on Abstract State Machines (ASM), Alloy, B
   and Z
CY FEB 22-25, 2010
CL Orford, CANADA
SP Univ Sherbrooke, Univ Paris Est Creteil
DE Reasoned modelling; Formal methods; Formal modelling; Formal
   verification; Automated reasoning; Artificial intelligence
AB The activities of formal modelling and reasoning are closely related. But while the rigour of building formal models brings significant benefits, formal reasoning remains a major barrier to the wider acceptance of formalism within design. Here we propose reasoned modelling critics - an approach which aims to abstract away from the complexities of low-level proof obligations, and provide high-level modelling guidance to designers when proofs fail. Inspired by proof planning critics, the technique combines proof-failure analysis with modelling heuristics. Here, we present the details of our proposal, implement them in a prototype and outline future plans. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Ireland, Andrew; Llano, Maria Teresa] Heriot Watt Univ, Sch Math & Comp Sci, Edinburgh EH14 4AS, Midlothian, Scotland.
   [Grov, Gudmund] Univ Edinburgh, Sch Informat, Edinburgh EH8 9YL, Midlothian, Scotland.
   [Butler, Michael] Univ Southampton, Sch Elect & Comp Sci, Southampton SO9 5NH, Hants, England.
C3 Heriot Watt University; University of Edinburgh; University of
   Southampton
RP Ireland, A (corresponding author), Heriot Watt Univ, Sch Math & Comp Sci, Edinburgh EH14 4AS, Midlothian, Scotland.
EM a.ireland@hw.ac.uk
OI Butler, Michael/0000-0003-4642-5373
FU EPSRC [EP/F037058/1, EP/E005713/1, EP/H023852/1] Funding Source: UKRI
CR Abrial JR, 2008, LECT NOTES COMPUT SC, V5160, P1, DOI 10.1007/978-3-540-85762-4_1
   Abrial J.-R., 2010, MODELLING EVENT B SY
   Abrial JR, 2006, LECT NOTES COMPUT SC, V4260, P588
   Abrial Jean-Raymond, 2010, INT J SOFTWARE TOOLS
   [Anonymous], 2005, RIPPLING METALEVEL G
   Barrett C, 2007, LECT NOTES COMPUT SC, V4590, P298
   Brown W., 1998, ARCHITECTURES PROJEC
   BUNDY A, 1988, LECT NOTES COMPUT SC, V310, P111, DOI 10.1007/BFb0012826
   Bundy A., 2008, LNCS
   Butler M, 2008, FORM ASP COMPUT, V20, P61, DOI 10.1007/s00165-007-0061-4
   Dixon L, 2003, LECT NOTES ARTIF INT, V2741, P279
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Ireland A, 2000, ANN MATH ARTIF INTEL, V29, P65, DOI 10.1023/A:1018969728171
   Ireland A., 1992, LNCS, V624, P178
   Ireland A, 2010, LECT NOTES COMPUT SC, V5977, P189, DOI 10.1007/978-3-642-11811-1_15
   Leuschel Michael, 2008, International Journal on Software Tools for Technology Transfer, V10, P185, DOI 10.1007/s10009-007-0063-9
   Maclean E., 2009, 2 INT WORKSH INV GEN, P72
   Monroy R., 1994, Logic Programming and Automated Reasoning. 5th International Conference, LPAR '94. Proceedings, P54
   Pease A., 2010, THINKING MACHINES PH
NR 19
TC 2
Z9 2
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2013
VL 78
IS 3
SI SI
BP 293
EP 309
DI 10.1016/j.scico.2011.03.006
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 091PP
UT WOS:000315062600004
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Aceto, L
   Birgisson, A
   Ingolfsdottir, A
   Mousavi, M
   Reniers, MA
AF Aceto, Luca
   Birgisson, Arnar
   Ingolfsdottir, Anna
   Mousavi, MohammadReza
   Reniers, Michel A.
TI Rule formats for determinism and idempotence
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Structural operational semantics; Rule formats; Determinism; Idempotence
ID STRUCTURAL OPERATIONAL SEMANTICS; PROCESS ALGEBRA
AB Determinism is a semantic property of (a fragment of) a language that specifies that a program cannot evolve operationally in several different ways. Idempotence is a property of binary composition operators requiring that the composition of two identical specifications or programs will result in a piece of specification or program that is equivalent to the original components. In this paper, we propose (related) meta-theorems for guaranteeing the determinism and idempotence of binary operators. These meta-theorems are formulated in terms of syntactic templates for operational semantics, called rule formats. In order to obtain a powerful rule format for idempotence, we make use of the determinism of certain transition relations in the definition of the format for idernpotence. We show the applicability of our formats by applying them to various operational semantics from the literature. (c) 2010 Elsevier B.V. All rights reserved.
C1 [Aceto, Luca; Ingolfsdottir, Anna] Reykjavik Univ, Sch Comp Sci, ICE TCS, IS-101 Reykjavik, Iceland.
   [Birgisson, Arnar] Chalmers Univ Technol, Dept Comp Sci & Engn, Gothenburg, Sweden.
   [Mousavi, MohammadReza; Reniers, Michel A.] Eindhoven Univ Technol, Dept Comp Sci, NL-5600 MB Eindhoven, Netherlands.
C3 Reykjavik University; Chalmers University of Technology; Eindhoven
   University of Technology
RP Aceto, L (corresponding author), Reykjavik Univ, Sch Comp Sci, ICE TCS, Menntavegur 1, IS-101 Reykjavik, Iceland.
EM luca@ru.is
RI Reniers, Michel/AAC-6719-2019
OI Mousavi, Mohammad Reza/0000-0002-4869-6794; Reniers,
   Michel/0000-0002-9283-4074
FU "The Equational Logic of Parallel Processes" of the Icelandic Research
   Fund [060013021]; "New Developments in Operational Semantics" of the
   Icelandic Research Fund [080039021]; "Meta-theory of Algebraic Process
   Theories" of the Icelandic Research Fund [100014021]; Icelandic Research
   Fund [080890008]
FX The work of Aceto, Birgisson and Ingolfsdottir has been partially
   supported by the projects "The Equational Logic of Parallel Processes"
   (nr. 060013021), "New Developments in Operational Semantics" (nr.
   080039021) and "Meta-theory of Algebraic Process Theories" (nr.
   100014021) of the Icelandic Research Fund. Birgisson has been further
   supported by research-student grant nr. 080890008 of the Icelandic
   Research Fund.
CR ACETO L, 1994, INFORM COMPUT, V111, P1, DOI 10.1006/inco.1994.1040
   Aceto L., 2001, Handbook of Process Algebra, P197, DOI [10.1016/b978-044482830-9/50021-7, DOI 10.1016/B978-044482830-9/50021-7]
   Aceto L, 2010, LECT NOTES COMPUT SC, V5901, P141
   Aceto L, 2010, LECT NOTES COMPUT SC, V5961, P146
   Baeten J. C. M., 1995, Formal Description Techniques VII. Proceedings of the 7th IFIP WG 6.1 International Conference on Formal Description Techniques, P340
   Baeten J.C.M., 1990, Cambridge Tracts in Theoretical Computer Science, V18
   Baeten J.C. M., 2002, MONO THEOR COMP SCI
   BERGSTRA JA, 1984, INFORM CONTROL, V60, P109, DOI 10.1016/S0019-9958(84)80025-X
   Bergstra JA, 2005, THEOR COMPUT SCI, V335, P215, DOI 10.1016/j.tcs.2004.04.019
   Cranen S, 2008, LECT NOTES COMPUT SC, V5201, P447, DOI 10.1007/978-3-540-85361-9_35
   DARGENIO PR, 1995, TAU ANGELIC CHOICE P
   ENGELFRIET J, 1985, THEOR COMPUT SCI, V36, P21, DOI 10.1016/0304-3975(85)90028-3
   Fokkink W, 2003, ACTA INFORM, V39, P501, DOI 10.1007/s00236-003-0111-1
   GROOTE JF, 1993, THEOR COMPUT SCI, V118, P263, DOI 10.1016/0304-3975(93)90111-6
   GROOTE JF, 1992, INFORM COMPUT, V100, P202, DOI 10.1016/0890-5401(92)90013-6
   Hennessy M., 1987, ADV PETRI NETS, P233
   Hoare CAR., 1985, Communicating Sequential Processes
   Lanotte R, 2005, LECT NOTES COMPUT SC, V3441, P63
   MILNER AJR, 1989, COMMUNICATION CONCUR
   Mousavi M, 2005, INFORM PROCESS LETT, V93, P217, DOI 10.1016/j.ipl.2004.11.007
   Mousavi MR, 2007, THEOR COMPUT SCI, V373, P238, DOI 10.1016/j.tcs.2006.12.019
   Mousavi M, 2009, INFORM COMPUT, V207, P85, DOI 10.1016/j.ic.2007.11.008
   Mousavi MR, 2005, LECT NOTES COMPUT SC, V3580, P1214
   NICOLLIN X, 1994, INFORM COMPUT, V114, P131, DOI 10.1006/inco.1994.1083
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Tini S, 2004, J LOGIC ALGEBR PROGR, V60-1, P353, DOI 10.1016/j.jlap.2004.03.003
   Ulidowski I, 2004, J LOGIC ALGEBR PROGR, V60-1, P401, DOI 10.1016/j.jlap.2004.03.002
   VAANDRAGER FW, 1991, THEOR COMPUT SCI, V79, P275, DOI 10.1016/0304-3975(91)90333-W
   van Weerdenburg M, 2009, ELECTRON NOTES THEOR, V229, P85, DOI 10.1016/j.entcs.2009.07.075
   Verhoef C., 1995, Nordic Journal of Computing, V2, P274
NR 30
TC 7
Z9 7
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 889
EP 907
DI 10.1016/j.scico.2010.04.002
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400008
OA Green Published
DA 2024-07-18
ER

PT J
AU Schuppan, V
AF Schuppan, Viktor
TI Towards a notion of unsatisfiable and unrealizable cores for LTL
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Unsatisfiable cores; Unrealizable cores; Temporal logic; LTL
ID SYMBOLIC MODEL CHECKING; TEMPORAL LOGIC; FORMAL ANALYSIS; VACUITY;
   REQUIREMENTS; COMPLEXITY; ALGORITHM; TOOL
AB Unsatisfiable cores, i.e., parts of an unsatisfiable formula that are themselves unsatisfiable, have important uses in debugging specifications, speeding up search in model checking or SMT, and generating certificates of unsatisfiability. While unsatisfiable cores have been well investigated for Boolean SAT and constraint programming, the notion of unsatisfiable cores for temporal logics such as LTL has not received much attention. In this paper we investigate notions of unsatistiable cores for LTL that arise from the syntax tree of an LTL formula, from converting it into a conjunctive normal form, and from proofs of its unsatisfiability. The resulting notions are more fine-grained than existing ones. We illustrate the benefits of the more fine-grained notions on examples from the literature. We extend some of the notions to realizability and we discuss the relationship of unsatisfiable and unrealizable cores with the notion of vacuity. (c) 2010 Elsevier B.V. All rights reserved.
C1 FBK Irst, I-38123 Trento Povo, TN, Italy.
C3 Fondazione Bruno Kessler
RP Schuppan, V (corresponding author), FBK Irst, Via Sommarive 18, I-38123 Trento Povo, TN, Italy.
EM schuppan@fbk.eu
FU Provincia Autonoma di Trento
FX The author thanks the reviewers for their valuable comments. The author
   also thanks the research groups at FBK-irst and Verimag for helpful
   discussions, comments, and support, in particular, A. Cimatti, A.
   Ferrante, A. Mariotti, M. Roveri, and S. Tonetta. Part of this work was
   carried out while the author was at Verimag/CNRS. He thanks O. Maler for
   providing the freedom to pursue this work. Finally, the author thanks
   the Provincia Autonoma di Trento for support (project EMTELOS).
CR ABADI M, 1993, ACM T PROGR LANG SYS, V15, P73, DOI 10.1145/151646.151649
   Alur R., 2004, ACM Transactions on Computational Logic, V5, P1, DOI 10.1145/963927.963928
   [Anonymous], LNCS
   [Anonymous], 2003 DES AUT TEST EU
   [Anonymous], 2009, Ph. D. Dissertation
   [Anonymous], AL TOOL EXP RES
   [Anonymous], 2001, ACM Trans. Comput. Log., DOI [DOI 10.1145/371282.371311, 10.1145/371282.371311]
   [Anonymous], WIL
   [Anonymous], UMCS92221
   [Anonymous], 1991, P 12 INT JOINT C ART
   [Anonymous], 2003, P IJCAI 2003
   [Anonymous], LNCS
   [Anonymous], 1962, Proc. Internat. Congr. Mathematicians (Stockholm)
   [Anonymous], THESIS GRAZ U TECHNO
   [Anonymous], LNCS
   [Anonymous], PDF
   [Anonymous], 1992, Ph.D. thesis
   [Anonymous], 1993, IJCAI93 VOLS 1 2
   [Anonymous], Formal_Verification
   [Anonymous], LNCS
   [Anonymous], LNCS
   [Anonymous], LNCS
   [Anonymous], 2005, Ph.D. thesis
   [Anonymous], SAT
   [Anonymous], LNCS
   [Anonymous], 1988, PROC 29 IEEE S FOUND, DOI DOI 10.1109/SFCS.1988.21948
   [Anonymous], REGIONAL C SERIES MA
   [Anonymous], MODEL CHECKING BENCH
   [Anonymous], 1989, C RECORD 16 ANN ACM, DOI DOI 10.1145/75277.75293
   Armoni R, 2003, LECT NOTES COMPUT SC, V2725, P368
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Ball T, 2008, LECT NOTES COMPUT SC, V4966, P4
   Bauland M, 2009, LOG METH COMPUT SCI, V5, DOI 10.2168/LMCS-5(1:1)2009
   BEATTY DL, 1994, ACM IEEE D, P596
   Beer I, 2001, FORM METHOD SYST DES, V18, P141, DOI 10.1023/A:1008779610539
   Biere A., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P60
   Biere A, 1999, LECT NOTES COMPUT SC, V1579, P193
   Biere A., 1999, Proceedings 1999 Design Automation Conference (Cat. No. 99CH36361), P317, DOI 10.1109/DAC.1999.781333
   Biere A, 2006, LOG METH COMPUT SCI, V2, DOI 10.2168/LMCS-2(5:5)2006
   Bloem R, 2007, ELECTRON NOTES THEOR, V190, P3, DOI 10.1016/j.entcs.2007.09.004
   Bloem R, 2007, DES AUT TEST EUROPE, P1188
   Bloem R, 2007, LECT NOTES COMPUT SC, V4590, P263
   Bloem R, 2010, LECT NOTES COMPUT SC, V6174, P425, DOI 10.1007/978-3-642-14295-6_37
   Bruni Renato., 2001, LICS 2001 WORKSHOP T, V9, P162
   BUCHI JR, 1969, T AM MATH SOC, V138, P295, DOI 10.2307/1994916
   BURCH JR, 1992, INFORM COMPUT, V98, P142, DOI 10.1016/0890-5401(92)90017-A
   Bustan D, 2005, LECT NOTES COMPUT SC, V3725, P191
   Cavada R, 2009, IEEE INT CONF AUTOM, P665, DOI 10.1109/ASE.2009.49
   Chiappini A., 2010, 2010 32nd International Conference on Software Engineering (ICSE), P109, DOI 10.1145/1810295.1810312
   Chinneck J. W., 1991, ORSA Journal on Computing, V3, P157, DOI 10.1287/ijoc.3.2.157
   Chockler H, 2007, MEMOCODE'07: FIFTH ACM & IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR CO-DESIGN, PROCEEDINGS, P189
   Chockler H, 2006, FORM METHOD SYST DES, V28, P189, DOI 10.1007/s10703-006-0001-6
   Chockler H, 2008, 2008 FORMAL METHODS IN COMPUTER-AIDED DESIGN, P188
   Chockler H, 2009, FORM METHOD SYST DES, V34, P37, DOI 10.1007/s10703-008-0060-y
   Cimatti A, 2008, LECT NOTES COMPUT SC, V4905, P52, DOI 10.1007/978-3-540-78163-9_9
   Cimatti A, 2004, LECT NOTES COMPUT SC, V3312, P245
   Cimatti A, 2007, LECT NOTES COMPUT SC, V4501, P334
   Cimatti A, 2007, LECT NOTES COMPUT SC, V4590, P532
   Cimatti A, 2009, LECT NOTES COMPUT SC, V5643, P188, DOI 10.1007/978-3-642-02658-4_17
   Cimatti A, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P249, DOI 10.1109/SEFM.2008.23
   Clarke E., 2005, International Journal on Software Tools for Technology Transfer, V7, P174, DOI 10.1007/s10009-004-0182-5
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   Clarke EM, 1997, FORM METHOD SYST DES, V10, P47, DOI 10.1023/A:1008615614281
   Clarke EM, 1999, MODEL CHECKING, P1
   Daniele M., 1999, Computer Aided Verification. 11th International Conference, CAV'99. Proceedings (Lecture Notes in Computer Science Vol.1633), P249
   De Wulf M, 2008, LECT NOTES COMPUT SC, V4963, P63, DOI 10.1007/978-3-540-78800-3_6
   DELATOUR TB, 1992, J SYMB COMPUT, V14, P283, DOI 10.1016/0747-7171(92)90009-S
   Dershowitz N, 2006, LECT NOTES COMPUT SC, V4121, P36
   Een N., 2003, ELECT NOTES THEORETI, V89, P543, DOI 10.1016/s1571-0661(05)82542-3
   Egly U, 2000, INFORM COMPUT, V162, P255, DOI 10.1006/inco.1999.2861
   Emerson E. A., 1990, Handbook of Theoretical Computer Science, VB, P995, DOI [10.1016/b978-0-444-88074-1.50021-4, DOI 10.1016/B978-0-444-88074-1.50021-4]
   EMERSON EA, 1982, SCI COMPUT PROGRAM, V2, P241, DOI 10.1016/0167-6423(83)90017-5
   Fisman Dana, 2008, Hardware and Software: Verification and Testing. Proceedings 4th International Haifa Verification Conference, HVC 2008, P7
   Frisch A, 2002, LECT NOTES COMPUT SC, V2517, P238
   Gerth R., 1995, INT C PROTOCOL SPECI, P3
   Goldberg E, 2003, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, PROCEEDINGS, P886
   Grégoire E, 2007, LECT NOTES COMPUT SC, V4741, P317
   Greimel K, 2008, LECT NOTES COMPUT SC, V5126, P361, DOI 10.1007/978-3-540-70583-3_30
   Gurfinkel A, 2004, LECT NOTES COMPUT SC, V3312, P306
   Gurfinkel A, 2004, LECT NOTES COMPUT SC, V2988, P451
   Harel D., 1985, Logics and Models of Concurrent Systems, VF-13, P477, DOI [DOI 10.1007/978-3-642-82453-1_17, 10.1007/978-3-642-82453-1_17]
   Heljanko K, 2005, LECT NOTES COMPUT SC, V3576, P98
   Hustadt U, 2003, LECT NOTES ARTIF INT, V2741, P274
   Jobstmann B, 2006, PROCEEDINGS OF FORMAL METHODS IN COMPUTER AIDED DESIGN, P117
   Konighofer Robert, 2009, Proceedings of the 2009 9th International Conference Formal Methods in Computer-Aided Design (FMCAD), P152, DOI 10.1109/FMCAD.2009.5351127
   Kroening D, 2008, TEXTS THEOR COMPUT S, P1
   Kugler H, 2009, LECT NOTES COMPUT SC, V5503, P79
   Kugler H, 2009, LECT NOTES COMPUT SC, V5505, P77, DOI 10.1007/978-3-642-00768-2_9
   Kupferman O, 2005, ANN IEEE SYMP FOUND, P531, DOI 10.1109/SFCS.2005.66
   Kupferman O., 2003, International Journal on Software Tools for Technology Transfer, V4, P224, DOI 10.1007/s100090100062
   Lichtenstein O., 1985, P 12 ACM SIGACT SIGP, P97, DOI DOI 10.1145/318593.318622
   Ludwig M, 2009, TIME 2009: 16TH INTERNATIONAL SYMPOSIUM ON TEMPORAL REPRESENTATION AND REASONING, PROCEEDINGS, P73, DOI 10.1109/TIME.2009.11
   MANNA Z, 1984, ACM T PROGR LANG SYS, V6, P68, DOI 10.1145/357233.357237
   Markey N, 2004, ACTA INFORM, V40, P431, DOI 10.1007/s00236-003-0136-5
   Namjoshi KS, 2004, LECT NOTES COMPUT SC, V3114, P57
   Namjoshi KS, 2001, LECT NOTES COMPUT SC, V2102, P2
   Papadimitriou C. H., 1985, 26th Annual Symposium on Foundations of Computer Science (Cat. No.85CH2224-4), P74, DOI 10.1109/SFCS.1985.56
   Peled Doron., 2001, Proc. 21st Conf. on Foundations of Software Technology and Theroretical Computer Science, P292, DOI DOI 10.1007/3-540-45294
   Pill I, 2006, DES AUT CON, P821, DOI 10.1109/DAC.2006.229231
   Piterman N, 2006, LECT NOTES COMPUT SC, V3855, P364
   PLAISTED DA, 1986, J SYMB COMPUT, V2, P293, DOI 10.1016/S0747-7171(86)80028-1
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Prasad M. R., 2005, International Journal on Software Tools for Technology Transfer, V7, P156, DOI 10.1007/s10009-004-0183-4
   Purandare M., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P485
   Queille JP, 2008, LECT NOTES COMPUT SC, V5000, P216
   Rozier Kristin Y., 2010, International Journal on Software Tools for Technology Transfer, V12, P123, DOI 10.1007/s10009-010-0140-3
   Samer M, 2004, LECT NOTES COMPUT SC, V3312, P322
   Samer M, 2007, LECT NOTES ARTIF INT, V4790, P2, DOI 10.1007/978-3-540-75560-9_2
   Schuppan Viktor, 2009, Fundamentals of Software Engineering. Third IPM International Conference, FSEN 2009. Revised Selected Papers, P129
   Sheeran M, 2000, LECT NOTES COMPUT SC, V1954, P108
   Shlyakhter I, 2003, 18TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P94, DOI 10.1109/ASE.2003.1240298
   Simmonds J, 2007, FMCAD 2007: FORMAL METHODS IN COMPUTER AIDED DESIGN, PROCEEDINGS, P3, DOI 10.1109/.16
   SISTLA AP, 1985, J ACM, V32, P733, DOI 10.1145/3828.3837
   Sohail S, 2008, LECT NOTES COMPUT SC, V4905, P309, DOI 10.1007/978-3-540-78163-9_26
   Torlak E, 2008, LECT NOTES COMPUT SC, V5014, P326, DOI 10.1007/978-3-540-68237-0_23
   Wang H, 2005, LECT NOTES COMPUT SC, V3729, P745, DOI 10.1007/11574620_53
   Wolfman SA, 1999, IJCAI-99: PROCEEDINGS OF THE SIXTEENTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, VOLS 1 & 2, P310
   Zhang LT, 2003, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, PROCEEDINGS, P880
NR 118
TC 28
Z9 29
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2012
VL 77
IS 7-8
SI SI
BP 908
EP 939
DI 10.1016/j.scico.2010.11.004
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 944DU
UT WOS:000304179400009
OA Bronze
DA 2024-07-18
ER

PT J
AU Fuentes-Fernández, R
   Pavón, J
   Garijo, F
AF Fuentes-Fernandez, Ruben
   Pavon, Juan
   Garijo, Francisco
TI A model-driven process for the modernization of component-based systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Modernization of software systems; Component; Software methodology;
   Software engineering; Agile process; Model-driven engineering
ID SOFTWARE; TRANSFORMATION
AB Software modernization is critical for organizations that need cost-effective solutions to deal with the rapid obsolescence of software and the increasing demand for new functionality. This paper presents the XIRUP modernization methodology, which proposes a highly iterative process, structured into four phases: preliminary evaluation, understanding, building and migration. This modernization process is feature-driven, component-based, focused on the early elicitation of key information, and relies on a model-driven approach with extensive use of experience from the previous projects. XIRUP has been defined in the European IST project MOMOCS, which has also built a suite of support tools. This paper introduces the process using a case study that illustrates its activities, related tools and results. The discussion highlights the specific characteristics of modernization projects and how a customized methodology can take advantage of them. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Fuentes-Fernandez, Ruben; Pavon, Juan] Univ Complutense Madrid, Fac Informat, E-28040 Madrid, Spain.
   [Garijo, Francisco] Telefon I D, Madrid, Spain.
C3 Complutense University of Madrid; Telefonica SA
RP Fuentes-Fernández, R (corresponding author), Univ Complutense Madrid, Fac Informat, E-28040 Madrid, Spain.
EM ruben@fdi.ucm.es; jpavon@fdi.ucm.es; fgarijo@tid.es
RI Pavón, Juan/B-9363-2008; Mestras, Juan Pavón/AAC-3533-2020;
   Fuentes-Fernandez, Ruben/K-6523-2014
OI Pavón, Juan/0000-0002-9553-8123; Fuentes-Fernandez,
   Ruben/0000-0001-6876-0979
CR AMMA Group, 2009, ATL ATL TRANSF LANG
   [Anonymous], 2003, P WORKSH MOD DRIV AR
   [Anonymous], P 2 WORKSH GEN TECHN
   [Anonymous], 2008, MOF MOD TEXT TRANSF
   Apache Jakarta Project, 2008, CACT 1 7
   Atkinson Colin., 2002, COMPONENT BASED PROD
   Boehm B.W., 2004, Balancing Agility and Discipline: A Guide for the Perplexed
   Borland, 2008, BORL TOG 2008
   BUDINSKY F, 2004, ECLIPSE MODELLING FR
   Chung S, 2007, P 40 HAW INT C SYST, P172, DOI 10.1109/HICSS.2007.479
   Clarkware Consulting, 2004, JUNITPERF 1 9
   Demeyer S., 2003, OBJECT ORIENTED REEN
   Eclipse, 2010, JET 1 0 2
   Eclipse, 2007, ECL 3 3
   Eclipse, 2009, ATL ATLAS TRANSF LAN
   Eclipse, 2009, MOFSCRIPT 1 3 6
   Emerson Matthew., 2006, OOPSLA i 6th Workshop on Domain Specific Modeling, P123
   Enterprise jBilling Software Limited, 2008, JBILLING 1 1 1
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   García-Magariño I, 2009, ADV INTEL SOFT COMPU, V55, P70
   Graaf B, 2008, J SYST SOFTWARE, V81, P517, DOI 10.1016/j.jss.2007.06.007
   HEEMSTRA FJ, 1992, INFORM SOFTWARE TECH, V34, P627, DOI 10.1016/0950-5849(92)90068-Z
   Henderson-Sellers B, 2003, COMMUN ACM, V46, P73, DOI 10.1145/944217.944242
   IBM, 2010, RAT SOFTW
   ICARO, 2008, ICARO FRAM DEV DISTR
   Jia Liu, 2006, 28th International Conference on Software Engineering Proceedings, P112
   JUnit.org, 2008, JUNIT TEST FRAM 4 5
   Khan K. M., 2001, Australian Journal of Information Systems, V9, P51
   Kleppe A.G., 2003, MDA Explained; The Model Driven Architecture: Practice and Promise
   KRIKHAAR RL, 1999, THESIS U AMSTERDAM
   LAMMEL R, 2004, P 1 INT WORKSH SOFTW, P31
   Lau KK, 2007, IEEE T SOFTWARE ENG, V33, P709, DOI 10.1109/TSE.2007.70726
   Lewis G, 2006, 13TH IEEE INTERNATIONAL WORKSHOP ON SOFTWARE TECHNOLOGY AND ENGINEERING PRACTICE, PROCEEDINGS, P222
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Model driven MOdernisation of Complex Systems (MOMOCS) Consortium, 2008, IST2006034466
   *OBJ MAN GROUP, 2008, MET OBJ FAC MOF 2 0
   *OBJ MAN GROUP, 2005, SOFTW PROC ENG MET S
   Object Management Goup, 2009, ARCH DRIV MOD ADM KN
   Object Management Goup, 2008, ARCH DRIV MOD ADM AB
   Object Management Group, 2005, UML UN MOD LANG SUP
   Object Management Group, 2006, OBJ CONSTR LANG SPEC
   Object Management Group, 2005, UML UN MOD LANG INFR
   Object Management Group, 2007, ARCH DRIV MOD TASK F
   Object Management Group, 2009, ARCH DRIV MOD TASK F
   Palmer S.R., 2002, PRACTICAL GUIDE FEAT
   Reus T, 2006, LECT NOTES COMPUT SC, V4066, P213
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Scott K., 2002, The Unified Process Explained
   Seacord R.C., 2003, SEI SERIES SOFTWARE
   Sendall S, 2003, IEEE SOFTWARE, V20, P42, DOI 10.1109/MS.2003.1231150
   Siau K, 2006, INFORM SYST MANAGE, V23, P43, DOI 10.1201/1078.10580530/46108.23.3.20060601/93706.5
   Stevens P., 1998, SOFTWARE ENG NOTES, V23, P17
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   van Deursen A, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P122, DOI 10.1109/WICSA.2004.1310696
   van Deursen A., 2007, Proceedings of the Workshop on Model-Driven Software Evolution (MoDSE), P41
   Varró D, 2006, LECT NOTES COMPUT SC, V4199, P410
NR 56
TC 11
Z9 11
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 247
EP 269
DI 10.1016/j.scico.2011.04.003
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000007
OA Bronze
DA 2024-07-18
ER

PT J
AU Ribeiro, L
   dos Santos, OM
   Dotti, FL
   Foss, L
AF Ribeiro, Leila
   dos Santos, Osmar Marchi
   Dotti, Fernando Luis
   Foss, Luciana
TI Correct transformation: From object-based graph grammars to PROMELA
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Graph grammars; Model transformation; PROMELA; Correctness
ID VERIFICATION; FRAMEWORK
AB Model transformation is an approach that, among other advantages, enables the reuse of existing analysis and implementation techniques, languages and tools. The area of formal verification makes wide use of model transformation because the cost of constructing efficient model checkers is extremely high. There are various examples of translations from specification and programming languages to the input languages of prominent model checking tools, like SPIN. However, this approach provides a safe analysis method only if there is a guarantee that the transformation process preserves the semantics of the original specification/program, that is, that the transformation is correct. Depending on the source and/or target languages, this notion of correctness is not easy to achieve. In this paper, we tackle this problem in the context of Object-Based Graph Grammars (OBGG). OBGG is a formal language suitable for the specification of distributed systems, with a variety of tools and techniques centered around the transformation of OBGG models. We describe in details the model transformation from OBGG models to PROMELA, the input language of the SPIN model checker. Amongst the contributions of this paper are: (a) the correctness proof of the transformation from OBGG models to PROMELA; (b) a generalization of this process in steps that may be used as a guide to prove the correctness of transformations from different specification/programming languages to PROMELA. (C) 2011 Elsevier B.V. All rights reserved.
C1 [Ribeiro, Leila] Univ Fed Rio Grande do Sul, Inst Informat, Porto Alegre, RS, Brazil.
   [dos Santos, Osmar Marchi] Univ Fed Santa Maria, Dept Elect & Comp, BR-97119900 Santa Maria, RS, Brazil.
   [Dotti, Fernando Luis] Pontificia Univ Catolica Rio Grande do Sul, Fac Informat, Porto Alegre, RS, Brazil.
   [Foss, Luciana] Univ Fed Pelotas, Ctr Desenvolvimento Tecnol, Pelotas, Brazil.
C3 Universidade Federal do Rio Grande do Sul; Universidade Federal de Santa
   Maria (UFSM); Pontificia Universidade Catolica Do Rio Grande Do Sul;
   Universidade Federal de Pelotas
RP Ribeiro, L (corresponding author), Univ Fed Rio Grande do Sul, Inst Informat, Porto Alegre, RS, Brazil.
EM leila@inf.ufrgs.br; osmar@inf.ufsm.br; fernando.dotti@pucrs.br;
   luciana.foss@ufpel.edu.br
RI Dotti, Fernando/AAZ-7864-2021; Foss, Luciana/G-9902-2012; dos Santos,
   Osmar M Marchi/A-8479-2018
OI Dotti, Fernando Luis/0000-0001-9061-4695
FU CNPq; FAPERGS; NESS [10/0043-0]; PqG [1014867]
FX This work was partially supported by CNPq, FAPERGS and projects NESS
   (10/0043-0) and PqG (1014867).
CR Alavizaedh SF., 2007, INT C SOFTW ENG ADV, P50
   [Anonymous], 1999, Handbook of graph grammars and computing by graph transformation
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 1997, Handbook of Graph Grammars and Computing by Graph Transformation
   [Anonymous], 1995, COMMUNICATION CONCUR
   Baldan P, 2008, INFORM COMPUT, V206, P869, DOI 10.1016/j.ic.2008.04.002
   Borger E., 2003, ABSTRACT STATE MACHI
   Burstall R. M., 1972, Proceedings of an ACM Conference on Proving Assertations about Programs, P7, DOI 10.1145/800235.807068
   Chechik M, 1999, LECT NOTES COMPUT SC, V1680, P154
   Chen J, 2004, LECT NOTES COMPUT SC, V2989, P234
   Copstein B., 2000, Proceedings 33rd Annual Simulation Symposium (SS 2000), P74, DOI 10.1109/SIMSYM.2000.844903
   Corbett J. C., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P439, DOI 10.1109/ICSE.2000.870434
   Corradini A., 1996, Fundamenta Informaticae, V26, P241
   da Costa SA, 2009, ELECTRON NOTES THEOR, V240, P43, DOI 10.1016/j.entcs.2009.05.044
   Del Castillo G, 1999, LECT NOTES COMPUT SC, V1641, P311
   Demartini C., 1998, P 4 SPIN WORKSH FRAN
   Dijkstra E. W., 1971, Acta Informatica, V1, P115, DOI 10.1007/BF00289519
   dos Santos O M., 2004, Electr. Notes Theor. Comput. Sci, V109, P125
   Dotti F., 2006, SOFTWARE SYSTEM MODE, V5, P289, DOI DOI 10.1007/S10270-006-0014-Z
   Dotti F.L, 2003, 17 BRAZ S SOFTW ENG, P225
   Dotti F.L., 2002, 2002 COMM NETW DISTR, P261
   Dotti FL, 2005, ELECTRON NOTES THEOR, V127, P3, DOI 10.1016/j.entcs.2004.12.026
   Dotti FL, 2005, LECT NOTES COMPUT SC, V3747, P80
   Dotti FL, 2003, LECT NOTES COMPUT SC, V3062, P120
   Dotti FL, 2003, LECT NOTES COMPUT SC, V2884, P261
   Dotti FL, 2000, INT FED INFO PROC, V49, P45
   Duarte L., 2004, TR043 FACIN PPGCC PU
   Dwyer M. B., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P411, DOI 10.1109/ICSE.1999.841031
   Dwyer M. B., 1998, Proceedings of FMSP'98. Second Workshop on Formal Methods in Software Practice, P7, DOI 10.1145/298595.298598
   Ehrig H., 1997, HDB GRAPH GRAMMARS C, P247, DOI [10.1142/, DOI 10.1142/97898123847200004., DOI 10.1142/97898123847200004]
   Ehrig H., 1999, Handbook of Graph Grammars and Computing by Graph Transformation: Applications, Languages and Tools, V2
   Ehrig H., 1979, LECT NOTES COMP SCI, V73, P1, DOI [10.1007/BFb0025714, DOI 10.1007/BFB0025714]
   GARTNER FC, 1999, J UNIVERS COMPUT SCI, V5, P668
   Gerhart S. L., 1975, Conference Record of the 2nd ACM Symposium on Principles of Programming Languages, P54
   Guerraoui R., 1999, LECT NOTES COMPUTER, P33
   Harel David., 1977, STOC, P249
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Hoare CAR., 1985, Communicating Sequential Processes
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Jones CB, 2003, IEEE ANN HIST COMPUT, V25, P26, DOI 10.1109/MAHC.2003.1203057
   Kastenberg H, 2006, LECT NOTES COMPUT SC, V3925, P299
   Leonardo Michelon L.R, 2007, J BRAZILIAN COMPUTER, V13, P51
   Leue S, 1999, 2ND IEEE INTERNATIONAL SYMPOSIUM ON OBJECT-ORIENTED REAL-TIME DISTRIBUTED COMPUTING (ISORC'99), PROCEEDINGS, P14, DOI 10.1109/ISORC.1999.776345
   Lilius J., 1999, 14th IEEE International Conference on Automated Software Engineering, P255, DOI 10.1109/ASE.1999.802301
   Mendizabal OM, 2007, ELECTRON NOTES THEOR, V184, P151, DOI 10.1016/j.entcs.2007.03.020
   Milner R., 1971, CSTR71205 STANF U
   Pasini F, 2007, ELECTRON NOTES THEOR, V184, P113, DOI 10.1016/j.entcs.2007.03.018
   PLATEAU B, 1991, IEEE T SOFTWARE ENG, V17, P1093, DOI 10.1109/32.99196
   Rensink A, 2004, LECT NOTES COMPUT SC, V3256, P226
   Research Bell-Labs, 2003, SPIN VERS 3 3 LANG R
   Ribeiro L, 2005, LECT NOTES COMPUT SC, V3393, P385
   RIBEIRO L, 1996, THESIS TU BERLIN GER
   RICART G, 1981, COMMUN ACM, V24, P9, DOI 10.1145/358527.358537
   Schmidt DC, 2006, COMPUTER, V39, P25, DOI 10.1109/MC.2006.58
   Sirjani M, 2004, FUND INFORM, V63, P385
   Snir M., 1995, MPI COMPL REF
   Varro Daniel, 2004, Journal of Software and Systems Modeling, V3, P85, DOI [10.1007/s10270-003-0050-x, DOI 10.1007/S10270-003-0050-X, 10.1007/ s10270-003-0050-x]
   Weise C., 1997, 3 INT SPIN WORKSH NE
   Winter K., 2002, Integrated Formal Methods. Third International Conference, IFM 2002. Proceedings (Lecture Notes in Computer Science Vol.2335), P165
NR 59
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2012
VL 77
IS 3
BP 214
EP 246
DI 10.1016/j.scico.2011.03.010
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 898NB
UT WOS:000300748000006
OA Bronze
DA 2024-07-18
ER

PT J
AU Dovland, J
   Johnsen, EB
   Owe, O
   Steffen, M
AF Dovland, Johan
   Johnsen, Einar Broch
   Owe, Olaf
   Steffen, Martin
TI Incremental reasoning with lazy behavioral subtyping for multiple
   inheritance
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 7th International Conference on Integrated Formal Methods
CY FEB 16-19, 2009
CL Dusseldorf, GERMANY
DE Lazy behavioral subtyping; Object orientation; Multiple inheritance;
   Late binding; Proof systems; Code reuse; Method redefinition;
   Incremental reasoning
ID LOGIC; SEMANTICS; CALCULUS
AB Object-orientation supports code reuse and incremental programming. Multiple inheritance increases the possibilities for code reuse, but complicates the binding of method calls and thereby program analysis. Behavioral subtyping allows program analysis under an open world assumption; i.e., under the assumption that class hierarchies are extensible. However, method redefinition is severely restricted by behavioral subtyping, and multiple inheritance may lead to conflicting restrictions from independently designed superclasses. This paper presents a more liberal approach to incremental reasoning for multiple inheritance under an open world assumption. The approach, based on lazy behavioral subtyping, is well-suited for multiple inheritance, as it incrementally imposes context-dependent behavioral constraints on new subclasses. We first present the approach for a simple language and show how incremental reasoning can be combined with flexible code reuse. Then this language is extended with a hierarchy of interface types which is independent of the class hierarchy. In this setting, flexible code reuse can be combined with modular reasoning about external calls in the sense that each class is analyzed only once. We formalize the approach as a calculus and show soundness for both languages. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Dovland, Johan; Johnsen, Einar Broch; Owe, Olaf; Steffen, Martin] Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
C3 University of Oslo
RP Dovland, J (corresponding author), Univ Oslo, Dept Informat, N-0316 Oslo, Norway.
EM johand@ifi.uio.no; einarj@ifi.uio.no; olaf@ifi.uio.no;
   msteffen@ifi.uio.no
OI Owe, Olaf/0000-0003-0976-5678; Johnsen, Einar Broch/0000-0001-5382-3949
CR AMERICA P, 1990, SIGPLAN NOTICES, V25, P161, DOI 10.1145/97946.97966
   AMERICA P, 1991, LECT NOTES COMPUT SC, V489, P60, DOI 10.1007/BFb0019440
   [Anonymous], 1997, Object-oriented software construction
   APT KR, 1981, ACM T PROGR LANG SYS, V3, P431, DOI 10.1145/357146.357150
   APT KR, 2009, TEXTS MONOGRAPHS COM
   Attali I, 1996, ACM T PROGR LANG SYS, V18, P711, DOI 10.1145/236114.236118
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   Chambers C., 1991, LISP and Symbolic Computation, V4, P207, DOI 10.1007/BF01806106
   Chin WN, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P87, DOI 10.1145/1328438.1328452
   de Boer FS, 1999, LECT NOTES COMPUT SC, V1578, P135
   DEMICHIEL LG, 1987, LECT NOTES COMPUT SC, V276, P151
   Dovland J, 2008, LECT NOTES COMPUT SC, V5014, P52, DOI 10.1007/978-3-540-68237-0_6
   Dovland J, 2010, J LOGIC ALGEBR PROGR, V79, P578, DOI 10.1016/j.jlap.2010.07.008
   Dovland J, 2008, ELECTRON NOTES THEOR, V203, P19, DOI 10.1016/j.entcs.2008.04.084
   Dovland J, 2009, LECT NOTES COMPUT SC, V5423, P215
   Fournet C, 2003, J LOGIC ALGEBR PROGR, V57, P23, DOI 10.1016/S1567-8326(03)00040-7
   Hoare C. A. R., 1971, Lecture notes in mathematics CLXXXVIII. Symposium on semantics of algorithmic languages, P102
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Johnsen EB, 2005, LECT NOTES COMPUT SC, V3657, P274
   Johnsen EB, 2006, THEOR COMPUT SCI, V365, P23, DOI 10.1016/j.tcs.2006.07.031
   KROGDAHL S, 1985, BIT, V25, P318, DOI 10.1007/BF01934377
   LEAVENS GT, 2006, 0620A IOW STAT U DEP
   Leroy Xavier., 2008, The Objective Caml system
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Luo CG, 2008, ELECTRON NOTES THEOR, V212, P27, DOI 10.1016/j.entcs.2008.04.051
   NYSTROM N, 2004, 19 OBJ OR PROGR SYST
   ODERSKY M, 2008, COMPREHENSIVE STEP B
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Parkinson MJ, 2008, POPL'08: PROCEEDINGS OF THE 35TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P75, DOI 10.1145/1328438.1328451
   Pierik C, 2005, THEOR COMPUT SCI, V343, P413, DOI 10.1016/j.tcs.2005.06.018
   Poetzsch-Heffter A, 1999, LECT NOTES COMPUT SC, V1576, P162
   ROSSIE JG, 1996, LECT NOTES COMPUTER, V1098, P248
   Soundarajan N, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P206, DOI 10.1109/ICSR.1998.685745
   Stroustrup B., 1989, Computing Systems, V2, P367
   Ungar D., 1991, LISP and Symbolic Computation, V4, P187, DOI 10.1007/BF01806105
   WASSERRAB D, 2006, P C OBJ OR PROGR SYS, P345
NR 40
TC 6
Z9 6
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2011
VL 76
IS 10
SI SI
BP 915
EP 941
DI 10.1016/j.scico.2010.09.006
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 785MK
UT WOS:000292232900006
DA 2024-07-18
ER

PT J
AU Reeves, S
   Streader, D
AF Reeves, Steve
   Streader, David
TI Contexts, refinement and determinism
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th Refinement Workshop
CY MAY 27, 2008
CL Turku, FINLAND
SP British Comp Soc (BCS)
DE Refinement; Determinism; Frames
AB In this paper we have been influenced by those who take an "engineering view" of the problem of designing systems, i.e. a view that is motivated by what someone designing a real system will be concerned with, and what questions will arise as they work on their design. Specifically, we have borrowed from the testing work of Hennessy, de Nicola and van Glabbeek, e.g. Hennessy, 1988 [13], de Nicola [5], de Nicola, 1992 [21] and van Glabbeek, 2001, 1990 [40,39].
   Here we concentrate on one fundamental part of the engineering view and where consideration of it leads. The aspects we are concerned with are computational entities in contexts, observed by users. This leads to formalising design steps that are often left informal, and that in turn gives insights into non-determinism and ultimately leads to being able to use refinement in situations where existing techniques fail. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Reeves, Steve; Streader, David] Univ Waikato, Dept Comp Sci, Hamilton, New Zealand.
C3 University of Waikato
RP Reeves, S (corresponding author), Univ Waikato, Dept Comp Sci, Hamilton, New Zealand.
EM stever@cs.waikato.ac.nz; dstr@cs.waikato.ac.nz
OI Reeves, Steve/0000-0002-3840-6060
CR ALFARO L, 2001, P 9 ANN S FDN SOFTW, P109
   [Anonymous], PRGRR0111 OXF U COMP
   [Anonymous], 2001, HDB PROCESS ALGEBRA, DOI DOI 10.1016/B978-044482830-9/50019-9
   [Anonymous], 1989, CWI Q.
   [Anonymous], COMPUTER SCI WORKING
   [Anonymous], LECT NOTES COMPUTER
   Baeten J.C.M., 1990, Cambridge Tracts in Theoretical Computer Science, V18
   BRINKSMA E, 1986, INF8613 TWENT U TECH
   DENICOLA R, 1984, THEOR COMPUT SCI, V34, P83, DOI 10.1016/0304-3975(84)90113-0
   DENICOLA R, 1987, LECT NOTES COMPUT SC, V249, P138
   Derrick J., 2003, Formal Aspects of Computing, V15, P182, DOI 10.1007/s00165-003-0007-4
   Derrick J, 1999, LECT NOTES COMPUT SC, V1709, P1477
   Dunne S, 2005, LECT NOTES COMPUT SC, V3455, P45
   ENE C, 2004, TESTING THEORIES BRO
   Fischer C, 2000, LECT NOTES COMPUT SC, V1816, P469
   Gorrieri Roberto, 2001, HDB PROCESS ALGEBRA, P1047
   Hennessy M., 1988, An algebraic theory of processes
   Hoare C., 1985, Prentice-Hall International Series in Computer Science
   Hoare C A R, 1998, PRENTICE HALL INT SE
   KIM G, 2006, LNCS, V4085
   Kumar R, 2000, IEEE T AUTOMAT CONTR, V45, P1970, DOI 10.1109/9.887621
   Lynch N., 1995, Formal Aspects of Computing, V7, P231, DOI 10.1007/BF01211073
   Milner R., 1989, Communication and concurrency
   Prasad K. V. S., 1993, PARLE '93 Parallel Architectures and Languages Europe. 5th International PARLE Conference Proceedings, P391
   Prasad KVS, 1995, SCI COMPUT PROGRAM, V25, P285, DOI 10.1016/0167-6423(95)00017-8
   Reeves S, 2005, J UNIVERS COMPUT SCI, V11, P2034
   Reeves S, 2003, LECT NOTES COMPUT SC, V2885, P266
   REEVES S, 2004, 012004 U WAIKATO
   REEVES S, 2007, 5 IEEE INT C SOFTW E, P371
   REEVES S, 2007, ELECT NOTES THEORETI
   Reeves S, 2009, LECT NOTES COMPUT SC, V5850, P499, DOI 10.1007/978-3-642-05089-3_32
   Rensink A, 2001, INFORM COMPUT, V170, P95, DOI 10.1006/inco.2001.2967
   Roscoe A.W., 1997, PRENTICE HALL INT SE
   SEGALA R, 1992, MITLCSTR557 MASS I T
   TAYLOR P, 1999, CAMBRIDGE STUDIES AD, V59
   TRETMANS D, 1992, THESIS FACULTEIT INF
   Vaandrager F. W., 1991, Proceedings of Sixth Annual IEEE Symposium on Logic in Computer Science (Cat. No.91CH3025-4), P387, DOI 10.1109/LICS.1991.151662
   Valmari A., 1995, Formal Aspects of Computing, V7, P440, DOI 10.1007/BF01211218
   VALMARI A, 1991, PROTOCOL SPECIFICATI
   VANGLABBEEK RJ, 1990, LECT NOTES COMPUT SC, V458, P278, DOI 10.1007/BFb0039066
NR 40
TC 1
Z9 1
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2011
VL 76
IS 9
SI SI
BP 774
EP 791
DI 10.1016/j.scico.2010.11.011
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 765IY
UT WOS:000290700100004
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Molina, AI
   Redondo, MA
   Ortega, M
AF Isabel Molina, Ana
   Angel Redondo, Miguel
   Ortega, Manuel
TI A methodological approach for user interface development of
   collaborative applications: A case study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'06)
CY AUG 31, 2006
CL Bonn, GERMANY
DE Groupware design; Interaction design; Model-based design; Graphic User
   Interface design
ID GROUPWARE
AB In the last few years, the production of systems which support learning and group work has been high. However, the design and development of these types of systems are difficult, mainly due to the multidisciplinarity involved. Furthermore, the Graphic User Interface (GUI) of an application is receiving greater attention, since it can be decisive in determining if the application is accepted or rejected by users. Model-based design is a widespread technique in the user interface development process. While reviewing approaches that deal with the modeling and design of user interfaces supporting collaborative tasks, we have detected that there is no proposal that links interactive and collaborative issues. We have introduced a methodological approach to solve this shortcoming. This approach is called CIAM (Collaborative Interactive Application Methodology) and it is composed of several stages in which conceptual models are created using CIAN (Collaborative Interactive Application Notation). These models start by modeling the organization in which the application will be used, as well as the tasks that must be supported. In the initial stages, the organization and the collaborative tasks are modeled using high-level specifications. In the following stages, the level of detail increases and. finally, the interaction between the individual users and the application is modeled using ConcurTaskTrees (CTT) notation. The interaction model acts as a bridge between the design and the implementation of the Graphic User Interface. In this paper we present our methodological approach and an example of applying this method for user interface design of collaborative and interactive applications. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Isabel Molina, Ana; Angel Redondo, Miguel; Ortega, Manuel] Univ Castilla La Mancha, Sch Comp Sci Engn, Dept Informat Syst & Technol, E-13071 Ciudad Real, Spain.
C3 Universidad de Castilla-La Mancha
RP Molina, AI (corresponding author), Univ Castilla La Mancha, Sch Comp Sci Engn, Dept Informat Syst & Technol, Paseo Univ 4, E-13071 Ciudad Real, Spain.
EM Analsabel.Molina@uclm.es; Miguel.Redondo@ulcm.es; Manuel.Ortega@uclm.es
RI Ortega, Manuel/F-9191-2015; Molina, Ana I/M-1392-2014; Bravo,
   Jose/F-8861-2015; Redondo, Miguel A./F-7852-2015
OI Ortega, Manuel/0000-0002-0194-7744; Molina, Ana I/0000-0002-3449-2539;
   Bravo, Jose/0000-0001-5752-2406; Redondo, Miguel A./0000-0001-5809-3412
CR Annett J., 1967, OCCUP PSYCHOL, V41, P211
   [Anonymous], THESIS U GRANADA
   [Anonymous], 1983, The Psychology of Human-Computer Interaction
   Berti S., 2004, CHI'04 extended abstracts on Human factors in computing systems, P793, DOI DOI 10.1145/985921.985939
   CARLSEN S, 1998, P 3 IFCIS INT C COOP
   CARLSEN S, 1997, THESIS NORWEGIAN U S
   Cox K., 1993, USER INTERFACE DESIG, V2nd
   Dillenbourg P., 1995, EVOLUTION RES COLLAB
   DOURISH P, 1992, P C COMP SUPP COOP W
   ELLIS CA, 1991, COMMUN ACM, V34, P38
   GIRALDO WJ, 2008, LNCS
   GRUDIN J, 1992, GROUPWARE SOFTWARE C, P552
   LACAZE X, 2004, P WORKSH TEMP ASP WO
   Lim Y.-k., 2004, P 3 ANN C TASK MOD D
   Lim YK, 2006, DESIGN STUD, V27, P57, DOI 10.1016/j.destud.2005.04.004
   Luyten K., 2004, THESIS U LIMBURG
   Molina AI, 2006, HCI RELATED PAPERS OF INTERACCION 2004, P217, DOI 10.1007/1-4020-4205-1_18
   MOLINA AI, 2006, LNCS, P225
   MOLINA AI, 2007, LNCS, P111
   MOORE B, 2004, ECLIPSE DEV USING GR, P256
   Mori G, 2004, IEEE T SOFTWARE ENG, V30, P507, DOI 10.1109/TSE.2004.40
   PATERNO F, 1997, P IFIPTC 13 INT C HU
   Paterno F., 2004, The Handbook of Task Analysis for Human-Computer Interaction, P483
   Pinelle D., 2003, ACM Transactions on Computer-Human Interaction, V10, P281, DOI 10.1145/966930.966932
   Puerta AR, 1997, IEEE SOFTWARE, V14, P40, DOI 10.1109/52.595902
   PUERTA AR, 1996, CADUI96 COMPUTERAIDE
   RUBART J, 2005, THESIS FEMUNIVERSITA, P307
   RUBART J, 2004, INT J COMPUTER APPL, V19
   SCHULTE R, 1995, R401134 GARTN GROUP
   SCHWABE D, 2001, CAS STUD INT WORKSH
   STEFIK M, 1987, ACM T INFORM SYST, V5, P147, DOI 10.1145/27636.28056
   TRAETTEBERG H, 2002, THESIS NORWEGIAN U S
   Van Welie M, 2003, HUM FAC ER, P447
   VANDERAALST WMP, 2000, P C COOP INF SYST CO
   VANDERAALST WMP, 2001, J COOPERATIVE INFORM, V10, P443
   Yu E., 1995, MODELING STRATEGIC R
NR 36
TC 17
Z9 17
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2009
VL 74
IS 9
SI SI
BP 754
EP 776
DI 10.1016/j.scico.2009.03.001
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 462TT
UT WOS:000267380200006
DA 2024-07-18
ER

PT J
AU Puder, A
   Häberling, S
AF Puder, Arno
   Haeberling, Sascha
TI Byte code level cross-compilation for developing web applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web applications; Byte code; Cross-compiler
AB JavaScript provides the technological foundation of Web 2.0 applications. AJAX (Asynchronous JavaScript And XML) applications have received wide-spread attention as a new way to develop highly interactive web applications. Breaking with the complete-page-reload paradigm of traditional web applications, AJAX applications rival desktop applications in their look-and-feel. But AJAX places a high burden on a web developer requiring extensive JavaScript knowledge as well as other advanced client-side technologies. In this paper, we introduce a technique that allows a developer to implement an application in Java or any.NET language and then automatically cross-compile it to an AJAX-enabled web application. Published by Elsevier B.V.
C1 [Puder, Arno] San Francisco State Univ, Dept Comp Sci, San Francisco, CA 94132 USA.
   [Haeberling, Sascha] Google Switzerland GmbH, CH-8002 Zurich, Switzerland.
C3 California State University System; San Francisco State University;
   Google Incorporated
RP Puder, A (corresponding author), San Francisco State Univ, Dept Comp Sci, 1600 Holloway Ave, San Francisco, CA 94132 USA.
EM arno@sfsu.edu; haeberling@google.com
CR *AP SOFTW FDN, HTTPCLIENT
   Bloch Joshua, 2005, Java Puzzlers: Traps, Pitfalls, and Corner Cases
   *CREAM TEC, LLC WEBCREAM
   Crockford Douglas., JSON JavaScript Object Notation
   DAHM M, 1999, JAVA INFORM TAGE
   DAVIS B, 2003, P 2003 WORKSH INT VI
   *ECL FDN, 2006, RICH AJAX PLATF
   *ECMA, 2006, COMM LANG INFR CLI
   EDWARDS D, PACKER JAVASCRIPT CO
   Garrett JesseJames., 2005, AJAX NEW APPROACH WE
   *GOOGL, GOOGL WEB TOOLK BUIL
   GOSLING J, 1995, P ACM SIGPLAN WORKSH, P111
   HABERLING S, 2007, MOVIES MADE SAN FRAN
   *JCRAFT, WEIRDX PUR JAV X WIN
   *JDOM, 2004, JAV DOM API
   Kay MichaelH., SAXON XSLT XQUERY PR
   LEE TH, SWING WEB
   Leroy X, 2003, J AUTOM REASONING, V30, P235, DOI 10.1023/A:1025055424017
   LINDHOLM T, 1999, P 11 INT C COMP CONS
   MISTRY S, AJAX REMOTE PROCEDUR
   *MON, 2001, OP SOURC NET IMPL
   NAEEM NA, 2006, P 14 IEEE INT C PROG
   *OP GROUP, 1999, X WIND SYST X11R6 PR
   PETROLA F, WEBONSWING
   PUDER A, XML11 ABSTR WIND PRO
   *QOOXD, 2006, OP SOURC AJAX FRAM
   RAMSHAW L, 1988, J ACM, V35, P893, DOI 10.1145/48014.48021
   Shi YH, 2007, ACM T ARCHIT CODE OP, V4, DOI 10.1145/1328195.1328197
   STEPP M, MBEL MICROSOFT BYTEC
   VINDBERG A, JAVASCRIPT COMPRESSO
   *YAH INC, YUI YAH US INT LIB
NR 31
TC 4
Z9 4
U1 3
U2 17
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2009
VL 74
IS 5-6
BP 379
EP 396
DI 10.1016/j.scico.2009.01.009
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 436CT
UT WOS:000265390900008
OA hybrid
DA 2024-07-18
ER

PT J
AU Vu, TD
AF Vu, Thuy Duong
TI Goto elimination in program algebra
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE PGA; Cobol; Goto elimination; Restructuring
ID THREAD ALGEBRA; MAINTENANCE; ALGORITHMS
AB This paper shows that program algebra (PGA) [J.A. Bergstra, M.E. Loots, Program algebra for sequential code, J. Logic Algebraic Programm. 51 (2002) 125-156] offers a mathematical and systematic framework for reasoning about correctness and equivalence of algorithms and transformation rules for goto removal. We study correctness and equivalence for the algorithm proposed by Cooper for goto elimination with additional boolean variables. To remove goto statements without the use of additional variables, we propose a technique to get rid of head-to-head crossings and subsequently employ the results of Peterson et al. and Ramshaw. Finally, we provide formal correctness proofs in the setting of PGA for industrial transformation rules given recently by Veerman for restructuring Cobol programs in real-life applications. We hereby show that PGA can explain goto elimination with mathematical rigor to a larger public. (C) 2008 Elsevier B.V. All rights reserved.
C1 Univ Amsterdam, Sectie Software Engn, NL-1098 SJ Amsterdam, Netherlands.
C3 University of Amsterdam
RP Vu, TD (corresponding author), Univ Amsterdam, Sectie Software Engn, Kruislaan 403, NL-1098 SJ Amsterdam, Netherlands.
EM tdvu@science.uva.nl
CR ALLEN FE, 1976, COMMUN ACM, V19, P137, DOI 10.1145/360018.360025
   ASHCROFT E, 1972, INFORM P, V71, P147
   BAKER BS, 1979, J ACM, V26, P555, DOI 10.1145/322139.322151
   BAKKER JW, 1982, INFORM CONTR, V54, P70
   Bergstra JA, 2007, THEOR COMPUT SYST, V41, P3, DOI [10.1007/s00224-006-1337-4, 10.1007/S00224-006-1337-4]
   Bergstra JA, 2007, FORM ASP COMPUT, V19, P445, DOI 10.1007/s00165-007-0024-9
   Bergstra J.A., 1989, ALGEBRAIC SPECIFICAT, P1
   Bergstra JA, 2005, LECT NOTES COMPUT SC, V3470, P1097
   Bergstra JA, 2005, LECT NOTES COMPUT SC, V3526, P35
   Bergstra JA, 2002, J LOGIC ALGEBR PROGR, V51, P175, DOI 10.1016/S1567-8326(02)00020-6
   Bergstra JA, 2002, J LOGIC ALGEBR PROGR, V51, P125, DOI 10.1016/S1567-8326(02)00018-8
   BERGSTRA JA, SCI ANN COM IN PRESS
   BETHKE I, 2003, PONSE PROGRAMMA ALGE
   Boehm BW., 1981, Software Engineering Economics
   BOHM C, 1966, COMMUN ACM, V9, P366, DOI 10.1145/355592.365646
   BRUNO J, 1972, J ACM, V19, P517, DOI 10.1145/321707.321720
   CALLISS FW, 1988, SIGPLAN NOTICES, V23, P13, DOI 10.1145/43895.43897
   COOPER DC, 1967, COMMUN ACM, V10, P463, DOI 10.1145/363534.363539
   Cremer K, 2002, J SOFTW MAINT EVOL-R, V14, P257, DOI 10.1002/smr.254
   DIJKSTRA EW, 1968, COMMUN ACM, V11, P147, DOI 10.1145/362929.362947
   HAREL D, 1980, COMMUN ACM, V23, P379, DOI 10.1145/358886.358892
   HEERING J, 1989, SIGPLAN NOTICES, V24, P43, DOI 10.1145/71605.71607
   Hopcroft JE., 2008, Introduction to automata theory, languages, and computation
   Jones C., 1998, Estimating Software Cost
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   Knuth D. E., 1971, Information Processing Letters, V1, P23, DOI 10.1016/0020-0190(71)90018-4
   Knuth D. E., 1974, Computing Surveys, V6, P261, DOI 10.1145/356635.356640
   KOSARAJU SR, 1974, J COMPUT SYST SCI, V9, P232, DOI 10.1016/S0022-0000(74)80043-7
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   LEDGARD HF, 1975, COMMUN ACM, V18, P629, DOI 10.1145/361219.361222
   LERNER S, 2006, THESIS U WASHINGTON
   MCKEE JR, 1984, AFIPS CONF P, V53, P187, DOI 10.1145/1499310.1499334
   MILLS HD, 1975, COMMUN ACM, V18, P43, DOI 10.1145/360569.360659
   Mirkowska G, 1972, THESIS U WARSAW
   OWRE S, 1993, SRICSL9304
   PETERSON WW, 1973, COMMUN ACM, V16, P503, DOI 10.1145/355609.362337
   Ponse A, 2002, J LOGIC ALGEBR PROGR, V51, P157, DOI 10.1016/S1567-8326(02)00019-X
   RAMSHAW L, 1988, J ACM, V35, P893, DOI 10.1145/48014.48021
   Sellink A, 2002, SCI COMPUT PROGRAM, V45, P193, DOI 10.1016/S0167-6423(02)00061-8
   Sneed HM, 2003, FIFTH IEEE INTERNATIONAL WORKSHOP ON WEB SITE EVOLUTION THEME: ARCHITECTURE, PROCEEDINGS, P59, DOI 10.1109/WSE.2003.1234009
   Sneed HM, 2001, PROG COMPREHEN, P167, DOI 10.1109/WPC.2001.921728
   TARJAN RE, 1981, J ACM, V28, P594, DOI 10.1145/322261.322273
   VANDENBRAND MGJ, 2001, LECT NOTES COMPUTER, V2027, P365
   Veerman N, 2005, SCI COMPUT PROGRAM, V57, P129, DOI 10.1016/j.scico.2005.01.001
   Veerman N, 2004, J SOFTW MAINT EVOL-R, V16, P219, DOI 10.1002/smr.295
   Veerman N, 2006, SOFTWARE PRACT EXPER, V36, P1605, DOI 10.1002/spe.745
   Vu TD, 2008, J LOGIC ALGEBR PROGR, V74, P94, DOI 10.1016/j.jlap.2007.05.002
   WINTER VL, 1994, THESIS U NEW MEXICO
NR 49
TC 0
Z9 0
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2008
VL 73
IS 2-3
BP 95
EP 128
DI 10.1016/j.scico.2008.07.002
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 369MW
UT WOS:000260699600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Mathiske, B
   Simon, D
   Ungar, D
AF Mathiske, Bernd
   Simon, Doug
   Ungar, Dave
TI An assembler and disassembler framework for Java™ programmers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Conference on Principles and Practices of Programming in
   Java
CY 2006
CL Mannheim, GERMANY
DE cross assembler; assembler generator; disassembler; automated testing;
   the Java language; domain-specific framework; systems programming
ID MACHINE
AB The Java (TM) programming language is primarily used for platform-independent programming. Yet it also offers many productivity, maintainability and performance benefits for platform-specific functions, such as the generation of machine code. We have created reliable assemblers for SPARC (TM), AMD64, IA32 and PowerPC which support all user mode and privileged instructions and with 64 bit mode support for all but the latter. These assemblers are generated as Java source code by our extensible assembler framework, which itself is written in the Java language. The assembler generator also produces javadoc comments that precisely specify the legal values for each operand. Our design is based on the Klein Assembler System written in Self. Assemblers are generated from a specification, as are table-driven disassemblers and unit tests. The specifications that drive the generators are expressed as Java language objects. Thus no extra parsers are needed and developers do not need to learn any new syntax to extend the framework for additional ISAs. Every generated assembler is tested against a preexisting assembler by comparing the output of both. Each instruction's test cases are derived from the cross product of its potential operand values. The majority of tests are positive (i.e., result in a legal instruction encoding). The framework also generates negative tests, which are expected to cause an error detection by an assembler. As with the Klein Assembler,System, we have found bugs in the external assemblers as well as in ISA reference manuals. Our framework generates lens of millions of tests. For symbolic operands, our tests include all applicable predefined constants. For integral operands, the important boundary values, such as the respective minimum, maximum, 0, 1 and -1, are tested. Full testing can take hours to run but gives us a high degree of confidence regarding correctness. (C) 2007 Sun Microsystems Inc. Published by Elsevier B.V. All rights reserved.
C1 [Mathiske, Bernd; Simon, Doug; Ungar, Dave] Sun Microsyst Lab, Menlo Pk, CA 94025 USA.
RP Mathiske, B (corresponding author), Sun Microsyst Lab, 16 Network Circle, Menlo Pk, CA 94025 USA.
EM Bernd.Mathiske@sun.com; Doug.Simon@sun.com; David.Ungar@sun.com
CR [Anonymous], 1994, The SPARC Architecture Manual, Version 9
   BURKE M, 1999, ACM JAV GRAND C JUN
   CHIU PPK, 1990, SIGPLAN NOTICES, V25, P43, DOI 10.1145/74105.74111
   *ECL ORG, 2001, C C DEV TOOLS
   ELSNER D, 1999, USING GNU AS ASSEMBL
   FERNANDEZ MF, 1997, ICSE 97, P326
   Fraser C. W., 1992, ACM Letters on Programming Languages and Systems, V1, P213, DOI 10.1145/151640.151642
   *FREE SOFTW FDN IN, GNU LIGHTN
   Gosling James., 2005, The Java Series, V3rd
   *IBM CORP, 1994, POWERPC ARCH SPEC NE
   *INT, IA32 INT A, V2
   MATHISKE B, 2006, PROJECT MAXWELL ASSE
   PIUMARTA I, 2004, VIRTUAL MACHINE RES, P97
   Ramsey N, 1997, ACM T PROGR LANG SYS, V19, P492, DOI 10.1145/256167.256225
   Ramsey N., 1995, USENIX TECHNICAL C, P289
   Seal D., 2001, ARM ARCHITECTURE REF
   UNGAR D, 2005, 20 ANN ACM SIGPLAN C, P11
   Whaley J, 2005, SCI COMPUT PROGRAM, V57, P339, DOI 10.1016/j.scico.2004.08.006
   WICK JD, 1975, THESIS
   Wolczko M., 1995, SELF 4 0 PROGRAMMERS
   [No title captured]
NR 21
TC 0
Z9 0
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2008
VL 70
IS 2-3
BP 127
EP 148
DI 10.1016/j.scico.2007.07.007
PG 22
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 278EJ
UT WOS:000254266600004
DA 2024-07-18
ER

PT J
AU Johnstone, A
   Scott, E
AF Johnstone, Adrian
   Scott, Elizabeth
TI Automatic recursion engineering of reduction incorporated parsers
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th Workshop on Language Descriptions, Tools, Application (LDTA 05)
CY 2005
CL Edinburgh, SCOTLAND
SP ACM SIGPLAN
DE RI parsing; recursion analysis; context free languages
AB Reduction Incorporated (RI) parsers deliver high performance by suppressing the stack activity except for those rules that generate embedded recursion. Automaton constructions for RI parsing have been presented by Aycock and Horspool [J. Aycock, N. Horspool, Faster generalised LR parsing, in: Compiler Construction, 8th Intni. Conf, CC'99, in: Lecture Notes in Computer Science, vol. 1575, Springer-Verlag, 1999, pp. 32-42] and by Scott and Johnstone [A. Johnstone, E. Scott, Generalised regular parsers, in: G. Hedin (Ed.), Compiler Construction, 12th Intnl. Conf, CC'03, in: Lecture Notes in Computer Science, vol. 2622, Springer-Verlag, Berlin, 2003, pp. 232-246] but both can yield very large tables. An unusual aspect of the RI automaton is that the degree of stack activity suppression can be varied in a fine-grained way by choosing different grammar terminalisation sets, and this provides a large family of potential RI automata for real programming languages, some of which have manageable table size but still show high performance. In this paper we describe automatic construction of minimal grammar terminalisation sets, giving examples drawn from ANSI-C, Cobol and Pascal; we describe the use of profiling to inform the choice of RI automaton; we investigate the use of RI parsers for scannerless parsing; and we explain some of the phenomena that influence the time/space trade-off for RI parsers. (C) 2007 Elsevier B.V. All rights reserved.
C1 Univ London Royal Holloway & Bedford New Coll, Dept Comp Sci, Egham TW20 0EX, Surrey, England.
C3 University of London; Royal Holloway University London
RP Johnstone, A (corresponding author), Univ London Royal Holloway & Bedford New Coll, Dept Comp Sci, Egham TW20 0EX, Surrey, England.
EM a.johnstone@rhul.ac.uk; e.scott@rhul.ac.uk
CR Aho A. V., 1972, THEORY PARSING TRANS
   Aho A.V., 1986, COMPILERS PRINCIPLES
   [Anonymous], GEN LR PARSING
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], 1998, BIOL SEQUENCE ANAL P
   [Anonymous], 1974, 2nd Colloquium on Automata, Languages and Programming (ICALP'74), volume 14 of Lecture Notes in Computer Science, DOI [DOI 10.1007/978-3-662-21545-618, DOI 10.1007/3-540-06841-4_65]
   Aycock J, 1999, LECT NOTES COMPUT SC, V1575, P32
   Aycock J, 2001, ACTA INFORM, V37, P633, DOI 10.1007/PL00013319
   DONG S, 1994, GENOMICS, V23, P540, DOI 10.1006/geno.1994.1541
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Johnstone A., 2000, Proceedings of the Fourth European Conference on Software Maintenance and Reengineering, P83, DOI 10.1109/CSMR.2000.827315
   Johnstone A, 2004, LECT NOTES COMPUT SC, V2985, P89
   Johnstone A, 2003, LECT NOTES COMPUT SC, V2622, P232
   JOHNSTONE A, RDP ITERATOR BASED R, V33
   JOHNSTONE A, 2005, ELECT NOTES THEORETI
   JOHNSTONE A, 2005, P 5 WORKSH LANG DESC
   Kernighan B.W., 1988, The C Programming Language
   Knuth D. E., 1971, Software - Practice and Experience, V1, P105, DOI 10.1002/spe.4380010203
   KNUTH DE, 1965, INFORM CONTROL, V8, P607, DOI 10.1016/S0019-9958(65)90426-2
   SANDER G, 1995, VCG VISUALISATION CO
   Scott E, 2005, COMPUT J, V48, P565, DOI 10.1093/comjnl/bxh102
   Tarjan R., 1972, SIAM Journal on Computing, V1, P146, DOI 10.1137/0201010
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   vandenBrand M, 1997, ACM SIGPLAN NOTICES, V32, P54, DOI 10.1145/251621.251633
   Visser Eelco, 1997, Syntax Definition for Language Prototyping
NR 25
TC 4
Z9 4
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2007
VL 68
IS 2
BP 95
EP 110
DI 10.1016/j.scico.2006.04.011
PG 16
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 218PY
UT WOS:000250028600004
OA Bronze
DA 2024-07-18
ER

PT J
AU Omicini, A
   Ricci, A
   Viroli, M
AF Omicini, Andrea
   Ricci, Alessandro
   Viroli, Mirko
TI Agent Coordination Contexts for the formal specification and enactment
   of coordination and security policies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Security Issues in Coordination Models,
   Languages, and Systems
CY JUN 28-29, 2003
CL Eindhoven, NETHERLANDS
DE coordination; security; agent coordination context; formal specification
ID DESIGN
AB In the context of multi-agent systems (MAS), an Agent Coordination Context (ACC) is an abstraction provided by the infrastructure to each agent entering a MAS, aimed at enabling and controlling all the interactions of the agent with its environment. The notion of ACC features some key properties that help abating system complexity, that is, (i) it works as both a coordination and a security abstraction, (ii) it covers the engineering process from design to deployment, and (iii) it comes equipped with a clear formalisation, thus easing predictability of the MAS behaviour. In particular, in this paper we exploit typical process. algebra techniques to define the syntax and semantics of a language for ACC specification, describing patterns of interaction protocols allowed to the agent. This language is shown to be useful to specify and enact integrated policies for security and coordination in MAS. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Bologna Cesena, DEIS, Alma Mater Studiorum, I-47023 Cesena, Italy.
C3 University of Bologna
RP Omicini, A (corresponding author), Univ Bologna Cesena, DEIS, Alma Mater Studiorum, Via Venezia 52, I-47023 Cesena, Italy.
EM andrea.omicini@unibo.it; aricci@deis.unibo.it; mirko.viroli@unibo.it
RI Omicini, Andrea/G-5284-2013; Ricci, Alessandro/AFQ-1187-2022
OI Omicini, Andrea/0000-0002-6655-3869; Ricci,
   Alessandro/0000-0002-9222-5092; Viroli, Mirko/0000-0003-2702-5702
CR [Anonymous], 1999, JavaSpaces Principles, Patterns, and Practice
   [Anonymous], 2001, HDB PROCESS ALGEBRA, DOI DOI 10.1016/B978-044482830-9/50019-9
   Arbab F, 2002, LECT NOTES COMPUT SC, V2315, P22
   ARBAB F, 1993, CONCURRENCY-PRACT EX, V5, P23, DOI 10.1002/cpe.4330050103
   Austin JohnL., 1969, SPEECH ACTS ESSAY PH, DOI DOI 10.1017/CBO9781139173438
   BERGSTRA JA, 1985, THEOR COMPUT SCI, V37, P77, DOI 10.1016/0304-3975(85)90088-X
   Bryce C, 1999, LECT NOTES COMPUT SC, V1594, P4
   CABRI G, 2000, IEEE, V4
   Ciancarini P., 2000, Intelligent Agents VI. Agent Theories, Architectures, P250
   CREMONINI M, 1999, LECT NOTES ARTIF INT, V1647, P77
   De Nicola R, 1998, IEEE T SOFTWARE ENG, V24, P315, DOI 10.1109/32.685256
   DENICOLA R, 1997, LNCS, V1997, P220
   DULAY N, 2002, LNCS, V2222, P84
   Durfee EH, 2001, COMPUTER, V34, P39, DOI 10.1109/2.933502
   FENSTER M, 1997, READINGS AGENTS, P380
   Ferber J, 2004, LECT NOTES COMPUT SC, V2935, P214
   *FIPA, 2000, FIPA COMM ACT LIB SP
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Gorrieri R, 2006, FUND INFORM, V73, P479
   Kendall EA, 2000, IEEE CONCURR, V8, P34, DOI 10.1109/4434.846192
   Labrou Y, 2001, LECT NOTES ARTIF INT, V2086, P74
   MALONE TW, 1994, ACM COMPUT SURV, V26, P87, DOI 10.1145/174666.174668
   Minsky NH, 2000, ACM T SOFTW ENG METH, V9, P273, DOI 10.1145/352591.352592
   NORIEGA P, 2002, LNCS, V2246, P14
   Omicini A, 2004, MU S ART SOC SIM ORG, P273
   Omicini A, 2003, LECT NOTES ARTIF INT, V2586, P179
   Omicini A, 2003, PROCESS COORDINATION AND UBIQUITOUS COMPUTING, P187
   Omicini A., 1999, Autonomous Agents and Multi-Agent Systems, V2, P251, DOI 10.1023/A:1010060322135
   Omicini A, 2001, SCI COMPUT PROGRAM, V41, P277, DOI 10.1016/S0167-6423(01)00011-9
   Omicini A., 2001, COORDINATION INTERNE
   OMICINI A, 2003, AI IA NOTIZIE, V16, P7
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   Papadopoulos GA, 2001, COORDINATION OF INTERNET AGENTS: MODELS, TECHNOLOGIES AND APPLICATIONS, P25
   PARUNAK HVD, 2003, 2 INT JOINT C AUT AG, P1090
   PLOTKIN G, 1991, FN19 DAIMI AARH U DE
   Pynadath DV, 2003, AUTON AGENT MULTI-AG, V7, P71, DOI 10.1023/A:1024176820874
   Ricci A, 2003, LECT NOTES ARTIF INT, V2577, P96
   RICCI A, 2004, CYBERNET SYST, P618
   Sandhu RS, 1996, COMPUTER, V29, P38, DOI 10.1109/2.485845
   SCHUMACHER M, 2001, LNAI, V2039
   Simon RT, 1997, P IEEE CSFW, P183, DOI 10.1109/CSFW.1997.596811
   SMITH RG, 1980, IEEE T COMPUT, V29, P1104, DOI 10.1109/TC.1980.1675516
   TRAPPL R, 2004, CYBERNETICS SYSTEMS
   VIROLI M, 2004, CYBERNET SYST, P564
   Viroli M, 2006, FUND INFORM, V73, P507
   WYCKOFF P, 1998, IBM J RES DEV, V37
   Zambonelli F, 2004, AUTON AGENT MULTI-AG, V9, P253, DOI 10.1023/B:AGNT.0000038028.66672.1e
   Zambonelli F, 2001, INT J SOFTW ENG KNOW, V11, P303, DOI 10.1142/S0218194001000505
NR 48
TC 7
Z9 7
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV
PY 2006
VL 63
IS 1
BP 88
EP 107
DI 10.1016/j.scico.2005.07.014
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 096DD
UT WOS:000241356300006
DA 2024-07-18
ER

PT J
AU Baier, C
   Sirjani, M
   Arbab, F
   Rutten, J
AF Baier, Christel
   Sirjani, Marjan
   Arbab, Farhad
   Rutten, Jan
TI Modeling component connectors in Reo by constraint automata
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd International Workshop on Foundations of Languages and Software
   Architectures (FOCLASA 03)
CY SEP 02, 2003
CL -Coordination, Marseilles, FRANCE
HO -Coordination
DE constraint automata; Reo; timed data streams; coordination; components;
   composition; bisimulation; simulation; verification
AB In this paper we introduce constraint automata and propose them as an operational model for Reo, an exogenous coordination language for compositional construction of component connectors based on a calculus of channels. By providing composition operators for constraint automata and defining notions of equivalence and refinement relations for them, this paper covers the foundations for building tools to address concerns such as the automated construction of the automaton for a given component connector, equivalence checking or containment checking of the behavior of two given connectors, and verification of coordination mechanisms. (c) 2006 Elsevier B.V. All rights reserved.
C1 Univ Bonn, Inst Informat 1, D-53117 Bonn, Germany.
   Univ Tehran, Dept Elect & Comp Engn, Tehran, Iran.
   IPM, Sch Comp Sci, Tehran, Iran.
   Ctr Wiskunde & Informat, Dept Software Engn, NL-1090 GB Amsterdam, Netherlands.
   Leiden Univ, Leiden Inst Adv Comp Sci, NL-2333 CA Leiden, Netherlands.
   Univ Waterloo, Sch Comp Sci, Waterloo, ON N2L 3G1, Canada.
   Vrije Univ Amsterdam, NL-1081 HV Amsterdam, Netherlands.
C3 University of Bonn; University of Tehran; Leiden University; Leiden
   University - Excl LUMC; University of Waterloo; Vrije Universiteit
   Amsterdam
RP Baier, C (corresponding author), Univ Bonn, Inst Informat 1, Romerstr 164, D-53117 Bonn, Germany.
EM baier@cs.uni-bonn.de; msirjani@ut.ac.ir; Farhad.Arbab@cwi.nl;
   Jan.Rutten@cwi.nl
CR [Anonymous], 1998, BINARY DECISION DIAG, DOI DOI 10.1007/978-1-4757-2892-7
   [Anonymous], 2007, Logic synthesis and verification algorithms
   [Anonymous], 1989, PRENTICE HALL INT SE
   [Anonymous], 1989, CWI Q.
   [Anonymous], 1990, HDB THEORETICAL COMP
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], 1990, Introduction to Lattices and Order
   [Anonymous], MATH STRUCTURES COMP
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   BOLOGNESI T, 1987, PROTOCOL SPECIFICATI, V7, P165
   BROOKES SD, 1984, J ACM, V31, P560, DOI 10.1145/828.833
   BRYANT RE, 1986, IEEE T COMPUTERS C, V35
   Bustan D., 2003, ACM Transactions on Computational Logic, V4, P181, DOI 10.1145/635499.635502
   DEALFARO L, 2001, P JOINT 8 EUR SOFTW, V26, P109
   FOKKINK W, 1999, EATCS SERIES
   Grosu R., 1995, TUM19533
   Henzinger MR, 1995, AN S FDN CO, P453, DOI 10.1109/SFCS.1995.492576
   Hopcroft JE., 2008, Introduction to automata theory, languages, and computation
   Kam Timothy., 1998, MULTIPLE VALUED LOGI, V4, P9
   KANELLAKIS PC, 1990, INFORM COMPUT, V86, P43, DOI 10.1016/0890-5401(90)90025-D
   KANNELAKIS P, 1983, P 2 ACM S PRINC DIST, P228
   MEHTA N, 2003, SENR0309 CENTR WISK
   MEHTA NR, 2003, P 9 EUR SOFTW ENG C, P347
   Meinel C., 1998, ALGORITHMS DATA STRU
   Minato S., 1990, DAC, Proceedings of the 27th ACM/IEEE Conference, (New York, NY, USA), P52
   Minato S., 1996, BINARY DECISION DIAG, DOI DOI 10.1007/978-1-4613-1303-8
   PAIGE R, 1987, SIAM J COMPUT, V16, P973, DOI 10.1137/0216062
   Wegener I., 2000, BRANCHING PROGRAMS B
NR 28
TC 167
Z9 172
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2006
VL 61
IS 2
BP 75
EP 113
DI 10.1016/j.scico.2005.10.008
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 049MM
UT WOS:000238020600002
OA Green Published
DA 2024-07-18
ER

PT J
AU Ayres, T
   Nolan, B
AF Ayres, T
   Nolan, B
TI Voice activated command and control with speech recognition over WiFi
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY   21, 2005
CL New York, NY
DE speech recognition; ubiquitous computing; Java; command and control;
   wireless networks
AB This paper presents work conducted to date on the development of a voice activated command and control framework specifically for the control of remote devices in a ubiquitous computing environment. The prototype device is a Java controlled Lego Mindstorm robot. The research considers three different scenario configurations. A recognition grammar for command and control of the robot has been created and implemented in Java, in part in the recognition engine and in part on the robot. The physical topology involves Java at each node endpoint, that is, at the handheld PC (iPaq), the PC workstation, the Linux server and onboard the robot (including its Java based Lejos OS). Network communications is primarily WLAN with an element of IR where the robot is concerned. The speech recognition software used includes Sphinx4, Microsoft SAPI and the Java Speech API. We compare these speech technologies and present their benefits in the context of this research. For each given scenario we present and discuss the implementation challenges encountered and their corresponding solutions, including future plans to create additional grammars to extend the framework's range of devices. (c) 2005 Elsevier B.V. All rights reserved.
C1 Inst Technol, Blanchardstown, Ireland.
C3 Technological University Dublin; Munster Technological University (MTU)
RP Ayres, T (corresponding author), Inst Technol, Blanchardstown, Ireland.
EM tony.ayres@itb.ie; brian.nolan@itb.ie
CR Becchetti C., 1999, Speech Recognition, Theory and C++ Implementation
   *GARTN GROUP, RES PDA MOB PHON SAL
   GORDON R, 1999, ESSENTIAL JMF JAV ME
   Jelinek Frederick., 1998, Statistical Methods for Speech Recognition
   Jurafsky D., 2000, Speech and language processing: An introduction to natural language processing, computational linguistics, and speech recognition
   KINNERSLEY J, CLOUDGARDEN JAVA SPE
   Rabiner L.R., 1993, FUNDAMENTALS SPEECH, VVolume 14
   Wigley A., 2003, Microsoft .NET compact framework Core Reference
   Xuan Huang, 2021, 2021 IEEE Intl Conf on Dependable, Autonomic and Secure Computing, Intl Conf on Pervasive Intelligence and Computing, Intl Conf on Cloud and Big Data Computing, Intl Conf on Cyber Science and Technology Congress (DASC/PiCom/CBDCom/CyberSciTech), P867, DOI 10.1109/DASC-PICom-CBDCom-CyberSciTech52372.2021.00144
NR 9
TC 12
Z9 14
U1 1
U2 9
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 109
EP 126
DI 10.1016/j.scico.2005.07.007
PG 18
WC Computer Science, Software Engineering
WE Conference Proceedings Citation Index - Science (CPCI-S); Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 993HZ
UT WOS:000233946500008
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Cabri, G
   Ferrari, L
   Leonardi, L
AF Cabri, G
   Ferrari, L
   Leonardi, L
TI Applying security policies through agent roles: A JAAS based approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Academic Emergency Medicine Consensus Conference on Ethical Conduct of
   Resuscitation Research
CY MAY 21, 2005
CL New York, NY
DE roles; Java agents; authentication; local policies
AB Agents are an emerging technology that grants programmers a new way to exploit distributed resources. Role is a powerful concept that can be used to model agent interactions, both between different agents and between agents and environments. Roles allow agents to dynamically acquire capabilities to perform specific tasks, and therefore enable separation of concerns and code reusability in software development and maintenance. Permissions and security issues related to role's use should be carefully taken into account, especially when the agent scenario becomes open, including even mobile agents. In a Java agent scenario, we believe that the standard policy file mechanism does not suffice, because a fine grain permission management is required. This paper focuses on how to exploit the Java Authentication and Authorization Service (JAAS) at the role level in order to apply authorizations and local policies to Java agents for controlling the use of their roles. (c) 2005 Elsevier B.V. All rights reserved.
C1 Univ Modena, Dipartimento Ingn Informaz, I-41100 Modena, Italy.
C3 Universita di Modena e Reggio Emilia
RP Univ Modena, Dipartimento Ingn Informaz, Via Vignolese 905, I-41100 Modena, Italy.
EM cabri.giacomo@unimo.it; ferrari.luca@unimo.it; leonardi.letizia@unimo.it
RI Cabri, Giacomo/M-6723-2015; Leonardi, Letizia/L-9722-2015
OI Cabri, Giacomo/0000-0002-4942-2453; Leonardi,
   Letizia/0000-0003-4035-8560
CR BECHT M, 1999, 4 IFCIS C COOP INF S
   Cabri G, 2005, IBM SYST J, V44, P185, DOI 10.1147/sj.441.0185
   CABRI G, IN PRESS APPL SOFT E
   CABRI G, 2004, P INT C SYST MAN CYB
   CABRI G, 2004, 3 INT C PRINC PRACT
   CABRI G, 2003, P 2003 IEEE INT C SY
   CABRI G, 2003, IEEE INT WORKSH EN T
   FASLI M, 2003, 1 EUR WORKSH MULT AG
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Jennings NR, 2001, COMMUN ACM, V44, P35, DOI 10.1145/367211.367250
   LUCK M, AGENT TECHNOLOGY ENA
   Sandhu RS, 1996, COMPUTER, V29, P38, DOI 10.1109/2.485845
   *SUN MICR, JAV AUTH AUTH SERV A
   *SUN MICR, ENT JAV BEANS
   TOLONE WJ, 2003, P 2003 IEEE INT C SY
   Wooldridge M, 2000, AUTON AGENT MULTI-AG, V3, P285, DOI 10.1023/A:1010071910869
   Xu CZ, 2003, 23RD INTERNATIONAL CONFERENCE ON DISTRIBUTED COMPUTING SYSTEMS WORKSHOPS, P493
NR 17
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2006
VL 59
IS 1-2
BP 127
EP 146
DI 10.1016/j.scico.2005.07.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 993HZ
UT WOS:000233946500009
DA 2024-07-18
ER

PT J
AU Abadi, M
   Blanchet, B
AF Abadi, M
   Blanchet, B
TI Computer-assisted verification of a protocol for certified email
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Static Analysis Symposium (SAS 2003)
CY JUN 11-13, 2003
CL SAN DIEGO, CA
SP ACM
DE security protocols; protocol formal analysis
ID SECRECY
AB We present the formalization and verification of a recently developed cryptographic protocol for certified email. Relying on a tool for automatic protocol analysis, we establish the key security properties of the protocol. This case study explores the use of general correspondence assertions in automatic proofs, and aims to demonstrate the considerable power of the tool and its applicability to non-trivial, interesting protocols. (c) 2005 Elsevier B.V All rights reserved.
C1 Univ Calif Santa Cruz, Comp Sci Dept, Santa Cruz, CA 95064 USA.
   CNRS, Ecole Normale Super, Paris, France.
   Max Planck Inst Informat, Saarbrucken, Germany.
C3 University of California System; University of California Santa Cruz;
   Universite PSL; Ecole Normale Superieure (ENS); Centre National de la
   Recherche Scientifique (CNRS); Max Planck Society
RP Abadi, M (corresponding author), Univ Calif Santa Cruz, Comp Sci Dept, Santa Cruz, CA 95064 USA.
EM abadi@cs.ucsc.edu; Bruno.Blanchet@ens.fr
RI Blanchet, Bruno/AAG-8343-2020
CR Abadi M, 2005, J ACM, V52, P102, DOI 10.1145/1044731.1044735
   ABADI M, 2002, 11 INT WORLD WID WEB
   [Anonymous], P 9 ACM C COMP COMM
   Bella G, 2003, LECT NOTES COMPUT SC, V2758, P352
   Bella G, 1998, LECT NOTES COMPUT SC, V1485, P361, DOI 10.1007/BFb0055875
   BELLA G, 1997, DIMACS WORKSH DESIGN
   Blanchet B, 2003, LECT NOTES COMPUT SC, V2896, P188
   Blanchet B, 2002, LECT NOTES COMPUT SC, V2477, P342
   Blanchet B, 2001, P IEEE CSFW, P82, DOI 10.1109/CSFW.2001.930138
   Gordon AD, 2002, P IEEE CSFW, P77, DOI 10.1109/CSFW.2002.1021808
   Gordon AD, 2001, P IEEE CSFW, P145, DOI 10.1109/CSFW.2001.930143
   KRAWCZYK H, 1996, P INT SOC S NETW DIS
   Kremer S, 2002, P IEEE CSFW, P206, DOI 10.1109/CSFW.2002.1021817
   Mitchell JC, 1998, PROCEEDINGS OF THE SEVENTH USENIX SECURITY SYMPOSIUM, P201
   Paulson L., 1999, ACM T COMPUT SYST, V2, P332
   Schneider S, 1998, 11TH IEEE COMPUTER SECURITY FOUNDATIONS WORKSHOP - PROCEEDINGS, P54, DOI 10.1109/CSFW.1998.683155
   Shmatikov V, 2002, THEOR COMPUT SCI, V283, P419, DOI 10.1016/S0304-3975(01)00141-4
   WOO TYC, 1993, 1993 IEEE COMPUTER SOCIETY SYMPOSIUM ON RESEARCH IN SECURITY AND PRIVACY : PROCEEDINGS, P178
NR 18
TC 26
Z9 30
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT
PY 2005
VL 58
IS 1-2
BP 3
EP 27
DI 10.1016/j.scico.2005.02.002
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 968PY
UT WOS:000232175700002
DA 2024-07-18
ER

PT J
AU Chen, HM
   Kazman, R
   Garg, A
AF Chen, HM
   Kazman, R
   Garg, A
TI BITAM: An engineering-principled method for managing misalignments
   between business and IT architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 3rd International Workshop on System/Software Architectures (IWSSA 04)
CY JUN, 2004
CL Las Vegas, NV
ID STRATEGIC ALIGNMENT; SYSTEMS
AB As the rates of business and technological changes accelerate, misalignments between business and IT architectures are inevitable. Existing alignment models, while important for raising awareness of alignment issues, have provided little in the way of guidance for actually correcting misalignment and thus achieving alignment. This paper introduces the BITAM (Business IT Alignment Method) which is a process that describes a set of twelve steps for managing, detecting and correcting misalignment. The methodology is an integration of two hitherto distinct analysis areas: business analysis and architecture analysis. The BITAM is illustrated via a case study conducted with a Fortune 100 company. (c) 2005 Elsevier B.V All rights reserved.
C1 Univ Hawaii, Dept Informat Technol Management, Honolulu, HI 96825 USA.
   FedEx Corp, Dallas, TX USA.
C3 University of Hawaii System
RP Kazman, R (corresponding author), Univ Hawaii, Dept Informat Technol Management, Honolulu, HI 96825 USA.
EM hmchen@hawaii.edu; kazman@hawaii.edu; agarg@fedex.com
CR [Anonymous], USE CASE DRIVEN OBJE
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Bernus P., 1996, MODELLING METHODOLOG, P183
   BOAR B, 2001, STRATEGIC PLANNING I
   Boehm BW., 2000, SOFTWARE COST ESTIMA, VII
   Carroll J., 2000, Making Use: Scenario-based Design of Human-Computer Interactions
   Chan YE, 1997, INFORM SYST RES, V8, P125, DOI 10.1287/isre.8.2.125
   Chen Q., 2004, DATABASE MARKETING C, V11, P333, DOI [10.1057/palgrave.dbm.3240232, DOI 10.1057/PALGRAVE.DBM.3240232]
   Clements P., 2001, EVALUATING SOFTWARE
   *COMP SCI CORP, 2001, 14 ANN CRIT ISS INF
   El Sawy O.A., 2001, REDESIGNING ENTERPRI
   FRIGO ML, 2002, STRATEGY BALANCED SC, V84
   Hammer M., 1994, REENGINEERING CORPOR
   HENDERSON JC, 1993, IBM SYST J, V32, P4
   JONES TC, 1999, ESTIMATING SOFTWARE
   KAPLAN D, 1996, HARVARD BUSINESS REV, V74
   Kaplan D.R. S., 1996, The Balanced Scorecard: Translating Strategy into Action
   Kaplan R., 1992, Harvard Business Review Vol, V70
   Kazman R, 2001, PROC INT CONF SOFTW, P297, DOI 10.1109/ICSE.2001.919103
   Kazman R., 1999, Automated Software Engineering, V6, P107, DOI 10.1023/A:1008781513258
   Kazman R., 1994, P ICSE, V16, P81
   Kruchten Phillip., 1995, IEEE Software, V12
   LASSING N, 2001, J SYSTEMS SOFTWARE
   Luftman J., 1999, CALIFORNIA MANAGEMEN, V42
   Luftman J., 1993, IBM SYSTEMS J, V32
   LUFTMAN J, 1996, MANAGING INFORMATION
   PARKER M, 1998, INFORMATION EC LINKI
   Preston R, 2003, NETW COMPUT, V14, P12
   Rumbaugh James, 1999, The unified modeling language reference manual
   Tallon P. P., 2003, CIO INSIGHT
   VANGREMBERGEN W, 2001, P 34 HAW INT C SYST
   WHITMAN ME, 1996, ENTERPRISE MODELING, V13
   WILLIAMS TJ, 1994, COMPUTERS IND, V24
   Yan H, 2004, PROC INT CONF SOFTW, P470, DOI 10.1109/ICSE.2004.1317469
NR 34
TC 44
Z9 47
U1 0
U2 6
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2005
VL 57
IS 1
BP 5
EP 26
DI 10.1016/j.scico.2004.10.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 935UU
UT WOS:000229809700002
OA Bronze
DA 2024-07-18
ER

PT J
AU Lumpe, M
   Schneider, JG
AF Lumpe, M
   Schneider, JG
TI A form-based meta-model for software composition
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE object models; meta-level framework; compositional abstractions
ID CALCULUS; INHERITANCE; SEMANTICS
AB In recent years considerable progress has been made in facilitating the specification and implementation of software components. However, it is far less clear what kind of language support is needed to enable a flexible and reliable software composition approach. Object-oriented programming languages seem to already offer some reasonable support for component-based programming (e.g., encapsulation of state and behavior, inheritance, late binding). Unfortunately, these languages typically provide only a fixed and restricted set of mechanisms for constructing and composing compositional abstractions.
   In this article, we will present a generic meta-level framework for modeling both object-and component-oriented programming abstractions. In this framework, various features, which are typically merged in traditional object-oriented programming languages, are all replaced by a single concept: the composition of forms. Forms are first-class, immutable, extensible records that allow for the specification of compositional abstractions in a language-neutral and robust way. Thus, using the meta-level framework, we can define a compositional model that provides the means both to bridge between different object models and to incorporate existing software artifacts into a unified composition system. (c) 2004 Elsevier B.V. All rights reserved.
C1 Iowa State Univ, Dept Comp Sci, Ames, IA 50011 USA.
   Swinburne Univ Technol, Fac Informat & Commun Technol, Hawthorn, Vic 3122, Australia.
C3 Iowa State University; Swinburne University of Technology
RP Iowa State Univ, Dept Comp Sci, 113 Atanasoff Hall, Ames, IA 50011 USA.
EM lumpe@cs.iastate.edu; jschneider@swin.edu.au
OI Schneider, Jean-Guy/0000-0002-9827-5496
CR ABADI M, 1996, THEORY OBJECT
   Achermann F, 2001, LECT NOTES COMPUT SC, V1897, P77
   ACHERMANN F, 2002, THESIS U BERN I COMP
   AHGA G, 1986, ACTORS MODEL CONCURR
   ANCONA D, 1996, LECT NOTES COMPUTER, V1139, P179
   [Anonymous], 1997, Software engineering with reusable components
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2000, Programming Perl
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   ASSmann Uwe., 2003, INVASIVE SOFTWARE CO
   Bono V, 1999, LECT NOTES COMPUT SC, V1628, P43
   BRACHA G, 1992, PROCEEDINGS OF THE 1992 INTERNATIONAL CONFERENCE ON COMPUTER LANGUAGES, P282, DOI 10.1109/ICCL.1992.185492
   BRACHA G, 1990, SIGPLAN NOTICES, V25, P303, DOI 10.1145/97946.97982
   BRUCE KB, 1994, J FUNCTIONAL PROGRAM, V4
   BRUCE KB, 1997, LNCS, V1281, P415
   CARDELLI L, 1988, INFORM COMPUT, V76, P138, DOI 10.1016/0890-5401(88)90007-7
   Cardelli Luca., 1991, Mathematical structures in computer science, V1, P3, DOI DOI 10.1017/S0960129500000049
   COOK W, 1994, INFORM COMPUT, V114, P329, DOI 10.1006/inco.1994.1090
   COOK WR, 1989, THESIS DEP COMPUTER
   Dami L, 1998, THEOR COMPUT SCI, V192, P201, DOI 10.1016/S0304-3975(97)00150-3
   DAMI L, 1994, THESIS CTR U INFORMA
   Fisher K., 1995, LECT NOTES COMPUTER, V965, P42
   FOURNET C, 1996, P 23 ACM S PRINC PRO, P372, DOI DOI 10.1145/237721.237805
   GOLDBERG A, 1989, SMALL TALK 80
   Hoare CAR., 1985, Communicating Sequential Processes
   Kiczales G., 1991, The Art of the Metaobject Protocol
   LUMPE M, 1999, THESIS U BERN I COMP
   LUMPE M, 2003, P ESEC 03 WORKSH SPE, P58
   LUMPE M, 1996, P LANG MOD OBJ 96 OC, P1
   Lutz M., 2003, LEARNING PYTHON, V2nd
   Madsen O. Lehrmann, 1993, Object Oriented Programming in the BETA Programming Language
   MENS T, 1994, VUBTINFTR9403 DEP CO
   MIKHAJLOV L, 1998, P ECOOP 1998 JUL 199, V1445, P355
   Milner R., 1989, Communication and concurrency
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   NIERSTRASZ O, 2003, IAM03004 U BERN I CO
   Nierstrasz O., 1995, Object-Oriented Software Composition, P3
   Pierce B. C., 1994, Journal of Functional Programming, V4, P207, DOI 10.1017/S0956796800001040
   Reddy U. S., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P289, DOI 10.1145/62678.62721
   ROSSIE JG, 1996, P ECOOP 96 JUL 1996, V1098, P248
   SCHNEIDER JG, 1997, P LANG MOD OBJ 97 RO, P61
   SCHNEIDER JG, 1999, THESIS U BERN I COMP
   Steele Jr Guy L., 1990, COMMON LISP LANGUAGE
   Szyperski C., 2002, Component Software-Beyond Object-Oriented Programming
   VanLimberghen M, 1996, OBJECT ORIENTED SYST, V3, P1
   Zenger M, 2002, LECT NOTES COMPUT SC, V2374, P470
   [No title captured]
NR 47
TC 11
Z9 12
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 59
EP 78
DI 10.1016/j.scico.2004.11.005
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000005
OA Green Published
DA 2024-07-18
ER

PT J
AU Arbab, F
AF Arbab, F
TI Abstract Behavior Types: a foundation model for components and their
   composition
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
DE coordination; components; composition; Abstract Behavior Types; Reo;
   coalgebraic semantics; streams
ID LANGUAGE
AB The notion of Abstract Data Type (ADT) has served as a foundation model for structured and object oriented programming for some thirty years. The current trend in software engineering toward component based systems requires a foundation model as well. The most basic inherent property of an ADT, i.e., that it provides a set of operations, subverts some highly desirable properties in emerging formal models for components that are based on the object oriented paradigm.
   We introduce the notion of Abstract Behavior Type (ABT) as a higher-level alternative to ADT and propose it as a proper foundation model for both components and their composition. An ABT defines an abstract behavior as a relation among a set of timed-data-streams, without specifying any detail about the operations that may be used to implement such behavior or the data types it may manipulate for its realization. The ABT model supports a much looser coupling than is possible with the ADT's operational interface, and is inherently amenable to exogenous coordination. We propose that both of these are highly desirable, if not essential, properties for models of components and their composition.
   To demonstrate the utility of the ABT model, we describe Reo: an exogenous coordination language for compositional construction of component connectors based on a calculus of channels. We show the expressive power of Reo, and the applicability of ABT, through a number of examples. (C) 2004 Elsevier B.V. All rights reserved.
C1 Ctr Math & Comp Sci, NL-1098 SJ Amsterdam, Netherlands.
RP Ctr Math & Comp Sci, Kruislaan 413, NL-1098 SJ Amsterdam, Netherlands.
EM farhad@cwi.nl
CR [Anonymous], ELECT NOTES THEORETI
   [Anonymous], MONOGRAPHS COMPUTER
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], MATH STRUCTURES COMP
   [Anonymous], 1986, P 13 ANN ACM S PRINC
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Arbab F, 2002, LECT NOTES COMPUT SC, V2315, P22
   Arbab F, 2000, LECT NOTES COMPUT SC, V1906, P249
   ARBAB F, 2001, SENR012 CTR WISK INF
   ARBAB F, 2004, ELECT NOTES THEORETI, V97, P25
   ARBAB F, 2002, SENR0203 CENTR WISK
   ARBAB F, 1996, LECT NOTES COMPUT SC, V1061, P34
   ARBAB F, 2000, P ACM SAC 00, P166
   Arbab Farhad., 1998, Bulletin of the Dutch Association for Theoretical Computer Science NVTI, P11
   BARBOSA L, 2001, THESIS U MINHO BRAGA
   BERGMANS L, 2001, COMMUN ACM, V17, P51
   Bonsangue MM, 2000, THEOR COMPUT SCI, V240, P3, DOI 10.1016/S0304-3975(99)00226-1
   BROY M, 2000, LOGICAL BASIS COMPON
   BROY M, THEORETICAL COMPUTER, P258
   Burdy L., 2003, Electronic Notes in Theoretical Computer Science, V80
   DEBAKKER JW, 1985, LECT NOTES COMPUT SC, V194, P140
   DEBOER F, 2003, LECT NOTES COMPUTER, V2852
   DEBOER FS, 2000, LECT NOTES COMPUTER, V1893, P212
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   GORE J, 1996, OBJECT STRUCTURES BU
   Grimes R., 1997, PROFESSIONAL DCOM PR
   GUMM H, 1998, ELECT NOTES THEORETI
   HELM R, 1990, SIGPLAN NOTICES, V25, P169, DOI 10.1145/97946.97967
   HENNICKER R, 1961, LNCS, V544, P49
   Huber F, 1998, TOOLS 26 - TECHNOLOGY OF OBJECT-ORIENTED LANGUAGES - PROCEEDINGS, P58, DOI 10.1109/TOOLS.1998.711003
   JACOBS B, 1996, P TAPSOFT 97
   JACOBS B, 1998, ELECT NOTES THEORETI, V11
   JACOBS B, 1996, LECT NOTES COMPUTER, V1101, P520
   JACOBS B, 1996, LECT NOTES COMPUTER, V1098, P210
   Jacobs Bart., 1996, B EATCS, V62, P222
   KOK J, 1989, THESIS VRIJE U AMSTE
   Leavens G.T., 2000, OBJECT ORIENTED PROG, P105
   LEE E, 1993, OVERVIEW PTOLEMY PRO
   Lee EA, 1998, IEEE T COMPUT AID D, V17, P1217, DOI 10.1109/43.736561
   LEE EA, 1995, P IEEE, V83, P773, DOI 10.1109/5.381846
   LEINO KRM, 2000, SRCTN2000002 HEWL PA
   LI S, 2000, PROFESSIONAL JINI MA
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   Matena V., 2000, APPLYING ENTERPRISE
   MEHTA N, 2003, SENR0309 CENTR WISK
   Meyer B., 1994, REUSABLE SOFTWARE BA
   Meyer B., 1992, Eiffel: The Language
   MILNER R, 1993, COMMUN ACM, V36, P78, DOI 10.1145/151233.151240
   MILNER R, 1992, INFORM COMPUT, V100, P1, DOI [10.1016/0890-5401(92)90008-4, 10.1016/0890-5401(92)90009-5]
   Moss Lawrence S, 1997, Logic Journal of the IGPL, V5, P231
   Moss LS, 1999, ANN PURE APPL LOGIC, V96, P277, DOI 10.1016/S0168-0072(98)00042-6
   OAKS S, 2000, JINI NUTSHELL
   PANANGADEN P, 2004, CRM MONOGRAPH SERIES
   Papadopoulos G. A., 1998, ADV COMPUT, V46, P329, DOI [DOI 10.1016/S0065-2458(08)60208-9, 10.1016/S0065-2458(08)60208-9]
   Reichel H., 1995, Mathematical Structures in Computer Science, V5, P129, DOI 10.1017/S0960129500000694
   Rustan K, 1998, LECT NOTES COMPUT SC, V1383, P302
   RUTTEN J, 2003, SENE0305 CTR WISK IN
   RUTTEN J, 1999, DISCRETE EVENT SYSTE
   Rutten J. J. M. M., 1996, CSR9652 CTR WISK INF
   Rutten JJMM, 1998, LECT NOTES COMPUT SC, V1466, P194, DOI 10.1007/BFb0055624
   Rutten RGM, 2001, ASTR SOC P, V249, P3
   SANGIORGI D, THEORETICAL COMPUTER, V253
   Siegel J., 1996, COBRA FUNDAMENTALS P
   SNYDER A, 1986, SIGPLAN NOTICES, V21, P38, DOI 10.1145/960112.28702
   Szyperski C., 2002, COMPONENT SOFTWARE, V2nd
   WIRSING M, 1988, MIP8817 PASS U
   [No title captured]
NR 67
TC 68
Z9 81
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 3
EP 52
DI 10.1016/j.scico.2004.05.010
PG 50
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700002
OA Green Published
DA 2024-07-18
ER

PT J
AU Breunesse, CB
   Cataño, N
   Huisman, A
   Jacobs, B
AF Breunesse, CB
   Cataño, N
   Huisman, A
   Jacobs, B
TI Formal methods for smart cards:: an experience report
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
DE formal specification languages; smart cards; Java Card; formal
   verification; JML; ESC/Java; annotations
ID PROGRAMS
AB This paper presents a case study in the formal specification and verification of a smart card application. The application is an electronic purse implementation, developed by the smart card producer Gemplus as a test case for formal methods for smart cards. It has been annotated (by the authors) with specifications using the Java Modeling Language (JML), a language designed to specify the functional behavior of Java classes. The reason for using JML as a specification language is that several tools are available to check (parts of) the specification w.r.t. an implementation. These tools vary in their level of automation and in the level of correctness they ensure. Several of these tools have been used for the Gemplus case study. We discuss how the usage of these different tools is complementary: large parts of the specification can be checked automatically, while more precise verification methods can be used for the more intricate parts of the specification and implementation. We believe that having such a range of tools available for a single specification language is an important step towards the acceptance of formal methods in industry. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Nijmegen, Nijmegen, Netherlands.
   INRIA, Sophia Antipolis, France.
C3 Radboud University Nijmegen; Inria
RP Univ Nijmegen, Nijmegen, Netherlands.
EM ceesb@cs.kun.ni; Nestor.Catano@inria.fr; Marieke.Huisman@inria.fr;
   bart@cs.kun.nl
OI Huisman, Marieke/0000-0003-4467-072X; Catano, Nestor/0000-0001-5015-5893
CR [Anonymous], 1997, Object-oriented software construction
   BRETAGNE E, 2000, PACAP PURSE LOYALTY
   BREUNESSE CB, 2002, LNCS, V2422, P304
   Burdy L, 2003, LECT NOTES COMPUT SC, V2805, P422
   BURDY L, 2003, FORMAL METHODS IND C, V80
   Cata~no N., 2002, FME 2002, V2391, P272
   Cataño N, 2003, LECT NOTES COMPUT SC, V2575, P26
   CHALIN P, 2003, WORKSH FORM TECHN JA
   Ernst MD, 2001, IEEE T SOFTWARE ENG, V27, P99, DOI 10.1109/32.908957
   Filliâtre JC, 2003, J FUNCT PROGRAM, V13, P709, DOI 10.1017/S095679680200446X
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   FLANAGAN C, 2002, LECT NOTES COMPUTER, V2404, P180
   Huisman M, 2001, THESIS U NIJMEGEN
   Jacobs B, 2003, LECT NOTES COMPUT SC, V2884, P1
   Jacobs B, 2001, LECT NOTES COMPUT SC, V2028, P284
   Jacobs B, 2004, J LOGIC ALGEBR PROGR, V58, P61, DOI 10.1016/j.jlap.2003.07.005
   Leavens G.T., 1998, Preliminary design of JML: A behavioral interface specification language for Java
   Leavens GaryT., 2013, JML Reference Manual
   LEINO KRM, 1995, THESIS CALIFORNIA I
   LEINO KRM, 2000, 2000002 SRC COMP SYS
   Marché C, 2004, J LOGIC ALGEBR PROGR, V58, P89, DOI 10.1016/j.jlap.2003.07.006
   Meyer J, 2000, LECT NOTES COMPUT SC, V1785, P63
   OWRE S, 1996, LNCS, V1102, P411
   PAVLOVA M, 2004, IN PRESS CARDIS 2004
   Poetzsch-Heffter A, 1999, LECT NOTES COMPUT SC, V1576, P162
   POLL E, FORMAL INTERFACE JAV
   2000, DIFFERENCES ESC JAVA
NR 27
TC 16
Z9 16
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 53
EP 80
DI 10.1016/j.scico.2004.05.011
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700003
OA Green Published
DA 2024-07-18
ER

PT J
AU Leavens, GT
   Cheon, Y
   Clifton, C
   Ruby, C
   Cok, DR
AF Leavens, GT
   Cheon, Y
   Clifton, C
   Ruby, C
   Cok, DR
TI How the design of JML accommodates both runtime assertion checking and
   formal verification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 1st International Symposium on Formal Methods for Components and Objects
CY NOV 05-11, 2002
CL LEIDEN, NETHERLANDS
SP Lorentz Ctr, IST Project Omega, Dutch Inst Programming Res & Algorithm, Royal Netherlands Acad Arts & Sci, Centrum Wiskunde Informat, Leiden Inst Adv Comp Sci
DE specification languages; runtime assertion checking; formal methods;
   program verification; programming by contract; Java language; JML
   language
ID JAVA PROGRAM VERIFICATION; OBJECT-ORIENTED PROGRAMS; SPECIFICATION;
   LANGUAGE; LOGIC
AB Specifications that are used in detailed design and in the documentation of existing code are primarily written and read by programmers. However, most formal specification languages either make heavy use of symbolic mathematical operators, which discourages use by programmers, or limit assertions to expressions of the underlying programming language, which makes it difficult to write exact specifications. Moreover, using assertions that are expressions in the underlying programming language can cause problems both in runtime assertion checking and in formal verification, because such expressions can potentially contain side effects. The Java Modeling Language, JML, avoids these problems. It uses a side-effect free subset of Java's expressions to which are added a few mathematical operators (such as the quantifiers \forall and \exists). JML also hides mathematical abstractions, such as sets and sequences, within a library of Java classes. The goal is to allow JML to serve as a common notation for both formal verification and runtime assertion checking; this gives users the benefit of several tools without the cost of changing notations. (C) 2004 Elsevier B.V. All rights reserved.
C1 Iowa State Univ, Dept Comp Sci, Ames, IA USA.
   Univ Texas, Dept Comp Sci, El Paso, TX 79968 USA.
   Eastman Kodak Co, Res & Dev Labs, Rochester, NY USA.
C3 Iowa State University; University of Texas System; University of Texas
   El Paso; Eastman Kodak
RP Iowa State Univ, Dept Comp Sci, Ames, IA USA.
EM leavens@cs.iastate.edu
CR ABRAHAMMUMM E, 2003, LECT NOTES COMPUTER
   AMERICA P, 1987, LECT NOTES COMPUT SC, V276, P234
   AMERICA P, 1991, LECT NOTES COMPUT SC, V489, P60
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1990, Predicate Calculus and Program Semantics
   [Anonymous], 1986, Abstraction and Specification in Program Development
   Arnold K., 2000, The Java Programming Language, V3rd ed
   BARRINGER H, 1984, ACTA INFORM, V21, P251, DOI 10.1007/BF00264250
   BARTETZKO D, 2001, ELECT NOTES THEORETI, V55
   Bicarregui JC., 1994, PROOF VDM PRACTITION
   Booch Grady, 1999, UNIFIED MODELING LAN, DOI DOI 10.1007/3-540-40011-7_10
   Boyapati C., 2002, ISSTA 02, P123, DOI DOI 10.1145/566172.566191
   CHALIN P, 2003, 20030011 CONC U COMP
   CHALIN P, 2002, CUCS20020031 CONC U
   CHEON Y, 1994, J OBJECT-ORIENT PROG, V7, P39
   Cheon Y, 2002, LECT NOTES COMPUT SC, V2374, P231
   CHEON Y, 1994, ACM T SOFTW ENG METH, V3, P221
   CHOEN Y, 2002, P INT C SOFTW ENG RE, P322
   Clifton C, 2000, ACM SIGPLAN NOTICES, V35, P130, DOI 10.1145/354222.353181
   CLIFTON C, 2001, 110 IOW STAT U DEP C
   Cohen E., 1990, PROGRAMMING 1990S IN
   COK DR, 2004, NIIIR0413 U NIJ
   DETLEFS DL, 1998, 159 SRC COMP SYST RE
   Dhara KK, 1996, PROC INT CONF SOFTW, P258, DOI 10.1109/ICSE.1996.493421
   DUNCAN A, 1998, TRCS9832 U CAL DEP C
   Edwards S. H., 1994, SIGSOFT Software Engineering Notes, V19, P29, DOI 10.1145/190679.190682
   ERNST MD, 2001, IEEE T SOFTWARE ENG, V27, P1
   FINDLER RB, 2001, OOPSLA 01 C P OBJ OR, P1
   FINDLER RB, 2001, P JOINT 8 EUR SOFTW
   Finney K, 1996, IEEE T SOFTWARE ENG, V22, P158, DOI 10.1109/32.485225
   Fitzgerald J., 1998, Modelling Systems: Practical Tools and Techniques for Software Development, V1st
   Flanagan C, 2002, ACM SIGPLAN NOTICES, V37, P234, DOI 10.1145/543552.512558
   Friendly L., 1995, P INT WORKSHOP HYPER, P151
   GIFFORD DK, 1986, ACM C LISP FUNCT PRO, P28
   Gries D, 1995, LECT NOTES COMPUT SC, V1000, P366
   GRIES D, 1994, TEXTS MONOGRAPHS COM
   Guttag JohnV., 1993, LARCH LANGUAGES TOOL
   Hoare C. A. R., 1972, Acta Informatica, V1, P271, DOI 10.1007/BF00289507
   Hoare C.A.R., 1972, Structured Programming, P83
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Huisman M, 2000, LECT NOTES COMPUT SC, V1783, P284
   HUISMAN M, 2001, THESIS U NIJMEGENE H
   *IS ORG, 1996, 138171 ISO IEC
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jacobs B, 2003, LECT NOTES COMPUT SC, V2852, P202
   Jacobs B, 2001, LECT NOTES COMPUT SC, V2028, P284
   Jacobs B, 1998, ACM SIGPLAN NOTICES, V33, P329, DOI 10.1145/286942.286973
   Jones C. B., 1990, PRENTICE HALL INT SE
   Jonkers HBM, 2000, LECT NOTES COMPUT SC, V1945, P116
   JONKERS HBM, 1991, LECT NOTES COMPUT SC, V551, P428
   KARAORMAN M, 1999, LECT NOTES COMPUTER, V1616, P175
   Khurshid S, 2002, ACM SIGPLAN NOTICES, V37, P231, DOI 10.1145/583854.582441
   Kramer R., 1998, ICONTRACT JAVA DESIG, P295
   LAMPORT L, 1989, COMMUN ACM, V32, P32, DOI 10.1145/63238.63240
   Larman Craig., 2002, APPLYING UML PATTERN, V3nd
   Leavens G., 1996, SPECIFICATION BEHAV, P121
   Leavens G. T., 1998, Formal Aspects of Computing, V10, P59, DOI 10.1007/PL00003926
   Leavens G.T., 2000, OBJECT ORIENTED PROG, P105
   Leavens Gary T., 1999, Behavioral Specifications of Businesses and Systems, P175
   Leavens GaryT., 2000, FDN COMPONENT BASED, P113
   Leavens GT, 1999, LECT NOTES COMPUT SC, V1709, P1087
   LEAVENS GT, 1990, SIGPLAN NOTICES, V25, P212, DOI 10.1145/97946.97970
   Leavens GT, 2000, ACTA INFORM, V36, P617, DOI 10.1007/s002360050168
   LEAVENS GT, 1995, ACTA INFORM, V32, P705, DOI 10.1007/BF01178658
   LEAVENS GT, 2000, LARCH FREQUENTLY ASK
   LEAVENS GT, LARCHC REFERENCE MAN
   LEAVENS GT, 1993, P 1 INT WORKSH LARCH, P159
   LEAVENS GT, 9806V IOW STAT U DEP
   Leavens GT, 1989, 439 MIT LAB COMP SCI
   Leino K.R.M., 2000, ESC JAVA USERS MANUA
   LEINO KRM, 1999, 1999002 COMP RES CTR
   LEINO KRM, 63 KRML DIG EQ CORP
   Lieberherr K, 2001, COMMUN ACM, V44, P39, DOI 10.1145/383845.383855
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   MEYER B, 1992, EIFFEL LANGUAGE OBJE
   Müller P, 2003, CONCURR COMP-PRACT E, V15, P117, DOI 10.1002/cpe.713
   MULLER P, 2002, LECT NOTES COMPUTER, V2262
   NIMMER JW, 2001, ELECT NOTES THEORETI
   Ogden WilliamF., 1994, ACM SIGSOFT Software Engineering Notes, V19, P23
   *PAR CORP, US DES CONTR AUT JAV
   RAGHAVAN AD, 2001, 3 IOW STAT U DEP COM
   ROSENBLUM DS, 1992, P 14 INT C SOFTW ENG, P92
   Ruby C, 2000, ACM SIGPLAN NOTICES, V35, P208, DOI 10.1145/354222.353186
   Spivey J. M., 1989, INT SERIES COMPUTER
   SPIVEY JM, 1989, SOFTWARE ENG J, V4, P40, DOI 10.1049/sej.1989.0006
   TALPIN JP, 1994, INFORM COMPUT, V111, P245, DOI 10.1006/inco.1994.1046
   WAMRER J, 1999, J OBJECT ORIENTED PR, V12, P28
   Warmer J, 1999, J OBJECT-ORIENT PROG, V12, P10
   Warmer J., 1999, AW OBJ TECHNOL S
   WILLS A, 1991, LECT NOTES COMPUT SC, V512, P59
   WING J, 1983, TR299 MIT LAB COMP S
   WING JM, 1987, ACM T PROGR LANG SYS, V9, P1, DOI 10.1145/9758.10500
   Woodcock J., 1996, PRENTICE HALL INT SE
NR 93
TC 61
Z9 68
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2005
VL 55
IS 1-3
BP 185
EP 208
DI 10.1016/j.scico.2004.05.015
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 899FQ
UT WOS:000227130700007
OA Green Published, Bronze
DA 2024-07-18
ER

PT J
AU Klusener, AS
   Lämmel, R
   Verhoef, C
AF Klusener, AS
   Lämmel, R
   Verhoef, C
TI Architectural modifications to deployed software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE software malleability; software maintenance; definition of software
   architecture; software asbestos; software modification; software
   analysis; automated program transformation
AB We discuss the nuts and bolts of industrial large-scale software modification projects. These projects become necessary when system owners of deployed systems hit architectural barriers. The mastery of such projects is key to the extension of the best-before date of business-critical software assets. Our discussion comprises the process for problem analysis, pricing and contracting for such projects, design and implementation of tools for code exploration and code modification, as well as details of service delivery. We illustrate these concerns by way of a real-world example where a deployed management information system required an invasive modification to make the system fit for future use. The chosen project is particularly suited for a complete treatise because of its size (just 90,000 LOC), and the nature of the relevant architectural modification (namely, a form of data expansion). We share the lessons that we learned in this and other architectural modification projects. (C) 2004 Elsevier B.V. All rights reserved.
C1 Software Improvement Grp, NL-1111 PT Diemen, Netherlands.
   CWI, NL-1098 SJ Amsterdam, Netherlands.
   Free Univ Amsterdam, Dept Informat Management & Software Engn, NL-1081 HV Amsterdam, Netherlands.
C3 Vrije Universiteit Amsterdam
RP Software Improvement Grp, Muiderstraatweg 58A, NL-1111 PT Diemen, Netherlands.
EM steven@cs.vu.nl; ralf@cs.vu.nl; x@cs.vu.nl
OI Lammel, Ralf/0000-0001-9946-4363
CR Arranga E, 2000, IEEE SOFTWARE, V17, P70
   Bass Len, 2012, SEI S SOFTW
   Bassett PaulG., 1996, FRAMING SOFTWARE REU
   BAXTER I, 2001, P WORK C REV ENG WCR, P291
   BELADY LA, 1976, IBM SYST J, V15, P225, DOI 10.1147/sj.153.0225
   Boehm B., 1995, Annals of Software Engineering, V1, P57, DOI 10.1007/BF02249046
   Boehm BW., 1981, Software Engineering Economics
   BOSCH J, 2003, SLIDES DAGSTUHL SEMI
   BROWN GD, 2001, TYPING DATA NEW COBO
   BROWN GD, 2000, COOL COMPILER DIRECT
   Brown P.J., 1974, MACROPROCESSORS TECH
   CHAE Y, 1999, SUCCESSFUL COBOL UPG
   CORDY JR, 1991, COMPUT LANG, V16, P97, DOI 10.1016/0096-0551(91)90019-6
   de Jonge M, 2002, PROC IEEE INT CONF S, P550, DOI 10.1109/ICSM.2002.1167816
   Duenas JC, 1998, SECOND EUROMICRO CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P113, DOI 10.1109/CSMR.1998.665766
   EIDORFF PH, ACM99, P1
   Faust D, 2003, SOFTWARE PRACT EXPER, V33, P933, DOI 10.1002/spe.530
   Favre JM, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P329, DOI 10.1109/ICSM.1996.565036
   FAVRE JM, 1995, DURHAM 95
   FLORIJN G, 2003, EXPERIENCES ARCHITEC
   Fowler M, 2003, IEEE SOFTWARE, V20, P11, DOI 10.1109/MS.2003.1231144
   Fowler M, 2003, IEEE SOFTWARE, V20, P12, DOI 10.1109/MS.2003.1159023
   FOWLER M, 2003, PLATFORM INDEPENDENT
   HALL B, 1996, S ITXP 6 IT REV CONT
   HARRIS DR, 1995, P 17 P INT C SOFTW E
   JONES C, 1998, YEAR 2000 SOFTWARE P
   Jones C., 2000, Software Assessments, Benchmarks, and Best Practices
   Jones C., 1996, APPL SOFTWARE MEASUR
   JONES N, 1998, YEAR 2000 MARKET OVE
   KELLER TW, 1996, P IEEE INT C SOFTW M
   KLEIN WM, 1998, OLDBOL NEWBOL COBOL
   Kleppe A.G., 2003, The Model Driven Architecture: Practice and Promise, P192
   Klint P., 1993, ACM Transactions on Software Engineering and Methodology, V2, P176, DOI 10.1145/151257.151260
   KLINT P, 2003, ENG DISCIPLINE GRAMM
   Klusener S, 2003, PROC IEEE INT CONF S, P179, DOI 10.1109/ICSM.2003.1235420
   Koppler R, 1997, SOFTWARE PRACT EXPER, V27, P637, DOI 10.1002/(SICI)1097-024X(199706)27:6<637::AID-SPE99>3.0.CO;2-3
   Kort J, 2003, THIRD IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION - PROCEEDINGS, P161, DOI 10.1109/SCAM.2003.1238042
   KORT J, 2000, 9 INT WORKSH FUNCT L
   KORT J, 2002, P LANG DESCR TOOLS A, V65, P7
   Kotik G., 1994, Proceedings. The Ninth Knowledge-Based Software Engineering Conference (Cat. No.94TH0664-3), DOI 10.1109/KBSE.1994.342684
   Lämmel R, 2003, LECT NOTES COMPUT SC, V2562, P357
   Lämmel R, 2001, SOFTWARE PRACT EXPER, V31, P1395, DOI 10.1002/spe.423
   Lämmel R, 2001, IEEE SOFTWARE, V18, P78, DOI 10.1109/52.965809
   LAMMEL R, 1999, VS COBOL 2 GRAMMAR V
   Lammel R., 2004, ESSENCE STRATEGIC PR
   Lammel R., 2002, Proceedings of the 2002 ACM SIGPLAN Workshop on Rule-Based Programming. RULE'02, P15
   LAMMEL R, 1998, COBOL UNLEASHED, P44
   Lehman M. M., 1996, Software Process Technology. 5th European Workshop, EWSPT '96 Proceedings, P108, DOI 10.1007/BFb0017737
   Lehman M. M., 1978, P INF STAT ART C WHY
   LIVADAS P, 1994, 3 INT WORKSH PROGR C, P89
   Maier M. W., 2000, The Art of Systems Architecting, V2nd
   MANACHEM B, 1997, SOFTWARE QUALITY PRO
   McConnell S., 1996, Rapid Development: Taming Wild Software Schedules
   MCCONNELL S., 1993, CODE COMPLETE
   Nicholas D., 1978, LIT BIBLIOMETRICS
   *OV LTD, 1997, REP STAT PROGR LANG
   RAMALINGAM G, ACM99, P119
   Robbins A., 1999, UNIX NUTSHELL SYSTEM
   SCHRICKER D, 2000, DATA POINTERS
   Sellink A, 1999, PROG COMPREHEN, P38, DOI 10.1109/WPC.1999.777742
   Sellink A, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P89, DOI 10.1109/WCRE.1998.723179
   SELLINK MPA, 1999, P 3 EUR C MAINT REEN, P72
   SELLINK MPA, 2000, P 4 EUR C SOFTW MAIN, P161
   *SEM DES INC, 2004, DMS SOFTW REENG TOOL
   *SIB SYST INC, 1997, COB PEEK UND HOOD TE
   *SIB SYST INC, 2004, MF IBM I COB FUJ COB
   Sneed H. M., 1998, OBJEKTORIENTIERTE SO
   Sneed HM, 1998, SECOND EUROMICRO CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, PROCEEDINGS, P2, DOI 10.1109/CSMR.1998.665726
   SNEED HM, 1999, P 6 IEEE WORK C REV, P204
   Some SS, 1998, PROG COMPREHEN, P118, DOI 10.1109/WPC.1998.693328
   Spencer H., 1992, USENIX C
   SPITTA T, 2000, INFORMATION MANAGEME, V15, P51
   Terekhov AA, 2000, IEEE SOFTWARE, V17, P111, DOI 10.1109/52.895180
   TEREKHOV AA, RECOVERY IMPROVEMENT
   van den Brand M, 2000, SCI COMPUT PROGRAM, V36, P209, DOI 10.1016/S0167-6423(99)00037-4
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   Van den Brand MGJ., 2000, P 1 INT WORKSH RUL B
   van Deursen A, 1998, FIFTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P220, DOI 10.1109/WCRE.1998.723192
   Van Deursen A., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P40, DOI 10.1109/ICSM.1999.792497
   van Deursen A, 2000, SEVENTH WORKING CONFERENCE ON REVERSE ENGINEERING - PROCEEDINGS, P32, DOI 10.1109/WCRE.2000.891450
   vandenBrand M, 1997, ACM SIGPLAN NOTICES, V32, P54, DOI 10.1145/251621.251633
   VANDENBRAND MGJ, 2001, LNCS
   VANDENBRAND MGJ, 2003, ACM T SOFTWARE ENG M, V12
   VANDENBRAND MGJ, 2003, ELECT NOTES THEORETI, V82
   VANOMMERING R, 2001, COMMUNICATION
   Veerman N, 2004, J SOFTW MAINT EVOL-R, V16, P219, DOI 10.1002/smr.295
   Verhoef C, 2002, SCI COMPUT PROGRAM, V45, P1, DOI 10.1016/S0167-6423(02)00106-5
   VISSER E, 1999, LNCS, V1631, P30
   Visser Eelco, 1998, ICFP 98, P13
   Wall L., 1991, PROGRAMMING PERL
   Wall Larry., 1996, PROGRAMMING PERL, Vsecond
   WESTRA H, 2001, P 2 STRAT US DAY TEC
   WIDMER R, 1998, COBOL MIGRATION PLAN
   2003, OMG MODEL DRIVEN ARC
   2002, INFORMATION TECHNOLO
   1999, P 26 ACM SIGPLAN SIG
NR 96
TC 23
Z9 24
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB
PY 2005
VL 54
IS 2-3
BP 143
EP 211
DI 10.1016/j.scico.2004.03.012
PG 69
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 874ZC
UT WOS:000225388200001
DA 2024-07-18
ER

PT J
AU Santana, R
   Martins, L
   Virgínio, T
   Rocha, L
   Costa, H
   Machado, I
AF Santana, Railana
   Martins, Luana
   Virginio, Tassio
   Rocha, Larissa
   Costa, Heitor
   Machado, Ivan
TI An empirical evaluation of RAIDE: A semi-automated approach for test
   smells detection and refactoring
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automated refactoring; Test smells; Eclipse IDE
ID SOFTWARE TEST-CODE
AB Effective test code refactoring is essential for maintaining the quality and efficiency of software development. Automated support for test code refactoring can significantly enhance its cost-effectiveness. However, there is limited evidence on the effectiveness of such automated support, especially for addressing Assertion Roulette and Duplicate Assert test smells. To address this gap, we present RAIDE, an Eclipse IDE plugin that provides an easy-to-use approach to identifying and refactoring test smells. In this study, we conduct a controlled experiment with twenty participants to evaluate RAIDE's capability to detect and refactor Assertion Roulette and Duplicate Assert test smells. The results demonstrate that RAIDE outperforms comparable state-of-the-art approaches in detecting test smells, and can detect and refactor test smells in a fraction of the time. Our findings highlight the potential benefits of automated test code refactoring support for improving the efficiency and effectiveness of software development, and suggest avenues for future research to extend and evaluate RAIDE for handling other test smells and refactoring techniques.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Santana, Railana; Martins, Luana; Rocha, Larissa; Machado, Ivan] Fed Univ Bahia UFBA, Salvador, BA, Brazil.
   [Virginio, Tassio] Fed Inst Tocantins IFTO, Dianopolis, Tocantins, Brazil.
   [Rocha, Larissa] State Univ Feira de Santana UEFS, Feira De Santana, BA, Brazil.
   [Costa, Heitor] Fed Univ Lavras UFLA, Lavras, MG, Brazil.
C3 Universidade Federal da Bahia; Instituto Federal do Tocantins (IFTO);
   Universidade Estadual de Feira de Santana; Universidade Federal de
   Lavras
RP Santana, R (corresponding author), Fed Univ Bahia UFBA, Salvador, BA, Brazil.
EM railana.santana@ufba.br
RI Machado, Ivan/E-7228-2013
FU Coordenacao de Aperfeicoamento de Pessoal de Nivel Superior - Brasil
   (CAPES) [001]; INES; CNPq [465614/2014-0]; FACEPE [APQ-0399-1.03/17,
   APQ/0388-1.03/14]; CAPES [88887.136410/2017-00]; FAPESB [BOL0188/2020,
   PIE0002/2022]
FX This study was financed in part by the Coordenacao de Aperfeicoamento de
   Pessoal de Nivel Superior - Brasil (CAPES) - Finance Code 001; INES
   (www.ines.org.br), CNPq grant 465614/2014-0, FACEPE grants
   APQ-0399-1.03/17 and APQ/0388-1.03/14; CAPES grant 88887.136410/2017-00;
   and FAPESB grants BOL0188/2020 and PIE0002/2022.
CR Aljedaani W, 2021, PROCEEDINGS OF EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING (EASE 2021), P170, DOI 10.1145/3463274.3463335
   [Anonymous], 2022, Data collection
   Arsham Hossein., 2011, INT ENCY STAT SCI, P87, DOI [DOI 10.1007/978-3-642-04898-2132, 10.1007/978-3-642-04898-2132]
   Artusi R, 2002, INT J BIOL MARKER, V17, P148, DOI 10.1177/172460080201700213
   Baker P, 2006, TAIC PART - TESTING: ACADEMIC & INDUSTRIAL CONFERENCE - PRACTICE AND RESEARCH TECHNIQUES, PROCEEDINGS, P90, DOI 10.1109/TAIC-PART.2006.35
   Bavota G, 2015, EMPIR SOFTW ENG, V20, P1052, DOI 10.1007/s10664-014-9313-0
   Bavota G, 2012, 2012 28TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE (ICSM), P56, DOI 10.1109/ICSM.2012.6405253
   BERRY DA, 1987, BIOMETRICS, V43, P439, DOI 10.2307/2531826
   Bowes D, 2017, INT WORKS EMERG TREN, P9, DOI 10.1109/WETSoM.2017.2
   Box G.E.P., 2006, STAT EXPT DESIGN INN
   Dancey C., 2008, Statistics Without Maths for Psychology: Using Spss for Windows, V4th, DOI [10.5555/1502329, DOI 10.5555/1502329]
   Das K.R., 2016, American Journal of Theoretical and Applied Statistics, V5, P5, DOI [10.11648/j.ajtas.20160501.12, DOI 10.11648/J.AJTAS.20160501.12]
   De Bleser Jonas, 2019, 2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR), P457, DOI 10.1109/MSR.2019.00072
   De Bleser J, 2019, SCALA'19: PROCEEDINGS OF THE 10TH ACM SIGPLAN INTERNATIONAL SYMPOSIUM ON SCALA, P22, DOI 10.1145/3337932.3338815
   Emerson R.W., 2020, Journal of Visual Impairment Blindness, V114, P77, DOI [DOI 10.1177/0145482X20901378, 10.1177/0145482X2090, DOI 10.1177/0145482X2090]
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Garousi V, 2018, J SYST SOFTWARE, V138, P52, DOI 10.1016/j.jss.2017.12.013
   GLASS GV, 1966, AM EDUC RES J, V3, P187
   Greiler M, 2013, 2013 IEEE SIXTH INTERNATIONAL CONFERENCE ON SOFTWARE TESTING, VERIFICATION AND VALIDATION (ICST 2013), P322, DOI 10.1109/ICST.2013.45
   Hautojrvi P., 1979, Experimentation in software engineering, V1ST, DOI [10.1007/978-3-642-81316-0, 10.1007/978-3-642-29044-2., DOI 10.1007/978-3-642-29044-2]
   Jedlitschka A., 2008, Guide to advanced empirical software engineering, P201, DOI DOI 10.1007/978-1-84800-044-5_8
   Junior, 2021, J SOFTW ENG RES DEV, V9, P9, DOI [10.5753/jserd.2021.1802, DOI 10.5753/JSERD.2021.1802]
   Junior N.S., 2020, P 23 IB C SOFTW ENG
   Khamis H, 2008, J DIAGN MED SONOG, V24, P155, DOI 10.1177/8756479308317006
   Kim DJ, 2021, EMPIR SOFTW ENG, V26, DOI 10.1007/s10664-021-09969-1
   Kim DJ, 2020, PROC INT CONF SOFTW, P149, DOI 10.1145/3377812.3382176
   Lambiase S, 2020, INT C PROGRAM COMPRE, P441, DOI 10.1145/3387904.3389296
   Martinez M, 2020, PROC INT CONF SOFTW, P69, DOI 10.1145/3377812.3382151
   McKinlay J, 2010, CHANDOS INF PROF SER, P1, DOI 10.1533/9781780630243
   Meszaros G, 2003, LECT NOTES COMPUT SC, V2753, P73
   Moonen Leon, 2001, P 2 INT C EXTR PROGR
   Palomba F, 2018, PROC IEEE INT CONF S, P311, DOI 10.1109/ICSME.2018.00040
   Palomba F, 2016, 2016 IEEE/ACM 9TH INTERNATIONAL WORKSHOP ON SEARCH-BASED SOFTWARE TESTING (SBST), P5, DOI [10.1145/2897010.2897016, 10.1109/SBST.2016.010]
   Pandis N, 2015, AM J ORTHOD DENTOFAC, V148, P515, DOI 10.1016/j.ajodo.2015.06.011
   Parra-Frutos I, 2016, COMPUTATION STAT, V31, P1607, DOI 10.1007/s00180-016-0656-4
   Peruma A., 2020, P IEEE ACM 42 INT C, P350, DOI DOI 10.1145/3387940.3392189
   Peruma A., 2019, P 29 ANN INT C COMP, P193, DOI DOI 10.5555/3370272.3370293
   Peruma A.S.A., 2018, What the Smell? An Empirical Investigation on the Distribution and Severity of Test Smells in Open Source Android Applications
   Peruma A, 2020, PROCEEDINGS OF THE 28TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '20), P1650, DOI 10.1145/3368089.3417921
   Razali N. M., 2011, J. Stat. Model. and Anal., V2, P21, DOI DOI 10.1515/BILE-2015-0008
   Ross A., 2017, Basic and advanced statistical tests: writing results sections and creating tables and figures, P17, DOI [10.1007/978-94-6351-086-84, DOI 10.1007/978-94-6351-086-8_4]
   Santana Railana, 2021, SBES '21: Brazilian Symposium on Software Engineering, P49, DOI 10.1145/3474624.3474639
   Santana Railana, 2020, SBES '20: Proceedings of the 34th Brazilian Symposium on Software Engineering, P374, DOI 10.1145/3422392.3422510
   Santana R., 2022, AN 25 C IB AM ENG SO, P263, DOI [10 .5753 /cibse .2022 .20977, DOI 10.5753/CIBSE.2022.20977]
   Sjoberg DIK, 2005, IEEE T SOFTWARE ENG, V31, P733, DOI 10.1109/TSE.2005.97
   Soares E, 2023, IEEE T SOFTWARE ENG, V49, P1152, DOI 10.1109/TSE.2022.3172654
   Soares E, 2020, PROCEEDINGS OF THE 5TH BRAZILIAN SYMPOSIUM ON SYSTEMATIC AND AUTOMATED SOFTWARE TESTING, SAST 2020, P50, DOI 10.1145/3425174.3425212
   Soares LR, 2018, PROCEEDINGS OF THE 17TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING: CONCEPTS AND EXPERIENCES (GPCE'18), P40, DOI 10.1145/3278122.3278127
   Spadini D, 2020, IEEE WORK CONF MIN S, P311, DOI 10.1145/3379597.3387453
   Spadini D, 2018, PROC IEEE INT CONF S, P1, DOI 10.1109/ICSME.2018.00010
   van Bladel B, 2020, PROCEEDINGS OF THE 2020 IEEE 27TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER '20), P492, DOI [10.1109/SANER48275.2020.9054798, 10.1109/saner48275.2020.9054798]
   Van Rompaey Testq B., 2008, WASDETT 1 1 INT WORK, P4
   Vegas S, 2016, IEEE T SOFTWARE ENG, V42, P120, DOI 10.1109/TSE.2015.2467378
   Virginio Tassio, 2020, SBES '20: Proceedings of the 34th Brazilian Symposium on Software Engineering, P564, DOI 10.1145/3422392.3422499
   Virginio Tassio, 2020, SBES '20: Proceedings of the 34th Brazilian Symposium on Software Engineering, P92, DOI 10.1145/3422392.3422412
   Virginio Tassio, 2021, Journal of Software Engineering Research and Development, V9, DOI [10.5753/jserd.2021.1893, DOI 10.5753/JSERD.2021.1893]
   Yitnosumarto S., 1986, Aust. J. Stat, V28, P230, DOI [10.1111/j.1467-842x.1986.tb00603.x, DOI 10.1111/J.1467-842X.1986.TB00603.X]
   Yusifoglu VG, 2015, INFORM SOFTWARE TECH, V58, P123, DOI 10.1016/j.infsof.2014.06.009
NR 58
TC 0
Z9 0
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103013
DI 10.1016/j.scico.2023.103013
EA SEP 2023
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA T5XP0
UT WOS:001078719700001
DA 2024-07-18
ER

PT J
AU Newar, DKP
   Zhao, R
   Siy, H
   Soh, LK
   Song, M
AF Newar, Dip Kiran Pradhan
   Zhao, Rui
   Siy, Harvey
   Soh, Leen-Kiat
   Song, Myoungkyu
TI SSDTutor: A feedback-driven intelligent tutoring system for secure
   software development
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE API misuse detection; Intelligent tutoring system; Automated program
   repair; Cryptography; Secure software development
ID REUSE; MD5
AB Application Programming Interfaces (APIs) in cryptography typically impose concealed us-age constraints. The violations of these usage constraints can lead to software crashes or security vulnerabilities. Several professional tools can detect these constraints (API misuses) in cryptography; however, in the educational programs, the focus has been less on helping students implement an application without cryptographic API misuses that are caused by either a lack of cryptographic knowledge or programming mistakes.To address the problem, we present an intelligent tutoring approach SSDTutor for edu-cating Secure Software Development. Our tutoring approach helps students or developers repair cryptographic API misuse defects by leveraging an automated program repair tech-nique based on the usage patterns of cryptographic APIs. We studied the best practices of cryptographic implementations and encoded eight cryptographic API usage patterns. For quality feedback, we leverage a clone detection technique to recommend related feedback for helping students understand why their programs are incorrect, rather than blindly ac-cepting repairs.We evaluated SSDTutor on 456 open source subject projects implemented with crypto-graphic APIs. SSDTutor successfully detected 1,553 out of 1,573 misuse defects with 98.9% accuracy and repaired 1,551 out of 1,573 misuse defects with 99.3% accuracy. In a user study involving 22 students, the participants reported that interactive SSDTutor's feedback recommendation could be valuable for novice students to learn about the correct usages of cryptography APIs.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Newar, Dip Kiran Pradhan; Zhao, Rui; Siy, Harvey; Song, Myoungkyu] Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.
   [Soh, Leen-Kiat] Univ Nebraska Lincoln, Dept Comp Sci, Lincoln, NE 68588 USA.
C3 University of Nebraska System; University of Nebraska System; University
   of Nebraska Lincoln
RP Song, M (corresponding author), Univ Nebraska, Dept Comp Sci, Omaha, NE 68182 USA.
EM dpradhannewar@unomaha.edu; rzhao@unomaha.edu; hsiy@unomaha.edu;
   lksoh@unl.edu; myoungkyu@unomaha.edu
FU Nebraska Collaboration Initiative [20722]
FX We thank anonymous reviewers for their thorough comments on our earlier
   version of the paper. This work was partially supported by the Nebraska
   Collaboration Initiative grant number 20722.
CR Abadi M, 2005, LECT NOTES COMPUT SC, V3580, P664
   Abdullah A.M, 2017, Cryptogr. Netw. Secur., V16, P1
   Abid S, 2016, 2016 IEEE 23RD INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), VOL 3, P51, DOI 10.1109/SANER.2016.37
   Acar Y, 2017, 2017 IEEE CYBERSECURITY DEVELOPMENT (SECDEV), P22, DOI 10.1109/SecDev.2017.17
   ACKERMAN AF, 1989, IEEE SOFTWARE, V6, P31, DOI 10.1109/52.28121
   Amann S, 2019, IEEE T SOFTWARE ENG, V45, P1170, DOI 10.1109/TSE.2018.2827384
   Amann S, 2016, 13TH WORKING CONFERENCE ON MINING SOFTWARE REPOSITORIES (MSR 2016), P464, DOI [10.1145/2901739.2903506, 10.1109/MSR.2016.055]
   [Anonymous], HOSTNAME VERIFICATIO
   [Anonymous], 2012, SIGSOFT
   [Anonymous], ECLIPSE JDT API SPEC
   [Anonymous], SIBERIADANTE ANDROID
   [Anonymous], ECLIPSE AST REWRITE
   [Anonymous], GIT REPOSITORY PATTE
   [Anonymous], Tiobe index
   [Anonymous], 2022, JAVA CRYPTOGRAPHY AR
   [Anonymous], BOUNCY CASTLE COLLEC
   [Anonymous], XML PARSER JAVA
   [Anonymous], 2898 RFC
   [Anonymous], STACK OVERFLOW POSTS
   [Anonymous], 2011, INT J EMERGING TECHN
   [Anonymous], CWE 330 USE INSUFFIC
   [Anonymous], INTRO MODERN CRYPTOG
   [Anonymous], ECLIPSE JAVA DEV TOO
   Assal H, 2019, CHI 2019: PROCEEDINGS OF THE 2019 CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, DOI 10.1145/3290605.3300519
   Aurora V., 2012, LIFETIMES CRYPTOGRAP
   Bai Y, 2019, PROCEEDINGS OF THE 2019 3RD INTERNATIONAL CONFERENCE ON MANAGEMENT ENGINEERING, SOFTWARE ENGINEERING AND SERVICE SCIENCES (ICMSS 2019), P45, DOI 10.1145/3312662.3312710
   Beecham S, 2008, INFORM SOFTWARE TECH, V50, P860, DOI 10.1016/j.infsof.2007.09.004
   Bhanot R, 2015, INT J SECUR APPL, V9, P289, DOI 10.14257/ijsia.2015.9.4.27
   Bhargavan K, 2016, CCS'16: PROCEEDINGS OF THE 2016 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P456, DOI 10.1145/2976749.2978423
   Bhat B, 2015, 2015 INTERNATIONAL CONFERENCE ON COMPUTING, COMMUNICATION & AUTOMATION (ICCCA), P887, DOI 10.1109/CCAA.2015.7148500
   Bosnjak L, 2018, 2018 41ST INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO), P1161, DOI 10.23919/MIPRO.2018.8400211
   Brandt J, 2009, CHI2009: PROCEEDINGS OF THE 27TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1589
   Brin S, 1998, COMPUT NETWORKS ISDN, V30, P107, DOI 10.1016/S0169-7552(98)00110-X
   Campos J, 2012, IEEE INT CONF AUTOM, P378, DOI 10.1145/2351676.2351752
   Chang DH, 2019, INT J INF SECUR, V18, P163, DOI 10.1007/s10207-018-0405-5
   Chen ZM, 2021, IEEE T SOFTWARE ENG, V47, P1943, DOI 10.1109/TSE.2019.2940179
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Cordy JR, 2011, CONF PROC INT SYMP C, P219, DOI 10.1109/ICPC.2011.26
   Coron JS, 2005, LECT NOTES COMPUT SC, V3621, P430
   Crow Tyne, 2018, P 20 AUSTR COMP ED C, DOI [DOI 10.1145/3160489.3160492, 10.1145/3160489.3160492]
   Dallmeier V., 2007, P 22 IEEE ACM INT C, P433
   Dibas Hasan, 2021, 2021 International Conference on Information Technology (ICIT), P344, DOI 10.1109/ICIT52682.2021.9491644
   Egele M., 2013, P 2013 ACM SIGSAC C, P73
   Fahl S., 2012, ACM CCS 12, P50, DOI DOI 10.1145/2382196.2382205
   Fischer F, 2017, P IEEE S SECUR PRIV, P121, DOI 10.1109/SP.2017.31
   Fluri B, 2007, IEEE T SOFTWARE ENG, V33, P725, DOI 10.1109/TSE.2007.70731
   Frakes WB, 2005, IEEE T SOFTWARE ENG, V31, P529, DOI 10.1109/TSE.2005.85
   Gao Q, 2015, IEEE INT CONF AUTOM, P307, DOI 10.1109/ASE.2015.81
   Georgiev Martin, 2012, P 2012 ACM C COMPUTE, P38
   Goues C.L., IEEE T SOFTWARE ENG, V38
   Green M, 2016, IEEE SECUR PRIV, V14, P40, DOI 10.1109/MSP.2016.111
   GRISS ML, 1993, IBM SYST J, V32, P548, DOI 10.1147/sj.324.0548
   Hartmann B, 2010, CHI2010: PROCEEDINGS OF THE 28TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS, VOLS 1-4, P1019
   Herzig K, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P392, DOI 10.1109/ICSE.2013.6606585
   Huang Y, 2020, SOFTWARE PRACT EXPER, V50, P227, DOI 10.1002/spe.2772
   I.I.S.S.C. Consortium, CYB WORKF STUD
   JCA, JAV CRYPT ARCH
   Just R, 2014, P 2014 INT S SOFTW T, P437, DOI DOI 10.1145/2610384.2628055
   Kechagia M., IEEE T SOFTWARE ENG
   Kim D, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P802, DOI 10.1109/ICSE.2013.6606626
   Kim K, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P946, DOI 10.1145/3180155.3180187
   Krishnamoorthy V, 2013, IEEE T EDUC, V56, P355, DOI 10.1109/TE.2013.2238543
   KRUEGER CW, 1992, COMPUT SURV, V24, P131, DOI 10.1145/130844.130856
   Krüger S, 2021, IEEE T SOFTWARE ENG, V47, P2382, DOI 10.1109/TSE.2019.2948910
   Le Goues C, 2019, COMMUN ACM, V62, P56, DOI 10.1145/3318162
   Li Y, 2014, LECT NOTES COMPUT SC, V8792, P349, DOI 10.1007/978-3-319-11698-3_27
   Liu K, 2020, PROC INT CONF SOFTW, P615, DOI 10.1145/3377811.3380338
   Lv F, 2015, IEEE INT CONF AUTOM, P260, DOI 10.1109/ASE.2015.42
   Ma SQ, 2016, ASIA CCS'16: PROCEEDINGS OF THE 11TH ACM ASIA CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P711, DOI 10.1145/2897845.2897896
   Marwan S, 2019, ICER '19 - PROCEEDINGS OF THE 2019 ACM CONFERENCE ON INTERNATIONAL COMPUTING EDUCATION RESEARCH, P61, DOI 10.1145/3291279.3339420
   Matt B., 2018, COMPUTER SECURITY AR, V2nd
   McGettrick A, 2013, IEEE SECUR PRIV, V11, P66, DOI 10.1109/MSP.2013.155
   McMillan C, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P111, DOI 10.1145/1985793.1985809
   Mechtaev S, 2016, PROC INT CONF SOFTW, P691, DOI 10.1145/2884781.2884807
   Meng N, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P372, DOI 10.1145/3180155.3180201
   Mili A, 1998, ANN SOFTW ENG, V5, P349, DOI 10.1023/A:1018964121953
   Muchnick S., 1997, ADV COMPILER DESIGN
   Myers J. L., 2013, Research design and statistical analysis, DOI DOI 10.4324/9780203726631
   Nadi S, 2016, PROC INT CONF SOFTW, P935, DOI 10.1145/2884781.2884790
   Nielebock S, 2017, IEEE INT CONF AUTOM, P1010, DOI 10.1109/ASE.2017.8115721
   Oechslin P, 2003, LECT NOTES COMPUT SC, V2729, P617
   Oudshoorn MJ, 2018, SIGCSE'18: PROCEEDINGS OF THE 49TH ACM TECHNICAL SYMPOSIUM ON COMPUTER SCIENCE EDUCATION, P429, DOI 10.1145/3159450.3159534
   Paar C., 2009, UNDERSTANDING CRYPTO
   Perez L.C., 2011, Proceedings of the 16th Annual Conference Reports on Innovation and Technology in Computer Science Education, P39
   Pokhrel S., 2021, HIGHER ED FUTURE, V1, P133, DOI [10.1177/2347631120983481, DOI 10.1177/2347631120983481]
   Poulin J. S., 1996, Measuring Software Reuse-Principles, Practices and Economic Models
   Rahaman S, 2019, Arxiv, DOI arXiv:1806.06881
   Rahaman S, 2017, 2017 IEEE CYBERSECURITY DEVELOPMENT (SECDEV), P61, DOI 10.1109/SecDev.2017.23
   Rausch T, 2017, IEEE WORK CONF MIN S, P345, DOI 10.1109/MSR.2017.54
   Rigby PC, 2013, P 2013 9 JOINT M FDN, P202, DOI DOI 10.1145/2491411.2491444
   Rivers K, 2017, INT J ARTIF INTELL E, V27, P37, DOI 10.1007/s40593-015-0070-z
   Robillard MP, 2011, EMPIR SOFTW ENG, V16, P703, DOI 10.1007/s10664-010-9150-8
   Rooney P., CHANNEL PRAISES MICR
   ROTENBERG A, 1960, J ACM, V7, P75, DOI 10.1145/321008.321019
   Sadowski C, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P191, DOI 10.1145/2786805.2786855
   Shao S, 2014, 2014 IEEE 12TH INTERNATIONAL CONFERENCE ON DEPENDABLE, AUTONOMIC AND SECURE COMPUTING (DASC)/2014 IEEE 12TH INTERNATIONAL CONFERENCE ON EMBEDDED COMPUTING (EMBEDDEDCOM)/2014 IEEE 12TH INTERNATIONAL CONF ON PERVASIVE INTELLIGENCE AND COMPUTING (PICOM), P75, DOI 10.1109/DASC.2014.22
   Sharma S, 2018, LECT NOTES ARTIF INT, V10948, P322, DOI 10.1007/978-3-319-93846-2_60
   Singh Gurpreet., 2013, INT J COMPUTER APPL, V67, P33, DOI DOI 10.5120/11507-7224
   Singh R, 2013, ACM SIGPLAN NOTICES, V48, P15, DOI 10.1145/2499370.2462195
   Singleton Larry, 2020, SIGITE '20: Proceedings of the 21st Annual Conference on Information Technology Education, P403, DOI 10.1145/3368308.3415419
   Siraj Ambareen, 2015, ACM Inroads, V6, P77, DOI 10.1145/2766457
   Stallings W., 2013, Cryptography and network security: Principles and practice, V6th
   Stevens M, 2007, LECT NOTES COMPUT SC, V4515, P1
   Stevens M, 2017, LECT NOTES COMPUT SC, V10401, P570, DOI 10.1007/978-3-319-63688-7_19
   Stolee KT, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2581377
   Stylos J, 2006, IEEE SYMPOSIUM ON VISUAL LANGUAGES AND HUMAN-CENTRIC COMPUTING, PROCEEDINGS, P195
   Sunar Berk, 2009, Cryptographic Engineering, P55
   The WSJ, 2010, CITI DISCLOSES SECUR
   Uddin G, 2015, IEEE SOFTWARE, V32, P68, DOI 10.1109/MS.2014.80
   Ul Ain Q, 2019, IEEE ACCESS, V7, P86121, DOI 10.1109/ACCESS.2019.2918202
   Vassallo C, 2017, PROC IEEE INT CONF S, P183, DOI 10.1109/ICSME.2017.67
   Viega J., 2001, PORTABLE DOCUMENTS
   Wang XY, 2005, LECT NOTES COMPUT SC, V3494, P19
   Weigers K.E., 2002, Peer reviews in software: a practical guide
   Weiser M., 1981, 5th International Conference on Software Engineering, P439
   Wengran Wang, 2020, ITiCSE '20: Proceedings of the 2020 ACM Conference on Innovation and Technology in Computer Science Education, P391, DOI 10.1145/3341525.3387411
   Xue ZP, 2022, INT C PROGRAM COMPRE, P543, DOI 10.1145/3524610.3527880
   Yassein MB., 2017, 2017 INT C ENG TECHN, P1, DOI [10.1109/ICEngTechnol.2017.8308215, DOI 10.1109/ICENGTECHNOL.2017.8308215]
   Yi JY, 2017, ESEC/FSE 2017: PROCEEDINGS OF THE 2017 11TH JOINT MEETING ON FOUNDATIONS OF SOFTWARE ENGINEERING, P740, DOI 10.1145/3106237.3106262
   Zhang HX, 2021, IEEE T SOFTWARE ENG, V47, P850, DOI 10.1109/TSE.2019.2906315
   Zhang Y, 2022, INT C PROGRAM COMPRE, P190, DOI 10.1145/3524610.3527749
   Zhong H, 2009, LECT NOTES COMPUT SC, V5653, P318, DOI 10.1007/978-3-642-03013-0_15
   Zhu ZX, 2014, PROC IEEE INT CONF S, P301, DOI 10.1109/ICSME.2014.52
NR 123
TC 1
Z9 1
U1 2
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2023
VL 227
AR 102933
DI 10.1016/j.scico.2023.102933
EA MAR 2023
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA A4QP7
UT WOS:000954991900001
DA 2024-07-18
ER

PT J
AU Campbell, G
   Courtehoute, B
   Plump, D
AF Campbell, Graham
   Courtehoute, Brian
   Plump, Detlef
TI Fast rule-based graph programs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Graph transformation; Rooted graph programs; Linear-time algorithms;
   Graph reduction; Depth-first search
AB Implementing graph algorithms efficiently in a rule-based language is challenging because graph pattern matching is expensive. In this paper, we present a number of linear-time implementations of graph algorithms in GP 2, an experimental programming language based on graph transformation rules which aims to facilitate program analysis and verification. We focus on two classes of rule-based graph programs: graph reduction programs which check some graph property, and programs using a depth-first search to test some property or perform an operation such as producing a 2-colouring or a topological sorting. Programs of the first type run in linear time without any constraints on input graphs while programs of the second type require input graphs of bounded degree to run in linear time. Essential for achieving the linear time complexity are so-called rooted rules in GP 2, which, in many situations, can be matched in constant time. For each of our programs, we prove both correctness and complexity, and also give empirical evidence for their runtime. (C) 2021 The Author(s). Published by Elsevier B.V.
C1 [Campbell, Graham] Newcastle Univ, Sch Math Stat & Phys, Newcastle Upon Tyne, Tyne & Wear, England.
   [Courtehoute, Brian; Plump, Detlef] Univ York, Dept Comp Sci, York, N Yorkshire, England.
C3 Newcastle University - UK; University of York - UK
RP Campbell, G (corresponding author), Newcastle Univ, Sch Math Stat & Phys, Newcastle Upon Tyne, Tyne & Wear, England.
EM g.j.campbell2@newcastle.ac.uk; bc956@york.ac.uk; detlef.plump@york.ac.uk
OI Courtehoute, Brian/0000-0002-7736-4852
FU Engineering and Physical Sciences Research Council (EPSRC) in the UK
   [2281162]
FX 1Supported by a Doctoral Training Grant from the Engineering and
   Physical Sciences Research Council (EPSRC) Grant No. (2281162) in the
   UK.
CR Aho AV., 1974, DESIGN ANAL COMPUTER
   [Anonymous], 2006, Software and Systems Modeling, DOI [10.1007/s10270-006-0027-7, DOI 10.1007/S10270-006-0027-7]
   Bak C, 2016, LECT NOTES COMPUT SC, V9761, P102, DOI 10.1007/978-3-319-40530-8_7
   Bak Christopher, 2012, PROC 7 INT WORKSHOP, V54, DOI DOI 10.14279/TUJ.ECEASST.54.780
   Bak Christopher, 2015, THESIS U YORK
   Campbell G., 2019, THESIS U YORK
   Campbell G., 2020, IMPROVED GP2 COMPILE
   Campbell Graham, 2019, P 8 C ALGEBRA COALGE, p16:1, DOI DOI 10.4230/LIPICS.CALCO.2019.16
   Cormen T.H., 2009, Introduction to Algorithms, P651
   Courtehoute B, 2020, ELECTRON P THEOR COM, P163, DOI 10.4204/EPTCS.330.10
   Dorr H., 1995, LECT NOTES COMPUTER, V922, DOI DOI 10.1007/BFB0031909
   Ehrig H, 2015, MONOGR THEOR COMPUT, P1, DOI 10.1007/978-3-662-47980-3
   Fernández M, 2019, MATH STRUCT COMP SCI, V29, P615, DOI 10.1017/S0960129518000270
   Ghamarian Amir Hossein, 2012, International Journal on Software Tools for Technology Transfer, V14, P15, DOI 10.1007/s10009-011-0186-x
   Groner R., 2020, P 23 INT C MOD DRIV, P3, DOI [10.1145/3417990.3422000, DOI 10.1145/3417990.3422000]
   Habel A, 2002, LECT NOTES COMPUT SC, V2505, P135
   Hristakiev I, 2018, LECT NOTES COMPUT SC, V10748, P92, DOI 10.1007/978-3-319-74730-9_8
   Jakumeit Edgar, 2010, International Journal on Software Tools for Technology Transfer, V12, P263, DOI 10.1007/s10009-010-0148-8
   Jakumeit' E, 2014, SCI COMPUT PROGRAM, V85, P41, DOI 10.1016/j.scico.2013.10.009
   Plotkin GD, 2004, J LOGIC ALGEBR PROGR, V60-1, P17, DOI 10.1016/j.jlap.2004.03.002
   Plump D, 2017, J LOG ALGEBR METHODS, V88, P154, DOI 10.1016/j.jlamp.2016.12.001
   Plump D, 2012, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.82.1
   Poskitt CM, 2014, LECT NOTES COMPUT SC, V8571, P33
   Poskitt CM, 2012, FUND INFORM, V118, P135, DOI 10.3233/FI-2012-708
   Runge Olga, 2012, Applications of Graph Transformations with Industrial Relevance. 4th International Symposium, AGTIVE 2011. Revised Selected and Invited Papers, P81, DOI 10.1007/978-3-642-34176-2_8
   Sedgewick Robert., 2002, ALGORITHMS C PART 5, V3rd
   Skiena SS., 2020, The algorithm design manual, V3, DOI DOI 10.1007/978-3-030-54256-6
   Stalker H., 2020, THESIS U YORK
   Strüber D, 2017, LECT NOTES COMPUT SC, V10373, P196, DOI 10.1007/978-3-319-61470-0_12
   Wulandari GS, 2021, LECT NOTES COMPUT SC, V12741, P240, DOI 10.1007/978-3-030-78946-6_13
   Wulandari GS, 2018, LECT NOTES COMPUT SC, V11176, P479, DOI 10.1007/978-3-030-04771-9_34
   Zundorf A., 1996, Graph Grammars and Their Application to Computer Science. 5th International Workshop. Selected Papers, P454, DOI 10.1007/3-540-61228-9_105
NR 32
TC 3
Z9 3
U1 1
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2022
VL 214
AR 102727
DI 10.1016/j.scico.2021.102727
EA OCT 2021
PG 32
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA XA8ZO
UT WOS:000720929000010
OA Green Published, Green Accepted, hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Liebrenz, T
   Herber, P
   Glesner, S
AF Liebrenz, Timm
   Herber, Paula
   Glesner, Sabine
TI Service-oriented decomposition and verification of hybrid system models
   using feature models and contracts
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hybrid systems; Compositional verification; Theorem proving;
   Model-driven development
ID VARIABILITY
AB The design of fault-free hybrid control systems, which combine discrete and continuous behavior, is a challenging task. Their hybrid behavior and further factors make their design and verification challenging: These systems can consist of multiple interacting services, and commonly used design languages, like MATLAB/Simulink do not directly allow for the verification of hybrid behavior. Furthermore, services can be reused in new system designs and sometimes require changes in their structure to fit to the new context. By providing hybrid contracts, which formally define the interface behavior of hybrid system services in differential dynamic logic (dL), and providing a decomposition technique, we enable compositional verification of Simulink models with interacting services. This enables us to use the interactive theorem prover KeYmaera X to prove the correctness of hybrid control systems modeled in Simulink. With the inclusion of feature modeling in the design process and the creation of hybrid contracts, we are able to capture a wider range of behavior, while still enabling the use of formal interface description in the verification. We demonstrate the applicability of our approach with a temperature control system and an automotive industrial case study. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Liebrenz, Timm; Herber, Paula] Univ Munster, Embedded Syst Grp, Schlosspl 2, D-48149 Munster, Germany.
   [Glesner, Sabine] Tech Univ Berlin, Software & Embedded Syst Engn Grp, Str 17 Juni 135, D-10623 Berlin, Germany.
C3 University of Munster; Technical University of Berlin
RP Liebrenz, T; Herber, P (corresponding author), Univ Munster, Embedded Syst Grp, Schlosspl 2, D-48149 Munster, Germany.
EM timm.liebrenz@uni-muenster.de; paula.herber@uni-muenster.de;
   sabine.glesner@tu-berlin.de
OI Herber, Paula/0000-0002-5349-154X
FU German Research Foundation (DFG) [DFG GRK 1651/2]
FX This work was supported by the German Research Foundation (DFG) under
   grant number DFG GRK 1651/2.
CR Alalfi MH, 2014, PROC IEEE INT CONF S, P486, DOI 10.1109/ICSME.2014.79
   [Anonymous], 1993, Hybrid Systems, DOI [DOI 10.1007/3-540-57318-6_30, DOI 10.1007/3-540, DOI 10.1007/3-540-57318-6, 10.1007/3-540-57318-6_30]
   Araiza-Illan D, 2014, 2014 UKACC INTERNATIONAL CONFERENCE ON CONTROL (CONTROL), P244, DOI 10.1109/CONTROL.2014.6915147
   Astefanoaei Lacramioara, 2016, Theory and Practice of Formal Methods. Essays Dedicated to Frank de Boer on the Occasion of His 60th Birthday. LNCS 9660, P88, DOI 10.1007/978-3-319-30734-3_8
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Benvenuti L, 2014, INT J ROBUST NONLIN, V24, P699, DOI 10.1002/rnc.2914
   Boström P, 2011, LECT NOTES COMPUT SC, V6991, P291, DOI 10.1007/978-3-642-24559-6_21
   Chen Mingshuai., 2017, Provably Correct Systems, P39, DOI DOI 10.1007/978-3-319-48628-4_3
   Chutinan A, 2003, IEEE T AUTOMAT CONTR, V48, P64, DOI 10.1109/TAC.2002.806655
   Cubuktepe M, 2018, IFAC PAPERSONLINE, V51, P115, DOI 10.1016/j.ifacol.2018.08.020
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Doyen L., 2018, Handbook of Model Checking, P1047, DOI [DOI 10.1007/978-3-319-10575-830, 10.1007/978-3-319-10575-8_30]
   Filliâtre JC, 2013, LECT NOTES COMPUT SC, V7792, P125, DOI 10.1007/978-3-642-37036-6_8
   Frehse G, 2005, LECT NOTES COMPUT SC, V3414, P258
   Fulton N, 2015, LECT NOTES ARTIF INT, V9195, P527, DOI 10.1007/978-3-319-21401-6_36
   Haber Arne., 2013, Int. Workshop on Variability Modelling of Software-intensive Systems, P4
   Henzinger TA, 1997, LECT NOTES COMPUT SC, V1254, P460, DOI 10.1007/s100090050008
   Herber P, 2013, 2013 PROCEEDINGS OF THE INTERNATIONAL CONFERENCE ON EMBEDDED SOFTWARE (EMSOFT)
   Kang K. C., 1990, Technical Report
   Lahiri SK, 2004, LECT NOTES COMPUT SC, V3114, P475
   Liebrenz Timm, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Applications. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12478), P307, DOI 10.1007/978-3-030-61467-6_20
   Liebrenz T., 2019, INT C FORM ASP COMP INT C FORM ASP COMP
   Liebrenz T, 2018, LECT NOTES COMPUT SC, V11232, P427, DOI 10.1007/978-3-030-02450-5_28
   Liebrenz T, 2018, LECT NOTES COMPUT SC, V11232, P89, DOI 10.1007/978-3-030-02450-5_6
   Liebrenz T, 2017, P INT COMP SOFTW APP, P469, DOI 10.1109/COMPSAC.2017.251
   Loos SM, 2016, PROCEEDINGS OF THE 31ST ANNUAL ACM-IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE (LICS 2016), P505, DOI 10.1145/2933575.2934555
   Lunel Simon, 2019, Formal Methods - The Next 30 Years. Third World Congress, FM 2019. Proceedings. Lecture Notes in Computer Science (LNCS 11800), P354, DOI 10.1007/978-3-030-30942-8_22
   MathWorks, 2008, WHIT PAP COD VER RUN WHIT PAP COD VER RUN
   MathWorks, MATLAB SIM
   Minopoli S, 2016, HSCC'16: PROCEEDINGS OF THE 19TH INTERNATIONAL CONFERENCE ON HYBRID SYSTEMS: COMPUTATION AND CONTROL, P93, DOI 10.1145/2883817.2883826
   Mitsch S, 2017, ELECTRON P THEOR COM, P67, DOI 10.4204/EPTCS.240.5
   Müller A, 2018, INT J SOFTW TOOLS TE, V20, P615, DOI 10.1007/s10009-018-0502-9
   O'Halloran C, 2013, AUTOMAT SOFTW ENG, V20, P237, DOI 10.1007/s10515-012-0116-5
   Pawletta T., 2016, ANN SIM S ANN SIM S, P1
   Platzer A, 2008, J AUTOM REASONING, V41, P143, DOI 10.1007/s10817-008-9103-8
   Platzer A, 2017, J AUTOM REASONING, V59, P219, DOI 10.1007/s10817-016-9385-1
   Reicherdt Robert, 2014, Software Engineering and Formal Methods. 12th International Conference, SEFM 2014. Proceedings: LNCS 8702, P190, DOI 10.1007/978-3-319-10431-7_14
   Sanfelice R. G., 2013, P HYBR SYST COMP CON, P101
   Sinnema M, 2004, LECT NOTES COMPUT SC, V3154, P197
   van Gurp J, 2001, WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P45, DOI 10.1109/WICSA.2001.948406
   Weiland J., 2014, INT WORKSH VAR MOD S INT WORKSH VAR MOD S, P1
   Zou L, 2015, LECT NOTES COMPUT SC, V9364, P464, DOI 10.1007/978-3-319-24953-7_33
NR 42
TC 1
Z9 1
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2021
VL 211
AR 102694
DI 10.1016/j.scico.2021.102694
EA JUL 2021
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA TY1NH
UT WOS:000683550800001
DA 2024-07-18
ER

PT J
AU de Moraes, RS
   Nadjm-Tehrani, S
AF de Moraes, Rodrigo Saar
   Nadjm-Tehrani, Simin
TI Abstraction models for verifying resource adequacy of IMA systems at
   concept level
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE IMA system; Conceptual analysis; Network resource adequacy; Timed
   automata; UPPAAL
ID NETWORK DELAY; CALCULUS
AB Complex cyber-physical systems can be difficult to analyze for resource adequacy (e.g., bandwidth and buffer size) at the concept development stage since relevant models are hard to create. During this period, details about the functions to be executed or the platforms in the architecture are partially unknown. This is especially true for Integrated Modular Avionics (IMA) systems, for which life-cycles span over several decades, with potential changes to functionality in the future. This work aims to identify abstractions for representing data exchanges among functions realized in networked IMA systems and investigates how these can be represented in formal models and analyzed with exact guarantees. Timed automata (TA) are a relevant choice for modeling since communication resource adequacy is directly related to potential network delays. We explore two alternatives in modeling with TA, a direct one representing every process using a TA template, and a more abstract one representing every computation device with a TA template. While the first approach represents process-to-process data exchanges, the modified approach reduces the state space by representing all processes currently allocated to a single computing element to obtain scalability gains. Both approaches are flexible since the templates presented can be instantiated to represent different types of network topologies and communication patterns. The instantiated TA models are used to illustrate an use case and analyzed with the UPPAAL model checker to verify that a given platform instance supports the desired system functions in terms of network bandwidth and buffer size adequacy, thereby messages reaching their final destination with freshness guarantees. Both abstraction levels are shown to be suitable for verifying the intended properties, but the more abstract one demonstrates a 67% improvement in verification time and a 66% reduction in state space during verification. The more abstract approach is also applied to a real-world example from an earlier publication, with a much larger state space and a more complex structure, to illustrate the ability to reuse the approach in multiple use cases. (C) 2021 The Authors. Published by Elsevier B.V.
C1 [de Moraes, Rodrigo Saar; Nadjm-Tehrani, Simin] Linkoping Univ, Dept Comp & Informat Sci, Linkoping, Sweden.
C3 Linkoping University
RP de Moraes, RS (corresponding author), Linkoping Univ, Dept Comp & Informat Sci, Linkoping, Sweden.
EM rodrigo.moraes@liu.se; simin.nadjm-tehrani@liu.se
OI Saar de Moraes, Rodrigo/0000-0002-0103-104X; Nadjm-Tehrani,
   Simin/0000-0002-1485-0802
FU Swedish Governmental Agency for Innovation SystemsVinnova, as part of
   the national projects on aeronautics, NFFP7, project CLASSICS [NFFP7
   201704890]
FX The authors wish to thank the anonymous reviewers for their constructive
   comments that improved the paper. This work was supported by the Swedish
   Governmental Agency for Innovation SystemsVinnova, as part of the
   national projects on aeronautics, NFFP7, project CLASSICS (NFFP7
   201704890) .
CR Aceto L, 1998, LECT NOTES COMPUT SC, V1530, P245
   Adnan M, 2012, IEEE INT C EMERG
   Adnan M, 2010, IEEE INT C EMERG
   Alizai N.A., 2020, THESIS
   ALUR R, 1990, LECT NOTES COMPUT SC, V443, P322
   Bauer H., 2009, P 14 INT C EM TECHN, P1
   Behrmann G, 2004, LECT NOTES COMPUT SC, V3185, P200
   Behrmann G, 2006, INT CONF QUANT EVAL, P125
   Boudjadar J., 2017, P 8 ACM SPEC INT C P, P263
   Boudjadar J, 2016, 2016 ACM/IEEE INTERNATIONAL CONFERENCE ON FORMAL METHODS AND MODELS FOR SYSTEM DESIGN (MEMOCODE), P105, DOI 10.1109/MEMCOD.2016.7797753
   Boyer M., 2011, PEGASE ROBUST EFFICI
   Charara H, 2006, EUROMICRO, P193, DOI 10.1109/ECRTS.2006.15
   Clarke EdmundM., 2018, Cyber physical systems series, V2nd
   CRUZ RL, 1991, IEEE T INFORM THEORY, V37, P132, DOI 10.1109/18.61110
   CRUZ RL, 1991, IEEE T INFORM THEORY, V37, P114, DOI 10.1109/18.61109
   David A., 2009, MODEL BASED EMBED SY, V1, P93
   de Moraes RS, 2021, 29TH INTERNATIONAL CONFERENCE ON REAL TIME NETWORKS AND SYSTEMS (RTNS 2021), P78, DOI 10.1145/3453417.3453427
   Fribourg L., 2012, 2012 19th International Symposium on Temporal Representation and Reasoning (TIME), P73, DOI 10.1109/TIME.2012.10
   Goldblatt R., 1992, LOGICS TIME COMPUTAT, V7
   Khaitan SK, 2015, IEEE SYST J, V9, P350, DOI 10.1109/JSYST.2014.2322503
   Larsen Kim G., 2018, Leveraging Applications of Formal Methods, Verification and Validation. Industrial Practice. 8th International Symposium, ISoLA 2018. Proceedings: Lecture Notes in Computer Science (LNCS 11247), P212, DOI 10.1007/978-3-030-03427-6_18
   Larsen K. G., 1997, International Journal on Software Tools for Technology Transfer, V1, P134, DOI 10.1007/s100090050010
   Lauer M., 2011, Proceedings of IEEE ETFA, P1
   Lauer M, 2010, LECT NOTES COMPUT SC, V6415, P243, DOI 10.1007/978-3-642-16558-0_21
   Mikucionis M, 2010, LECT NOTES COMPUT SC, V6416, P175, DOI 10.1007/978-3-642-16561-0_21
   Modeer M.R., 2019, 2019 INT S SYST ENG, P1
   Ordinez L, 2020, IEEE REV IBEROAM TEC, V15, P50, DOI 10.1109/RITA.2020.2978416
   Saar de Moraes R., 2020, FORMAL TECHNIQUES SA, P40
   Shan L., 2016, RTLIB LIB TIMED AUTO
   Soni A, 2017, INT SYM IND EMBED, P23
   Sorenson U., 2007, THESIS
   Sun Y., 2013, CORR
   Sun Y., 2015, VERIFICATION 2 REAL
   Tripakis S, 2001, FORM METHOD SYST DES, V18, P25, DOI 10.1023/A:1008734703554
   Vain J, 2016, FRONT ARTIF INTEL AP, V291, P297, DOI 10.3233/978-1-61499-714-6-297
   Wang HC, 2018, INT J WIREL INF NETW, V25, P358, DOI 10.1007/s10776-018-0412-5
   Watanabe H, 2006, ELECTRON NOTES THEOR, V164, P177, DOI 10.1016/j.entcs.2006.06.011
   Watkins CB, 2006, 25 DIG AV SYST C, P1
   Xu QF, 2019, INT J AERONAUT SPACE, V20, P506, DOI 10.1007/s42405-018-00140-7
   Yao JG, 2016, IEEE ACCESS, V4, P5880, DOI 10.1109/ACCESS.2016.2584859
   Zhang K, 2019, IEEE ACCESS, V7, P23852, DOI 10.1109/ACCESS.2019.2895996
NR 41
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2021
VL 208
AR 102654
DI 10.1016/j.scico.2021.102654
EA APR 2021
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF6EZ
UT WOS:000652847700004
OA hybrid, Green Published
DA 2024-07-18
ER

PT J
AU Çetin, HA
   Dogan, E
   Tüzün, E
AF Cetin, H. Alperen
   Dogan, Emre
   Tuzun, Eray
TI A review of code reviewer recommendation studies: Challenges and future
   directions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Review
DE Systematic literature review; Code reviewer recommendation; Reviewer
   recommendation; Modern code review; Pull request
AB Code review is the process of inspecting code changes by a developer who is not involved in the development of the changeset. One of the initial and important steps of code review process is selecting code reviewer(s) for a given code change. To maximize the benefits of the code review process, the appropriate selection of the reviewer is essential. Code reviewer recommendation has been an active research area over the last few years, and many recommendation models have been proposed in the literature.
   In this study, we conduct a systematic literature review by inspecting 29 primary studies published from 2009 to 2020. Based on the outcomes of our review: (1) most preferred approaches are heuristic approaches closely followed by machine learning approaches, (2) the majority of the studies use open source projects to evaluate their models, (3) the majority of the studies prefer incremental training set validation techniques, (4) most studies suffer from reproducibility problems, (5) model generalizability and dataset integrity are the most common validity threats for the models and (6) refining models and conducting additional experiments are the most common future work discussions in the studies. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Cetin, H. Alperen; Dogan, Emre; Tuzun, Eray] Bilkent Univ, Dept Comp Engn, Ankara, Turkey.
C3 Ihsan Dogramaci Bilkent University
RP Çetin, HA (corresponding author), Bilkent Univ, Dept Comp Engn, Ankara, Turkey.
EM alperen.cetin@bilkent.edu.tr; emre.dogan@bilkent.edu.tr;
   eraytuzun@cs.bilkent.edu.tr
RI Tuzun, Eray/AAD-7282-2021
OI Tuzun, Eray/0000-0002-5550-7816
CR Al-Zubaidi WHA, 2020, PROCEEDINGS OF THE 16TH ACM INTERNATIONAL CONFERENCE ON PREDICTIVE MODELS AND DATA ANALYTICS IN SOFTWARE ENGINEERING, PROMISE 2020, P21, DOI 10.1145/3416508.3417115
   Ampatzoglou A, 2019, INFORM SOFTWARE TECH, V106, P201, DOI 10.1016/j.infsof.2018.10.006
   [Anonymous], 2017, The scrum guide: the definitive guide to scrum
   [Anonymous], MANAGING CODE REV AS
   [Anonymous], 2009, Research on software analysis for error-free computing center Tech-Memo (ROSAEC MEMO 2009-006)
   [Anonymous], CRUC COD REV TOOL CH
   [Anonymous], GERR COD REV PLUG DE
   Asthana S, 2019, ESEC/FSE'2019: PROCEEDINGS OF THE 2019 27TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P937, DOI 10.1145/3338906.3340449
   Bacchelli A, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P712, DOI 10.1109/ICSE.2013.6606617
   Badampudi D, 2019, PROCEEDINGS OF EASE 2019 - EVALUATION AND ASSESSMENT IN SOFTWARE ENGINEERING, P340, DOI 10.1145/3319008.3319354
   Balachandran V., 2015, AUTOMATIC CODE REV C, Patent No. 9,201,646
   Balachandran V, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P931, DOI 10.1109/ICSE.2013.6606642
   Bosu A, 2017, IEEE T SOFTWARE ENG, V43, P56, DOI 10.1109/TSE.2016.2576451
   Chouchen M., 2020, APPL SOFT COMPUT
   Chueshev A, 2020, PROC IEEE INT CONF S, P499, DOI 10.1109/ICSME46990.2020.00054
   de Lima ML, 2018, J SYST SOFTWARE, V144, P181, DOI 10.1016/j.jss.2018.05.065
   Dogan E, 2019, INT SYMP EMP SOFTWAR, P7
   Fagan Michael E., 2002, Software pioneers, P562, DOI DOI 10.1007/978-3-642-59412-0_34
   Fejzer M, 2018, J INTELL INF SYST, V50, P597, DOI 10.1007/s10844-017-0484-1
   Fernández DM, 2019, EMPIR SOFTW ENG, V24, P1057, DOI 10.1007/s10664-019-09712-x
   Fernández DM, 2019, J SYST SOFTWARE, V148, P170, DOI 10.1016/j.jss.2018.11.019
   González-Barahona JM, 2012, EMPIR SOFTW ENG, V17, P75, DOI 10.1007/s10664-011-9181-9
   Gousios G, 2013, IEEE WORK CONF MIN S, P233, DOI 10.1109/MSR.2013.6624034
   Gundersen OE, 2018, AAAI CONF ARTIF INTE, P1644
   Hannebauer C, 2016, IEEE INT CONF AUTOM, P99, DOI 10.1145/2970276.2970306
   Haynes T. R., 2017, CODE REVIEWER SELECT, Patent No. 9,595,009
   Jiang J, 2019, J SYST SOFTWARE, V154, P196, DOI 10.1016/j.jss.2019.04.055
   Jiang J, 2017, INFORM SOFTWARE TECH, V84, P48, DOI 10.1016/j.infsof.2016.10.006
   Jiang J, 2015, J COMPUT SCI TECH-CH, V30, P998, DOI 10.1007/s11390-015-1577-3
   Kim J, 2018, SYMMETRY-BASEL, V10, DOI 10.3390/sym10040114
   Kitchenham B., 2007, 23 EBSE, DOI DOI 10.1145/1134285.1134500
   Klünder J, 2019, 2019 IEEE/ACM 41ST INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP 2019), P255, DOI 10.1109/ICSE-SEIP.2019.00036
   Kovalenko V, 2018, IEEE T SOFTWARE ENG, P710
   Lee JB, 2013, ASIA PAC SOFWR ENG, P1, DOI 10.1109/APSEC.2013.103
   Liao Zhifang, 2019, SOFT COMPUT, V24, P1
   Lipcák J, 2018, EUROMICRO CONF PROC, P378, DOI 10.1109/SEAA.2018.00068
   MacLeod L, 2018, IEEE SOFTWARE, V35, P34, DOI 10.1109/MS.2017.265100500
   Mäntylä MV, 2009, IEEE T SOFTWARE ENG, V35, P430, DOI 10.1109/TSE.2008.71
   Mirsaeedi E, 2020, PROC INT CONF SOFTW, P1183, DOI 10.1145/3377811.3380335
   Rahman MM, 2016, 2016 IEEE/ACM 38TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING COMPANION (ICSE-C), P222, DOI 10.1145/2889160.2889244
   Rebai S, 2020, AUTOMAT SOFTW ENG, V27, P301, DOI 10.1007/s10515-020-00275-6
   Sadowski C, 2018, 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING - SOFTWARE ENGINEERING IN PRACTICE TRACK (ICSE-SEIP 2018), P181, DOI 10.1145/3183519.3183525
   Strand A, 2020, 2020 IEEE/ACM 42ND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING: SOFTWARE ENGINEERING IN PRACTICE (ICSE-SEIP), P1, DOI 10.1145/3377813.3381365
   Sulun E., 2020, INF SOFTW TECHNOL
   Thongtanunam P, 2015, 2015 22ND INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION, AND REENGINEERING (SANER), P141, DOI 10.1109/SANER.2015.7081824
   Upsource, COD REV PROJ AN
   Woulfe M., 2020, AUTOMATIC IDENTIFICA, Patent No. 16/391,300
   Xia X, 2015, PROC IEEE INT CONF S, P261, DOI 10.1109/ICSM.2015.7332472
   Xia ZL, 2017, 6TH INTERNATIONAL WORKSHOP ON SOFTWARE MINING (SOFTWAREMINING), P24, DOI 10.1109/SOFTWAREMINING.2017.8100850
   Yang C, 2018, J CENT SOUTH UNIV, V25, P1129, DOI 10.1007/s11771-018-3812-x
   Ye X, 2019, IEEE ACCESS, V7, P85382, DOI 10.1109/ACCESS.2019.2925560
   Ying HC, 2016, 2016 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON CROWDSOURCING IN SOFTWARE ENGINEERING (CSI-SE), P29, DOI [10.1145/2897659.2897660, 10.1109/CSI-SE.2016.013]
   Yu Y, 2016, INFORM SOFTWARE TECH, V74, P204, DOI 10.1016/j.infsof.2016.01.004
   Zanjani MB, 2016, IEEE T SOFTWARE ENG, V42, P530, DOI 10.1109/TSE.2015.2500238
   Zhou X, 2016, ASIA PAC SOFWR ENG, P153, DOI [10.1109/APSEC.2016.031, 10.1109/APSEC.2016.62]
NR 55
TC 9
Z9 9
U1 1
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2021
VL 208
AR 102652
DI 10.1016/j.scico.2021.102652
EA APR 2021
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA SF6EZ
UT WOS:000652847700003
DA 2024-07-18
ER

PT J
AU Ferrara, P
   Cortesi, A
   Spot, F
AF Ferrara, Pietro
   Cortesi, Agostino
   Spot, Fausto
TI From CIL to Java bytecode: Semantics-based translation for static
   analysis leveraging
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Static analysis; Abstract interpretation; Java bytecode; CIL
AB A formal translation of CIL (i.e., .Net) bytecode into Java bytecode is introduced and proved sound with respect to the language semantics. The resulting code is then analyzed with Julia, an industrial static analyzer of Java bytecode. The overall process of translation and analysis is fast, scales to industrial programs, and introduces a negligible number of false alarms. The main contribution of this work is to leverage existing, mature, and sound analyzers for Java bytecode by applying them also to the wide range of .Net software systems. Experimental results show the actual effectiveness of this approach when applied to all the system libraries of the Microsoft .Net framework version 4.0.30319 (about 5 MLOCs). (C) 2020 The Author(s). Published by Elsevier B.V.
C1 [Ferrara, Pietro] JuliaSoft, Verona, Italy.
   [Ferrara, Pietro; Cortesi, Agostino] Univ Ca Foscari Venezia, Venice, Italy.
   [Spot, Fausto] Univ Verona, Verona, Italy.
C3 Universita Ca Foscari Venezia; University of Verona
RP Ferrara, P (corresponding author), JuliaSoft, Verona, Italy.; Ferrara, P (corresponding author), Univ Ca Foscari Venezia, Venice, Italy.
EM pietro.ferrara@unive.it; cortesi@unive.it
RI FERRARA, Pietro/ABF-9761-2021; Cortesi, Agostino/AAQ-2996-2020; Cortesi,
   Agostino/F-9637-2011
OI FERRARA, Pietro/0000-0002-4678-933X; Cortesi,
   Agostino/0000-0002-0946-5440; Spoto, Fausto/0000-0003-2973-0384
CR Ameri M., 2016, P IFM 16
   [Anonymous], ECMA335
   Atkey R., 2015, ELECT COMM EUROPEAN, V72
   Barbon G, 2016, LECT NOTES COMPUT SC, V9871, P32, DOI 10.1007/978-3-319-46598-2_3
   Barnett M., 2004, P CASSIS 04
   Bebenita M., 2010, P OOPSLA 10
   Costantini G, 2015, SOFTWARE PRACT EXPER, V45, P245, DOI 10.1002/spe.2218
   Cousot P., 1977, P POPL 77
   ECMA, 2012, ECMA335
   Ferrara P, 2018, FME WORKS FORM, P40, DOI 10.1145/3193992.3193994
   Lindholm T., 2013, The Java virtual machine specification
   Logozzo F., 2010, P FOVEOOS 10
   Logozzo F., 2007, P VMCAI 07
   Negrini L, 2018, P TAPAS 18
   Rival X, 2007, ACM T PROGR LANG SYS, V29, DOI 10.1145/1275497.1275501
   Sadowski C, 2018, COMMUN ACM, V61, P58, DOI 10.1145/3188720
   Spoto F., 2016, P SAS 16
NR 17
TC 1
Z9 1
U1 1
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2020
VL 191
AR 102392
DI 10.1016/j.scico.2020.102392
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA KW9NS
UT WOS:000521511000001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Lindner, A
   Guanciale, R
   Metere, R
AF Lindner, Andreas
   Guanciale, Roberto
   Metere, Roberto
TI TrABin: Trustworthy analyses of binaries
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Binary analysis; Formal verification; Proof producing analysis; Theorem
   proving
AB Verification of microkernels, device drivers, and crypto routines requires analyses at the binary level. In order to automate these analyses, in the last years several binary analysis platforms have been introduced. These platforms share a common design: the adoption of hardware-independent intermediate representations, a mechanism to translate architecture dependent code to this representation, and a set of architecture independent analyses that process the intermediate representation.
   The usage of these platforms to verify software introduces the need for trusting both the correctness of the translation from binary code to intermediate language (called transpilation) and the correctness of the analyses. Achieving a high degree of trust is challenging since the transpilation must handle (i) all the side effects of the instructions, (ii) multiple instruction encodings (e.g. ARM Thumb), and (iii) variable instruction length (e.g. Intel). Similarly, analyses can use complex transformations (e.g. loop unrolling) and simplifications (e.g. partial evaluation) of the artifacts, whose bugs can jeopardize correctness of the results.
   We overcome these problems by developing a binary analysis platform on top of the interactive theorem prover HOL4. First, we formally model a binary intermediate language and we prove correctness of several supporting tools (i.e. a type checker). Then, we implement two proof-producing transpilers, which respectively translate ARMv8 and CortexMO programs to the intermediate language and generate a certificate. This certificate is a HOL4 proofdemonstrating correctness of the translation. As demonstrating analysis, we implement a proof-producing weakest precondition generator, which can be used to verify that a given loop-free program fragment satisfies a contract. Finally, we use an AES encryption implementation to benchmark our platform. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Lindner, Andreas; Guanciale, Roberto] KTH Royal Inst Technol, Stockholm, Sweden.
   [Metere, Roberto] Newcastle Univ, Newcastle Upon Tyne, Tyne & Wear, England.
C3 Royal Institute of Technology; Newcastle University - UK
RP Lindner, A (corresponding author), KTH Royal Inst Technol, Stockholm, Sweden.
EM andili@kth.se; robertog@kth.se; r.metere2@ncl.ac.uk
RI Metere, Roberto/KLC-6098-2024; Lindner, Andreas/E-3022-2017
OI Lindner, Andreas/0000-0001-5311-1781; Guanciale,
   Roberto/0000-0002-8069-6495
FU TrustFull project - Swedish Foundation for Strategic Research [RIT
   17-0036]; KTH CERCES Center for Resilient Critical Infrastructures -
   Swedish Civil Contingencies Agency [2015-831]
FX We warmly thank Thomas Tuerk for his key contributions to build up the
   foundation of the binary analysis platform reported in this paper. This
   work has been supported by the TrustFull project (RIT 17-0036) financed
   by the Swedish Foundation for Strategic Research and by the KTH CERCES
   Center for Resilient Critical Infrastructures (2015-831) financed by the
   Swedish Civil Contingencies Agency.
CR Alkassar E, 2008, LECT NOTES COMPUT SC, V5295, P209, DOI 10.1007/978-3-540-87873-5_18
   Balliu M, 2014, CCS'14: PROCEEDINGS OF THE 21ST ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P1080, DOI 10.1145/2660267.2660322
   Beringer L, 2015, PROCEEDINGS OF THE 24TH USENIX SECURITY SYMPOSIUM, P207
   Bletsch T., 2011, P 6 ACM S INF COMP C, P30
   Bohme Sascha, 2011, Certified Programs and Proofs. Proceedings First International Conference, CPP 2011, P183
   Boldo S, 2013, P S COMP ARITHM, P107, DOI 10.1109/ARITH.2013.30
   Brumley David, 2011, Computer Aided Verification. Proceedings 23rd International Conference, CAV 2011, P463, DOI 10.1007/978-3-642-22110-1_37
   Dam M., 2013, P 3 INT WORKSHOP TRU, DOI [10.1145/2517300.2517302, DOI 10.1145/2517300.2517302]
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   Doychev G, 2015, ACM T INFORM SYST SE, V18, DOI 10.1145/2756550
   Fox Anthony, 2012, Interactive Theorem Proving. Proceedings of the Third International Conference, ITP 2012, P338, DOI 10.1007/978-3-642-32347-8_23
   Fox A., L3 SPECIFICATION LAN
   Fox ACJ, 2010, DESIGN AND VERIFICATION OF MICROPROCESSOR SYSTEMS FOR HIGH-ASSURANCE APPLICATIONS, P221, DOI 10.1007/978-1-4419-1539-9_8
   Hasabnis N, 2016, ACM SIGPLAN NOTICES, V51, P311, DOI 10.1145/2954679.2872380
   Klein G, 2009, SOSP'09: PROCEEDINGS OF THE TWENTY-SECOND ACM SIGOPS SYMPOSIUM ON OPERATING SYSTEMS PRINCIPLES, P207
   Kumar R, 2014, ACM SIGPLAN NOTICES, V49, P179, DOI 10.1145/2535838.2535841
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Li GD, 2007, LECT NOTES COMPUT SC, V4421, P205
   Metere R, 2017, LECT NOTES COMPUT SC, V10623, P197, DOI 10.1007/978-3-319-70848-5_13
   Myreen M. O., 2008, FMCAD, P1, DOI DOI 10.1109/FMCAD.2008.ECP.24
   Myreen MO, 2013, LECT NOTES COMPUT SC, V8307, P66, DOI 10.1007/978-3-319-03545-1_5
   Nethercote N., 2003, Electronic Notes in Theoretical Computer Science, V89, DOI 10.1016/S1571-0661(04)81042-9
   Rustan K, 2005, INFORM PROCESS LETT, V93, P281, DOI 10.1016/j.ipl.2004.10.015
   Sewell T, 2013, ACM SIGPLAN NOTICES, V48, P471, DOI 10.1145/2499370.2462183
   Shacham H, 2007, CCS'07: PROCEEDINGS OF THE 14TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P552
   Shoshitaishvili Y, 2016, P IEEE S SECUR PRIV, P138, DOI 10.1109/SP.2016.17
   Song D, 2008, LECT NOTES COMPUT SC, V5352, P1, DOI 10.1007/978-3-540-89862-7_1
   Vogels Frederic., 2010, P 2010 ACM S APPL CO, P2517
NR 28
TC 7
Z9 8
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2019
VL 174
BP 72
EP 89
DI 10.1016/j.scico.2019.01.001
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HP2VJ
UT WOS:000461533200003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Zhang, XY
   Hong, WJ
   Li, Y
   Sun, M
AF Zhang, Xiyue
   Hong, Weijiang
   Li, Yi
   Sun, Meng
TI Reasoning about connectors using Coq and Z3
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Coordination language; Reo; Coq; Z3; Reasoning
ID COMPONENT CONNECTORS; REO; VERIFICATION; MODEL
AB Reo is a channel-based exogenous coordination language in which complex coordinators, called connectors, are compositionally built out of simpler ones. In this paper, we present an approach to model and reason about connectors using Coq and Z3. Both models reflect the original structure of connectors as closely as possible. In our framework, both basic connectors (channels) and composition operations are modeled as axioms. Then complex connectors are modeled as the combination of logical predicates which correspond to simpler connectors. With such definitions provided, connector properties, as well as equivalence and refinement relations between different connectors, can be formalized as goals in Coq and proved using pre-defined tactics, if satisfied by connectors. When failing to prove whether a property is satisfiable or not with Coq, we use Z3, an SMT solver, to search for possible bounded counter examples automatically. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Zhang, Xiyue; Hong, Weijiang; Li, Yi; Sun, Meng] Peking Univ, Sch Math Sci, LMAM & DI, Beijing, Peoples R China.
C3 Peking University
RP Sun, M (corresponding author), Peking Univ, Sch Math Sci, LMAM & DI, Beijing, Peoples R China.
EM zhangxiyue@pku.edu.cn; wj.hong@pku.edu.cn; liyi_math@pku.edu.cn;
   sunmeng@math.pku.edu.cn
RI SUN, MENG/KQA-2135-2024
OI Sun, Meng/0000-0001-6550-7396; Zhang, Xiyue/0000-0003-1649-7165
FU National Natural Science Foundation of China [61772038, 61532019,
   61272160]
FX The work was partially supported by the National Natural Science
   Foundation of China under grant nos. 61772038, 61532019 and 61272160.
CR Aichernig BK, 2009, THIRD INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P147, DOI 10.1109/TASE.2009.14
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Baier C, 2010, LECT NOTES COMPUT SC, V6416, P97, DOI 10.1007/978-3-642-16561-0_15
   Clarke D., 2004, Leveraging Applications of Formal Methods. First International Symposium, ISoLA 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol. 4313), P9
   de Moura L, 2008, LECT NOTES COMPUT SC, V4963, P337, DOI 10.1007/978-3-540-78800-3_24
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   Huet G., 1997, RAPPORT TECHNIQUE, V178
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Jongmans SSTQ, 2012, SCI ANN COMPUT SCI, V22, P201, DOI 10.7561/SACS.2012.1.201
   Khosravi R, 2008, LECT NOTES COMPUT SC, V5052, P169, DOI 10.1007/978-3-540-68265-3_11
   Klüppelholz S, 2009, SCI COMPUT PROGRAM, V74, P688, DOI 10.1016/j.scico.2008.09.020
   Kokash N, 2012, FORM ASP COMPUT, V24, P187, DOI 10.1007/s00165-011-0191-6
   Li Y, 2015, SCI COMPUT PROGRAM, V113, P285, DOI 10.1016/j.scico.2015.10.016
   Meng S, 2012, SCI COMPUT PROGRAM, V77, P799, DOI 10.1016/j.scico.2011.04.002
   Meng S, 2007, APPLIED COMPUTING 2007, VOL 1 AND 2, P346, DOI 10.1145/1244002.1244085
   Roscoe A.W., 1998, THEORY PRACTICE CONC
   Sun Meng, 2012, 2012 IEEE Sixth International Symposium on Theoretical Aspects of Software Engineering (TASE 2012), P201, DOI 10.1109/TASE.2012.36
   Zhang XY, 2017, LECT NOTES COMPUT SC, V10231, P172, DOI 10.1007/978-3-319-57666-4_11
NR 20
TC 3
Z9 3
U1 0
U2 8
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2019
VL 170
BP 27
EP 44
DI 10.1016/j.scico.2018.10.002
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA HF8AB
UT WOS:000454462200002
OA Bronze
DA 2024-07-18
ER

PT J
AU Morihata, A
AF Morihata, Akimasa
TI Incremental computing with data structures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Data structures; Datatype-generic programming; Incremental computing;
   Shortcut fusion
ID SHORT-CUT
AB Incremental computing is a method of maintaining consistency between an input and output. If only a small portion of the input is modified, it is natural to expect that the corresponding output can be obtained more efficiently than full re-computation. However, for nontrivial data structures, such as self-balancing binary search trees, even the most primitive modifications may lead to drastic change of the underlying structure. In this paper, we develop an method of incremental computing on data structures that may consist of complex modifications. The key idea is to use shortcut fusion in order to decompose a complex modification to a series of simple ones. Based on this idea, we extend Jeuring's incremental computing method on algebraic data structures to one on more complex data structures. The method is purely functional and does not rely on any run-time support. Its correctness is straightforward from parametricity. Moreover, its cost is often proportional to that of the corresponding modification. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Morihata, Akimasa] Univ Tokyo, Grad Sch Arts & Sci, Tokyo, Japan.
C3 University of Tokyo
RP Morihata, A (corresponding author), Univ Tokyo, Grad Sch Arts & Sci, Tokyo, Japan.
EM morihata@graco.c.u-tokyo.ac.jp
RI Morihata, Akimasa/KFR-7683-2024
OI Morihata, Akimasa/0000-0003-2741-5954
FU JSPS [15K15965]; Grants-in-Aid for Scientific Research [15K15965]
   Funding Source: KAKEN
FX The author is grateful to anonymous reviewers whose comments were useful
   to improve the presentation. In particular, one reviewer pointed out the
   similarity between a preliminary result and Jeuring's incremental
   algorithms on lists. The author is supported by the JSPS Grant-in-Aid
   for Young Scientists (B) 15K15965.
CR Abbott M, 2005, THEOR COMPUT SCI, V342, P3, DOI 10.1016/j.tcs.2005.06.002
   Acar Umit A, 2004, P 15 ANN ACM SIAM S, V531, P540, DOI [10.1145/990000/982871, DOI 10.1145/990000/982871]
   Acar UA, 2006, ACM T PROGR LANG SYS, V28, P990, DOI 10.1145/1186632.1186634
   ALBLAS H, 1991, LECT NOTES COMPUT SC, V545, P215
   [Anonymous], C FUNCT PROGR LANG C
   [Anonymous], 2003, Haskell 98 language and libraries: the revised report
   Bird R., 1996, Journal of Functional Programming, V6, P1, DOI 10.1017/S0956796800001556
   Bird Richard, 1997, Algebra of Programming
   Cai Y., 2014, ACM SIGPLAN C PROGR, P17
   Chen Y, 2012, ACM SIGPLAN NOTICES, V47, P299, DOI 10.1145/2345156.2254100
   Chitil O, 1999, ACM SIGPLAN NOTICES, V34, P249, DOI 10.1145/317765.317907
   Demers Alan J., 1981, S PRINCIPLES PROGRAM, P105, DOI DOI 10.1145/567532.567544
   Erwig M, 2000, LECT NOTES COMPUT SC, V1816, P135
   Erwig M, 1999, LECT NOTES COMPUT SC, V1548, P406
   Geser A., 1999, J FUNCTIONAL PROGRAM, V9, P649
   Gibbons J., 1996, Journal of Functional Programming, V6, P657, DOI 10.1017/S0956796800001908
   Gibbons J, 2000, SCI COMPUT PROGRAM, V37, P37, DOI 10.1016/S0167-6423(99)00022-2
   Gill A., 1993, P C FUNCT PROGR LANG, P223, DOI DOI 10.1145/165180.165214
   Hinze R, 2015, ACM SIGPLAN NOTICES, V50, P527, DOI [10.1145/2676726.2676989, 10.1145/2775051.2676989]
   Hinze R, 2013, SCI COMPUT PROGRAM, V78, P2108, DOI 10.1016/j.scico.2012.07.011
   HUDSON SE, 1991, ACM T PROGR LANG SYS, V13, P315, DOI 10.1145/117009.117012
   Huet G., 1997, Journal of Functional Programming, V7, P549, DOI 10.1017/S0956796897002864
   Jeuring J., 1993, THESIS
   Jeuring J., 1991, P SION COMP SCI NETH, P315
   Launchbury J., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P314, DOI 10.1145/224164.224223
   MEIJER E, 1991, LECT NOTES COMPUT SC, V523, P124
   Morihata Akimasa, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P215, DOI 10.1007/978-3-319-29604-3_14
   Morihata A, 2013, ACM SIGPLAN NOTICES, V48, P245, DOI [10.1145/2500365.2500580, 10.1145/2544174.2500580]
   Morihata A, 2009, ACM SIGPLAN NOTICES, V44, P177, DOI 10.1145/1594834.1480905
   Morita K, 2007, PLDI'07: PROCEEDINGS OF THE 2007 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P146
   PUGH W, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P315, DOI 10.1145/75277.75305
   Ramalingam G., 1993, Conference Record of the Twentieth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P502, DOI 10.1145/158511.158710
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   SLEATOR DD, 1985, J ACM, V32, P652, DOI 10.1145/3828.3835
   Takano A., 1995, Conference Record of FPCA '95. SIGPLAN-SIGARCH-WG2.8. Conference on Functional Programming Languages and Computer Architecture, P306, DOI 10.1145/224164.224221
   Wang M, 2013, SCI COMPUT PROGRAM, V78, P2216, DOI 10.1016/j.scico.2012.07.014
   YELLIN DM, 1991, ACM T PROGR LANG SYS, V13, P211, DOI 10.1145/103135.103137
   YOKOYAMA T, 2005, 2005 S TRENDS FUNCT, P399
NR 38
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2018
VL 164
SI SI
BP 18
EP 36
DI 10.1016/j.scico.2017.04.001
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GR5WX
UT WOS:000442713700003
DA 2024-07-18
ER

PT J
AU Ueda, K
AF Ueda, Kazunori
TI Logic/Constraint Programming and Concurrency: The hard-won lessons of
   the Fifth Generation Computer project
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Logic Programming; Concurrent Logic Programming; Constraint-Based
   Concurrency; Fifth Generation Computer Systems project
ID MODED FLAT GHC; LANGUAGE; IMPLEMENTATION; SEARCH; LOGIC
AB The technical goal of the Fifth Generation Computer Systems (FGCS) project (1982-1993) was to develop Parallel Inference technologies, namely systematized technologies for realizing knowledge information processing on top of parallel computer architecture. The Logic Programming paradigm was adopted as the central working hypothesis of the project. At the same time, building a large-scale Parallel Inference Machine (PIM) meant to develop a novel form of general-purpose computing technologies that are powerful enough to express various parallel algorithms and to describe a full operating system of PIM. Accordingly, the research goal of the Kernel Language was set to designing a concurrent and parallel programming language under the working hypothesis of Logic Programming. The aim of this article is to describe the design process of the Kernel Language (KL1) in the context of related programming models in the 1980s, the essence of Concurrent Logic Programming and Constraint-Based Concurrency, and how the technologies we developed in those days evolved after their conception. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Ueda, Kazunori] Waseda Univ, Dept Comp Sci & Engn, Shinjuku Ku, 3-4-1 Okubo, Tokyo 1698555, Japan.
C3 Waseda University
RP Ueda, K (corresponding author), Waseda Univ, Dept Comp Sci & Engn, Shinjuku Ku, 3-4-1 Okubo, Tokyo 1698555, Japan.
EM ueda@ueda.info.waseda.ac.jp
FU JSPS, Japan [26280024]; Grants-in-Aid for Scientific Research [26280024]
   Funding Source: KAKEN
FX The author would like to thank Oleg Kiselyov who pointed out that the
   FGCS project should still be of interest to many researchers today, both
   from a technical and a social point of view. Indeed, to my pleasant
   surprise, a number of researchers expressed their interest as soon as
   they received automatic alert of the original version of this article
   [42] or an announcement of the FLOPS 2016 programme. The author is
   indebted to anonymous reviewers for their careful reading and
   constructive suggestions. This work is partially supported by
   Grant-In-Aid for Scientific Research ((B) 26280024), JSPS, Japan.
CR AHUJA S, 1986, COMPUTER, V19, P26, DOI 10.1109/MC.1986.1663305
   Andreoli J. M., 1991, New Generation Computing, V9, P445, DOI 10.1007/BF03037173
   [Anonymous], 835 DOC IMP COLL
   Armstrong J, 2010, COMMUN ACM, V53, P68, DOI 10.1145/1810891.1810910
   Benton N, 2002, LECT NOTES COMPUT SC, V2374, P415
   Betz H., 2007, P 4 WORKSH CONSTR HA, P17
   CHANDY KM, 1993, RES DIRECTIONS CONCU, P281
   Charles P, 2005, ACM SIGPLAN NOTICES, V40, P519, DOI 10.1145/1103845.1094852
   Chikayama T., 1995, LNCS, V844, P25
   CLARK KL, 1981, P ACM C FUNCTIONAL P, P171, DOI DOI 10.1145/800223.806776
   Foster Ian, 1992, SCI PROGRAMMING-NETH, V1, P51
   FOSTER IT, 1995, J PARALLEL DISTR COM, V26, P24, DOI 10.1006/jpdc.1995.1044
   Fruhwirth T, 1998, J LOGIC PROGRAM, V37, P95, DOI 10.1016/S0743-1066(98)10005-5
   FUCHI K, 1993, COMMUN ACM, V36, P49, DOI 10.1145/153520.153541
   FUJITA H, 1991, LOGIC PROGRAMM, P535
   Gupta V, 1995, LECT NOTES COMPUT SC, V999, P226
   Hasegawa R, 2002, LECT NOTES ARTIF INT, V2408, P178
   Johnson E., 1997, Conference Proceedings of the 1997 International Conference on Supercompting, P124, DOI 10.1145/263580.263614
   Kobayashi N, 1999, ACM T PROGR LANG SYS, V21, P914, DOI 10.1145/330249.330251
   Maher M. J., 1987, Logic Programming. Proceedings of the Fourth International Conference, P858
   MANTHEY R, 1988, LECT NOTES COMPUT SC, V310, P415, DOI 10.1007/BFb0012847
   Milner R., 2009, SPACE MOTION COMMUNI, DOI DOI 10.1017/CBO9780511626661
   Miyazaki T., 1985, 1985 Symposium on Logic Programming (Cat. No.85CH2205-3), P110
   NEWELL A, 1976, COMMUN ACM, V19, P113, DOI 10.1145/360018.360022
   SARASWAT VA, 1990, CONFERENCE RECORD OF THE SEVENTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P232, DOI 10.1145/96709.96733
   SARASWAT VA, 1994, IEEE S LOG, P71, DOI 10.1109/LICS.1994.316085
   Shapiro E. Y., 1983, TR003 ICOT I NEW GEN
   TICK E, 1995, J LOGIC PROGRAM, V23, P89, DOI 10.1016/0743-1066(94)00038-8
   Ueda K., 1985, 1985 Symposium on Logic Programming (Cat. No.85CH2205-3), P119
   Ueda Kazunori, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P1, DOI 10.1007/978-3-319-29604-3_1
   UEDA K, 1986, LECT NOTES COMPUT SC, V221, P168
   Ueda K, 2000, PARALLEL AND DISTRIBUTED COMPUTING FOR SYMBOLIC AND IRREGULAR APPLICATIONS, P253
   UEDA K, 1987, NEW GENERAT COMPUT, V5, P29, DOI 10.1007/BF03037456
   UEDA K, 1994, NEW GENERAT COMPUT, V13, P3, DOI 10.1007/BF03038307
   UEDA K, 1990, COMPUT J, V33, P494, DOI 10.1093/comjnl/33.6.494
   UEDA K, 1993, NEW GENERAT COMPUT, V11, P323, DOI 10.1007/BF03037181
   Ueda K., 1999, LOGIC PROGRAMMING PA, P53
   UEDA K, 2001, LNCS, V2215, P95
   Ueda K., 2006, ALP NEWSL, V19
   Ueda K., 2008, COMPUT SOFTW, V25, P49, DOI [10.11309/jssst.25.3_49, DOI 10.11309/JSSST.25.3_49]
   Ueda K, 2009, THEOR COMPUT SCI, V410, P4784, DOI 10.1016/j.tcs.2009.07.043
   Ueda K, 2009, LECT NOTES COMPUT SC, V5684, P349, DOI 10.1007/978-3-642-03466-4_24
   van Emdem M.H., 1982, Logic Programming, P189
   Wilde M, 2011, PARALLEL COMPUT, V37, P633, DOI 10.1016/j.parco.2011.05.005
NR 44
TC 2
Z9 2
U1 0
U2 19
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2018
VL 164
SI SI
BP 3
EP 17
DI 10.1016/j.scico.2017.06.002
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GR5WX
UT WOS:000442713700002
DA 2024-07-18
ER

PT J
AU Bukhari, SAA
   Lodhi, FK
   Hasan, O
   Shafique, M
   Henkel, J
AF Bukhari, Syed Ali Asadullah
   Lodhi, Faiq Khalid
   Hasan, Osman
   Shafique, Muhammad
   Henkel, Jorg
TI FAMe-TM: Formal analysis methodology for task migration algorithms in
   Many-Core systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic Thermal Management; Formal verification; Many-Core systems;
   Model checking; nuXmv
ID DYNAMIC THERMAL MANAGEMENT; TIME
AB Distributed Dynamic Thermal Management (dDTM) through task migrations across cores provides a very promising solution to cater for the heating issues in Many-Core architectures. However, the growing number of cores, the distributed nature of dDTM and the inherent sampling-based nature of traditional analysis techniques, like simulation and emulation, makes a complete and rigorous analysis of these task migration algorithms almost impossible. These limitations compromise the analysis integrity and in worst cases may lead to the deployment of an inefficient and inaccurate dDTM scheme on chip, which in turn can cause permanent defects in the chip due to excessive heating. Leveraging upon the exhaustive nature of model checking based verification, we propose to use a model checker to formally verify task migration algorithms. This work proposes an analysis methodology, i.e., Formal Analysis Methodology for Task Migrations (FAMe-TM), and identifies a generic set of properties for the formal verification of task-migration-based dDTM schenies. In particular, we propose an analysis flow using the scalable bounded model checker, nuXmv, to formally verify the suggested task migration properties, like tasks migrations, stalls, completion, creation of hot spots, time spent in migration and time to achieve stability. For illustration purposes, we apply FAMe-TM to two recently proposed task-migration-based dDTM schemes, i.e., Thermal Coupling Aware (TCA-TM) dDTM and Hot Spot Reduction (HR-TM) dDTM. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Bukhari, Syed Ali Asadullah; Lodhi, Faiq Khalid; Hasan, Osman] Natl Univ Sci & Technol, Sch Elect Engn & Comp Sci, Islamabad 44000, Pakistan.
   [Shafique, Muhammad; Henkel, Jorg] Karlsruhe Inst Technol, Chair Embedded Syst, D-76021 Karlsruhe, Germany.
C3 National University of Sciences & Technology - Pakistan; Helmholtz
   Association; Karlsruhe Institute of Technology
RP Bukhari, SAA (corresponding author), Natl Univ Sci & Technol, Sch Elect Engn & Comp Sci, Islamabad 44000, Pakistan.
EM ali.asadullah@seecs.edu.pk; faiq.khalid@seecs.edu.pk;
   osman.hasan@seecs.edu.pk; muhammad.shafique@kit.edu; henkel@kit.edu
RI Khalid, Faiq/HKN-2553-2023; Sadiq, Muhammad/HMP-3877-2023; Khan,
   Muhammad/JVN-8626-2024
OI Khalid, Faiq/0000-0001-6263-674X; Khan, Muhammad/0000-0002-1463-3031;
   Hasan, osman/0000-0003-2562-2669; Shafique,
   Muhammad/0000-0002-2607-8135; Bukhari, Syed Ali
   Asadullah/0000-0002-0465-7398
FU German Research Foundation (DFG) as part of priority program "Dependable
   Embedded Systems" [SPP 1500]; DAAD "Deutsch-Pakistanische
   Forschungskooperationen" project
FX This work is supported in parts by the German Research Foundation (DFG)
   as part of the priority program "Dependable Embedded Systems" (SPP 1500
   spp1500.itec.kit.edu) and in parts by the DAAD "Deutsch-Pakistanische
   Forschungskooperationen" project.
CR [Anonymous], 2010, COMPUT, V27, P58
   [Anonymous], 2013, P 50 ANN DESIGN AUTO, DOI DOI 10.1145/2463209.2488857
   Bartolini A, 2013, IEEE T PARALL DISTR, V24, P170, DOI 10.1109/TPDS.2012.117
   Biere A, 2009, FRONT ARTIF INTEL AP, V185, P457, DOI 10.3233/978-1-58603-929-5-457
   Bukhari SAA, 2015, COMM COM INF SC, V476, P32, DOI 10.1007/978-3-319-17581-2_3
   Cavada R, 2014, LECT NOTES COMPUT SC, V8559, P334, DOI 10.1007/978-3-319-08867-9_22
   Chen F, 2012, IEEE T AUTOMAT CONTR, V57, P3169, DOI 10.1109/TAC.2012.2199176
   Clarke E, 2001, LECT NOTES COMPUT SC, V2000, P176
   Clarke EM, 1999, MODEL CHECKING, P1
   Dighe S, 2011, IEEE J SOLID-ST CIRC, V46, P184, DOI 10.1109/JSSC.2010.2080550
   Fei Chen, 2011, 2011 American Control Conference - ACC 2011, P1650
   Hanumaiah V, 2012, IEEE T COMPUT, V61, P1484, DOI 10.1109/TC.2011.156
   Hasan O., 2014, ENCY INFORM SCI TECH, P7152
   Huang W., 2008, WORK, V5, P1
   Iqtedar S, 2015, DES AUT TEST EUROPE, P1221
   Ismail M, 2013, ICCAD-IEEE ACM INT, P248, DOI 10.1109/ICCAD.2013.6691126
   Kadin M, 2009, GLSVLSI 2009: PROCEEDINGS OF THE 2009 GREAT LAKES SYMPOSIUM ON VLSI, P137
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Liu GL, 2012, DES AUT TEST EUROPE, P187
   Liu Z., 2014, IEEE T VERY LARGE SC, V23, P397
   Liu Z., 2013, ASIC (ASICON), 2013 IEEE 10th International Conference on, P1
   Liu Z, 2013, ASIA S PACIF DES AUT, P473, DOI 10.1109/ASPDAC.2013.6509641
   Lodhi F.K., 2016, FORMAL ANAL METHODOL
   Lungu A., 2009, Proceedings of MEMOCODE'09, P78
   Mizukami H., 2013, 2013 18th OECC/PS, P1
   Norman G., 2003, FORM ASP COMPUT, P202
   Salami B, 2014, J SUPERCOMPUT, V68, P1068, DOI 10.1007/s11227-014-1140-y
   Shafique M, 2013, ICCAD-IEEE ACM INT, P153
   Wang SQ, 2010, INT SYM QUAL ELECT, P399, DOI 10.1109/ISQED.2010.5450548
   Wyngaard J., 2013, FIELD PROGRAMMABLE L, P1
NR 30
TC 4
Z9 4
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2017
VL 133
SI SI
BP 154
EP 174
DI 10.1016/j.scico.2016.06.004
PN 2
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EF1GC
UT WOS:000390072300004
OA hybrid
DA 2024-07-18
ER

PT J
AU Ciaffaglione, A
AF Ciaffaglione, Alberto
TI Towards Turing computability via coinduction
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 17th Brazilian Symposium on Formal Methods (SBMF) as part of 5th
   Brazilian Conference on Software - Theory and Practice (CBSoft)
CY SEP 29-OCT 01, 2014
CL Maceio, BRAZIL
SP Univ Fed Alagoas, Brazilian Natl Inst Sci & Technol Software Engn, CAPES, CNPq, Google Inc
DE Program certification; Coq proof assistant; Coinductive types
AB We adopt corecursion and coinduction to formalize Turing Machines and their operational semantics in the Coq proof assistant. By combining the formal analysis of converging and diverging computations, via big-step and small-step predicates, our approach allows us to certify the correctness of concrete Turing Machines. An immediate application of our methodology is the proof of the undecidability of the halting problem, therefore our effort may be seen as a first step towards the formal development of basic computability theory. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Ciaffaglione, Alberto] Univ Udine, Dipartimento Matemat & Informat, I-33100 Udine, Italy.
C3 University of Udine
RP Ciaffaglione, A (corresponding author), Univ Udine, Dipartimento Matemat & Informat, I-33100 Udine, Italy.
EM alberto.ciaffaglione@uniud.it
CR [Anonymous], 1994, LNCS
   [Anonymous], 1980, Computability: An introduction to recursive function theory
   Asperti Andrea, 2012, Logic, Language, Information and Computation. Proceedings of the 19th International Workshop, WoLLIC 2012, P1, DOI 10.1007/978-3-642-32621-9_1
   Boolos G., 2007, Computability and Logic
   Ciaffaglione A, 2011, ELECTRON P THEOR COM, P49, DOI 10.4204/EPTCS.73.7
   Ciaffaglione A, 2015, LECT NOTES COMPUT SC, V8941, P80, DOI [10.1007/978-3-319-15075-8-6, 10.1007/978-3-319-15075-8_6]
   Coquand T., 1993, LECT NOTES COMPUTER, P62, DOI DOI 10.1007/3-540-58085-9
   Hur CK, 2013, ACM SIGPLAN NOTICES, V48, P193, DOI 10.1145/2480359.2429093
   Leroy X, 2006, LECT NOTES COMPUT SC, V3924, P54
   Norrish Michael, 2011, Interactive Theorem Proving. Proceedings Second International Conference, ITP 2011, P297, DOI 10.1007/978-3-642-22863-6_22
   The Coq Development Team, COQ PROOF ASS VERS 8
   Turing Alan M., 1936, P LONDON MATH SOC, V42
   Xu J, 2013, LECT NOTES COMPUT SC, V7998, P147, DOI 10.1007/978-3-642-39634-2_13
NR 13
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2016
VL 126
SI SI
BP 31
EP 51
DI 10.1016/j.scico.2016.02.004
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DP4IP
UT WOS:000378459900003
OA hybrid
DA 2024-07-18
ER

PT J
AU Merelli, E
   Paoletti, N
   Tesei, L
AF Merelli, Emanuela
   Paoletti, Nicola
   Tesei, Luca
TI Adaptability checking in complex systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Adaptive systems; State machine; Adaptability relations; Adaptability
   checking; S[B] model
ID SOFTWARE ARCHITECTURE; CONCURRENT; FRAMEWORK
AB A hierarchical approach for modelling the adaptability features of complex systems is introduced. It is based on a structural level S, describing the adaptation dynamics of the system, and a behavioural level B accounting for the description of the admissible dynamics of the system. Moreover, a unified system, called S[B], is defined by coupling S and B. The adaptation semantics is such that the S level imposes structural constraints on the B level, which has to adapt whenever it no longer can satisfy them. In this context, we introduce weak and strong adaptability, i.e. the ability of a system to adapt for some evolution paths or for all possible evolutions, respectively. We provide a relational characterisation for these two notions and we show that adaptability checking, i.e. deciding if a system is weakly or strongly adaptable, can be reduced to a CTL model checking problem. We apply the model and the theoretical results to the case study of a motion controller of autonomous transport vehicles. (C) 2015 The Authors. Published by Elsevier B.V.
C1 [Merelli, Emanuela; Tesei, Luca] Univ Camerino, Sch Sci & Technol, Div Comp Sci, I-62032 Camerino, Italy.
   [Paoletti, Nicola] Univ Oxford, Dept Comp Sci, Oxford OX1 3QD, England.
C3 University of Camerino; University of Oxford
RP Merelli, E (corresponding author), Univ Camerino, Sch Sci & Technol, Div Comp Sci, Via Bast 1, I-62032 Camerino, Italy.
EM emanuela.merelli@unicam.it; nicola.paoletti@cs.ox.ac.uk;
   luca.tesei@unicam.it
RI Paoletti, Nicola/AAM-2322-2020; Tesei, Luca/ITU-6186-2023; Paoletti,
   Nicola/D-8120-2018; Tesei, Luca/L-9309-2015; Merelli,
   Emanuela/H-6375-2016
OI Paoletti, Nicola/0000-0002-4723-5363; Tesei, Luca/0000-0002-7536-8796;
   Merelli, Emanuela/0000-0002-1321-4134
FU "TOPDRIM: Topology Driven Methods for Complex Systems" - European
   Commission (EU-FP7 ICT FET Proactive) [318121]
FX The authors want to thank the anonymous reviewers for their valuable
   suggestions and prof. Mario Rasetti for the continuous inspiration and
   the useful discussions about the topics of this work and its general
   context. This work was supported by the project "TOPDRIM: Topology
   Driven Methods for Complex Systems" funded by the European Commission
   (EU-FP7 ICT FET Proactive-Grant Agreement N. 318121).
CR Baas N.A., 1994, Artificial Life III, VXVII, P515
   Baier C, 2008, PRINCIPLES OF MODEL CHECKING, P1
   Bartocci E, 2010, SCI ANN COMPUT SCI, V20, P33
   Bartocci E, 2010, SCI ANN COMPUT SCI, V20, P1
   Becker Basil., 2006, Proceeding of the 28th international conference on Software engineering - ICSE '06, P72
   Bouchachia A, 2012, ACM T AUTON ADAP SYS, V7, DOI 10.1145/2168260.2168273
   Bradbury J.S., 2004, Proceedings of the 1st ACM SIGSOFT Workshop on Self-managed Systems. WOSS '04, P28, DOI [10.1145/1075405.1075411, DOI 10.1145/1075405.1075411]
   Bruni Roberto, 2013, Recent Trends in Algebraic Development Techniques. 21st International Workshop, WADT 2012. Revised Selected Papers, P95, DOI 10.1007/978-3-642-37635-1_6
   Bruni R, 2008, LECT NOTES COMPUT SC, V5065, P37, DOI 10.1007/978-3-540-68679-8_4
   Bruni R, 2008, BULL EUR ASSOC THEOR, P161
   Bruni R, 2012, LECT NOTES COMPUT SC, V7212, P240, DOI 10.1007/978-3-642-28872-2_17
   Cheng BHC, 2009, LECT NOTES COMPUT SC, V5525, P1, DOI 10.1007/978-3-642-02161-9_1
   Cimatti A., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P359
   Clarke. E. M., 1982, LOGICS OF PROGRAMS, P52, DOI [10 . 1007 / BFb0025774, DOI 10.1007/BFB0025774]
   CLARKE EM, 1986, ACM T PROGR LANG SYS, V8, P244, DOI 10.1145/5397.5399
   Clarke EM, 1999, MODEL CHECKING, P1
   CLARKE EM, 1995, DES AUT CON, P427
   Clavel M, 2002, THEOR COMPUT SCI, V285, P187, DOI 10.1016/S0304-3975(01)00359-0
   Corradini F, 2006, SCI COMPUT PROGRAM, V59, P171, DOI 10.1016/j.scico.2005.04.003
   D'Ippolito Nicolas, 2012, FM 2012: Formal Methods. Proceedings of the 18th International Symposium, P155, DOI 10.1007/978-3-642-32759-9_15
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   DENICOLA R, 1990, LECT NOTES COMPUT SC, V469, P407
   Ehresmann A., 2007, MEMORY EVOLUTION SYS, V4
   Feferman S., 1971, P S PURE MATH, VXXV, P205
   Feiler P. H., 2006, ULTRALARGE SCALE SYS
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   Jackson D., 2011, Software Abstractions: Logic, Language, and Anlysis
   Karsai G., 2003, SELF ADAPTIVE SOFTWA, P77
   Khakpour N., 2010, P 2010 ACM S APPL CO, P2536
   Khakpour N, 2012, J SYST SOFTWARE, V85, P2770, DOI 10.1016/j.jss.2012.03.007
   Khakpour N, 2012, SCI COMPUT PROGRAM, V78, P3, DOI 10.1016/j.scico.2011.09.004
   Kramer J, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P259, DOI 10.1109/FOSE.2007.19
   Kripke S., 1963, ACTA PHILOS FENN, V16, P83
   Kulkarni SS, 2004, LECT NOTES COMPUT SC, V3054, P48
   Laddaga R., 1997, 9812 DARPA BAA
   Le Metayer D, 1998, IEEE T SOFTWARE ENG, V24, P521, DOI 10.1109/32.708567
   Maraninchi F, 2003, SCI COMPUT PROGRAM, V46, P219, DOI 10.1016/S0167-6423(02)00093-X
   Merelli E., 2014, NAT COMPUT
   Merelli E, 2012, ELECTRON P THEOR COM, P112, DOI 10.4204/EPTCS.91.8
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Poyias K, 2012, ELECTRON PROC THEOR, P67, DOI 10.4204/EPTCS.104.7
   SAGASTI F, 1970, GEN SYST, V15, P151
   Salehie M, 2009, ACM T AUTON ADAP SYS, V4, DOI 10.1145/1516533.1516538
   Shin ME, 2005, SCI COMPUT PROGRAM, V57, P27, DOI 10.1016/j.scico.2004.10.003
   Viroli M, 2011, ACM T AUTON ADAP SYS, V6, DOI 10.1145/1968513.1968517
   Zhang J, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P161
   Zhang Ji, 2006, P 28 INT C SOFTW ENG, P371
   Zhao YW, 2011, 2011 8TH IEEE INTERNATIONAL CONFERENCE AND WORKSHOPS ON ENGINEERING OF AUTONOMIC AND AUTONOMOUS SYSTEMS (EASE), P40, DOI 10.1109/EASe.2011.13
NR 48
TC 8
Z9 9
U1 0
U2 8
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN-FEB
PY 2016
VL 115
SI SI
BP 23
EP 46
DI 10.1016/j.scico.2015.03.004
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CZ5DH
UT WOS:000367122200003
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Caballero, R
   Stuckey, PJ
   Tenorio-Fornés, A
AF Caballero, Rafael
   Stuckey, Peter J.
   Tenorio-Fornes, Antonio
TI Two type extensions for the constraint modeling language MiniZinc
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Constraint programming; NULL values; Union types
AB In this paper we present two type extensions for the modeling language MINIZINC that allow the representation of some problems in a more natural way. The first proposal, called MINIZINC, extends existing types with additional values. The user can specify both the extension of a predefined type with new values, and the behavior of the operations with relation to the new types. We illustrate the usage of MINIZINC* to model SQL-like problems with integer variables extended with NULL values. The second extension, MINIZINC(+), introduces union types in the language. This allows defining recursive types such as trees, which are very useful for modeling problems that involve complex structures. A new case statement is introduced to select the different components of union type terms. The paper shows how a model defined using these extensions can be transformed into a MINIZINC model which is equivalent to the original model. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Caballero, Rafael; Tenorio-Fornes, Antonio] Univ Complutense Madrid, E-28040 Madrid, Spain.
   [Stuckey, Peter J.] NICTA, Sydney, NSW, Australia.
   [Stuckey, Peter J.] Univ Melbourne, Melbourne, Vic 3010, Australia.
C3 Complutense University of Madrid; Australian National University;
   University of Melbourne
RP Caballero, R (corresponding author), Univ Complutense Madrid, E-28040 Madrid, Spain.
EM rafacr@ucm.es
RI ; Caballero, Rafael/T-2232-2017
OI Tenorio Fornes, Ambar/0000-0001-7526-4340; Stuckey,
   Peter/0000-0003-2186-0459; Caballero, Rafael/0000-0001-8181-5532
FU Spanish MINECO project CAVI-ART [TIN2013-44742-C4-3-R]; Madrid regional
   project N-GREENS Software-CM [S2013/ICE-2731]; UCM [GR3/14-910502];
   Australian Government; Australian Research Council
FX Rafael Caballero partially supported by the Spanish MINECO project
   CAVI-ART (TIN2013-44742-C4-3-R), Madrid regional project N-GREENS
   Software-CM (S2013/ICE-2731), UCM grant GR3/14-910502.; NICTA is funded
   by the Australian Government as represented by the Department of
   Broadband, Communications and the Digital Economy and the Australian
   Research Council.
CR [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 1990, Introduction to Lattices and Order
   [Anonymous], 1993, Many-Valued Logics
   BARBANERA F, 1995, INFORM COMPUT, V119, P202, DOI 10.1006/inco.1995.1086
   Caballero R., 2013, SIC0513 U COMPL MADR
   Caballero R., 2012, ELECT COMMUN EASST, V55
   Codd E. F., 1986, SIGMOD Record, V15, P53, DOI 10.1145/16301.16303
   Codd E. F., 1979, ACM Transactions on Database Systems, V4, P397, DOI 10.1145/320107.320109
   de Azevedo FDECA, 2003, AI COMMUN, V16, P125
   De Koninck L., 2010, P 9 INT WORKSH CONST, P15
   Frisch AM, 2009, LECT NOTES COMPUT SC, V5732, P367, DOI 10.1007/978-3-642-04244-7_30
   Gavanelli M, 2005, ACM T PROGR LANG SYS, V27, P236, DOI 10.1145/1057387.1057389
   Gecode Team, 2006, Gecode: Generic constraint development environment
   *IEEE, 1985, 7541985 ANSIIEEE
   Koninck L.D., 2011, LIPICS, V11, P117
   Laborie P., 2008, FLAIRS conference, P555
   Marriott K, 2008, CONSTRAINTS, V13, P229, DOI 10.1007/s10601-008-9041-4
   Mears Christopher, 2014, Integration of AI and OR Techniques in Constraint Programming. 11th International Conference, CPAIOR 2014. Proceedings: LNCS 8451, P88, DOI 10.1007/978-3-319-07046-9_7
   Nethercote N, 2007, LECT NOTES COMPUT SC, V4741, P529
   Peter J., 2013, LNCS, V7874, P268, DOI DOI 10.1007/978-3-642-38171-3
NR 20
TC 2
Z9 3
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
BP 156
EP 189
DI 10.1016/j.scico.2015.04.007
PN 1
PG 34
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5MA
UT WOS:000368557000008
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Robbins, E
   Howe, JM
   King, A
AF Robbins, Ed
   Howe, Jacob M.
   King, Andy
TI Theory propagation and reification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE SMT; SAT; Satisfiability Modulo Theories; Reification; DPLL; Rational
   tree unification; Type recovery; Reverse engineering; Difference logic
ID SAT; PROGRAM; PEARL
AB SAT Modulo Theories (SMT) is the problem of determining the satisfiability of a formula in which constraints, drawn from a given constraint theory T, are composed with logical connectives. The DPLL(T) approach to SMT has risen to prominence as a technique for solving these quantifier-free problems. The key idea in DPLL(T) is to couple unit propagation in the propositional part of the problem with theory propagation in the constraint component. In this paper it is demonstrated how reification provides a natural way for orchestrating this in the setting of logic programming. This allows an elegant implementation of DPLL(T) solvers in Prolog. The work is motivated by a problem in reverse engineering, that of type recovery from binaries. The solution to this problem requires an SMT solver where the theory is that of rational-tree constraints, a theory not supported in off-the-shelf SMT solvers, but realised as unification in Prolog systems. The approach is also illustrated with SMT solvers for linear constraints and integer difference constraints. The rational-tree solver is benchmarked against a number of type recovery problems, and compared against a lazy-basic SMT solver built on PicoSAT, while the integer difference logic solver is benchmarked against CVC3 and CVC4, both of which are implemented in C++. (C) 2014 Published by Elsevier B.V.
C1 [Robbins, Ed; King, Andy] Univ Kent, Sch Comp, Canterbury CT2 7NF, Kent, England.
   [Howe, Jacob M.] City Univ London, Dept Comp Sci, London EC1V 0HB, England.
C3 University of Kent; City University London
RP Robbins, E (corresponding author), Univ Kent, Sch Comp, Canterbury CT2 7NF, Kent, England.
EM er209@kent.ac.uk
OI Robbins, Edward/0000-0002-8179-1355; Howe, Jacob/0000-0001-8013-6941
FU EPSRC [EP/K031929/1] Funding Source: UKRI
CR [Anonymous], 2008, J. Satisf. Boolean Model. Comput., DOI 10.3233/sat190039
   Armando A, 2005, ELECTRON NOTES THEOR, V125, P25, DOI 10.1016/j.entcs.2004.06.065
   Balakrishnan G., 2005, TECHNICAL REPORT
   Baykan CA, 1997, AI EDAM, V11, P245, DOI 10.1017/S0890060400003206
   BRUTTOMESSO R.B., 2012, SMT-COMP 2012
   Bull TM, 1995, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, 1995 PROCEEDINGS, P358, DOI 10.1109/ICSM.1995.526557
   Carlsson M., 1997, Programming Languages: Implementations, Logics, and Programs. 9th International Symposium, PLILP'97, Including a Special Track on Declarative Programming Languages in Education. Proceedings, P191, DOI 10.1007/BFb0033845
   CHASE DR, 1990, SIGPLAN NOTICES, V25, P296, DOI 10.1145/93548.93585
   Chipounov V, 2010, EUROSYS'10: PROCEEDINGS OF THE EUROSYS 2010 CONFERENCE, P167
   Codish M, 2008, THEOR PRACT LOG PROG, V8, P121, DOI 10.1017/S1471068407003146
   Cui WD, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P391
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   DAVIS M, 1962, COMMUN ACM, V5, P394, DOI 10.1145/368273.368557
   Demoen B., 1999, AUSTR COMP SCI C, P217
   Drabent W., 2012, 28 INT C LOG PROGR I, V17, P301
   FLOYD RW, 1962, COMMUN ACM, V5, P345, DOI 10.1145/367766.368168
   GUHA B, 1996, C COMP COMM, P603
   Hermenegildo M. V., 1995, INT C LOG PROGR 1995, P631
   HOLZBAUR C, 1992, LECT NOTES COMPUT SC, V631, P260, DOI 10.1007/3-540-55844-6_141
   Howe J. M., 2001, Logic Programming. 17th International Conference, ICLP 2001. Proceedings (Lecture Notes in Computer Science Vol.2237), P120
   Howe JM, 2012, THEOR COMPUT SCI, V435, P43, DOI 10.1016/j.tcs.2012.02.024
   Howe JM, 2010, LECT NOTES COMPUT SC, V6009, P165, DOI 10.1007/978-3-642-12251-4_13
   Howe JM, 2003, THEOR PRACT LOG PROG, V3, P95, DOI 10.1017/S1471068402001485
   Huet Gerard, 1976, l. Ph. D. Dissertation
   JAFFAR J, 1984, NEW GENERAT COMPUT, V2, P207, DOI 10.1007/BF03037057
   Jaffar J, 2009, LECT NOTES COMPUT SC, V5732, P454, DOI 10.1007/978-3-642-04244-7_37
   Jeroslow R., 1990, Annals of Mathematics and Artificial Intelligence, V1, P167
   Junker U, 2004, PROCEEDING OF THE NINETEENTH NATIONAL CONFERENCE ON ARTIFICIAL INTELLIGENCE AND THE SIXTEENTH CONFERENCE ON INNOVATIVE APPLICATIONS OF ARTIFICIAL INTELLIGENCE, P167
   Kapur D, 1997, LECT NOTES COMPUT SC, V1232, P23
   King A., 2012, DAGSTUHL REP, V2, P100
   KOWALSKI R, 1979, COMMUN ACM, V22, P424, DOI 10.1145/359131.359136
   Kroening D, 2008, TEXTS THEOR COMPUT S, P1
   Lee JongHyup, 2011, TIE: Principled reverse engineering of types in binary programs
   Li CM, 1997, LECT NOTES COMPUT SC, V1330, P341
   Lin Zhiqiang, 2010, NETW DISTR SYST SEC
   Lintao Zhang, 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P17
   MacQueen D., 1983, PRINCIPLES PROGRAMMI, P165
   Maher M. J., 1988, Proceedings of the Third Annual Symposium on Logic in Computer Science (Cat. No.88CH2608-8), P348, DOI 10.1109/LICS.1988.5132
   Miller B.P., 2011, WORKSH PROGR AN SOFT
   Mine A., 2006, Higher-Order and Symbolic Computation, V19, P31, DOI 10.1007/s10990-006-8609-1
   Moskewicz MW, 2001, DES AUT CON, P530, DOI 10.1109/DAC.2001.935565
   Mycroft A, 1999, LECT NOTES COMPUT SC, V1576, P208
   NAISH L, 1986, LECT NOTES COMPUTER, V238
   Nieuwenhuis R, 2005, LECT NOTES COMPUT SC, V3576, P321
   Nieuwenhuis R, 2006, J ACM, V53, P937, DOI 10.1145/1217856.1217859
   Pham DN, 2008, ARTIF INTELL, V172, P1752, DOI 10.1016/j.artint.2008.06.003
   Ramalingam G., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P119, DOI 10.1145/292540.292553
   Robbins E., 2013, PRINCIPLES PRACTICE, P193
   Sharif M, 2009, P IEEE S SECUR PRIV, P94, DOI 10.1109/SP.2009.27
   Sheeran M, 2000, FORM METHOD SYST DES, V16, P23, DOI 10.1023/A:1008725524946
   Strichman O., 2002, Computer Aided Verification. 14th International Conference, CAV 2002. Proceedings (Lecture Notes in Computer Science Vol.2404), P209
   Thakur A, 2012, LECT NOTES COMPUT SC, V7460, P334, DOI 10.1007/978-3-642-33125-1_23
   Tinelli C, 2002, LECT NOTES ARTIF INT, V2424, P308, DOI 10.1007/3-540-45757-7_26
   WARSHALL S, 1962, J ACM, V9, P11, DOI 10.1145/321105.321107
NR 54
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2015
VL 111
BP 3
EP 22
DI 10.1016/j.scico.2014.05.013
PN 1
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DB5MA
UT WOS:000368557000002
OA Bronze, Green Accepted
DA 2024-07-18
ER

PT J
AU Arnaud, JB
   Ducasse, S
   Denker, M
   Teruel, C
AF Arnaud, Jean-Baptiste
   Ducasse, Stephane
   Denker, Marcus
   Teruel, Camille
TI Handles: Behavior-propagating first class references for
   dynamically-typed languages
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Security; Dynamic language; First class references; Language design
ID DESIGN PRINCIPLES; PARADIGM; OBJECTS; PROXIES
AB Controlling object graphs and giving specific semantics to references (such as read-only, ownership, scoped sharing) have been the focus of a large body of research in the context of static type systems. Controlling references to single objects and to graphs of objects is essential to build more secure systems, but is notoriously hard to achieve in the absence of static type systems. In this article we embrace this challenge by proposing a solution to the following question: What is an underlying mechanism that can support the definition of properties (such as revocable, read-only, lent) at the reference level in the absence of a static type system? We present handles: first-class references that propagate behavioral change dynamically to the object subgraph during program execution. In this article we describe handles and show how handles support the implementation of read-only references and revocable references. Handles have been fully implemented by modifying an existing virtual machine and we report their costs. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Arnaud, Jean-Baptiste; Ducasse, Stephane; Denker, Marcus; Teruel, Camille] RMoD INRIA Lille Nord Europe, Lille, France.
RP Arnaud, JB (corresponding author), RMoD INRIA Lille Nord Europe, Lille, France.
EM jean-baptiste.arnaud@inria.fr
OI Ducasse, Stephane/0000-0001-6070-6599
FU Inria; Ministry of Higher Education and Research, Nord-Pas de Calais
   Regional Council; FEDER through the 'Contrat de Projets Etat Region
   (CPER)'; French Directorate for Armament
FX We thank L. Fabresse, D. Pollet, O. Nierstrasz, A. Kellens and the
   anonymous reviewers for their helpful comments that allowed us to
   substantially improve the quality of this paper. S. Ducasse and M.
   Denker gratefully acknowledge the financial support of Inria. This work
   was supported by Ministry of Higher Education and Research, Nord-Pas de
   Calais Regional Council and FEDER through the 'Contrat de Projets Etat
   Region (CPER) 2007-2013' and by the French Directorate for Armament.
CR [Anonymous], 2003, Computer security: art and science
   [Anonymous], P 2007 S DYN LANG DL
   [Anonymous], 1984, Capability-Based Computer Systems
   [Anonymous], 1998, P 25 ACM SIGPLAN SIG, DOI DOI 10.1145/268946.268961
   Arnaud Jean-Baptiste, 2013, THESIS U LILLE
   Arnaud Jean-Baptiste, 2010, P 48 INT C OBJ MOD C
   Bardou D, 1996, ACM SIGPLAN NOTICES, V31, P122, DOI 10.1145/236338.236347
   Bergel A, 2008, COMPUT LANG SYST STR, V34, P83, DOI 10.1016/j.cl.2007.05.003
   Birka A, 2004, ACM SIGPLAN NOTICES, V39, P35, DOI 10.1145/1035292.1028980
   Black A.P., 2007, Squeak by Example
   Black Andrew P., 2009, PHARO EXAMPLE
   Boyland J., 2001, ECOOP 2001 - Object-Oriented Programming. 15th European Conference. Proceedings (Lecture Notes in Computer Science Vol.2072), P2
   Bracha G, 2004, ACM SIGPLAN NOTICES, V39, P331, DOI 10.1145/1035292.1029004
   Cameron N. R., 2009, LECT NOTES COMPUTER, V5502
   CARRE B, 1990, SIGPLAN NOTICES, V25, P312, DOI 10.1145/97946.97983
   CIVELLO F, 1993, ACM SIGPLAN NOTICES, V28, P376
   Clarke DG, 1998, ACM SIGPLAN NOTICES, V33, P48, DOI 10.1145/286942.286947
   Costanza P., 2005, P DYN LANG S DLS 05, P1
   Cutsem Tom Van, 2013, ECOOP 13
   Ducasse S, 1999, J OBJECT-ORIENT PROG, V12, P39
   Eugster P, 2006, ACM SIGPLAN NOTICES, V41, P139, DOI 10.1145/1167515.1167485
   FELLEISEN M, 1992, THEOR COMPUT SCI, V103, P235, DOI 10.1016/0304-3975(92)90014-7
   Finifter Matthew, 2008, CCS 08, P27
   Fong Philip W.L., 2004, TECHNICAL REPORT
   Guzdial M., 2001, Squeak: Open Personal Computing and Multimedia
   HAKONEN H, 1999, FENN UGR S SOFTW TEC, P139
   HARRISON W, 1993, SIGPLAN NOTICES, V28, P411, DOI 10.1145/167962.165932
   Herrmann S, 2007, APPL ONTOL, V2, P181
   Hirschfeld R, 2008, J OBJECT TECHNOL, V7, P125, DOI 10.5381/jot.2008.7.3.a4
   HOGG J, 1991, SIGPLAN NOTICES, V26, P271
   LIEBERMAN H, 1986, SIGPLAN NOTICES, V21, P214, DOI 10.1145/960112.28718
   Mettler Adrian, 2010, P ANN NETW DISTR SYS, P375
   Miller M., 2003, TECHNICAL REPORT
   Miller M.S., 2006, Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control
   Miller MS, 2003, LECT NOTES COMPUT SC, V2896, P224
   Noble J., 1998, ECOOP'98 - Object-Oriented Programming. 12th European Conference. Proceedings, P158, DOI 10.1007/BFb0054091
   NOBLE J, 1999, P TOOLS 99 NOV
   PASCOE GA, 1986, SIGPLAN NOTICES, V21, P341, DOI 10.1145/960112.28731
   Schärli N, 2004, ACM SIGPLAN NOTICES, V39, P130, DOI 10.1145/1035292.1028988
   Smith R. B., 1996, Theory and Practice of Object Systems, V2, P161, DOI 10.1002/(SICI)1096-9942(1996)2:3<161::AID-TAPO3>3.0.CO;2-Z
   Strickland T.S., 2012, OOPSLA 12
   Tanter Eric., 2008, DLS '08, P1
   Van Cutsem T, 2010, ACM SIGPLAN NOTICES, V45, P59, DOI 10.1145/1899661.1869638
   Warth Alessandro, 2011, LNCS
   Wemli Erwann, 2014, P 13 INT C MOD LUG S
NR 45
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
SI SI
BP 318
EP 338
DI 10.1016/j.scico.2014.07.011
PN 3
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LH
UT WOS:000347741200002
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU Margoor, A
   Komondoor, R
AF Margoor, Amogh
   Komondoor, Raghavan
TI Two techniques to improve the precision of a demand-driven
   null-dereference verification approach
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dataflow analysis; Weakest pre-conditions
ID POINTS-TO ANALYSIS; PROGRAMS
AB The problem addressed in this paper is sound, scalable, demand-driven null-dereference verification for Java programs. Our approach consists conceptually of a base analysis, plus two major extensions for enhanced precision. The base analysis is a dataflow analysis wherein we propagate formulas in the backward direction from a given dereference, and compute a necessary condition at the entry of the program for the dereference to be potentially unsafe. The extensions are motivated by the presence of certain "difficult" constructs in real programs, e.g., virtual calls with too many candidate targets, and library method calls, which happen to need excessive analysis time to be analyzed fully. The base analysis is hence configured to skip such a difficult construct when it is encountered by dropping all information that has been tracked so far that could potentially be affected by the construct. Our extensions are essentially more precise ways to account for the effect of these constructs on information that is being tracked, without requiring full analysis of these constructs. The first extension is a novel scheme to transmit formulas along certain kinds of def-use edges, while the second extension is based on using manually constructed backward-direction summary functions of library methods. We have implemented our approach, and applied it on a set of real-life benchmarks. The base analysis is on average able to declare about 84% of dereferences in each benchmark as safe, while the two extensions push this number up to 91%. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Margoor, Amogh; Komondoor, Raghavan] Indian Inst Sci, Dept Comp Sci & Automat, Bangalore 560012, Karnataka, India.
C3 Indian Institute of Science (IISC) - Bangalore
RP Komondoor, R (corresponding author), Indian Inst Sci, Dept Comp Sci & Automat, Bangalore 560012, Karnataka, India.
EM amogh.margoor@csa.iisc.ernet.in; raghavan@csa.iisc.ernet.in
FU IBM Research India; Microsoft Research India
FX The authors wish to thank Ravichandhran Madhavan for his help and
   suggestions, and the anonymous reviewers as well as Uday Khedker for
   their extensive suggestions for improving the paper. We also wish to
   thank IBM Research India and Microsoft Research India for partial
   funding support for this work.
CR [Anonymous], 2007, TR20071201 TEL AV U
   [Anonymous], 2014, P ACM SIGPLAN C PROG
   Blackburn SM, 2006, ACM SIGPLAN NOTICES, V41, P169, DOI 10.1145/1167515.1167488
   Blackshear S, 2013, ACM SIGPLAN NOTICES, V48, P275, DOI 10.1145/2499370.2462186
   Blanc N., 2007, IEEE/ACM Conference on Automated software engineering, P521
   Chandra S, 2009, ACM SIGPLAN NOTICES, V44, P363, DOI 10.1145/1543135.1542517
   Cousot P., 1977, C RECORD 4 ANN ACM S, P238, DOI DOI 10.1145/512950.512973
   Dillig I, 2011, ACM SIGPLAN NOTICES, V46, P187, DOI 10.1145/1925844.1926407
   Geay E, 2009, PROC INT CONF SOFTW, P177, DOI 10.1109/ICSE.2009.5070519
   Gregor D, 2006, SOFTWARE PRACT EXPER, V36, P225, DOI 10.1002/spe.683
   Gulavani BS, 2009, LECT NOTES COMPUT SC, V5673, P188, DOI 10.1007/978-3-642-03237-0_14
   Hammer C, 2008, PLAS'08: PROCEEDINGS OF THE ACM SIGPLAN THIRD WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P57, DOI 10.1145/1375696.1375704
   Heine D. L., 2006, 28th International Conference on Software Engineering Proceedings, P252, DOI 10.1145/1134285.1134321
   Kuncak V, 2006, IEEE T SOFTWARE ENG, V32, P988, DOI 10.1109/TSE.2006.125
   Lam P, 2005, LECT NOTES COMPUT SC, V3443, P237, DOI 10.1007/978-3-540-31985-6_16
   Lattner C, 2007, ACM SIGPLAN NOTICES, V42, P278, DOI 10.1145/1273442.1250766
   Lhoták O, 2003, LECT NOTES COMPUT SC, V2622, P153
   Loginov Alexey., 2008, ISSTA, P213, DOI DOI 10.1145/1390630.1390657
   Madhavan R, 2011, ACM SIGPLAN NOTICES, V46, P1033, DOI 10.1145/2076021.2048144
   Marron M, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P31, DOI 10.1145/1251535.1251541
   Milanova A, 2005, ACM T SOFTW ENG METH, V14, P1, DOI 10.1145/1044834.1044835
   Muchnick S., 1997, ADV COMPILER DESIGN
   Nanda MG, 2009, PROC INT CONF SOFTW, P133, DOI 10.1109/ICSE.2009.5070515
   Parízek P, 2012, ACM SIGPLAN NOTICES, V47, P75, DOI 10.1145/2398857.2384623
   Podelski A, 2008, LECT NOTES COMPUT SC, V5123, P314
   Sagiv M., 1999, Conference Record of POPL '99. 26th ACM SIGPLAN-SIGACT. Symposium on Principles of Programming Languages, P105, DOI 10.1145/292540.292552
   Sharir Micha, 1981, PROGRAM FLOW ANAL TH
   Sinha Nishant, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P599, DOI 10.1007/978-3-642-31424-7_42
   Sotin P, 2010, ELECTRON NOTES THEOR, V267, P139, DOI 10.1016/j.entcs.2010.09.012
   Spoto F, 2011, SOFTW SYST MODEL, V10, P219, DOI 10.1007/s10270-009-0132-5
   Sridharan M, 2007, ACM SIGPLAN NOTICES, V42, P112, DOI 10.1145/1273442.1250748
   Tripp O, 2009, ACM SIGPLAN NOTICES, V44, P87, DOI 10.1145/1543135.1542486
   WALA, 2014, T J WATS LIB AN
   Yang H, 2008, LECT NOTES COMPUT SC, V5123, P385
   Zhang WL, 2006, SIXTH IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS AND MANIPULATION, PROCEEDINGS, P63
NR 35
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2015
VL 98
BP 645
EP 679
DI 10.1016/j.scico.2014.09.006
PN 4
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AY7LJ
UT WOS:000347741400009
OA hybrid
DA 2024-07-18
ER

PT J
AU Heering, J
AF Heering, Jan
TI Generative software complexity and software understanding
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Structural complexity; Software generation; Software understanding;
   Kolmogorov complexity
AB Taking generative software development as our point of departure, we introduce generative software complexity as a measure for quantifying the structural complexity of software. After explaining that it is the same as Kolmogorov complexity, we discuss its merits from the viewpoint of software understanding. The results obtained are in many ways unsatisfactory, but sufficiently intriguing to warrant further work. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Heering, Jan] CWI, Amsterdam, Netherlands.
RP Heering, J (corresponding author), IJburglaan 790, NL-1087 EM Amsterdam, Netherlands.
EM jan.heering1@gmail.com
CR [Anonymous], 1989, Kolmogorov Complexity and Its Applications
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   BAKER BS, 1995, SECOND WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P86, DOI 10.1109/WCRE.1995.514697
   Biggerstaff TJ, 1998, ANN SOFTW ENG, V5, P169, DOI 10.1023/A:1018924407841
   Fenton N., 1996, SOFTWARE METRICS RIG, VSecond
   Heering J., 2003, SIGSOFT SOFTW ENG NO, V28, P6
   Smaragdakis Y., 2000, ENCY ELECT ELECT ENG
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
NR 8
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2015
VL 97
SI SI
BP 82
EP 85
DI 10.1016/j.scico.2013.11.017
PN 1
PG 4
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AU6PR
UT WOS:000345725100015
OA Bronze
DA 2024-07-18
ER

PT J
AU Talpin, JP
   Brandt, J
   Gemünde, M
   Schneider, K
   Shukla, S
AF Talpin, Jean-Pierre
   Brandt, Jens
   Gemuende, Mike
   Schneider, Klaus
   Shukla, Sandeep
TI Constructive polychronous systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Synchronous programming; Operational semantics; Constructive systems;
   Fixpoint theory; Program verification
ID SYNCHRONOUS LANGUAGES; IMPLEMENTATION; PROGRAMS
AB The synchronous paradigm provides a logical abstraction of time for reactive system design which allows automatic synthesis of embedded systems that behave in a predictable, timely, and reactive manner. According to the synchrony hypothesis, a synchronous model reacts to inputs by generating outputs that are immediately made available to the environment. While synchrony greatly simplifies the design of complex systems in general, it can sometimes lead to causal cycles. In these cases, constructiveness is a key property to guarantee that the output of each reaction can still be always algorithmically determined. Polychrony deviates from perfect synchrony by using a partially ordered, i.e., a relational model of time. It encompasses the behaviors of (implicitly) multi-clocked data-flow networks of synchronous modules and can analyze and synthesize them as GALS systems or Kahn process networks (KPNs).
   In this paper, we present a unified constructive semantic framework using structured operational semantics, which encompasses both the constructive behavior of synchronous modules and the multi-clocked behavior of polychronous networks. Along the way, we define the very first executable operational semantics of the polychronous language SIGNAL. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Talpin, Jean-Pierre] INRIA, F-35042 Rennes, France.
   [Brandt, Jens; Gemuende, Mike; Schneider, Klaus] Univ Kaiserslautern, D-67663 Kaiserslautern, Germany.
   [Shukla, Sandeep] Virginia Tech, Blacksburg, VA USA.
C3 Inria; University of Kaiserslautern; Virginia Polytechnic Institute &
   State University
RP Talpin, JP (corresponding author), INRIA, F-35042 Rennes, France.
EM Jean-Pierre.Talpin@inria.fr; brandt@cs.uni-kl.de; gemuende@cs.uni-kl.de;
   schneider@cs.uni-kl.de; shukla@vt.edu
RI Brandt, Jens/IQW-2942-2023; SHUKLA, SANDEEP/T-6430-2019
OI SHUKLA, SANDEEP/0000-0001-5525-7426; Schneider,
   Klaus/0000-0002-1305-7132
FU INRIA (associate project Polycore); Deutsche Forschungsgemeinschaft
   (DFG); US Air Force Research Laboratory [FA8750-11-1-0042]; US Air Force
   Office for Scientific Research [FA8655-13-1-3049]
FX This work is partially supported by INRIA (associate project Polycore),
   the Deutsche Forschungsgemeinschaft (DFG), by the US Air Force Research
   Laboratory (grant FA8750-11-1-0042) and the US Air Force Office for
   Scientific Research (grant FA8655-13-1-3049).
CR Aguado J, 2011, THEOR COMPUT SCI, V412, P931, DOI 10.1016/j.tcs.2010.09.007
   BENVENISTE A, 1991, SCI COMPUT PROGRAM, V16, P103, DOI 10.1016/0167-6423(91)90001-E
   Benveniste A, 2003, P IEEE, V91, P64, DOI 10.1109/JPROC.2002.805826
   Benveniste A, 2000, INFORM COMPUT, V163, P125, DOI [10.1006/inco.2000.9999, 10.1006/inco.2000.2898]
   Berry G, 2000, FOUNDAT COMPUT, P425
   BERRY G, 1992, SADHANA-ACAD P ENG S, V17, P95, DOI 10.1007/BF02811340
   Berry G., 2000, ESTEREL V5 LANGUAGE
   Berry Gerard., 1996, The Constructive Semantics of Pure Esterel
   Boldt M., 2008, EURASIP J EMBEDDED S, V2008, P1
   Brzozowski Janusz A, 1995, Asynchronous Circuits
   Caspi P, 1996, ACM SIGPLAN NOTICES, V31, P226, DOI 10.1145/232629.232651
   Edwards SA, 2003, DES AUT CON, P159
   Halbwachs N, 2005, Third ACM & IEEE International Conference on Formal Methods and Models for Co-Design, Proceedings, P3, DOI 10.1109/MEMCOD.2005.1487884
   Halbwachs N., 1995, EUR C IEEE COMP SOC, P42
   Halbwachs Nicolas., 1993, Synchronous Programming of Reactive Systems
   Kahn G., 1974, P IFIP C N HOLL
   Le Guernic P, 2003, J CIRCUIT SYST COMP, V12, P261, DOI 10.1142/S0218126603000763
   LEGUERNIC P, 1991, P IEEE, V79, P1321, DOI 10.1109/5.97301
   LEGUERNIC P, 1986, 533 INRIA
   Logothetis G, 2003, DESIGN, AUTOMATION AND TEST IN EUROPE CONFERENCE AND EXHIBITION, PROCEEDINGS, P196
   Maffeis O., 1994, 3 INT SCH S FORM TEC, V863, P547
   Mendler M., 2012, FORM METHODS SYST DE, V40
   Potop-Butucaru D, 2007, FUND INFORM, V78, P131
   Potop-Butucaru D, 2011, FUND INFORM, V108, P91, DOI 10.3233/FI-2011-415
   Riedel MD, 2003, DES AUT CON, P163
   RIEDEL MD, 2004, THESIS CALIFORNIA I
   SCHNEIDER K, 2004, COMPILERS ARCHITECTU, P179, DOI DOI 10.1145/1023833.1023859
   Schneider K, 2006, ELECTRON NOTES THEOR, V153, P71, DOI 10.1016/j.entcs.2006.02.028
   Schneider Klaus, 2009, Technical Report. Internal Report 375
   Shiple TR, 1996, EUR CONF DESIG AUTOM, P328, DOI 10.1109/EDTC.1996.494321
   Shukla SK, 2010, SYNTHESIS OF EMBEDDED SOFTWARE: FRAMEWORKS AND METHODOLOGIES FOR CORRECTNESS BY CONSTRUCTION, P1, DOI 10.1007/978-1-4419-6400-7
   Stok L., 1992, PROC INT C COMPUTER, P345, DOI DOI 10.1109/ICCAD.1992.279349
   Talpin J., 2005, 5 ACM INT C EMBEDDED, P282
   Titzer BL, 2005, ACM SIGPLAN NOTICES, V40, P59, DOI 10.1145/1070891.1065919
NR 34
TC 9
Z9 9
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2014
VL 96
SI SI
BP 377
EP 394
DI 10.1016/j.scico.2014.04.009
PN 3
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AT8KA
UT WOS:000345181100007
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Medeiros, S
   Mascarenhas, F
   Ierusalimschy, R
AF Medeiros, Sergio
   Mascarenhas, Fabio
   Ierusalimschy, Roberto
TI From regexes to parsing expression grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Regular expressions; Parsing expression grammars; Natural semantics;
   Pattern matching; Regexes
AB Most scripting languages nowadays use regex pattern-matching libraries. These regex libraries borrow the syntax of regular expressions, but have an informal semantics that is different from the semantics of regular expressions, removing the commutativity of alternation and adding ad-hoc extensions that cannot be expressed by formalisms for efficient recognition of regular languages, such as deterministic finite automata.
   Parsing expression grammars are a formalism that can describe all deterministic context-free languages and have a simple computational model. In this paper, we present a formalization of regexes via transformation to parsing expression grammars. The proposed transformation easily accommodates several common regex extensions, giving a formal meaning to them. It also provides a clear computational model that helps to estimate the efficiency of regex-based matchers, and a basis for specifying provably correct optimizations for them. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Medeiros, Sergio] UFS, Dept Comp Sci, Aracaju, Brazil.
   [Mascarenhas, Fabio] Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
   [Ierusalimschy, Roberto] Pontificia Univ Catolica Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
C3 Universidade Federal do Rio de Janeiro; Pontificia Universidade Catolica
   do Rio de Janeiro
RP Mascarenhas, F (corresponding author), Univ Fed Rio de Janeiro, Dept Comp Sci, Rio de Janeiro, Brazil.
EM sergio@ufs.br; mascarenhas@ufrj.br; roberto@inf.puc-rio.br
RI Queiroz de Medeiros, Sergio/O-6582-2018; Mascarenhas, Fabio/M-5731-2014
OI Queiroz de Medeiros, Sergio/0000-0002-0759-0926; Mascarenhas,
   Fabio/0000-0002-2970-7160
CR ABIGAIL, 2001, REDUCTION 3 CNF SAT
   [Anonymous], 1990, Handbook of Theoretical Computer Science, DOI DOI 10.1016/B978-0-444-88071-0.50010-2
   CONWAY D, 2002, SYNOPSIS 5 REGEXES R
   Cox R., 2010, Regular expression matching in the wild
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Fowler G, 2003, INTERPRETATION POSIX
   Friedl J.E.F., 2006, Mastering Regular Expressions, V3rd Edn.
   HAZEL P, 2011, PCRE PERL COMPATIBLE
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Ierusalimschy R, 2009, SOFTWARE PRACT EXPER, V39, P221, DOI 10.1002/spe.892
   Kahn G., 1987, P S THEOR ASP COMP S, P22
   MEDEIRO S, 2008, P 2008 S DYN LANG, P1
   MEDEIROS S, 2010, THESIS PUC RIO
   OIKAWA M, 2010, P 14 BRAZ S PROGR LA
   *PERL FDN, 2005, COR DOC PERL 5 VERS
   Reps T, 1998, ACM T PROGR LANG SYS, V20, P259, DOI 10.1145/276393.276394
   SALOMAA A, 1966, J ACM, V13, P158, DOI 10.1145/321312.321326
   WALL L, 2002, APOCALYPSE 5 PATTERN
   1989, BIBLE BOTH TESTAMENT, V10
NR 19
TC 11
Z9 11
U1 1
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2014
VL 93
SI SI
BP 3
EP 18
DI 10.1016/j.scico.2012.11.006
PN A
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AO7QS
UT WOS:000341548300002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Sridhar, M
   Wartell, R
   Hamlen, KW
AF Sridhar, Meera
   Wartell, Richard
   Hamlen, Kevin W.
TI Hippocratic binary instrumentation: First do no harm
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE In-lined reference monitors; Verification; Model-checking; Symbolic
   interpretation; ActionScript
ID SECURITY POLICIES; LANGUAGE
AB In-lined Reference Monitors (IRMs) cure binary software of security violations by instrumenting them with runtime security checks. Although over a decade of research has firmly established the power and versatility of the in-lining approach to security, its widespread adoption by industry remains impeded by concerns that in-lining may corrupt or otherwise harm intended, safe behaviors of the software it protects. Practitioners with such concerns are unwilling to adopt the technology despite its security benefits for fear that some software may break in ways that are hard to diagnose.
   This paper shows how recent approaches for machine-verifying the policy-compliance (soundness) of IRMs can be extended to also formally verify IRM preservation of policy-compliant behaviors (transparency). Feasibility of the approach is demonstrated through a transparency-checker implementation for Adobe ActionScript bytecode. The framework is applied to enforce security policies for Adobe Flash web advertisements and automatically verify that their policy-compliant behaviors are preserved. (C) 2014 Elsevier B.V. All rights reserved.
C1 [Sridhar, Meera; Hamlen, Kevin W.] Univ Texas Dallas, Richardson, TX 75083 USA.
C3 University of Texas System; University of Texas Dallas
RP Sridhar, M (corresponding author), Univ Texas Dallas, Richardson, TX 75083 USA.
EM meera.sridhar@utdallas.edu; richard.wartell@mandiant.com;
   hamlen@utdallas.edu
FU National Science Foundation (NSF) [1065216, 1054629]; Office of Naval
   Research (ONR) [N00014-14-1-0030]; Direct For Computer & Info Scie &
   Enginr; Division Of Computer and Network Systems [1065216, 1054629]
   Funding Source: National Science Foundation
FX The research reported herein was supported in part by the National
   Science Foundation (NSF) under grants #1065216 and #1054629, and by the
   Office of Naval Research (ONR) under grant N00014-14-1-0030. All
   opinions and conclusions expressed are those of the authors and not
   necessarily of the NSF or ONR.
CR Abadi M, 2005, P 12 ACM C COMP COMM, DOI [10.1145/1102120.1102165, DOI 10.1145/1102120.1102165]
   Abadi M, 2009, ACM T INFORM SYST SE, V13, DOI 10.1145/1609956.1609960
   Aktug I., 2003, P 15 INT S FORM METH, P262
   Aktug I, 2008, SCI COMPUT PROGRAM, V74, P2, DOI 10.1016/j.scico.2008.09.004
   ALPERN B, 1987, DISTRIB COMPUT, V2, P117, DOI 10.1007/BF01782772
   [Anonymous], 1999, P 1999 WORKSH NEW SE
   [Anonymous], 2010, CVE20102216
   Barthe G, 2004, P IEEE CSFW, P100, DOI 10.1109/CSFW.2004.1310735
   Bauer L, 2005, ACM SIGPLAN NOTICES, V40, P305, DOI 10.1145/1064978.1065047
   Blech J.O., 2012, Proceedings of the 10th International Conference on Formal Engineering Methods: Formal Methods and Software Engineering (SEFM), P494, DOI DOI 10.1007/978-3-642-34281-3_34
   Borger E., 1995, Specification and Validation Methods, P96
   Chang BYE, 2006, LECT NOTES COMPUT SC, V3855, P174
   Chen F, 2005, LECT NOTES COMPUT SC, V3440, P546
   Chudnov A, 2010, 2010 23RD IEEE COMPUTER SECURITY FOUNDATIONS SYMPOSIUM (CSF), P200, DOI 10.1109/CSF.2010.21
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Dam M, 2009, LECT NOTES COMPUT SC, V5653, P546, DOI 10.1007/978-3-642-03013-0_25
   Dantas DS, 2006, ACM SIGPLAN NOTICES, V41, P383, DOI 10.1145/1111320.1111071
   Davis B., 2012, IEEE MOB SEC TECHN M
   DeVries B.W., 2009, Proceedings of the 4th ACM SIGPLAN Workshop on Programming Languages and Analysis for Security (PLAS), P9, DOI DOI 10.1145/1554339.1554342
   Dowd M., 2008, Application-specific attacks: Leveraging the ActionScript virtual machine
   Erlingsson U, 2006, Usenix Association 7th Usenix Symposium on Operating Systems Design and Implementation, P75
   Evans D, 1999, P IEEE S SECUR PRIV, P32, DOI 10.1109/SECPRI.1999.766716
   Fredrikson Matthew, 2012, Computer Aided Verification. Proceedings 24th International Conference, CAV 2012, P548, DOI 10.1007/978-3-642-31424-7_39
   Gupta R., 1992, Conference Record of the Nineteenth Annual ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P246, DOI 10.1145/143165.143216
   Hamlen K. W., 2006, PLAS 2006. Proceedings of the 2006 Programming Languages and Analysis for Security Workshop, P7, DOI 10.1145/1134744.1134748
   Hamlen KW, 2012, LECT NOTES COMPUT SC, V7214, P126, DOI 10.1007/978-3-642-28756-5_10
   Hamlen KW, 2008, PLAS'08: PROCEEDINGS OF THE ACM SIGPLAN THIRD WORKSHOP ON PROGRAMMING LANGUAGES AND ANALYSIS FOR SECURITY, P11, DOI 10.1145/1375696.1375699
   Hamlen KW, 2006, ACM T PROGR LANG SYS, V28, P175, DOI 10.1145/1111596.1111601
   Internet Advertising Bureau, 2013, INT ADV REV REP FY 2
   JAFFAR J, 1992, ACM T PROGR LANG SYS, V14, P339, DOI 10.1145/129393.129398
   JAFFAR J, 1994, J LOGIC PROGRAM, V20, P503, DOI 10.1016/0743-1066(94)90033-7
   Jones M., 2011, P 8 INT C MOB WEB IN, P531
   Khoury R, 2012, ACM T INFORM SYST SE, V15, DOI 10.1145/2240276.2240281
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kim M, 2004, FORM METHOD SYST DES, V24, P129, DOI 10.1023/B:FORM.0000017719.43755.7c
   Leroy X, 2009, COMMUN ACM, V52, P107, DOI 10.1145/1538788.1538814
   Li Z, 2010, 26TH ANNUAL COMPUTER SECURITY APPLICATIONS CONFERENCE (ACSAC 2010), P181
   Ligatti J, 2005, LECT NOTES COMPUT SC, V3679, P355
   MITRE, 2016, CVE201610713 MITRE
   Necula GC, 2000, ACM SIGPLAN NOTICES, V35, P83, DOI 10.1145/358438.349314
   Pnueli A, 1998, LECT NOTES COMPUT SC, V1384, P151, DOI 10.1007/BFb0054170
   Schneider F. B., 2000, ACM Transactions on Information and Systems Security, V3, P30, DOI 10.1145/353323.353382
   Shapiro L., 1994, The Art of PROLOG: Advanced Programming Tech- niques
   Sridhar M., 2013, HIPPOCRATIC BINARY I
   Sridhar M., 2011, Proceedings of the 5th ACM SIGPLAN Workshop on Programming Languages meets Program Verification (PLPV), P55
   Sridhar M., 2013, FlashTrack: A transparency checker tool for Flash applications
   Sridhar M, 2010, LECT NOTES COMPUT SC, V5937, P149, DOI 10.1007/978-3-642-11503-5_13
   Sridhar M, 2010, LECT NOTES COMPUT SC, V5944, P312, DOI 10.1007/978-3-642-11319-2_23
   Yee B, 2009, P IEEE S SECUR PRIV, P79, DOI 10.1109/SP.2009.25
   Yu D, 2007, ACM SIGPLAN NOTICES, V42, P237, DOI 10.1145/1190215.1190252
   Zaks A, 2008, LECT NOTES COMPUT SC, V5014, P35, DOI 10.1007/978-3-540-68237-0_5
NR 51
TC 5
Z9 8
U1 0
U2 10
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2014
VL 93
SI SI
BP 110
EP 124
DI 10.1016/j.scico.2014.02.024
PN B
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA CC8KR
UT WOS:000350618100003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bae, K
   Meseguer, J
   Ölveczky, PC
AF Bae, Kyungmin
   Meseguer, Jose
   Olveczky, Peter Csaba
TI Formal patterns for multirate distributed real-time systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 9th International Symposium on Formal Aspects of Component Software
   (FACS)
CY SEP 12-14, 2012
CL Mountain View, CA
DE Distributed real-time systems; Multirate systems; Synchronizers; Model
   checking; Rewriting logic
AB Distributed real-time systems (DRTSs), such as avionics and automotive systems, are very hard to design and verify. Besides the difficulties of asynchrony, clock skews, and network delays, an additional source of complexity comes from the multirate nature of many such systems, which must implement several levels of hierarchical control at different rates. In previous work we showed how the design and implementation of a single-rate DRTS which should behave in a virtually synchronous way can be drastically simplified by the PALS model transformation that generates the DRTS from a much simpler synchronous model. In this work we present several simple model transformations and a multirate extension of the PALS pattern which can be combined to reduce the design and verification of a virtually synchronous multirate DRTS to the much simpler task of specifying and verifying a single synchronous system. We illustrate the ideas with a multirate hierarchical control system where a central controller orchestrates control systems in the ailerons and tail of an airplane to perform turning maneuvers. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Bae, Kyungmin; Meseguer, Jose] Univ Illinois, Champaign, IL 61820 USA.
   [Olveczky, Peter Csaba] Univ Oslo, N-0316 Oslo, Norway.
C3 University of Illinois System; University of Illinois Urbana-Champaign;
   University of Oslo
RP Ölveczky, PC (corresponding author), Univ Oslo, N-0316 Oslo, Norway.
EM peterol@ifi.ulo.no
RI Ölveczky, Peter C/B-1797-2008
CR Agha G., 1993, IEEE Parallel & Distributed Technology: Systems & Applications, V1, P3, DOI 10.1109/88.218170
   Al-Nayeem A, 2012, ACM IEEE INT CONF CY, P65, DOI 10.1109/ICCPS.2012.15
   Anderson J.D., 2005, INTRO FLIGHT, V5th
   Awerbuch B., J ACM, V32
   Bae K., 2012, LNCS, V7684, P1
   Bae K., 2013, DESIGNING VERI UNPUB
   Bae K, 2012, ELECTRON PROC THEOR, P5, DOI 10.4204/EPTCS.105.2
   Bae K, 2011, LECT NOTES COMPUT SC, V6991, P651, DOI 10.1007/978-3-642-24559-6_43
   Bruni R, 2006, THEOR COMPUT SCI, V360, P386, DOI 10.1016/j.tcs.2006.04.012
   Clarke EM, 1999, MODEL CHECKING, P1
   Clavel M., 2007, LECT NOTES COMPUT SC, V4350
   Collinson R.P.G., 1996, Introduction to Avionics
   Denker G., 2000, ELECT NOTES THEOR CO, V36
   Girault A., 2002, LECT NOTES COMPUT SC, V2491
   KOPETZ H, 1994, COMPUTER, V27, P14, DOI 10.1109/2.248873
   Lepri Daniela, 2012, Rewriting Logic and Its Applications. 9th International Workshop, WRLA 2012. Held as a Satellite Event of ETAPS. Revised Selected Papers, P182, DOI 10.1007/978-3-642-34005-5_10
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J., 1998, LECT NOTES COMPUT SC, V1376
   Meseguer J., 2013, SCI COMPUT PROGRAM
   Meseguer J, 2012, THEOR COMPUT SCI, V451, P1, DOI 10.1016/j.tcs.2012.05.040
   Meseguer J, 2010, LECT NOTES COMPUT SC, V6447, P303, DOI 10.1007/978-3-642-16901-4_21
   Miller S.P., 2009, P DASC 09 IEEE
   Olveczky P. C., 2007, Higher-Order and Symbolic Computation, V20, P161, DOI 10.1007/s10990-007-9001-5
   Ölveczky PC, 2002, THEOR COMPUT SCI, V285, P359, DOI 10.1016/S0304-3975(01)00363-2
   Potop-Butucaru D, 2007, FUND INFORM, V78, P131
   Rushby J, 1999, IEEE T SOFTWARE ENG, V25, P651, DOI 10.1109/32.815324
   Steiner W., 2011, P DASC 11 IEEE
   TEL G, 1994, IEEE ACM T NETWORK, V2, P66, DOI 10.1109/90.282609
   Tripakis S, 2008, IEEE T COMPUT, V57, P1300, DOI 10.1109/TC.2008.81
   Viry P, 2002, THEOR COMPUT SCI, V285, P487, DOI 10.1016/S0304-3975(01)00366-8
NR 30
TC 11
Z9 11
U1 0
U2 10
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 3
EP 44
DI 10.1016/j.scico.2013.09.010
PN A
PG 42
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA AK4NL
UT WOS:000338401300002
OA hybrid
DA 2024-07-18
ER

PT J
AU Olesen, MC
   Hansen, RR
   Lawall, JL
   Palix, N
AF Olesen, Mads Chr.
   Hansen, Rene Rydhof
   Lawall, Julia L.
   Palix, Nicolas
TI Coccinelle: Tool support for automated CERT C Secure Coding Standard
   certification
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Automated tool support; CERT C Secure Coding; Certification
AB Writing correct C programs is well-known to be hard, not least due to the many low-level language features intrinsic to C. Writing secure C programs is even harder and, at times, seemingly impossible. To improve this situation the US CERT has developed and published a set of coding standards, the "CERT C Secure Coding Standard", that (currently) enumerates 122 rules and 180 recommendations, with the aim of making C programs (more) secure. The large number of rules and recommendations makes automated tool support essential for certifying that a given system complies with the standard.
   In this paper, we report on ongoing work on adapting the Coccinelle bug-finder and program transformation tool, into a tool for analysing and certifying C programs according to, e.g., the CERT C Secure Coding Standard or the MISRA (the Motor Industry Software Reliability Association) C standard. We argue that such a tool must be highly adaptable and customisable to each software project as well as to the certification rules required by a given standard.
   Furthermore, we present current work on integrating Clang (the LLVM C front-end) as a program analysis component into Coccinelle. Program analysis information, e.g., from data-flow or pointer analysis, is necessary both for more precise compliance checking, i.e., with fewer false positives, and also for enabling more complete checking, i.e., with fewer false negatives, e.g., resulting from pointer aliasing. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Olesen, Mads Chr.; Hansen, Rene Rydhof] Aalborg Univ, Dept Comp Sci, DK-9220 Aalborg, Denmark.
   [Lawall, Julia L.; Palix, Nicolas] Univ Copenhagen DIKU, Dept Comp Sci, DK-2100 Copenhagen East, Denmark.
C3 Aalborg University; University of Copenhagen
RP Hansen, RR (corresponding author), Aalborg Univ, Dept Comp Sci, Selma Lagerlofs Vej 300, DK-9220 Aalborg, Denmark.
EM mchro@cs.aau.dk; rrh@cs.aau.dk; Julia.Lawall@inria.fr;
   nicolas.palix@imag.fr
RI Palix, Nicolas/ABG-1533-2020
OI Palix, Nicolas/0000-0001-8873-281X; Hansen, Rene
   Rydhof/0000-0002-5688-6432
FU ISIS project (FTP) [274-08-0214]
FX Supported by the ISIS project (FTP grant number 274-08-0214).
CR [Anonymous], 2008, The Cert C Secure Coding Standard. Sei
   Brunel J, 2009, ACM SIGPLAN NOTICES, V44, P114, DOI 10.1145/1594834.1480897
   KAM JB, 1977, ACTA INFORM, V7, P305, DOI 10.1007/BF00290339
   Larochelle D, 2001, USENIX ASSOCIATION PROCEEDINGS OF THE 10TH USENIX SECURITY SYMPOSIUM, P177
   Lawall Julia, 2010, Proceedings of the 2010 Eighth European Dependable Computing Conference (EDCC 2010), P191, DOI 10.1109/EDCC.2010.31
   Lawall JL, 2009, I C DEPEND SYS NETWO, P43, DOI 10.1109/DSN.2009.5270354
   MacKenzie D., 2003, COMP MERGING FILES G
   Marpons G, 2009, ELECTRON NOTES THEOR, V248, P149, DOI 10.1016/j.entcs.2009.07.065
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Necula G. C., 1997, Conference Record of POPL '97: The 24th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P106, DOI 10.1145/263699.263712
   Padioleau Y, 2008, EUROSYS'08: PROCEEDINGS OF THE EUROSYS 2008 CONFERENCE, P247, DOI 10.1145/1357010.1352618
   Palix N., 2010, PROC 9 INT C ASPECT, P169
   Reps T, 2005, SCI COMPUT PROGRAM, V58, P206, DOI 10.1016/j.scico.2005.02.009
   Reps T, 2007, LECT NOTES COMPUT SC, V4855, P23
   Schwoon S, 2003, P IEEE CSFW, P202, DOI 10.1109/CSFW.2003.1212714
   Sprinkle J, 2009, IEEE SOFTWARE, V26, P15, DOI 10.1109/MS.2009.92
   Stuart H, 2007, 4 WORKSH PROGR LANG
   Stuart H, 2008, THESIS U COPENHAGEN
   van Deursen A, 2000, ACM SIGPLAN NOTICES, V35, P26, DOI 10.1145/352029.352035
   Pereira MJV, 2008, COMPUT SCI INF SYST, V5, P1, DOI 10.2298/CSIS0802001P
NR 20
TC 7
Z9 7
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2014
VL 91
SI SI
BP 141
EP 160
DI 10.1016/j.scico.2012.10.011
PN B
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4NO
UT WOS:000338401600002
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Backeljauw, F
   Becuwe, S
   Cuyt, A
   Van Deun, J
   Lozier, DW
AF Backeljauw, Franky
   Becuwe, Stefan
   Cuyt, Annie
   Van Deun, Joris
   Lozier, Daniel W.
TI Validated evaluation of special mathematical functions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Validated software; Special functions
ID CONTINUED FRACTIONS
AB Because of the importance of special functions, several books and a large collection of papers have been devoted to their use and computation, the most well-known being the Abramowitz and Stegun handbook (Abramowitz and Stegun, 1964) [1] and its successor (Olver et al. 0000) [2]. However, until now no environment offers routines for the provable correct multiprecision and radix-independent evaluation of these special functions. We point out how we make good use of series and limit-periodic continued fraction representations in a package that is being developed at the University of Antwerp. Our scalable precision technique is mainly based on the use of sharpened a priori truncation and round-off error upper bounds for real arguments. The implementation is validated in the sense that it returns a sharp interval enclosure for the requested function evaluation, at the same cost as the evaluation. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Backeljauw, Franky; Becuwe, Stefan; Cuyt, Annie; Van Deun, Joris] Univ Antwerp, Dept Math & Comp Sci, B-2020 Antwerp, Belgium.
   [Lozier, Daniel W.] NIST, Gaithersburg, MD 20899 USA.
C3 University of Antwerp; National Institute of Standards & Technology
   (NIST) - USA
RP Cuyt, A (corresponding author), Univ Antwerp, Dept Math & Comp Sci, Middelheimlaan 1, B-2020 Antwerp, Belgium.
EM franky.backljauw@ua.ac.be; stefan.becuwe@ua.ac.be; annie.cuyt@ua.ac.be
CR Abramowitz M., 1964, HDB MATH FUNCTIONS F
   [Anonymous], 2019, IEEE STD 754 2019 RE
   Backeljauw F., 2009, 200901 U ANTW
   Bailey DH, 1995, ACM T MATH SOFTWARE, V21, P379, DOI 10.1145/212066.212075
   Brent R. P., 1978, ACM Transactions on Mathematical Software, V4, P57, DOI 10.1145/355769.355775
   Cipra BA, 1998, SIAM NEWS, V31
   Colman M, 2011, ACM T MATH SOFTWARE, V38, DOI 10.1145/2049673.2049675
   Cuyt A., 2008, HDB CONTINUED FRACTI
   Cuyt A, 2006, SIAM J SCI COMPUT, V28, P1437, DOI 10.1137/050629203
   Floating-Point Working Group, 1987, SIGPLAN, V22, P9
   Fousse L, 2007, ACM T MATH SOFTWARE, V33, DOI 10.1145/1236463.1236468
   GILL J, 1973, T AM MATH SOC, V176, P479, DOI 10.2307/1996221
   Hart J. F., 1978, Computer Approximations
   Higham N.J., 2002, ACCURACY STABILITY N, V2nd ed.
   JONES WB, 1974, MATH COMPUT, V28, P795, DOI 10.1090/S0025-5718-1974-0373265-5
   Lorentzen L, 2003, ROCKY MT J MATH, V33, P409, DOI 10.1216/rmjm/1181069962
   Lorentzen L., 1992, Continued Fractions with Applications
   Lozier D. W., 1994, P S APPL MATH, V48, P79
   Moler C.B., 2002, CLEVES CORNER TETRAG
   Muller J. -M., 2006, Elementary Functions
   Olver F. W. J., 2010, NIST HDB MATH FUNCTI
   Schneider B. I., NIST DIGITAL LIB MAT
   Smith DM, 1998, ACM T MATH SOFTWARE, V24, P359, DOI 10.1145/293686.293687
NR 23
TC 7
Z9 7
U1 1
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2014
VL 90
SI SI
BP 2
EP 20
DI 10.1016/j.scico.2013.05.006
PN A
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AK4II
UT WOS:000338387700002
OA hybrid
DA 2024-07-18
ER

PT J
AU Dubois, E
   Bortolaso, C
   Appert, D
   Gauffre, G
AF Dubois, Emmanuel
   Bortolaso, Christophe
   Appert, Damien
   Gauffre, Guillaume
TI An MDE-based framework to support the development of Mixed Interactive
   Systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mixed Interactive System; Model-Driven Engineering; Development process;
   Domain-specific language; Flexible model transformation
ID MODEL; DESIGN
AB In the domain of Human Computer Interaction (HCI), recent advances in sensors, communication technologies, miniaturization and computing capabilities have led to new and advanced forms of interaction. Among them, Mixed Interactive Systems (MIS), form a class of interactive systems that comprises augmented reality, tangible interfaces and ambient computing; MIS aim to take advantage of physical and digital worlds to promote a more transparent integration of interactive systems with the user's environment. Due to the constant change of technologies and the multiplicity of these interaction forms, specific development approaches have been developed. As a result, numerous taxonomies, frameworks, API and models have emerged, each one covering a specific and limited aspect of the development of MIS.
   To support a coherent use of these multiple development resources and contribute to the increasing popularity of MIS, we have developed a framework based on Model-Driven Engineering. The goal is to take advantage of Model-Driven Engineering (MDE) standards, methodology and tools to support the manipulation of complementary Domain Specific Languages (DSL), to organize and link the use of different design and implementation resources, and to ensure a rationalized implementation based on design choices.
   In this paper, we first summarize existing uses of MDE in HCI before focusing on five major benefits MDE can provide in a MIS development context. We then detail which MDE tools and resources support these benefits and thus form the pillars of the success of an MDE-based MIS development approach. Based on this analysis, we introduce our framework, called Guide-Me, and illustrate its use through a case study. This framework includes two design models. Model transformations are also included to link one model to another; as a result the frameworks coverage extends from the earliest design step to a software component-based prototyping platform. A toolset based on the Eclipse Modeling Framework (EMF) that supports the use of the framework is also presented. We finally assess our MDE-based development process for MIS based on the five major MDE benefits for MIS. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Dubois, Emmanuel; Appert, Damien; Gauffre, Guillaume] Univ Toulouse, IRIT Elipse, F-31062 Toulouse 9, France.
   [Bortolaso, Christophe] Queens Univ, Sch Comp, Equis Lab, Kingston, ON K7L 3X6, Canada.
C3 Queens University - Canada
RP Dubois, E (corresponding author), Univ Toulouse, IRIT Elipse, 118 Route Narbonne, F-31062 Toulouse 9, France.
EM Emmanuel.Dubois@irit.fr; bortolas@cs.queensu.ca; Damien.Appert@irit.fr;
   Guillaume.Gauffre@irit.fr
CR [Anonymous], 2010, UBIQUITOUS INTELLIGE
   [Anonymous], STREP
   Bach C., 2004, Proceedings of IUI-CADUI Workshop on Exploring the Design and Engineering of Mixed Reality Systems, P72
   BASS L, 1992, SIGCHI B, V24
   Bauer M, 2001, IEEE AND ACM INTERNATIONAL SYMPOSIUM ON AUGMENTED REALITY, PROCEEDINGS, P45, DOI 10.1109/ISAR.2001.970514
   Bezivin J., 2005, SOFTWARE SYSTEM MODE, V4, P171, DOI DOI 10.1007/S10270-005-0079-0
   Bezivin J., 2004, LANGUAGE ENG MODELDR, V4101
   Bortolaso C., 2011, EICS 2011 PIS IT, P63
   Botterweck G., 2006, LECT NOTES COMPUTER, V4364, P2
   Calvary G, 2003, INTERACT COMPUT, V15, P289, DOI 10.1016/S0953-5438(03)00010-9
   Charfi S, 2009, EICS'09: PROCEEDINGS OF THE ACM SIGCHI SYMPOSIUM ON ENGINEERING INTERACTIVE COMPUTING SYSTEMS, P231
   Cheung D, 2006, P IEEE RAP SYST PROT, P119, DOI 10.1109/RSP.2006.42
   Coutrix C, 2010, HUM-COMPUT INT-SPRIN, P9, DOI 10.1007/978-1-84882-733-2_2
   Demeure A., 2011, P 2 SEMAIS WORKSH IU, P4
   Dubois E, 2003, INTERACT COMPUT, V15, P497, DOI 10.1016/S0953-5438(03)00037-7
   Dubois Emmanuel, 2007, Engineering Interactive Systems. EIS 2007 Joint Working Conferences. EHCI 2007, DSV-IS 2007, HCSE 2007, P465
   Dubois E, 1999, HUMAN-COMPUTER INTERACTION - INTERACT '99, P353
   Dubois E., 2012, HUMAN FACTORS AUGMEN
   *ECL FDN, 2006, ECL MOD PROJ
   Foley J.D., 1995, P DSV IS 94, P3
   Garlan D., 1997, P CASCON, V97, P169
   Gauffre G, 2011, STUD COMPUT INTELL, V340, P219
   Greenberg S., 2001, 01UIST. Proceedings of the 14th Annual ACM Symposium on User Interface Software and Technology, P209, DOI 10.1145/502348.502388
   Jacob RJK, 2008, CHI 2008: 26TH ANNUAL CHI CONFERENCE ON HUMAN FACTORS IN COMPUTING SYSTEMS VOLS 1 AND 2, CONFERENCE PROCEEDINGS, P201
   Kato H., 1999, Proceedings 2nd IEEE and ACM International Workshop on Augmented Reality (IWAR'99), P85, DOI 10.1109/IWAR.1999.803809
   Klemmer S.R., 2004, CHI '04: Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, ACM, New York, NY, USA, P399
   KRASNER GE, 1988, J OBJECT-ORIENT PROG, V1, P41
   Lamata Pablo, 2010, Augmented Reality, P73
   Ledermann F, 2005, P IEEE VIRT REAL ANN, P187
   Mackay W. E., 1998, CHI 98. Human Factors in Computing Systems. CHI 98 Conference Proceedings, P558, DOI 10.1145/274644.274719
   Mahfoudi A., 2006, P 6 WSEAS INT C MULT, P517
   MCGEE DR, 2001, P 6 INT C INT US INT, P113
   Mori G, 2004, IEEE T SOFTWARE ENG, V30, P507, DOI 10.1109/TSE.2004.40
   Moussa W. Abou, 2007, VIRT REAL INT C VRIC, P293
   Norman D.A., 1986, USER CTR SYSTEM DESI, DOI 10.1201/b15703
   OMG, MET OBJ FAC 2 0
   Paterno F., 2003, The Handbook of Task Analysis for Human-Computer Interaction, P483
   Sandor Christian, 2001, P EUR UIML C, P124
   Schmeder A., 2009, P INT C NEW INT MUS
   Shaer Orit, 2010, Foundations and Trends in Human-Computer Interaction, V3, P1, DOI 10.1561/1100000026
   Shaer O, 2009, ACM T COMPUT-HUM INT, V16, DOI 10.1145/1614390.1614395
   SHANNON CE, 1948, BELL SYST TECH J, V27, P379, DOI 10.1002/j.1538-7305.1948.tb01338.x
   Sottet JS, 2007, LECT NOTES COMPUT SC, V4662, P397
   Sottet JS, 2008, LECT NOTES COMPUT SC, V4940, P140
   Ullmer B., 2005, ACM Transactions on Computer-Human Interaction, V12, P81, DOI 10.1145/1057237.1057242
   UPnP Forum, 2008, UPNP SPEC
   Valverde F, 2009, NEW TRENDS ON HUMAN-COMPUTER INTERACTION: RESEARCH, DEVELOPMENT, NEW TOOLS AND METHODS, P119, DOI 10.1007/978-1-84882-352-5_12
   Wittkaemper M., 2006, ACM SIGGRAPH 2006 RE, P20
   Wolfe C, 2009, LECT NOTES COMPUT SC, V5795, P357, DOI 10.1007/978-3-642-04425-0_27
NR 49
TC 5
Z9 5
U1 1
U2 18
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2014
VL 89
SI SI
BP 199
EP 221
DI 10.1016/j.scico.2013.03.007
PN B
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AJ8CA
UT WOS:000337929100009
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Guerrero-García, J
AF Guerrero-Garcia, Josefina
TI Evolutionary design of user interfaces for workflow information systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE User interfaces; UsiXML; Workflow; Information systems; Model driven
   engineering
ID DEVELOPMENT ENVIRONMENT
AB In this paper we argue that user interface design should evolve from iterative to evolutionary in order to support the user interface development life cycle in a more flexible way. Evolutionary design consists of taking any input that informs to the lifecycle at any level of abstraction and its propagation through inferior and superior levels (vertical engineering) as well as the same level (horizontal engineering). This lifecycle is particularly appropriate when requirements are incomplete, partially unknown or to be discovered progressively. We exemplify this lifecycle by a methodology for developing user interfaces of workflow information systems. The methodology involves several models (i.e., task, process, workflow, domain, context of use) and steps. The methodology applies modeldriven engineering to derive concrete user interfaces from a workflow model imported into a workflow management system in order to run the workflow. Instead of completing each model step by step, any model element is either derived from early requirements or collected in the appropriate model before being propagated in the subsequent steps. When more requirements are elicited, any new element is added at the appropriate level, consolidated with the already existing elements, and propagated to the subsequent levels. A workflow editor has been developed to support the methodology. (C) 2013 Elsevier B.V. All rights reserved.
C1 Benemerita Univ Autonoma Puebla, Fac Comp Sci, Puebla, Mexico.
C3 Benemerita Universidad Autonoma de Puebla
RP Guerrero-García, J (corresponding author), Benemerita Univ Autonoma Puebla, Fac Comp Sci, Av San Claudioy 14 Sur, Puebla, Mexico.
EM joseguga01@gmail.com
RI Guerrero Garcia, Josefina/D-7414-2018
OI Guerrero Garcia, Josefina/0000-0002-3393-610X
FU ITEA2 Call 3 UsiXML project [20080026]
FX We gratefully acknowledge the support of the ITEA2 Call 3 UsiXML project
   under reference 20080026, and the anonymous referees whose comments and
   suggestions greatly improved this paper.
CR Anderson J.R., 2000, LEARN MEMORY
   [Anonymous], 2002, Workflow management: models, methods, and systems
   BROWN J, 1998, P CHI 98, P376
   Calvary G, 2002, CAMELEON REFERENCE F
   Chong Lee J., 2006, P CHI 2006, P1767
   Clerckx Tim., 2004, Proceedings of the 3rd annual conference on Task models and diagrams, P33
   ELNAFFAR S, 1999, P COMP AID DES US IN, P127
   Garcia JG, 2008, INT FED INFO PROC, V272, P7
   Garland A., 2001, Proceedings of the First International Conference on Knowledge Capture, P44, DOI 10.1145/500737.500748
   GONZALEZ J, 2006, P 6 INT C COMP AID D, P85
   Graham TCN, 1996, PROC INT CONF SOFTW, P418, DOI 10.1109/ICSE.1996.493436
   Griffiths T, 2001, INTERACT COMPUT, V14, P31, DOI 10.1016/S0953-5438(01)00042-X
   Guerrero Garcia J., 2008, INT J UNIVERSAL COMP, V14, P3236
   Guerrero Garcia J., 2010, THESIS UCL
   Guerrero-García J, 2009, LA-WEB: 2009 LATIN AMERICAN WEB CONGRESS, P36, DOI 10.1109/LA-WEB.2009.40
   Hekmatpour S., 1987, ACM SIGSOFT SOFTWARE, V12, P38
   Kaklanis N., 2008, P 9 INT C ADV VIS IN, P437
   Krabbel A., 1997, P DIS 97, P205, DOI DOI 10.1145/263552.263609
   Lemaigre C, 2008, INT FED INFO PROC, V272, P53
   Limbourg Quentin., 2004, P 3 ANN C TASK MODEL, P155
   Loia V., 2000, P SAC 00, V1, P524
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   MONTERO F, 2006, P 6 INT C COMP AID D, P245
   Patern'o F., 1999, Model-based design and evaluation of interactive applications
   Puerta A, 1999, KNOWL-BASED SYST, V12, P433, DOI 10.1016/S0950-7051(99)00037-4
   Puerta AR, 1997, IEEE SOFTWARE, V14, P40, DOI 10.1109/52.595902
   Rich Ch., 1981, ACM SIGART B, V76, P14
   Salasin J., 1995, ACM SIGSOFT SOFTWARE, V20, P18
   Seaton P., 1992, P CHI 92, P463
   STANCIULESCU A, 2005, P 7 INT C MULT INT I, P259, DOI DOI 10.1145/1088463.1088508
   Sumner T., 1997, the Proceedings of CHI 97, P83
   SZEKELY P, 1996, P 2 INT WORKSH COMP, P1
   Van der Aalst WMP, 1998, J CIRCUIT SYST COMP, V8, P21, DOI 10.1142/S0218126698000043
   Vanderdonckt J, 2005, LECT NOTES COMPUT SC, V3520, P16
   Wol Andreas., 2005, TAMODIA '05: Proceedings of the 4th international workshop on Task models and diagrams, P27, DOI DOI 10.1145/1122935.1122941
NR 35
TC 6
Z9 6
U1 0
U2 11
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 15
PY 2014
VL 86
SI SI
BP 89
EP 102
DI 10.1016/j.scico.2013.07.003
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA AG7OW
UT WOS:000335608500007
OA hybrid
DA 2024-07-18
ER

PT J
AU Gerakios, P
   Papaspyrou, N
   Sagonas, K
AF Gerakios, Prodromos
   Papaspyrou, Nikolaos
   Sagonas, Konstantinos
TI Static safety guarantees for a low-level multithreaded language with
   regions
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Safe multithreading; Type and effect systems; Region-based memory
   management; Cyclone
ID MEMORY MANAGEMENT; OWNERSHIP TYPES; IMPLEMENTATION; SYSTEM
AB We present the design of a formal low-level multithreaded language with advanced region-based memory management and thread synchronization primitives, where well-typed programs are memory safe and race free. In our language, regions and locks are combined in a single hierarchy and are subject to uniform ownership constraints imposed by this hierarchical structure: deallocating a region causes its sub-regions to be deallocated. Similarly, when a region is read/write-protected, then its sub-regions inherit the same access rights. We discuss aspects of the integration and implementation of the formal language within Cyclone and evaluate the performance of code produced by the modified Cyclone compiler against highly optimized C programs using pthreads. Our results show that the performance overhead for guaranteed race freedom and memory safety is in most cases acceptable. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Gerakios, Prodromos; Papaspyrou, Nikolaos; Sagonas, Konstantinos] Natl Tech Univ Athens, Sch Elect & Comp Engn, GR-10682 Athens, Greece.
   [Sagonas, Konstantinos] Uppsala Univ, Dept Informat Technol, S-75105 Uppsala, Sweden.
C3 National Technical University of Athens; Uppsala University
RP Papaspyrou, N (corresponding author), Natl Tech Univ Athens, Sch Elect & Comp Engn, GR-10682 Athens, Greece.
EM pgerakios@softlab.ntua.gr; nickie@softlab.ntua.gr; kostis@cs.ntua.gr
RI Sagonas, Konstantinos/IZD-8641-2023
OI Sagonas, Konstantinos/0000-0001-9657-0179; Papaspyrou,
   Nikolaos/0000-0002-1934-7181
FU National Technical University of Athens
FX This research was partially funded by the programme for supporting basic
   research (Pi EBE 2010) of the National Technical University of Athens
   under a project titled "Safety properties for concurrent programming
   languages."
CR AIKEN A, 1995, SIGPLAN NOTICES, V30, P174, DOI 10.1145/223428.207137
   Anderson T, 2008, LECT NOTES COMPUT SC, V5234, P141, DOI 10.1007/978-3-540-85261-2_10
   [Anonymous], 1990, P ISCA, DOI DOI 10.1145/325164.325100
   [Anonymous], P 21 ACM SIGPLAN SIG
   AUSTIN TM, 1994, SIGPLAN NOTICES, V29, P290, DOI 10.1145/773473.178446
   Bocchino RL, 2011, ACM SIGPLAN NOTICES, V46, P535, DOI 10.1145/1925844.1926447
   Bocchino RL, 2009, ACM SIGPLAN NOTICES, V44, P97, DOI 10.1145/1639949.1640097
   Boehm HJ, 2005, ACM SIGPLAN NOTICES, V40, P261, DOI 10.1145/1064978.1065042
   Boyapati C, 2003, ACM SIGPLAN NOTICES, V38, P324, DOI 10.1145/780822.781168
   Boyapati C, 2002, ACM SIGPLAN NOTICES, V37, P211, DOI 10.1145/583854.582440
   Condit J, 2007, LECT NOTES COMPUT SC, V4421, P520
   Cunningham David., 2007, Verification and Analysis of Multi-threaded Java-like Programs (VAMP), P20
   Flanagan C, 1999, LECT NOTES COMPUT SC, V1664, P288
   Fluet M, 2006, LECT NOTES COMPUT SC, V3924, P7
   Frigo M, 1998, ACM SIGPLAN NOTICES, V33, P212, DOI 10.1145/277652.277725
   Gay D, 2003, ACM SIGPLAN NOTICES, V38, P1, DOI 10.1145/780822.781133
   Gay D, 2001, ACM SIGPLAN NOTICES, V36, P70, DOI 10.1145/381694.378815
   Gerakios P., 2009, EPTCS, V17, P79
   Gerakios P, 2010, TLDI '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON TYPES IN LANGUAGE DESIGN AND IMPLEMENTATION, P15
   Gerakios Prodromos., 2011, Proceedings of the 7th ACM SIGPLAN workshop on Types in language design and implementation, TLDI '11, P15, DOI DOI 10.1145/1929553.1929558
   Gharachorloo K., 1990, Proceedings. The 17th Annual International Symposium on Computer Architecture (Cat. No.90CH2887-8), P15, DOI 10.1109/ISCA.1990.134503
   Grossman D, 2003, ACM SIGPLAN NOTICES, V38, P13, DOI 10.1145/640136.604177
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   Henglein Fritz., 2001, Proceedings of the 3rd ACM SIGPLAN International Conference on Principles and Practice of Declarative Programming, P175, DOI [10.1145/773184.773203, DOI 10.1145/773184.773203]
   Lamport L., 1979, ACM Transactions on Programming Languages and Systems, V1, P84, DOI 10.1145/357062.357068
   Matsakis ND, 2010, ACM SIGPLAN NOTICES, V45, P634, DOI 10.1145/1932682.1869511
   Necula GC, 2005, ACM T PROGR LANG SYS, V27, P477, DOI 10.1145/1065887.1065892
   Stallman R.M., 2011, GCC DEV COMMUNITY US
   Swamy N, 2006, SCI COMPUT PROGRAM, V62, P122, DOI 10.1016/j.scico.2006.02.003
   Walker D, 2001, ACM SIGPLAN NOTICES, V36, P181, DOI 10.1145/507669.507658
   Zhao T, 2004, REAL TIM SYST SYMP P, P241, DOI 10.1109/REAL.2004.51
   Zhao T, 2008, SCI COMPUT PROGRAM, V71, P213, DOI 10.1016/j.scico.2008.04.001
NR 32
TC 3
Z9 4
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2014
VL 80
BP 223
EP 263
DI 10.1016/j.scico.2013.06.005
PN B
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 292FH
UT WOS:000329887100002
OA hybrid
DA 2024-07-18
ER

PT J
AU Kim, M
   Stehr, MO
   Talcott, C
AF Kim, Minyoung
   Stehr, Mark-Oliver
   Talcott, Carolyn
TI A distributed logic for Networked Cyber-Physical Systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th IPM International Conference on Fundamentals of Software Engineering
   (FSEN)
CY APR 20-22, 2011
CL Tehran, IRAN
SP Inst Studies Fundamental Sci, Sch Comp Sci, ACM SIGSOFT, IFIP WG 2 2, Inst Studies Fundamental Sci
DE Distributed declarative logic; Partially ordered knowledge; Networked
   cyber-physical systems
ID MODEL
AB We describe a distributed logical framework designed to serve as a declarative semantic foundation for Networked Cyber-Physical Systems. The framework provides notions of facts and goals that include interactions with the environment via external goal requests, observations that generate facts, and actions that achieve goals. Reasoning rules are built on a partially ordered knowledge-sharing model for loosely coupled distributed computing. The logic supports reasoning in the context of dynamically changing facts and system goals. It can be used both to program systems and to reason about possible scenarios and emerging properties.
   The underlying reasoning framework is specified in terms of constraints that must be satisfied, making it very general and flexible. Inference rules for an instantiation to a specific local logic (Horn clause logic) are given as a concrete example. The key novel features are illustrated with snippets from an existing application-a theory for self-organizing robots performing a distributed surveillance task. Traditional properties of logical inference and computation are reformulated in this novel context, and related to features of system design and execution. Proofs are outlined for key properties corresponding to soundness, completeness, and termination. Finally, the framework is compared to other formal systems addressing concurrent/distributed computation. (C) 2013 Elsevier B.V. All rights reserved.
C1 [Kim, Minyoung; Stehr, Mark-Oliver; Talcott, Carolyn] SRI Int, Menlo Pk, CA 94025 USA.
C3 SRI International
RP Kim, M (corresponding author), SRI Int, 333 Ravenswood Ave, Menlo Pk, CA 94025 USA.
EM mkim@csl.sri.com; stehr@csl.sri.com; clt@csl.sri.com
CR [Anonymous], 2007, LNCS
   [Anonymous], LNCS
   Ashley-Rollman M.P., 2007, P IEEE INT C INT ROB
   Basu P., 2008, P IEEE MILCOM
   Chu D, 2007, SENSYS'07: PROCEEDINGS OF THE 5TH ACM CONFERENCE ON EMBEDDED NETWORKED SENSOR SYSTEMS, P175
   Elenius D, 2008, LECT NOTES COMPUT SC, V5341, P135, DOI 10.1007/978-3-540-88737-9_11
   HALPERN JY, 1990, J ACM, V37, P549, DOI 10.1145/79147.79161
   Hölzl M, 2011, LECT NOTES COMPUT SC, V7000, P241, DOI 10.1007/978-3-642-24933-4_12
   Kim M., 2010, 8 IEEE INT C EMB UB
   Loo BT, 2009, COMMUN ACM, V52, P87, DOI 10.1145/1592761.1592785
   MESEGUER J, 1992, THEOR COMPUT SCI, V96, P73, DOI 10.1016/0304-3975(92)90182-F
   Meseguer J, 1999, LECT NOTES COMPUT SC, V1664, P415
   Rusu Radu Bogdan, 2007, ICRA 07
   Stehr MO, 2010, LECT NOTES COMPUT SC, V6406, P397, DOI 10.1007/978-3-642-16355-5_32
   Stehr Mark-Oliver, 2008, P IEEE MILCOM
   Whitehouse K, 2006, LECT NOTES COMPUT SC, V3868, P5
NR 16
TC 7
Z9 7
U1 0
U2 17
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2013
VL 78
IS 12
BP 2453
EP 2467
DI 10.1016/j.scico.2013.01.011
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 234SL
UT WOS:000325664500012
OA hybrid
DA 2024-07-18
ER

PT J
AU De Roover, C
   Scholliers, C
   Amerijckx, W
   D'Hondt, T
   De Meuter, W
AF De Roover, Coen
   Scholliers, Christophe
   Amerijckx, Wouter
   D'Hondt, Theo
   De Meuter, Wolfgang
TI CRIMESPOT: A language and runtime for developing active wireless sensor
   network applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Wireless sensor networks; Ubiquitous computing; Programming languages;
   Software engineering
AB Advances in wireless sensing and actuation technology allow embedding significant amounts of application logic inside wireless sensor networks. Such active WSN applications are more autonomous, but are significantly more complex to implement. Event-based middleware lends itself to implementing these applications. It offers developers fine-grained control over how an individual node interacts with the other nodes of the network. However, this control comes at the cost of event handlers which lack composability and violate software engineering principles such as separation of concerns. In this paper, we present CRIMESPOT as a domain-specific language for programming WSN applications on top of event-driven middleware. Its node-centric features enable programming a node's interactions through declarative rules rather than event handlers. Its network-centric features support reusing code within and among WSN applications. Unique to CRIMESPOT is its support for associating application-specific semantics with events that carry sensor readings. These preclude transposing existing approaches that address the shortcomings of event-based middleware to the domain of wireless sensor networks. We provide a comprehensive overview of the language and the implementation of its accompanying runtime. The latter comprises several extensions to the RETE forward chaining algorithm. We evaluate the expressiveness of the language and the overhead of its runtime using small, but representative active WSN applications. (C) 2012 Elsevier B.V. All rights reserved.
C1 [De Roover, Coen; Scholliers, Christophe; Amerijckx, Wouter; D'Hondt, Theo; De Meuter, Wolfgang] Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
C3 Vrije Universiteit Brussel
RP De Roover, C (corresponding author), Vrije Univ Brussel, Software Languages Lab, Brussels, Belgium.
EM cderoove@vub.ac.be; cfscholl@vub.ac.be; wamerijc@vub.ac.be;
   tjdhondt@vub.ac.be; wdmeuter@vub.ac.be
RI Scholliers, Christophe/F-6280-2015
OI DE MEUTER, WOLFGANG/0000-0002-5229-5627; Scholliers,
   Christophe/0000-0002-2837-4763; De Roover, Coen/0000-0002-1710-1268
FU Stadium SBO project; "Flemish agency for Innovation by Science and
   Technology" (IWT Vlaanderen)
FX The authors thank everyone who contributed to the CRIME inference engine
   upon which CRIMESPOT builds: Eline Philips and Stijn Mostinckx. Coen De
   Roover is funded by the Stadium SBO project sponsored by the "Flemish
   agency for Innovation by Science and Technology" (IWT Vlaanderen).
CR [Anonymous], 2002, WSNA '02
   Arora A, 2004, COMPUT NETW, V46, P605, DOI 10.1016/j.comnet.2004.06.007
   Bakshi A., 2005, PROC WKSHP END TO EN, P19
   Cabitza F, 2005, INTERNATIONAL CONFERENCE ON PERVASIVE SERVICES 2005, PROCEEDINGS, P229, DOI 10.1109/PERSER.2005.1506416
   Costa P, 2007, LECT NOTES COMPUT SC, V4834, P429
   Deshpande A., 2005, IEEE DATA ENG, V28
   Dunkel Jurgen, 2009, Proceedings of the 11th International Conference on Enterprise Information Systems. DISI, P70
   FORGY CL, 1982, ARTIF INTELL, V19, P17, DOI 10.1016/0004-3702(82)90020-0
   Friedman-Hill E., 2002, ACTION SERIES
   García-Herranz M, 2010, J UNIVERS COMPUT SCI, V16, P1633
   Hartung C., 2006, MobiSys2006. The Fourth International Conference on Mobile Systems, Applications and Services, P28, DOI 10.1145/1134680.1134685
   Herzeel C, 2009, COMPUT LANG SYST STR, V35, P31, DOI 10.1016/j.cl.2008.06.002
   Holland O, 1999, ARTIF LIFE, V5, P173, DOI 10.1162/106454699568737
   Hughes D., 2009, Proceedings of the 7th International Conference on Advances in Mobile Computing and Multimedia, P195
   Hughes D, 2010, INT J MOB COMPUT MUL, V2, P38, DOI 10.4018/jmcmc.2010100103
   Juang P, 2002, ACM SIGPLAN NOTICES, V37, P96, DOI 10.1145/605432.605408
   Keeney J., 2003, P 4 IEEE INT WORKSH
   Maier I., 2010, DEPRECATING OBSERVER
   Martinez K, 2004, COMPUTER, V37, P50, DOI 10.1109/MC.2004.91
   Meditskos G, 2008, IEEE T KNOWL DATA EN, V20, P397, DOI 10.1109/TKDE.2007.190699
   Mostinckx S, 2007, LECT NOTES COMPUT SC, V4467, P268
   Mottola L., 2006, P 2 ACM IEEE INT C D
   Mottola L, 2011, ACM COMPUT SURV, V43, DOI 10.1145/1922649.1922656
   Roman M., 2002, IEEE Pervasive Computing, V1, P74, DOI 10.1109/MPRV.2002.1158281
   Simon D., 2006, P 2 INT C VIRT EX EN, P78
   Sugihara R, 2008, ACM T SENSOR NETWORK, V4, DOI 10.1145/1340771.1340774
   Terfloth K., 2006, Proc. of the 1st Int. Conf. on Communication System Software and Middleware (COMSWARE), P1
   Walzer K., 2008, P 2 INT C DISTR EV B, P147
NR 28
TC 2
Z9 3
U1 0
U2 14
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2013
VL 78
IS 10
BP 1951
EP 1970
DI 10.1016/j.scico.2012.07.018
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 200RJ
UT WOS:000323086300012
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Navas, JF
   Babau, JP
   Pulou, J
AF Navas, Juan F.
   Babau, Jean-Philippe
   Pulou, Jacques
TI Reconciling run-time evolution and resource-constrained embedded systems
   through a component-based development framework
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Embedded software; Components; Optimization; Evolution; Reifications;
   Architecture
ID MODEL
AB This paper deals with the evolution of embedded systems software at run-time. To accomplish such software evolution activities in resource-constrained embedded systems, we propose a component-based, execution time evolution infrastructure, that reconciles richness of evolution alternatives and performance requirements. The proposition is based on fine-grained optimization of embedded components, and on off-site component reifications called mirrors, which are representations of components that allow us to treat evolution concerns remotely and hence to reduce the memory footprint. An evaluation on a real-world evolution scenario shows the efficiency and relevance of our approach. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Navas, Juan F.] AREVA R&D Euriware, Paris, France.
   [Babau, Jean-Philippe] UEB, Lab STICC UBO, Brest, France.
   [Pulou, Jacques] MAPS Res Grp, Orange Labs, Grenoble, France.
C3 Areva; Universite de Bretagne Occidentale; Orange SA
RP Navas, JF (corresponding author), AREVA R&D Euriware, Paris, France.
EM juan.navas@areva.com; jean-philippe.babau@univ-brest.fr;
   jacques.pulou@orange.com
FU Orange Labs
FX This work was done while the author was a graduate student in the
   Lab-STICC UBO, under the support of Orange Labs.
CR Anthony R, 2009, AUTONOMIC COMMUNICATION, P169, DOI 10.1007/978-0-387-09753-4_7
   *AONIXPERC, 2010, PERC PROD FAM
   Arnold J, 2009, EUROSYS'09: PROCEEDINGS OF THE FOURTH EUROSYS CONFERENCE, P187
   BABAU JP, 2007, EC TEMPS REEL ETR 07, P75
   BORDE E, 2009, DES AUT TEST EUR C E
   Brouwers Niels., 2008, P ACMI FIPUSENIX MID, P18, DOI DOI 10.1145/1462735.1462740
   Bruneton E, 2004, LECT NOTES COMPUT SC, V3054, P7
   CARAZANIGA A, 1998, CHARATERIZATION FRAM
   Chapin N, 2001, J SOFTW MAINT EVOL-R, V13, P3, DOI 10.1002/smr.220
   Costa P, 2005, P 16 ANN IEEE INT S
   COULSON G, 2006, P 3 IEEE INT C MOB A
   Crnkovic I, 2005, PROC INT CONF SOFTW, P712, DOI 10.1145/1062455.1062631
   CRNKOVIC I, 2006, SOFTW ENG ADV INT C, P44, DOI DOI 10.1109/ICSEA.2006.28
   David P.-C., 2006, P FRACT CBSE WORKSH
   DUNKELS A, 2006, SENSYS 06, P15
   *FRESC PARTN, 2005, FIN REP FP6 EUR PROJ
   GUO Y, 2008, COMPSAC 08, P1315
   Hugues J, 2007, LECT NOTES COMPUT SC, V4888, P35
   Koshy J, 2008, AD HOC NETW, V6, P1185, DOI 10.1016/j.adhoc.2007.11.006
   KUZ I, 2007, QOSA 07 P QUAL SOFTW, P182
   Kuz I, 2007, J SYST SOFTWARE, V80, P687, DOI 10.1016/j.jss.2006.08.039
   Lau KK, 2007, IEEE T SOFTWARE ENG, V33, P709, DOI 10.1109/TSE.2007.70726
   Levis P, 2005, AMBIENT INTELLIGENCE, P115
   Lobry O., 2009, P ANN IEEE INT COMP
   Loiret F., 2009, P 12 INT S COMP BAS
   LSOVIC D, 2002, P 8 INT C REAL TIM C, P135
   Maes P, 1987, C P OBJ OR PROGR SYS, P147
   MATHIEU J, 2011, FLEX EWARE FLEXIBLE
   Matthys N, 2009, LECT NOTES COMPUT SC, V5860, P156, DOI 10.1007/978-3-642-10265-3_15
   MICHIELS S, 2006, MIDSENS 2006, P7
   Munawar W, 2010, IEEE ICC, DOI 10.1109/icc.2010.5501964
   NAVAS J, 2012, OPTIMISATION EVOLUTI
   NAVAS J, 2009, P 2009 INT C COMP SC, P514
   NAVAS JF, 2010, P 9 INT C GEN PROGR, P73
   Navas JF, 2009, SINTER 09, P41
   *O S MICR, 2010, JAV CARD 3 0 PLATF S
   Oreizy P, 1998, FOURTH INTERNATIONAL CONFERENCE ON CONFIGURABLE DISTRIBUTED SYSTEMS, PROCEEDINGS, P61, DOI 10.1109/CDS.1998.675759
   Oreizy P, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P899
   Panta R. K., 2009, P 2009 USENIX ANN TE
   PERSSON M, 2009, 200906 KTH
   POLAKOVIC J, 2007, INT ACM S COMP BAS S
   Polakovic J., 2006, EUROMICRO C SOFTW EN
   Shen BY, 2007, LECT NOTES COMPUT SC, V4808, P146
   Szypersky C., 2002, COMPONENT SOFTWARE O
   van Ommering R, 2002, ICSE 2002: PROCEEDINGS OF THE 24TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P255, DOI 10.1109/ICSE.2002.1007973
   van Ommering R, 2000, COMPUTER, V33, P78, DOI 10.1109/2.825699
   2009, P 6 INT C EMB SOFTW
NR 47
TC 3
Z9 3
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2013
VL 78
IS 8
BP 1073
EP 1098
DI 10.1016/j.scico.2012.08.004
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 168XV
UT WOS:000320742200007
OA Bronze
DA 2024-07-18
ER

PT J
AU Dinkelaker, T
   Eichberg, M
   Mezini, M
AF Dinkelaker, Tom
   Eichberg, Michael
   Mezini, Mira
TI Incremental concrete syntax for embedded languages with support for
   separate compilation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Language embeddings; Domain-specific languages; Language design and
   implementation; Program transformation; Generic pre-processor
AB Embedded domain-specific languages (EDSLs) are known to improve the productivity of developers. However, for many domains no DSL implementation is available and two important reasons for this are: First, the effort to implement EDSLs that provide the domain's established syntax (called concrete syntax) is very high. Second, the EDSL and its underlying general-purpose programming language (GPL) are typically tightly integrated. This hampers reusability across different GPLs. Besides these implementation issues, the productivity gains of using EDSLs are also limited by the lack of explicit tool support for EDSL users such as syntax highlighting or code analyses.
   In this paper, we present an approach that significantly reduces the necessary effort to implement embedded DSLs with concrete syntax. The idea is to use island grammars to specify the EDSL's concrete syntax. This enables the developer to implement the embedded DSL as a library and to incrementally specify the concrete syntax using meta-data. Only those parts of the EDSL's grammar need to be specified that deviate from the grammar of the GPL. By analyzing an EDSL's implementation using reflection, it is possible to provide tool support for EDSLs without having the developer implement it explicitly, such as syntax highlighting. An evaluation demonstrates the feasibility of our approach by embedding a real-world DSL into a GPL. (C) 2012 Elsevier B.V. All rights reserved.
C1 [Dinkelaker, Tom] Ericsson R&D, Frankfurt, Germany.
   [Eichberg, Michael; Mezini, Mira] Tech Univ Darmstadt, Darmstadt, Germany.
C3 Ericsson; Technical University of Darmstadt
RP Dinkelaker, T (corresponding author), Ericsson R&D, Frankfurt, Germany.
EM tom.dinkelaker@ericsson.com; eichberg@cs.tu-darmstadt.de;
   mezini@cs.tu-darmstadt.de
FU EMERGENT project, Federal Ministry of Education and Research (BMBF),
   Germany [01IC10S01N]
FX This work was partly supported by the EMERGENT project (01IC10S01N),
   Federal Ministry of Education and Research (BMBF), Germany. We would
   like to thank Kamil Erhard, Leo Roos, Pablo Hoch, and Yahya Benkaouz for
   their valuable contribution to the implementation of TIGERSEYE.
   Furthermore, we also like to thank Martin Monperrus and Andreas Sewe for
   valuable comments.
CR [Anonymous], 2007, P 22 IEEE ACM INT C
   Bravenboer M, 2004, ACM SIGPLAN NOTICES, V39, P365, DOI 10.1145/1035292.1029007
   Cordy JR, 2006, SCI COMPUT PROGRAM, V61, P190, DOI 10.1016/j.scico.2006.04.002
   Dean TR, 2003, CASCON '03, P266
   Dinkelaker T., 2010, P 9 INT C ASP OR SOF, P49, DOI DOI 10.1145/1739230.1739237
   Dmitriev Sergey, 2004, JETBRAINS ONBOARD, V1
   EARLEY J, 1970, COMMUN ACM, V13, P94, DOI 10.1145/362007.362035
   Ekman T, 2007, ACM SIGPLAN NOTICES, V42, P1, DOI 10.1145/1297105.1297029
   Erdweg S, 2011, GPCE 11: PROCEEDINGS OF THE TENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P167
   Erdweg S, 2011, ACM SIGPLAN NOTICES, V46, P391, DOI 10.1145/2076021.2048099
   Ford B, 2004, ACM SIGPLAN NOTICES, V39, P111, DOI 10.1145/982962.964011
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Garcia M., 2008, AUTOMATING EMBEDDING
   Hofer C, 2008, GPCE'08: PROCEEDINGS OF THE ACM SIGPLAN SEVENTH INTERNATIONAL CONFERENCE ON GENERATIVE PROGRAMMING AND COMPONENT ENGINEERING, P137
   Hrncic D, 2011, INF TECHNOL CONTROL, V40, P307, DOI 10.5755/j01.itc.40.4.980
   Hudak P, 1998, FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE REUSE - PROCEEDINGS, P134, DOI 10.1109/ICSR.1998.685738
   Hudak Paul, 1996, COMPUT SURV, V28, P196, DOI [10.1145/242224.242477, DOI 10.1145/242224.242477]
   Johnstone A, 2010, INNOV SYST SOFTW ENG, V6, P145, DOI 10.1007/s11334-009-0111-6
   Kamin Samuel N, 1998, Electronic Notes in Theoretical Computer Science, V14, P149, DOI [10.1016/S1571-0661(05)80235-X, DOI 10.1016/S1571-0661(05)80235-X]
   Kats LCL, 2010, ACM SIGPLAN NOTICES, V45, P444, DOI 10.1145/1932682.1869497
   Kats LCL, 2009, ACM SIGPLAN NOTICES, V44, P445, DOI 10.1145/1639949.1640122
   Knöll R, 2009, ACM SIGPLAN NOTICES, V44, P503
   Knuth D. E., 1968, Mathematical Systems Theory, V2, P127, DOI 10.1007/BF01692511
   Kosar T, 2008, INFORM SOFTWARE TECH, V50, P390, DOI 10.1016/j.infsof.2007.04.002
   MAES P, 1987, THESIS VRIJE U BRUSS
   MELTON J, 2000, UNDERSTANDING SQL JA
   Mernik M, 2005, ACM COMPUT SURV, V37, P316, DOI 10.1145/1118890.1118892
   Mernik M, 2005, COMPUT LANG SYST STR, V31, P1, DOI 10.1016/j.cl.2004.02.001
   Mernik M., 2000, Informatica, V24, P319
   Moonen L, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P13, DOI 10.1109/WCRE.2001.957806
   Nystrom N, 2003, LECT NOTES COMPUT SC, V2622, P138
   Peschanski F., 2001, WORKSH SCHEM FUNCT P, P42
   Porubän J, 2010, COMPUT SCI INF SYST, V7, P291, DOI 10.2298/CSIS1002291P
   Renggli L, 2010, LECT NOTES COMPUT SC, V6183, P380, DOI 10.1007/978-3-642-14107-2_19
   Simonyi C, 2006, ACM SIGPLAN NOTICES, V41, P451, DOI 10.1145/1167515.1167511
   Stahl T., 2006, Model-driven software development: technology, engineering, management
   Tratt L, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1391956.1391958
   van den Brand MGJ, 2007, INFORM SOFTWARE TECH, V49, P55, DOI 10.1016/j.infsof.2006.08.009
   van den Brand MGJ, 2002, LECT NOTES COMPUT SC, V2304, P143
   Visser, 2011, COMMUNICATION
   Visser E., 1997, THESIS U AMSTERDAM N
   Visser Eelco., 1997, Scannerless Generalized-LR Parsing
NR 42
TC 7
Z9 7
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2013
VL 78
IS 6
BP 615
EP 632
DI 10.1016/j.scico.2012.12.002
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 133JJ
UT WOS:000318134400002
OA hybrid
DA 2024-07-18
ER

PT J
AU Hallerstede, S
   Leuschel, M
   Plagge, D
AF Hallerstede, Stefan
   Leuschel, Michael
   Plagge, Daniel
TI Validation of formal models by refinement animation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 2nd International Conference on Abstract State Machines (ASM), Alloy, B
   and Z
CY FEB 22-25, 2010
CL Orford, CANADA
SP Univ Sherbrooke, Univ Paris Est Creteil
DE Refinement; Model checking; Constraint-solving; Tools; Industrial
   applications; Event-B
ID EVENT-B; CHECKING; TOOL
AB We provide a detailed description of refinement in Event-B, both as a contribution in itself and as a foundation for the approach to simultaneous animation of multiple levels of refinement that we propose. We present an algorithm for simultaneous multi-level animation of refinement, and show how it can be used to detect a variety of errors that occur frequently when using refinement. The algorithm has been implemented in PRoB and we applied it to several case studies, showing that multi-level animation is tractable also on larger models. We present empirical results and discuss how the algorithm can be combined with symmetry reduction. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Hallerstede, Stefan; Leuschel, Michael; Plagge, Daniel] Univ Dusseldorf, Inst Informat, D-40225 Dusseldorf, Germany.
C3 Heinrich Heine University Dusseldorf
RP Hallerstede, S (corresponding author), Univ Dusseldorf, Inst Informat, Univ Str 1, D-40225 Dusseldorf, Germany.
EM halstefa@cs.uni-duesseldorf.de; leuschel@cs.uni-duesseldorf.de;
   plagge@cs.uni-duesseldorf.de
CR Abrial J R, 2010, Modeling in Event-B: system and softeng
   Abrial J-R., 1996, The B Book
   Abrial JR, 2006, LECT NOTES COMPUT SC, V4260, P588
   Abrial JR, 2007, FUND INFORM, V77, P1
   Abrial JR, 2005, LECT NOTES COMPUT SC, V3455, P222
   Ait-Sadoune I., 2008, COMMUN COMPUT PHYS, V17, P37
   Ambert F., P FATES 02, P105
   [Anonymous], SOFTW TOOLS TECHNOL
   [Anonymous], LNCS
   BACK RJ, 1989, LNCS, V430, P67
   Bendisposto Jens, 2008, Technique et Science Informatiques, V27, P1065, DOI 10.3166/TSI.27.1065-1084
   Bendisposto J., WORKSH TOOL BUILD FO, P38
   Borger E., 2003, Formal Aspects of Computing, V15, P237, DOI 10.1007/s00165-003-0012-7
   Borger E., 2003, ABSTRACT STATE MACHI
   Farahbod R, 2007, FUND INFORM, V77, P71
   Hallerstede S., P DAGST SEM REF BAS, P48
   Hallerstede S, 2009, ELECTRON NOTES THEOR, V259, P47, DOI 10.1016/j.entcs.2009.12.017
   Hallerstede S, 2010, LECT NOTES COMPUT SC, V5977, P287, DOI 10.1007/978-3-642-11811-1_22
   Hallerstede S, 2009, LECT NOTES COMPUT SC, V5846, P105, DOI 10.1007/978-3-642-04912-5_8
   HE J, 1986, LECT NOTES COMPUT SC, V213, P187
   Hoare CAR., 1985, Communicating Sequential Processes
   Jones CB., 1990, SYSTEMATIC SOFTWARE
   Ledru Y, 1997, KNOWLEDGE-BASED SOFTWARE ENGINEERING, P33, DOI 10.1023/A:1008603612253
   Leuschel M, 2005, LECT NOTES COMPUT SC, V3785, P345
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   Leuschel M., LNCS, V5238, P4
   Leuschel M., P INT SYMM C ED UK, P71
   Leuschel M, 2007, LECT NOTES COMPUT SC, V4355, P79
   Servat T, 2007, LECT NOTES COMPUT SC, V4355, P274
   Spermann C, 2008, TASE 2008: SECOND IFIP/IEEE INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING, PROCEEDINGS, P15, DOI 10.1109/TASE.2008.33
   Wieczorek S, 2009, LECT NOTES COMPUT SC, V5826, P179, DOI 10.1007/978-3-642-05031-2_12
NR 31
TC 14
Z9 14
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR 1
PY 2013
VL 78
IS 3
SI SI
BP 272
EP 292
DI 10.1016/j.scico.2011.03.005
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 091PP
UT WOS:000315062600003
OA Bronze
DA 2024-07-18
ER

PT J
AU Affeldt, R
   Nowak, D
   Yamada, K
AF Affeldt, Reynald
   Nowak, David
   Yamada, Kiyoshi
TI Certifying assembly with formal security proofs: The case of BBS
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Hoare logic; Assembly language; Coq; PRNG; Provable security
ID VERIFICATION; LOGIC
AB With today's dissemination of embedded systems manipulating sensitive data, it has become important to equip low-level programs with strong security guarantees. Unfortunately, security proofs as done by cryptographers are about algorithms, not about concrete implementations running on hardware. In this article, we show how to perform security proofs to guarantee the security of assembly language implementations of cryptographic primitives. Our approach is based on a framework in the Coq proof assistant that integrates correctness proofs of assembly programs with game-playing proofs of provable security. We demonstrate the usability of our approach using the Blum-Blum-Shub pseudorandom number generator, for which an MIPS implementation for smartcards is shown cryptographically secure. (c) 2011 Elsevier B.V. All rights reserved.
C1 [Affeldt, Reynald; Nowak, David; Yamada, Kiyoshi] Natl Inst Adv Ind Sci & Technol, Tsukuba, Ibaraki 3058568, Japan.
C3 National Institute of Advanced Industrial Science & Technology (AIST)
RP Affeldt, R (corresponding author), Natl Inst Adv Ind Sci & Technol, Cent 2,1-1-1 Umezono, Tsukuba, Ibaraki 3058568, Japan.
EM reynald.affeldt@aist.go.jp
RI Nowak, David/C-8694-2011; Affeldt, Reynald/M-5552-2016
OI Affeldt, Reynald/0000-0002-2327-953X
FU KAKENHI [21500046, 21700048]; Grants-in-Aid for Scientific Research
   [21700048, 21500046] Funding Source: KAKEN
FX This work was partially supported by KAKENHI 21500046 and 21700048. The
   authors are grateful to the anonymous reviewers for their helpful
   comments.
CR Affeldt R., 2009, ELECT COMMUNICATIONS, V23
   Affeldt R., CERTIFYING ASSEMBLY
   Affeldt R, 2007, LECT NOTES COMPUT SC, V4435, P346
   Affeldt R, 2007, LECT NOTES COMPUT SC, V4784, P151
   [Anonymous], 2001, Handbook of applied cryptography
   [Anonymous], 2017, COQ PROOF ASS REF MA
   [Anonymous], 1982, 23 ANN S FDN COMP SC
   Backes M, 2008, LECT NOTES ARTIF INT, V5330, P353, DOI 10.1007/978-3-540-89439-1_26
   Barthe G, 2009, ACM SIGPLAN NOTICES, V44, P90, DOI 10.1145/1594834.1480894
   Bellare Mihir, 2004, Paper 2004/331
   BLUM L, 1986, SIAM J COMPUT, V15, P364, DOI 10.1137/0215025
   Filliâtre JC, 2004, LECT NOTES COMPUT SC, V3308, P15
   Gonthier Georges, 2007, 6455 INRIA
   Knebl H. Delfs. H., 2007, INTRO CYPTOGRAPHY PR
   Marti N, 2006, LECT NOTES COMPUT SC, V4260, P400
   Mehta F, 2005, INFORM COMPUT, V199, P200, DOI 10.1016/j.ic.2004.10.007
   MIPS Technologies, 2001, MIPS32 4KS PROC COR
   MONTGOMERY PL, 1985, MATH COMPUT, V44, P519, DOI 10.1090/S0025-5718-1985-0777282-X
   Myreen M.O., 2007, THEOREM PROVING HIGH
   Myreen MO, 2009, LECT NOTES COMPUT SC, V5501, P2, DOI 10.1007/978-3-642-00722-4_2
   Nowak D, 2007, LECT NOTES COMPUT SC, V4681, P319, DOI 10.1007/978-3-540-77048-0_25
   Nowak D, 2009, LECT NOTES COMPUT SC, V5461, P368, DOI 10.1007/978-3-642-00730-9_23
   Reynolds JC, 2002, IEEE S LOG, P55, DOI 10.1109/LICS.2002.1029817
   Saabas A, 2007, THEOR COMPUT SCI, V373, P273, DOI 10.1016/j.tcs.2006.12.020
   Shoup V., 2004, 2004332 CRYPT EPRINT
   Tan G, 2006, LECT NOTES COMPUT SC, V3855, P80
   Yamada K., 2010, BUG REPORT PATCH SMA
NR 27
TC 14
Z9 15
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2012
VL 77
IS 10-11
SI SI
BP 1058
EP 1074
DI 10.1016/j.scico.2011.07.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 980JQ
UT WOS:000306889800003
OA Green Submitted, Bronze
DA 2024-07-18
ER

PT J
AU van Heesch, U
   Avgeriou, P
   Zdun, U
   Harrison, N
AF van Heesch, Uwe
   Avgeriou, Paris
   Zdun, Uwe
   Harrison, Neil
TI The supportive effect of patterns in architecture decision recovery-A
   controlled experiment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software architecture; Architecture decisions; Recovery; Controlled
   experiment
AB The documentation of software architectural design decisions is important to help people understand the system and the rationale behind architectural solutions. In practice, the documentation of such decisions is regularly done after the fact, or skipped completely. To support software maintenance and evolution, the decisions have to be recovered and described. This is often hindered by the fact that the original architects are not available any more, or they do not completely remember the reasons for making the decisions. Additionally, the whole process is very expensive. In this paper, we hypothesize that architecture decision recovery can be more efficient by focusing on recovering decisions related to applying architecture patterns. To test this hypothesis, we designed a controlled experiment that was conducted to analyze the impact of architecture patterns on the quality and quantity of architecture decisions recovered after the fact. We are able to provide statistical evidence that a focus on patterns significantly increases the quality of decisions, while no conclusive evidence concerning the quantity of decisions was found. (C) 2011 Elsevier B.V. All rights reserved.
C1 [van Heesch, Uwe; Avgeriou, Paris; Harrison, Neil] Univ Groningen, Groningen, Netherlands.
   [van Heesch, Uwe] Fontys Univ Appl Sci, Venlo, Netherlands.
   [Zdun, Uwe] Univ Vienna, Fac Comp Sci, A-1010 Vienna, Austria.
   [Harrison, Neil] Utah Valley Univ, Orem, UT USA.
C3 University of Groningen; University of Vienna; Utah System of Higher
   Education; Utah Valley University
RP van Heesch, U (corresponding author), Univ Groningen, Groningen, Netherlands.
EM uwe@vanheesch.net; paris@cs.rug.nl; uwe.zdun@univie.ac.at;
   Neil.Harrison@uvu.edu
RI Zdun, Uwe/AFR-2161-2022
OI Avgeriou, Paris/0000-0002-7101-0754
CR Alexander C., 1979, The Timeless Way of Building
   [Anonymous], 2011, ISO/IEC TR 29110-5-1-2, DOI DOI 10.1109/IEEESTD.2011.6129467
   [Anonymous], 1996, PATTERN ORIENTED SOF
   [Anonymous], 2000, IEEE STD, V1471-2000, P1
   [Anonymous], 1995, PROFESSIONAL COMPUTI
   Avgeriou P., 2005, P 10 EUR C PATT LANG
   Babar Muhammad Ali, 2007, Second Workshop on Sharing and Reusing architectural Knowledge Architecture, Rationale, and Design Intent (SHARK/ADI'07: ICSE Workshops 2007), DOI 10.1109/SHARK-ADI.2007.1
   Bass L., 2013, SOFTWARE ARCHITECTUR
   Boehm Barry., 2005, FDN EMPIRICAL SOFTWA
   Bosch J, 2004, LECT NOTES COMPUT SC, V3047, P194
   Clements P., 2002, DOCUMENTING SOFTWARE
   Cook T. D., 1979, Quasi-experimentation: Design analysis issues for field settings
   Glaser B. G., 1967, DISCOVERY GROUNDED T, DOI 10.1515/9783111660211/html
   Goldstein G., 2000, HDB PSYCHOL ASSESSME
   Harrison NB, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P147, DOI 10.1109/WICSA.2008.18
   Harrison NB, 2007, IEEE SOFTWARE, V24, P38, DOI 10.1109/MS.2007.124
   Hillside Europe e.V, 2009, EUR C PATT LANG PROG
   Hoorn JF, 2011, J SYST SOFTWARE, V84, P1424, DOI 10.1016/j.jss.2010.11.909
   Jansen A, 2008, J SYST SOFTWARE, V81, P536, DOI 10.1016/j.jss.2007.08.025
   Jansen A, 2006, 5TH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P109
   JBoss.org, 2011, COMM DRIV OP SOURC M
   Jedlitschka A, 2005, 2005 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING (ISESE), PROCEEDINGS, P92, DOI 10.1109/ISESE.2005.1541818
   Kazman R., 1999, Automated Software Engineering, V6, P107, DOI 10.1023/A:1008781513258
   Kitchenham BA, 2002, IEEE T SOFTWARE ENG, V28, P721, DOI 10.1109/TSE.2002.1027796
   Koschke R., 2009, Software Engineering, P140, DOI DOI 10.1007/978-3-540-95888-8
   Krikhaar R., 1999, Proceedings IEEE International Conference on Software Maintenance - 1999 (ICSM'99). `Software Maintenance for Business Change' (Cat. No.99CB36360), P371, DOI 10.1109/ICSM.1999.792635
   KRUCHTEN PB, 1995, IEEE SOFTWARE, V12, P42, DOI 10.1109/52.469759
   Liu J., 2002, RES PROJECT ANAL JBO
   O'Gorman T.W., 2004, APPL ADAPTIVE STAT M
   Schmidt DC, 2003, PROC INT CONF SOFTW, P694, DOI 10.1109/ICSE.2003.1201256
   STEVENS SS, 1946, SCIENCE, V103, P677, DOI 10.1126/science.103.2684.677
   Sun Microsystems, 2011, COR J2EE PATT
   Trochim W.M.K., 2007, RES METHODS KNOWLEDG
   Tyree J, 2005, IEEE SOFTWARE, V22, P19, DOI 10.1109/MS.2005.27
   University of Groningen, 2011, OP PATT REP
   van Heesch U., 2009, P 14 EUR C PATT LANG
   Ven J., 2006, DESIGN DECISIONS BRI, P329
   Wohlin C., 2000, EXPT SOFTWARE ENG IN
   Yan H, 2004, PROC INT CONF SOFTW, P470, DOI 10.1109/ICSE.2004.1317469
   Zimmerman O, 2008, SEVENTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE, PROCEEDINGS, P157, DOI 10.1109/WICSA.2008.19
   Zimmermann O, 2007, LECT NOTES COMPUT SC, V4749, P81
NR 41
TC 9
Z9 10
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2012
VL 77
IS 5
BP 551
EP 576
DI 10.1016/j.scico.2011.11.008
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 917OQ
UT WOS:000302188000001
OA Green Published
DA 2024-07-18
ER

PT J
AU Rodríguez, MD
   Favela, J
AF Rodriguez, Marcela D.
   Favela, Jesus
TI Assessing the SALSA architecture for developing agent-based ambient
   computing applications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ubiquitous computing; Autonomous agents; Middleware; Evaluation
ID HEALTH-CARE
AB We have proposed the use of autonomous agents for coping with some of the challenges of creating ambient computing systems. The motivation of this research is that ambient computing environments are characterized by the distribution, reactivity, collaboration and adaptation of their artifacts, which are also characteristics attributed to software agents. To assist developers in creating the software entities of an ambient computing environment, the Simple Agent Library for Smart Ambients (SALSA) was created. The SALSA middleware and architecture enables the creation of autonomous agents reactive to the context of the ambient computing environment. SALSA agents can represent users, resources, or wrap complex system functionality of the environment. The aim of this paper is to provide evidence that SALSA facilitates the implementation of ambient computing services through autonomous agents. Unfortunately, the literature on Ubicomp development frameworks has, aside from a few exceptions, not reported experimental evaluation of their usability. The evaluations of Ubicomp development platforms have not addressed this issue since their evaluations have been mostly focused on performance and to prove feasibility. We present the results of an empirical evaluation conducted to assess the use of SALSA. This study included in-lab programming experiments and design exercises to evaluate the programming facilities provided by SALSA agents. Even though for some of the evaluation participants the use of autonomous agents as an abstraction for the development of ubiquitous computing systems was not innate, the evaluation results demonstrate that the execution model of SALSA and its facilities to implement Ubicomp systems are comprehensible. (C) 2011 Published by Elsevier B.V.
C1 [Rodriguez, Marcela D.] UABC, Fac Ingn, Mexicali, Baja California, Mexico.
   [Favela, Jesus] CICESE, Ensenada, Baja California, Mexico.
C3 Universidad Autonoma de Baja California; CICESE - Centro de
   Investigacion Cientifica y de Educacion Superior de Ensenada
RP Rodríguez, MD (corresponding author), UABC, Fac Ingn, Mexicali, Baja California, Mexico.
EM marcerod@uabc.mx; favela@cicese.mx
RI Favela, Jesus/AAJ-7086-2021; Rodríguez, Marcela D./H-4185-2019
OI Favela, Jesus/0000-0003-2967-9654; Rodríguez, Marcela
   D./0000-0002-6943-7812
CR BARKHUUS L, 2007, ACM CHI 07 ALT CHI
   Berander P, 2004, 2004 INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING, PROCEEDINGS, P167
   Bolchini C, 2007, SIGMOD REC, V36, P19, DOI 10.1145/1361348.1361353
   BOTIA JA, 2008, P IEEE WORKSH EN TEC, P159
   Cabri G, 2005, FOURTEENTH IEEE INTERNATIONAL WORKSHOPS ON ENABLING TECHNOLOGIES: INFRASTRUCTURE FOR COLLABORATIVE ENTERPRISES, PROCEEDINGS, P39, DOI 10.1109/WETICE.2005.55
   CAMPO C, 2002, WORKSH UB AG INT JOI
   Carver J, 2003, NINTH INTERNATIONAL SOFTWARE METRICS SYMPOSIUM, PROCEEDINGS, P239
   Castro LA, 2008, IEEE T SYST MAN CY C, V38, P861, DOI 10.1109/TSMCC.2008.2001572
   Chesta C., 2004, PSYCHNOLOGY, V2, P123
   DAVIES F, 1991, MANAGE SCI, V35, P982
   Davies N., 2002, IEEE Pervasive Computing, V1, P26, DOI 10.1109/MPRV.2002.993142
   EDWARDS WK, 2003, ACM P C HUM FACT COM, P297
   Favela J, 2004, IEEE T INF TECHNOL B, V8, P279, DOI 10.1109/TITB.2004.834391
   Gómez-Sanz JJ, 2006, LECT NOTES COMPUT SC, V3950, P218
   Grimm R, 2004, IEEE PERVAS COMPUT, V3, P22, DOI 10.1109/MPRV.2004.1321024
   Gu T, 2005, J NETW COMPUT APPL, V28, P1, DOI 10.1016/j.jnca.2004.06.002
   Jennings NR, 2001, COMMUN ACM, V44, P35, DOI 10.1145/367211.367250
   Kifor T, 2006, IEEE INTELL SYST, V21, P38, DOI 10.1109/MIS.2006.119
   Kindberg T., 2002, IEEE Pervasive Computing, V1, P70, DOI 10.1109/MPRV.2002.993146
   KLEMMER SR, 2004, ACM P C HUM FACT COM, P399
   Kulkarni D, 2010, IEEE T SOFTWARE ENG, V36, P184, DOI 10.1109/TSE.2010.11
   LAUKKANEN M, 2002, LECT NOTES ARTIF INT, V2182, P36
   Moreno A, 2006, IEEE INTELL SYST, V21, P63, DOI 10.1109/MIS.2006.108
   Muñoz MA, 2003, COMPUTER, V36, P38, DOI 10.1109/MC.2003.1231193
   PANDEY M, 2008, P 2008 IEEE INT C SE, P361
   PERRY DE, 2000, ACM P C FUT SOFTW EN, P345
   Rodríguez M, 2004, LECT NOTES ARTIF INT, V3034, P64
   Rodríguez MD, 2008, STUD COMPUT INTELL, V107, P117
   Rodríguez MD, 2005, AI COMMUN, V18, P201
   Roman M., 2002, IEEE Pervasive Computing, V1, P74, DOI 10.1109/MPRV.2002.1158281
   ROUVOY R, 2008, IEEE DISTRIBUTED SYS, V8
   Saldaña-Jimenez D, 2009, LECT NOTES COMPUT SC, V5872, P622, DOI 10.1007/978-3-642-05290-3_77
   Singh S, 2004, LECT NOTES COMPUT SC, V3320, P58
   Stevenson G, 2010, IEEE PERVAS COMPUT, V9, P28, DOI 10.1109/MPRV.2009.90
   Vieira-Marques PM, 2006, IEEE INTELL SYST, V21, P47, DOI 10.1109/MIS.2006.120
   VILLATE Y, 2002, ACM P MOB NETW APPL, P315
   Viterbo J, 2009, IEEE ANNU SOFTW ENG, P52, DOI 10.1109/SEW.2008.7
   Wooldridge MJ, 1999, IEEE INTERNET COMPUT, V3, P20, DOI 10.1109/4236.769419
NR 38
TC 11
Z9 12
U1 0
U2 12
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2012
VL 77
IS 1
SI SI
BP 46
EP 65
DI 10.1016/j.scico.2010.12.003
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 834JQ
UT WOS:000295956000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Villazón, A
   Binder, W
   Moret, P
   Ansaloni, D
AF Villazon, Alex
   Binder, Walter
   Moret, Philippe
   Ansaloni, Danilo
TI Comprehensive aspect weaving for Java
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 6th International Conference on the Principles and Practice of
   Programming in Java (PPPJ 2008)
CY SEP 08-11, 2008
CL Modena, ITALY
DE Aspect-oriented programming; Aspect weaving; Bytecode instrumentation;
   Profiling; Debugging; Detecting memory leaks; Recreating crashing
   conditions; Java Virtual Machine
AB Aspect-oriented programming (AOP) has been successfully applied to application code thanks to techniques such as Java bytecode instrumentation. Unfortunately, with existing AOP frameworks for Java such as AspectJ, aspects cannot be woven into the standard Java class library. This restriction is particularly unfortunate for aspects that would benefit from comprehensive aspect weaving with complete method coverage, such as profiling or debugging aspects. In this article we present MAJOR, a new tool for comprehensive aspect weaving, which ensures that aspects are woven into all classes loaded in a Java Virtual Machine, including those in the standard Java class library. MAJOR includes the pluggable module CARAJillo, which supports efficient access to a complete and customizable calling context representation. We validate our approach with three case studies. Firstly, we weave existing profiling aspects with MAJOR which otherwise would generate incomplete profiles. Secondly, we introduce an aspect for memory leak detection that also benefits from comprehensive weaving. Thirdly, we present an aspect subsuming the functionality of ReCrash, an existing tool based on low-level bytecode instrumentation techniques that generates unit tests to reproduce program failures. Our aspect-based tools are concisely implemented in a few lines of code, and leverage MAJOR and CARAJillo for comprehensive aspect weaving and for efficient access to calling context information. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Villazon, Alex; Binder, Walter; Moret, Philippe; Ansaloni, Danilo] Univ Lugano, Fac Informat, CH-6900 Lugano, Switzerland.
C3 Universita della Svizzera Italiana
RP Villazón, A (corresponding author), Univ Privada Boliviana, Av Capitan Ustariz Km 6-5, Cochabamba, Plurinational, Bolivia.
EM alex.villazon@usi.ch; walter.binder@usi.ch; philippe.moret@usi.ch;
   danilo.ansaloni@usi.ch
RI Villazón, Alex/AGR-6972-2022; Villazon, Alex/AAK-3937-2020
OI Villazón, Alex/0000-0001-8428-3420; Binder, Walter/0000-0002-2477-2182
CR Allan C, 2005, ACM SIGPLAN NOTICES, V40, P345, DOI 10.1145/1103845.1094839
   Ammons Glenn, 1997, P ACM SIGPLAN 97 C P, P85, DOI [10.1145/258915, DOI 10.1145/258915]
   Artzi S, 2008, LECT NOTES COMPUT SC, V5142, P542, DOI 10.1007/978-3-540-70592-5_23
   AVGUSTINOV P, 2005, PLDI 05, P117
   Avgustinov P., 2005, AOSD 05, P87, DOI DOI 10.1145/1052898.1052906
   Binder W., 2007, P 5 INT S PRINC PRAC, DOI DOI 10.1145/1294325.1294344
   BINDER W, 2009, PPPJ 09, P111, DOI DOI 10.1145/1596655.1596672
   Binder W, 2009, SOFTWARE PRACT EXPER, V39, P47, DOI 10.1002/spe.890
   BLACKBURN SM, 2006, OOPSLA 06, P169
   BOCKISCH C, 2006, OOPSLA 2006, P125
   BOCKISCH C, 2006, OOPSLA 06, P109
   Chiba S, 2000, LECT NOTES COMPUT SC, V1850, P313
   DAHM M, 1999, JAVA INFORM TAGE 199
   DMITRIEV M, 2004, WOSP 04, P139
   DUFOUR B, 2003, OOPSLA 03, P306
   DUFOUR B, 2004, OOPSLA 04, P150
   Dujmovic J., 2004, Software Engineering Notes, V29, P261, DOI 10.1145/974043.974085
   FACTOR M, 2004, OOPSLA 04, P288
   Feng HHP, 2003, P IEEE S SECUR PRIV, P62, DOI 10.1109/SECPRI.2003.1199328
   Gregg D, 2005, CONCURR COMP-PRACT E, V17, P757, DOI 10.1002/cpe.846
   HAUPT M, 2005, VEE 05 P 1 ACM USENI, P142
   HEINE DL, 2006, ICSE 06, P252
   HILSDALE E, 2004, AOSD 04, P26
   HIRSCHFELD R, 2003, NODE 02 REV PAP INT, P216
   *JBOSS, OP SOURC MIDDL SOFTW
   *JIK RVM, RES VIRT MACH
   Jump Maria, 2007, POPL 2007. The 34th ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P31, DOI 10.1145/1190216.1190224
   Kiczales G, 1997, LECT NOTES COMPUT SC, V1241, P220, DOI 10.1007/BFb0053381
   Kiczales Gregor, 2001, LNCS, V2072, P327, DOI DOI 10.1007/3-540-45337-718
   KUNG C, 2007, COMP SOFTW APPL C 20, P23
   Laddad R., 2003, ASPECTJ ACTION PRACT
   Lindholm Tim., 1999, JAVA VIRTUAL MACHINE, V2nd
   Mitchell N, 2003, LECT NOTES COMPUT SC, V2743, P351
   MORET P, 2009, PEPM 09, P151
   *OW2 CONS, ASM JAV BYT ENG LIBR
   Pearce DJ, 2007, SOFTWARE PRACT EXPER, V37, P747, DOI 10.1002/spe.788
   Popovici Andrei., 2003, AOSD 03, P100
   Spivey JM, 2004, SOFTWARE PRACT EXPER, V34, P249, DOI 10.1002/spe.562
   *STAND PERF EV COR, 1998, SPEC JVM98 BENCHM
   *SUN MICR INC, JVM TOOL INT JVMTI V
   *SUN MICR INC, JAV VIRT MACH PROF I
   Suvee Davy., 2003, AOSD 03 P 2 INT C AS, P21, DOI DOI 10.1145/643603.643606.DEVELOPMENT
   Tanter E, 2002, LECT NOTES COMPUT SC, V2487, P283
   TILEVICH E, 2006, GPCE 06, P89
   Vallée-Rai R, 2000, LECT NOTES COMPUT SC, V1781, P18
   VILLAZON A, 2009, GPCE 09, P85
   VILLAZON A., 2008, P 6 INT S PRINCIPLES, P159
   Villazón A, 2009, AOSD'09: 8TH INTERNATIONAL CONFERENCE ON ASPECT-ORIENTED SOFTWARE DEVELOPMENT, P63
   Whaley John., 2000, JAVA 00, P78
   Xu GQ, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P151, DOI 10.1145/1368088.1368110
NR 50
TC 4
Z9 4
U1 1
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2011
VL 76
IS 11
SI SI
BP 1015
EP 1036
DI 10.1016/j.scico.2010.04.007
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 791ND
UT WOS:000292671000004
OA Bronze
DA 2024-07-18
ER

PT J
AU Male, C
   Pearce, DJ
   Potanin, A
   Dymnikov, C
AF Male, Chris
   Pearce, David J.
   Potanin, Alex
   Dymnikov, Constantine
TI Formalisation and implementation of an algorithm for bytecode
   verification of @NonNull types
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE NonNull types; Bytecode verification; Static analysis; Java
AB Java's annotation mechanism allows us to extend its type system with non-null types. Checking such types cannot be done using the existing bytecode verification algorithm. We extend this algorithm to verify non-null types using a novel technique that identifies aliasing relationships between local variables and stack locations in the JVM. We formalise this for a subset of Java Bytecode and report on experiences using our implementation. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Male, Chris; Pearce, David J.; Potanin, Alex; Dymnikov, Constantine] Victoria Univ Wellington, Sch Engn & Comp Sci, Nz, New Zealand.
RP Pearce, DJ (corresponding author), Victoria Univ Wellington, Sch Engn & Comp Sci, Nz, New Zealand.
EM malechri@ecs.vuw.ac.nz; djp@ecs.vuw.ac.nz; alex@ecs.vuw.ac.nz;
   dymnikkost@ecs.vuw.ac.nz
OI Pearce, David/0000-0003-4535-9677; Potanin, Alex/0000-0002-4242-2725
FU Victoria University of Wellington
FX Thanks to Lindsay Groves, James Noble, Paul H.J. Kelly, Stephen Nelson,
   and Neil Leslie for many excellent comments on earlier drafts. This work
   is supported by the University Research Fund of Victoria University of
   Wellington.
CR Aiken A, 1999, SCI COMPUT PROGRAM, V35, P79, DOI 10.1016/S0167-6423(99)00007-6
   AIKEN A, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P329, DOI 10.1109/LICS.1992.185545
   Aiken Alexander., 1993, Proceedings of the conference on Functional programming languages and computer architecture, P31
   ANDREAE C, 2006, P 21 ANN ACM SIGPLAN, P57
   [Anonymous], P ACM WORKSH HOT TOP
   [Anonymous], PLDI 98
   BERNDL M, 2003, P ACM C PROGR LANG D, P196
   Bertelsen P, 2000, FUTURE GENER COMP SY, V16, P841, DOI 10.1016/S0167-739X(99)00094-1
   BLOCH J, 2001, JAVA SERIES
   Bond MD, 2007, OOPSLA: 22ND INTERNATIONAL CONFERENCE ON OBJECT-ORIENTED PROGRAMMING, SYSTEMS, LANGUAGES, AND APPLICATIONS, PROCEEDINGS, P405
   Bourdoncle F., 1993, Formal Methods in Programming and Their Applications International Conference Proceedings, P128, DOI 10.1007/BFb0039704
   Bracha G., 2004, P WORKSH REV DYN LAN
   CHALIN P, 2006, P WORKSH FORM TECHN
   Chalin P, 2007, LECT NOTES COMPUT SC, V4609, P227
   CHANG BYE, 2005, P VMCAI, P147
   CHIN B, 2006, P EUR S PROGR ESOP
   CHOI JD, 1999, P ACM SIGPLAN SIGSOF, P21
   Cielecki Maciej., 2006, Proceedings of the 4th International Symposium on Principles and Practice of Programming in Java (PPPJ), P135, DOI 10.1145/1168054
   Coglio A, 2004, CONCURR COMP-PRACT E, V16, P647, DOI 10.1002/cpe.798
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   CYTRON R, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P25, DOI 10.1145/75277.75280
   Eifrig J., 1995, P 10 ANN C OBJECT OR, P169
   Ekman T, 2007, J OBJECT TECHNOL, V6, P455, DOI 10.5381/jot.2007.6.9.a23
   ERNST M, 2008, ANNOTATIONS JAVA TYP, P308
   Fahndrick M., 2003, P 18 ACM SIGPLAN C O, P302, DOI DOI 10.1145/949305.949332
   Fecht C, 1998, LECT NOTES COMPUT SC, V1381, P90, DOI 10.1007/BFb0053565
   FECHT C, 1996, P STAT AN S, P189
   FLANAGAN C, 2002, ACM C PROGR LANG DES, P234
   Foster J. S., 2002, SIGPLAN Notices, V37, P1, DOI 10.1145/543552.512531
   FOSTER JS, 1999, P 1999 ACM SIGPLAN C, P192
   FOSTER JS, 2000, P STAT AN S JUN, P175
   GERLEK MP, 1995, ACM T PROGR LANG SYS, V17, P85, DOI 10.1145/200994.201003
   HAVLAK P, 1994, P WORKSH LANG COMP P, P477
   Heintze N., 1994, Proceedings of the 1994 ACM Conference on LISP and Functional Programming, P306, DOI 10.1145/182409.182495
   HORWITZ S, 1987, ACTA INFORM, V24, P679, DOI 10.1007/BF00282621
   Hovemeyer D., 2005, ACM SIGSOFT Software Engineering Notes, P13
   Hovemeyer D, 2007, PASTE'07 PROCEEDINGS OF THE 2007 ACM SIGPLAN- SIGSOFT WORKSHOP ON PROGRAM ANALYSIS FOR SOFTWARE TOOLS & ENGINEERING, P9, DOI 10.1145/1251535.1251537
   Hovemeyer David., 2004, ACM Conference on Object-Oriented Programming Systems, Lan-guages, and Applications, OOPSLA '04, P132
   Hsieh CHA, 1996, PROCEEDINGS OF THE 29TH ANNUAL IEEE/ACM INTERNATIONAL SYMPOSIUM ON MICROARCHITECTURE - MICRO-29, P90, DOI 10.1109/MICRO.1996.566453
   Hubert L, 2008, LECT NOTES COMPUT SC, V5051, P132, DOI 10.1007/978-3-540-68863-1_9
   Hubert Laurent., 2008, P 8 ACM SIGPLAN SIGS, P36, DOI [DOI 10.1145/1512475.1512484, 10.1145/1512475.1512484]
   ISHIZAKI K, 2003, P ACM SIGPLAN C OBJ, P187
   JORGENSEN J, 2003, IMPROVING PRECISION
   Kaes S., 1992, Proceedings of the 1992 ACM Conference on Lisp and Functional Programming, P193, DOI 10.1145/141471.141540
   KLEIN G, 2003, VERIFIED BYTECODE SU
   Leroy X, 2003, J AUTOM REASONING, V30, P235, DOI 10.1023/A:1025055424017
   Lhoták O, 2006, LECT NOTES COMPUT SC, V3923, P47
   LINDHOLM T, 1999, JAVA SERIES
   Male C, 2008, LECT NOTES COMPUT SC, V4959, P229
   MIECZNIKOWSKI J, 2002, P C COMP CONSTR CC, P153
   OCALLAHAN R, 1999, P 26 ACM S PRINC PRO, P70
   OXHOJ N, 1992, LECT NOTES COMPUT SC, V615, P329, DOI 10.1007/BFb0053045
   Pearce DJ, 2008, ACM T PROGR LANG SYS, V30, DOI 10.1145/1290520.1290524
   Pearce DJ, 2004, SOFTWARE QUAL J, V12, P311, DOI 10.1023/B:SQJO.0000039791.93071.a2
   PLEVYAK J, 1994, P 9 ANN C OBJ OR PRO, P324
   Pominville P., 2001, Compiler Construction. 10th International Conference, CC 2001. Held as Part of the Joint European Conferences on Theory and Practice of Software, ETAPS 2001. Proceedings (Lecture Notes in Computer Science Vol.2027), P334
   Pusch C, 1999, LECT NOTES COMPUT SC, V1579, P89
   ROUNTEV A, 2001, P C OBJ OR PROGR SYS, P43
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Spoto F, 2008, SEFM 2008: SIXTH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, PROCEEDINGS, P21, DOI 10.1109/SEFM.2008.8
   SUTTER BD, 2004, P EUR C OBJ OR PROGR, P585
   WANG T, 2001, P ECOOP, P99
   [No title captured]
   [No title captured]
NR 64
TC 0
Z9 0
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL 1
PY 2011
VL 76
IS 7
BP 587
EP 608
DI 10.1016/j.scico.2010.10.004
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 750YO
UT WOS:000289584500004
DA 2024-07-18
ER

PT J
AU Siek, JG
   Lumsdaine, A
AF Siek, Jeremy G.
   Lumsdaine, Andrew
TI A language for generic programming in the large
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Programming language design; Generic programming; Generics;
   Polymorphism; Concepts; Associated types; Software reuse; Type classes;
   Modules; Signatures; Functors; Virtual types
ID INFERENCE
AB Generic programming is an effective methodology for developing reusable software libraries. Many programming languages provide generics and have features for describing interfaces, but none completely support the idioms used in generic programming. To address this need we developed the language g. The central feature of g, is the concept, a mechanism for organizing constraints on generics that is inspired by the needs of modern C++ libraries. g provides modular type checking and separate compilation (even of generics). These characteristics support modular software development, especially the smooth integration of independently developed components. In this article we present the rationale for the design of g. and demonstrate the expressiveness of g, with two case studies: porting the Standard Template Library and the Boost Graph Library from C++ to g,. The design of g. shares much in common with the concept extension proposed for the next C++ Standard (the authors participated in its design) but there are important differences described in this article. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Siek, Jeremy G.] Univ Colorado, Dept Elect & Comp Engn, Boulder, CO 80309 USA.
   [Lumsdaine, Andrew] Indiana Univ, Dept Comp Sci, Bloomington, IN 47405 USA.
C3 University of Colorado System; University of Colorado Boulder; Indiana
   University System; Indiana University Bloomington
RP Siek, JG (corresponding author), Univ Colorado, Dept Elect & Comp Engn, Boulder, CO 80309 USA.
EM jeremy.siek@colorado.edu; lums@osl.iu.edu
RI Siek, Jeremy Graham/ABG-8845-2020
OI Lumsdaine, Andrew/0000-0002-9153-6622; Siek, Jeremy/0000-0002-9894-4856
FU NSF [EIA-0131354, CCF-0702362]; Lilly Endowment
FX We thank Ronald Garcia, Jeremiah Willcock, Doug Gregor, Jaakko Jarvi,
   Dave Abrahams, Dave Musser, and Alexander Stepanov for discussions and
   collaborations that informed this work. This work was supported by NSF
   grants EIA-0131354 and CCF-0702362, and by a grant from the Lilly
   Endowment.
CR Alet F, 2005, J PHYS SOC JPN, V74, P30, DOI 10.1143/JPSJS.74S.30
   [Anonymous], 1974, LNCS
   [Anonymous], 2005, P GT2005 ASME TURB E
   [Anonymous], POPL 96
   [Anonymous], 2003, 148822003 ISOIEC
   AUSTERN M, 2004, N1711040151 INF TECH
   AUSTERN MH, 1998, PROFESSIONAL COMPUTI
   Backhouse R, 1999, LECT NOTES COMPUT SC, V1608, P28
   Bellman R., 1958, Q APPL MATH, V16, P87
   Boissonnat J.-D., 1999, Proceedings of the Fifteenth Annual Symposium on Computational Geometry, P421, DOI 10.1145/304893.305001
   Bourbaki N., 1968, Actualites Scientifiques et Industrielles, V1337
   Bruce KB, 1995, LECT NOTES COMPUT SC, V952, P27
   CANNING P, 1989, 4 INT C FUNCT PROGR, P273
   Chakravarty MMT, 2005, ACM SIGPLAN NOTICES, V40, P241, DOI 10.1145/1090189.1086397
   Clements P., 2002, Software product lines
   Dawes Beman., BOOST C LIB
   Dijkstra E. W., 1959, NUMER MATH, V1, P269, DOI [10.1007/BF01386390, DOI 10.1007/BF01386390]
   DITCHFIELD GJ, 1996, OVERVIEW CFORALL
   DOWNEY PJ, 1980, J ACM, V27, P758, DOI 10.1145/322217.322228
   Dreyer D, 2007, CONFERENCE RECORD OF POPL 2007: THE 34TH ACM SIGPLAN SIGACT SYMPOSIUM ON PRINCIPLES OF PROGAMMING LANGUAGES, P63
   EMIR B, 2006, ECOOP 2006 OBJ OR PR
   ERNST E, 2001, LNCS, V2072, P00303
   FREDERICK P, 1978, MYTHICAL MAN MONTH E
   GARCIA R, 2003, OOPSLA 03, P115
   Garcia R, 2007, J FUNCT PROGRAM, V17, P145, DOI 10.1017/S0956796806006198
   Girard Jean-Yves, 1972, THESIS U PARIS 7 PAR
   Goguen J.A., 1992, APPL ALGEBRAIC SPECI
   GREGOR D, 2006, P ACM SIGPLAN C OBJ
   GROSSMAN D, 2002, P ACM C PROGR LANG D, P282, DOI DOI 10.1145/512529.512563
   Hall CV, 1996, ACM T PROGR LANG SYS, V18, P109, DOI 10.1145/227699.227700
   HARPER R, 1995, P 22 ACM S PRINC PRO, P130
   Hill Gary, 1999, EXHIBITION CATALOGUE
   Hoare C.A.R., 1961, Communications of the ACM, V4, P321, DOI [DOI 10.1145/366622.366647, DOI 10.1145/366622.366644]
   Horn A, 1951, J SYMBOLIC LOGIC, V16, P14, DOI DOI 10.2307/2268661
   Igarashi A, 2006, ACM T PROGR LANG SYS, V28, P795, DOI 10.1145/1152649.1152650
   *ISO, 1997, ISO AD 95 REF MAN
   JARVI J, 2004, CONCEPTS LINGUISTIC
   JARVI J, 2003, N1478030061 INF TECH
   JARVI J, 2005, OOPSLA 05, P1
   JARVI J, 2006, PLDI 06
   JAZAYERI M, 1998, REPORT DAGSTUHL SEMI
   JOHNSON DB, 1977, J ACM, V24, P1, DOI 10.1145/321992.321993
   JONES MP, 1994, DISTINGUISHED DISSER
   Jones S.P., 1997, HASK WORKSH, P1
   Jones SP, 2007, J FUNCT PROGRAM, V17, P1, DOI 10.1017/S0956796806006034
   Jones SimonPeyton., 2002, Haskell 98 Language and Libraries
   KAPUR D, 1981, P C FUNCT PROGR LANG
   KENNEDY A, 2005, OOPSLA, P21
   KERSHENBAUM A, 1988, 8810 RENSS POL I
   Kothe U., 1999, HDB COMPUTER VISION, V3
   KRISTENSEN BB, 1983, POPL 1983, P285
   LEBOTLAN D, 2003, P 8 ACM SIGPLAN INT, P27, DOI DOI 10.1145/944705.944709
   LEROY X, 2003, OBJECTIVE CAML DOCUM
   LISKOV B, 1977, COMMUN ACM, V20, P564, DOI 10.1145/359763.359789
   LISKOV B, 1979, LCSTR225 MIT
   MacQueen D., 1988, Proceedings of the 1988 ACM Conference on LISP and Functional Programming, P212, DOI 10.1145/62678.62704
   MADSEN OL, 1989, OOPSLA 89, P397
   MAGNUSSON B, 1991, J OBJECT ORIENTED PR, V4
   McIlroy M.D., 1969, SOFTWARE ENG REPORT, V1, P138
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Milner R., 1990, The Definition of Standard ML
   MITCHELL JC, 1988, INFORM COMPUT, V76, P211, DOI 10.1016/0890-5401(88)90009-0
   Musser DR, 1997, SOFTWARE PRACT EXPER, V27, P983, DOI 10.1002/(SICI)1097-024X(199708)27:8<983::AID-SPE117>3.0.CO;2-#
   MUSSER DR, 1989, LECT NOTES COMPUT SC, V358, P13
   MUSSER DR, 1987, US AD 1987 INT AD C, P216
   MYERS NC, 1995, TRAITS NEW USEFUL TE
   NELSON G, 1980, J ACM, V27, P356, DOI 10.1145/322186.322198
   Odersky M., 2004, Tech. Rep. IC/2004/64
   ODERSKY M, 2003, LNCS
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pitt WR, 2001, BIOINFORMATICS, V17, P729, DOI 10.1093/bioinformatics/17.8.729
   POLL E, 1999, 1199 U KENT CANT COM
   PRIM RC, 1957, AT&T TECH J, V36, P1389, DOI 10.1002/j.1538-7305.1957.tb01515.x
   RANDELL B, 1979, INT C SOFTW ENG P 4, P1
   Remy D, 1998, THEOR PRACT OBJ SYST, V4, P27, DOI 10.1002/(SICI)1096-9942(1998)4:1<27::AID-TAPO3>3.0.CO;2-4
   Reynolds J. C., 1983, Information Processing 83. Proceedings of the IFIP 9th World Computer Congress, P513
   Shan CC, 2004, ACM SIGPLAN NOTICES, V39, P15, DOI 10.1145/997140.997142
   SIEK J, 2005, THESIS INDIANA U
   SIEK JG, 2002, BOOST GRAPH LIBRARY
   SIEK JG, 2005, GPCE 05
   *SIL GRAPH INC, 2004, SGI IMPL STAND TEMPL
   Simon Peyton Jones  M.J., 1997, P 2 HASK WORKSH
   STEPANOV AA, 1994, X3J16940095 ISO PROG
   STROUSTRUP B, 1988, USENIX C C
   Thorup KK, 1997, LECT NOTES COMPUT SC, V1241, P444
   Tiuryn J, 2002, INFORM COMPUT, V179, P1, DOI 10.1006/inco.2001.2950
   Tofte M, 1997, INFORM COMPUT, V132, P109, DOI 10.1006/inco.1996.2613
   TORGERSEN CP, 2004, SAC 04, P1289
   TORGERSEN M, 1998, FOOL 5
   WADLER P, 1989, CONFERENCE RECORD OF THE SIXTEENTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P60, DOI 10.1145/75277.75283
   WEHR S, 2007, LNCS
   [No title captured]
   [No title captured]
NR 93
TC 3
Z9 6
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2011
VL 76
IS 5
SI SI
BP 423
EP 465
DI 10.1016/j.scico.2008.09.009
PG 43
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 748JN
UT WOS:000289387000005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Bourdev, L
   Järvi, J
AF Bourdev, Lubomir
   Jaervi, Jaakko
TI Efficient run-time dispatching in generic programming with minimal code
   bloat
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Generic programming; C plus plus templates; Template bloat; Template
   metaprogramming
AB Generic programming with C++ templates results in efficient but inflexible code: efficient, because the exact types of inputs to generic functions are known at compile time; inflexible because they must be known at compile time. We show how to achieve run-time polymorphism without compromising performance by instantiating the generic algorithm with a comprehensive set of possible parameter types, and choosing the appropriate instantiation at run time. Applying this approach naively can result in excessive template bloat: a large number of template instantiations. many of which are identical at the assembly level. We show practical examples of this approach quickly approaching the limits of the compiler. Consequently, we combine this method of run-time polymorphism for generic programming, with a strategy for reducing the number of necessary template instantiations. We report on using our approach in GIL, Adobe's open source Generic Image Library. We observed a notable reduction, up to 70% at times, in executable sizes of our test programs. This was the case even with compilers that perform aggressive template hoisting at the compiler level, due to significantly smaller dispatching code. The framework draws from both the generic and generative programming paradigms, using static metaprogramming to fine tune the compilation of a generic library. Our test bed. GIL, is deployed in a real world industrial setting, where code size is often an important factor. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Bourdev, Lubomir] Adobe Syst Inc, San Jose, CA 95110 USA.
   [Bourdev, Lubomir] EECS UC Berkeley, Berkeley, CA 94720 USA.
   [Jaervi, Jaakko] Texas A&M Univ, College Stn, TX 77843 USA.
C3 Adobe Systems Inc.; Texas A&M University System; Texas A&M University
   College Station
RP Bourdev, L (corresponding author), Adobe Syst Inc, 345 Pk Ave, San Jose, CA 95110 USA.
EM lbourdev@adobe.com; jarvi@cs.tamu.edu
FU NSF [CCF-0541014]
FX The second author was parially supported by the NSF grant CCF-0541014.
   The two authors are grateful for Hailin Jin for his contributions to GIL
   and insights on early stages of this work.
CR Abrahams D, 2004, C++ template metaprogramming: concepts, tools, and techniques from Boost and beyond
   *ADOB INC SOFTW TE, 2006, ADOB SOURC LIBR
   [Anonymous], STAND ECMA 367 EIFF
   [Anonymous], 2001, LCPC
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   AUSTERN MH, 1998, PROFESSIONAL COMPUTI
   boost, BOOST C LIBR
   Bourdev Lubomir., 2006, Generic Image Library
   CARROLL MD, 1995, DESIGNING CODING REU
   CZARNECKI K, 2000, LECT NOTES COMPUTER, V1766
   *ECMA, 2005, C LANG SPEC
   Fabri A, 2000, SOFTWARE PRACT EXPER, V30, P1167, DOI 10.1002/1097-024X(200009)30:11<1167::AID-SPE337>3.0.CO;2-B
   GLUCK R, 1996, SOFTWARE ENG SCI COM
   Gosling J., 2005, Java Language Specification, Vthird
   Gurtovoy Aleksey., 2002, The boost c++ metaprogramming library
   KAPUR D, 1992, RPI9220
   KARVONEN V, 2002, BOOST PREPROCESSOR L
   KENNEDY A, 2001, PLDI 01
   Kennedy K, 2005, P IEEE, V93, P387, DOI 10.1109/JPROC.2004.840447
   MUSSER DA, 1988, LECT NOTES COMPUTER, V358
   Pitt WR, 2001, BIOINFORMATICS, V17, P729, DOI 10.1093/bioinformatics/17.8.729
   SIEK J, 1998, P SIAM WORKSH OBJ ME
   Siek J., 2002, The Boost Graph Library: User Guide and Reference Manual
   SIEK JG, 1998, INT S COMP OBJ OR PA
   Stepanov A., 1994, HPL9434R1
   Veldhuizen T., 1995, C++ Report, V7, P36
   [No title captured]
NR 27
TC 4
Z9 4
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2011
VL 76
IS 4
SI SI
BP 243
EP 257
DI 10.1016/j.scico.2008.06.003
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 727WU
UT WOS:000287834500003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Russell, FP
   Mellor, MR
   Kelly, PHJ
   Beckmann, O
AF Russell, Francis P.
   Mellor, Michael R.
   Kelly, Paul H. J.
   Beckmann, Olav
TI DESOLA: An active linear algebra library using delayed evaluation and
   runtime code generation
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Runtime code generation; Delayed evaluation; Active libraries; Numerical
   libraries
ID SUBPROGRAMS; SET; PERFORMANCE
AB Active libraries can be defined as libraries which play an active part in the compilation, in particular, the optimisation of their client code. This paper explores the implementation of an active dense linear algebra library by delaying evaluation of expressions built using library calls, then generating code at runtime for the compositions that occur. The key optimisations in this context are loop fusion and array contraction.
   Our prototype C++ implementation, DESOLA, automatically fuses loops arising from different client calls, identifies unnecessary intermediate temporaries, and contracts temporary arrays to scalars. Performance is evaluated using a benchmark suite of linear solvers from ITL (Iterative Template Library), and is compared with MTL (Matrix Template Library), ATLAS (Automatically Tuned Linear Algebra) and IMKL (Intel Math Kernel Library). Excluding runtime compilation overheads (caching means they occur only on the first iteration), for larger matrix sizes, performance matches or exceeds MTL; when fusion of matrix operations occurs, performance exceeds that of ATLAS and IMKL (c) 2008 Elsevier B.V. All rights reserved.
C1 [Russell, Francis P.; Mellor, Michael R.; Kelly, Paul H. J.; Beckmann, Olav] Univ London Imperial Coll Sci Technol & Med, Dept Comp, London SW7 2AZ, England.
C3 Imperial College London
RP Russell, FP (corresponding author), Univ London Imperial Coll Sci Technol & Med, Dept Comp, 180 Queens Gate, London SW7 2AZ, England.
EM fpr02@doc.ic.ac.uk
OI Russell, Francis/0000-0001-5831-2259
FU EPSRC [EP/E002412-1]; EPSRC [EP/I00677X/1, EP/E002412/1] Funding Source:
   UKRI
FX This work was supported by the EPSRC through a DTA studentship and grant
   no. EP/E002412-1. We thank the anonymous referees for their very helpful
   and constructive feedback.
CR ASHBY TJ, 2004, LECT NOTES COMPUTER, V3149
   BACON DF, 1994, ACM COMPUT SURV, V26, P345, DOI 10.1145/197405.197406
   BECKMANN A, 2003, LECT NOTES COMPUTER, V3016
   BECKMANN O, 1998, LNCS, V1511
   Blackford LS, 2002, ACM T MATH SOFTWARE, V28, P135, DOI 10.1145/567806.567807
   CORNWALL JLT, 2007, LNCS
   CZARNECKI K, 2000, LNCS, V1766
   DARTE A, 1999, PACT 99
   DONGARRA J, 1996, 37996 TN
   DONGARRA JJ, 1988, ACM T MATH SOFTWARE, V14, P1, DOI 10.1145/42288.42291
   DONGARRA JJ, 1990, ACM T MATH SOFTWARE, V16, P1, DOI 10.1145/77626.79170
   ENGLER DR, 1996, POPL 96
   GAO GR, 1992, LECT NOTES COMPUTER, V757
   KENNEDY K, 2000, ICS 00
   Lawson C. L., 1979, ACM Transactions on Mathematical Software, V5, P324, DOI [10.1145/355841.355847, 10.1145/355841.355848]
   LEE LQ, ITERATIVE TEMPLATE L
   LEONE M, 1994, P 1994 ACM SIGPLAN W
   LINIKER P, 2002, LECT NOTES COMPUTER, V2400
   POLETTO M, 1997, P ACM SIGPLAN 97 C P
   RUSSELL FP, 2006, P 2 INT WORKSH LIBR
   SIEK JG, 1998, LECT NOTES COMPUTER, V1505
   SIEK JG, 1998, LECT NOTES COMPUTER, V1543
   Veldhuizen T., 1995, C++ Report, V7, P26
   Veldhuizen T., 1995, C++ Report, V7, P36
   Veldhuizen T. L., 1998, P SIAM WORKSH OBJ OR
   Whaley RC, 2001, PARALLEL COMPUT, V27, P3, DOI 10.1016/S0167-8191(00)00087-9
   WILSON RP, 1994, SIGPLAN NOTICES, V29, P31, DOI 10.1145/193209.193217
   Yi Q, 2004, INT J HIGH PERFORM C, V18, P237, DOI 10.1177/1094342004038956
   [No title captured]
NR 29
TC 4
Z9 4
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2011
VL 76
IS 4
SI SI
BP 227
EP 242
DI 10.1016/j.scico.2008.06.002
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 727WU
UT WOS:000287834500002
DA 2024-07-18
ER

PT J
AU Broy, M
AF Broy, Manfred
TI Multifunctional software systems Structured modeling and specification
   of functional requirements
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Functional specification; Multifunctional systems; Functional
   requirements; Service hierarchies; Interfaces
ID SERVICES
AB This paper deals with the structured specification of interface behavior of multifunctional systems which are systems that offer a variety of functions for different purposes and use cases It introduces a theory and first concepts of a methodology for the identification structured modeling and formalization of functional requirements of multifunctional systems Service hierarchies specify multifunctional systems in terms of their provided sub-functions called services together with their mutual relationships and dependencies A service hierarchy describes the functionality of multifunctional systems in a structured way Each service is specified independently and the specification is added to the service hierarchy Modes help to specify the feature interactions and by that functional dependencies between the services The approach is based on the Focus theory for modeling interface behavior and services (C) 2010 Elsevier B V All rights reserved
C1 Tech Univ Munich, Inst Informat, D-80290 Munich, Germany.
C3 Technical University of Munich
RP Broy, M (corresponding author), Tech Univ Munich, Inst Informat, D-80290 Munich, Germany.
CR [Anonymous], 2001, Specification and Development of Interactive Systems: FOCUS on Streams, Interfaces, and Refinement
   [Anonymous], 2000, Generative programming: methods, tools, and applications
   Apel S, 2010, SCI COMPUT PROGRAM, V75, P1022, DOI 10.1016/j.scico.2010.02.001
   Batory D, 2006, COMMUN ACM, V49, P45, DOI 10.1145/1183236.1183264
   Booch G., UNIFIED MODELING LAN
   Broy M, 2005, NATO SCI SER II-MATH, V195, P47
   Broy M, 2005, SCI COMPUT PROGRAM, V54, P213, DOI 10.1016/j.scico.2004.04.003
   Broy M, 2003, LECT NOTES COMPUT SC, V2767, P48
   Broy M, 2007, ACM T SOFTW ENG METH, V16, DOI 10.1145/1189748.1189753
   Broy M, 2006, COMPUTER, V39, P72, DOI 10.1109/MC.2006.358
   Calder M., 2000, 6 INT WORKSH FEAT IN
   Cockburn A, 2001, Writing effective use cases, the crystal collection for software professionals
   DEUBLER M, 2008, THESIS TU MUNCHEN
   Filman R., 2004, ASPECT ORIENTED SOFT
   Gibson P, 2000, LECT NOTES COMPUT SC, V1755, P155
   HAREL D, 1988, COMMUN ACM, V31, P514, DOI 10.1145/42411.42414
   *ITU T, 2004, Z 120 MESS SEQ CHART
   Jacobson I., 2003, J OBJECT TECHNOL, V2, P7
   KANG K, 90TR021 CMUSEI
   KRUGER I, 1999, P DIPES 98
   Mauw S, 1997, SDL '97 - TIME FOR TESTING, P291, DOI 10.1016/B978-044482816-3/50020-4
   NEJATI S, 2008, P FSE 08 NOV
   PARNAS DL, 1972, COMMUN ACM, V15, P1053, DOI 10.1145/361598.361623
   PREHOFER C, 2004, SOSYM
   Rittmann S, 2008, THESIS TU MUNCHEN
   SALZMANN C, 2002, THESIS TU MUNCHEN
   Schatz B., 2005, P INT WORKSH FORM AS, V160
   Schatz B., 2003, LNCS, V2885
   Zave P, 2001, FIFTH IEEE INTERNATIONAL SYMPOSIUM ON REQUIREMENTS ENGINEERING, PROCEEDINGS, P2
   Zave P, 2004, COMPUT NETW, V45, P645, DOI 10.1016/j.comnet.2004.03.006
   Zave P, 2003, MG COMP SCI, P353
   ZAVE P, 2005, LNCS, V3489, P298
   ZAVE P, 1997, ACM T SOFTWARE ENG M
   ZAVE P, 2001, P 2 IP TEL WORKSH NE, P176
   ZAVE P, 2007, P C PRINC SYST APPL
   [No title captured]
   [No title captured]
NR 37
TC 21
Z9 21
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2010
VL 75
IS 12
BP 1193
EP 1214
DI 10.1016/j.scico.2010.06.007
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 682WM
UT WOS:000284433700001
DA 2024-07-18
ER

PT J
AU Donaldson, AF
   Gay, SJ
AF Donaldson, Alastair F.
   Gay, Simon J.
TI Type inference and strong static type checking for Promela
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Promela; SPIN; Type checking; Type inference; Model checking
ID LANGUAGES
AB The SPIN model checker and its specification language Promela have been used extensively in industry and academia to check the logical properties of distributed algorithms and protocols. Model checking with SPIN involves reasoning about a system via an abstract Promela specification, thus the technique depends critically on the soundness of this specification. Promela includes a rich set of data types including first-class channels, but the language syntax restricts the declaration of channel types so that it is not generally possible to deduce the complete type of a channel directly from its declaration. We present the design and implementation of ETCH, an enhanced type checker for Promela, which uses constraint-based type inference to perform strong type checking of Promela specifications, allowing static detection of errors that SPIN would not detect until simulation/verification time, or that SPIN may miss completely. We discuss theoretical and practical problems associated with designing a type system and type checker for an existing language, and formalise our approach using a Promela-like calculus. To handle subtyping between base types, we present an extension to a standard unification algorithm to solve a system of equality and subtyping constraints, based on bounded substitutions. (C) 2010 Elsevier B.V. All rights reserved.
C1 [Donaldson, Alastair F.] Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
   [Gay, Simon J.] Univ Glasgow, Dept Comp Sci, Glasgow G12 8QQ, Lanark, Scotland.
C3 University of Oxford; University of Glasgow
RP Donaldson, AF (corresponding author), Univ Oxford, Comp Lab, Oxford OX1 3QD, England.
EM alastair.donaldson@comlab.ox.ac.uk; simon@dcs.gla.ac.uk
FU Carnegie Trust for the Universities of Scotland; UK Engineering and
   Physical Sciences Research Council (EPSRC) [EP/G051100/1, EP/E065708/1];
   EPSRC [EP/E065708/1, EP/G051100/1] Funding Source: UKRI
FX Alastair F. Donaldson was supported by a Ph.D. studentship from the
   Carnegie Trust for the Universities of Scotland, and subsequently by the
   grant "Advanced Formal Verification Techniques for Heterogeneous
   Multi-core Programming" (EP/G051100/1) from the UK Engineering and
   Physical Sciences Research Council (EPSRC). Simon Gay was partially
   supported by the grant "Engineering Foundations of Web Service: Theories
   and Tool Support" (EP/E065708/1) from the UK Engineering and Physical
   Sciences Research Council (EPSRC).
CR Aho A.V., 1986, COMPILERS PRINCIPLES
   AIKEN A, 1993, C FUNCT PROGR LANG C, P31
   [Anonymous], 1997, The Definition of Standard ML
   [Anonymous], P 1 ACM SIGOPS EUROS
   [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   BALDAMUS M, 2001, LNCS, V2057, P183
   Calder M, 2006, FORM METHOD SYST DES, V28, P213, DOI 10.1007/s10703-006-0002-5
   CONSIDINE J, 2000, 2000006 BOST U
   DANIELE M, 1995, P 1 INT SPIN WORKSH
   Dezani-Ciancaglini M, 2006, LECT NOTES COMPUT SC, V4067, P328
   Donaldson AF, 2005, LECT NOTES COMPUT SC, V3639, P266
   EIFRIG J, 1995, ELECT NOTES THEOR CO, V1
   Haack C, 2004, SCI COMPUT PROGRAM, V50, P189, DOI 10.1016/j.scico.2004.01.004
   Havelund K, 2001, IEEE T SOFTWARE ENG, V27, P749, DOI 10.1109/32.940728
   Heeren, 2005, THESIS U UTRECHT NET
   Henglein F, 1997, IEEE S LOG, P352, DOI 10.1109/LICS.1997.614961
   Hindley J.R., 1969, T AM MATH SOC, V146, P29
   Holzmann GJ, 2000, BELL LABS TECH J, V5, P72, DOI 10.1002/bltj.2223
   Honda Kohei., 1993, CONCUR'93, 4th International Conference on Concurrency Theory, Hildesheim, Germany, August 23-26, 1993, V715, P509, DOI DOI 10.1007/3-540-57208-2_
   Linz Peter., 2006, INTRO FORMAL LANGUAG, V4th
   Mauborgne L, 2000, LECT NOTES COMPUT SC, V1782, P275
   MILNER R, 1978, J COMPUT SYST SCI, V17, P348, DOI 10.1016/0022-0000(78)90014-4
   Odersky M, 1999, THEOR PRACT OBJ SYST, V5, P35, DOI 10.1002/(SICI)1096-9942(199901/03)5:1<35::AID-TAPO4>3.0.CO;2-4
   Orava F., 1992, Formal Aspects of Computing, V4, P497, DOI 10.1007/BF01211473
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pottier F, 2001, INFORM COMPUT, V170, P153, DOI 10.1006/inco.2000.2963
   POTTIER F, 1998, P 3 ACM SIGPLAN INT, P228
   RAHLI JBV, 2009, HWMACSTR0071
   Sangiorgi Davide, 2001, -calculus: A Theory of Mobile Processes
   Schneider F, 1998, THIRD INTERNATIONAL CONFERENCE ON REQUIREMENTS ENGINEERING - PROCEEDINGS, P4, DOI 10.1109/ICRE.1998.667803
   TIURYN J, 1992, PROCEEDINGS OF THE SEVENTH ANNUAL IEEE SYMPOSIUM ON LOGIC IN COMPUTER SCIENCE, P308, DOI 10.1109/LICS.1992.185543
   WATSON BW, 1993, 9344 EINDH U TECHN D
   WRIGHT AK, 1994, INFORM COMPUT, V115, P38, DOI 10.1006/inco.1994.1093
   [No title captured]
   [No title captured]
NR 35
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 1
PY 2010
VL 75
IS 11
SI SI
BP 1165
EP 1191
DI 10.1016/j.scico.2010.05.010
PG 27
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 641MD
UT WOS:000281129600012
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Russello, G
   Dong, CY
   Dulay, N
   Chaudron, M
   van Steen, M
AF Russello, Giovanni
   Dong, Changyu
   Dulay, Naranker
   Chaudron, Michel
   van Steen, Maarten
TI Providing data confidentiality against malicious hosts in Shared Data
   Spaces
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 10th International Conference on Coordination Models and Languages
   (COORDINATION 2008)
CY JUN 04-06, 2008
CL Oslo, NORWAY
DE Encrypted Shared Data Space; Encrypted searches; No shared key; Advance
   proxy encryption scheme
ID COORDINATION LANGUAGES
AB This paper focuses on the protection of the confidentiality of the data space content when Shared Data Spaces are deployed in open, possibly hostile, environments. In previous approaches, the data space content was protected against access from unauthorised application components by means of access control mechanisms. The basic assumption is that the hosts (and their administrators) where the data space is deployed have to be trusted. When such an assumption does not hold, then encryption schemes can be used to protect the data space content from malicious hosts. However, such schemes do not support searching on encrypted data. As a consequence, performing retrieval operations is very expensive in terms of resource consumption. Moreover, in these schemes applications have to share secret keys requiring a very complex key management. In this paper, we present a novel encryption scheme that allows tuple matching on completely encrypted tuples. Since the data space does not, need to decrypt tuples to perform the search, tuple confidentiality can be guaranteed even when the data space is deployed on malicious hosts (or an adversary gains access to the host). Our scheme does not require authorised components to share keys for inserting and retrieving tuples. Each authorised component can encrypt, decrypt, and search encrypted tuples without knowing other components' keys. This is beneficial inasmuch as it simplifies the task of key management. An implementation of an encrypted data space based on this scheme is described and some preliminary performance results are given. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Russello, Giovanni; Dong, Changyu; Dulay, Naranker] Univ London Imperial Coll Sci Technol & Med, London, England.
   [Chaudron, Michel] Leiden Univ, NL-2300 RA Leiden, Netherlands.
   [van Steen, Maarten] Vrije Univ Amsterdam, Amsterdam, Netherlands.
C3 Imperial College London; Leiden University - Excl LUMC; Leiden
   University; Vrije Universiteit Amsterdam
RP Russello, G (corresponding author), Univ London Imperial Coll Sci Technol & Med, London, England.
EM russello@doc.ic.ac.uk
RI Dong, Changyu/JNS-1193-2023
OI Chaudron, Michel/0000-0001-7517-6666; van Steen,
   Maarten/0000-0002-5113-2746
CR [Anonymous], 1999, JavaSpaces Principles, Patterns, and Practice
   [Anonymous], 2001, LNCS
   [Anonymous], 1995, Advances in Cryptology-EUROCRYPT'94, DOI DOI 10.1007/BFB0053428
   Bettini L, 2002, LECT NOTES COMPUT SC, V2604, P175
   Blaze M, 1998, LECT NOTES COMPUT SC, V1403, P127, DOI 10.1007/BFb0054122
   COSTA P, 2007, P 8 ACM IFIP USENIX
   Curtain RF, 2006, LECT NOTES CONTR INF, V329, P79, DOI 10.1007/11664550_5
   Dodis Y., 2003, Network and Distributed System Security Symposium
   ELGAMAL T, 1985, IEEE T INFORM THEORY, V31, P469, DOI 10.1109/TIT.1985.1057074
   Focardi R, 2006, SCI COMPUT PROGRAM, V63, P3, DOI 10.1016/j.scico.2005.07.011
   Fok CL, 2005, INT CON DISTR COMP S, P653, DOI 10.1109/ICDCS.2005.63
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   GELERNTER D, 1992, COMMUN ACM, V35, P96, DOI 10.1145/129630.129635
   Goldreich Oded, 2004, Foundations of cryptography: Basic applications, V2
   GORRIERI R, 2005, FUNDAMENTA INFORM
   HANDOREAN R, 2003, ELECT NOTES THEORETI
   Pang HweeHwa., 2005, PROC ACM INTE C MANA, P407
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   RIVEST RL, 1978, COMMUN ACM, V21, P120, DOI [10.1145/359340.359342, 10.1145/357980.358017]
   ROWSTRON A, 1999, LNCS, V1968, P78
   RUSSELLO G, 2006, THESIS EINDHOVEN U T
   SONG DX, 2001, P 10 USENIX SEC S
   UDIZIR N, 2005, LNCS, V3454, P79
   Vitek J, 2003, SCI COMPUT PROGRAM, V46, P163, DOI 10.1016/S0167-6423(02)00090-4
   Wood A, 1999, LECT NOTES COMPUT SC, V1594, P21
   Yumerefendi A.R., 2007, ACM T STORAGE, V3
NR 26
TC 7
Z9 10
U1 0
U2 5
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2010
VL 75
IS 6
SI SI
BP 426
EP 439
DI 10.1016/j.scico.2009.07.011
PG 14
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 590MT
UT WOS:000277231300004
DA 2024-07-18
ER

PT J
AU Ramos, R
   Sampaio, A
   Mota, A
AF Ramos, Rodrigo
   Sampaio, Augusto
   Mota, Alexandre
TI Conformance notions for the coordination of interaction components
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Software components; Frameworks; Coordination patterns; Composition
   predictability; Conformance verification
ID SOFTWARE; CLASSIFICATION; FRAMEWORKS
AB In component-based development, software components are taken as units of composition. Nevertheless, to achieve the widely disseminated status of components being plugged together as simple 'Lego Pieces', the integration of components must be carefully designed, systematised and verified; only this can ensure reliable architectures. In this work, we propose some conformance notions to predict the precise nature of some forms of composition, considering coordination patterns used in the integration. These notions are formalised in terms of the denotational semantics of the process algebra CSP, and assist the designer in common activities during integration, such as the substitution of component specifications by implementations, contract adaptations, and system extensions. To support mechanical verifications using FDR (a model-checker for CSP), we derive test characterisations from the denotational definitions of conformance. We illustrate the application of these notions through a systematic composition strategy of software frameworks, and we mechanically verify the preservation of behavioural component properties in these compositions. Moreover, we characterise the well-formedness of a coordination pattern used in this strategy at the design stage, before components are assembled. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Ramos, Rodrigo; Sampaio, Augusto; Mota, Alexandre] Univ Fed Pernambuco, Ctr Informat, BR-50732970 Recife, PE, Brazil.
C3 Universidade Federal de Pernambuco
RP Ramos, R (corresponding author), Univ Fed Pernambuco, Ctr Informat, POB 7851, BR-50732970 Recife, PE, Brazil.
EM rtr@cin.ufpe.br; acas@cin.ufpe.br; acm@cin.ufpe.br
RI Ines, INCT/J-9550-2013
OI Mota, Alexandre/0000-0003-4416-8123
CR Allen R, 1997, CMUUCS97144
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], 2000, PATTERN ORIENTED SOF
   [Anonymous], 1990, CWI Quarterly
   [Anonymous], CMUSEI2003TR009
   ARBAB F, 2006, THEORETICAL COMPUTER, V160, P15
   Autili M, 2007, PROC INT CONF SOFTW, P784
   BRACCIALI A, 2001, ACM S APPL COMP ACM, P159
   BROGI A, 2004, LNCS, V29, P71
   Brogi A, 2006, SCI COMPUT PROGRAM, V63, P39, DOI 10.1016/j.scico.2005.07.012
   Broy M, 1998, SOFTWARE-CONC TOOL, V19, P49, DOI 10.1007/s003780050007
   CHEN X, 2006, 335 UN U INT I SOFTW
   Chen X, 2007, LECT NOTES COMPUT SC, V4767, P191
   Crnkovic I, 2005, LECT NOTES COMPUT SC, V3549, P257
   Crnkovic I, 2002, COMMUN ACM, V45, P35, DOI 10.1145/570907.570928
   Fournet C, 2004, LECT NOTES COMPUT SC, V3114, P242
   Fowler M., 2003, Patterns of Enterprise Application Architecture. A Martin Fowler signature book
   Fu X., 2004, Analysis of Interacting BPEL Web Services, P621
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   He JF, 2006, ELECTRON NOTES THEOR, V160, P173, DOI 10.1016/j.entcs.2006.05.022
   Hepner M, 2006, J SYST SOFTWARE, V79, P537, DOI 10.1016/j.jss.2005.11.211
   Hohpe G., 2012, Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions, V15
   KESHAV R, 1998, INT WORKSH SOFTW ARC, P89
   Lau KK, 1999, LECT NOTES COMPUT SC, V1559, P101, DOI 10.1007/3-540-48958-4_6
   Leveson N.G., 1995, Safeware: System Safety and Computers
   LISKOV BH, 1994, ACM T PROGR LANG SYS, V16, P1811, DOI 10.1145/197320.197383
   MALONE T, 1997, IEEE COMPUTER SOC, V1, P8
   Matougui S, 2005, LECT NOTES COMPUT SC, V3543, P83
   Mattsson M, 1999, COMMUN ACM, V42, P81
   MATTSSON M, 2000, THESIS U KARLSKRONA
   Medvidovic N, 2000, IEEE T SOFTWARE ENG, V26, P70, DOI 10.1109/32.825767
   Mehta N. R., 2000, Proceedings of the 2000 International Conference on Software Engineering. ICSE 2000 the New Millennium, P178, DOI 10.1109/ICSE.2000.870409
   MESQUITA W, 2005, IEEE INT C SOFTW ENG, P404
   *OMG, 2003, UML 2 0 INFR SPEC
   Papadopoulos G.A., 1998, Advances in Computers, P330
   Ramos R, 2005, LECT NOTES COMPUT SC, V3535, P99
   Ramos R, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P119
   Reuter A, 1993, T PROCESSING CONCEPT
   Roscoe AW, 1998, PRENTICE HALL SERIES
   Roshandel R, 2004, LECT NOTES COMPUT SC, V3069, P286
   Shaw M, 1997, P INT COMP SOFTW APP, P6, DOI 10.1109/CMPSAC.1997.624691
   Shukla SK, 2002, LECT NOTES COMPUT SC, V2552, P663
   SPITZNAGEL B, 2004, CMUCS04128
   Szyperski C., 2002, Component Software: Beyond Object-Oriented Programming
   Vallecillo A, 2006, FUND INFORM, V73, P583
   Van der Aalst WMP, 2003, DISTRIB PARALLEL DAT, V14, P5, DOI 10.1023/A:1022883727209
   Wehrheim H, 2003, FORM METHOD SYST DES, V23, P143, DOI 10.1023/A:1024764232069
   2005, FORMAL SYSTEMS FAILU
NR 48
TC 4
Z9 5
U1 0
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2010
VL 75
IS 5
SI SI
BP 350
EP 373
DI 10.1016/j.scico.2009.12.005
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 583YV
UT WOS:000276717500005
DA 2024-07-18
ER

PT J
AU Derrick, J
   Wehrheim, H
AF Derrick, John
   Wehrheim, Heike
TI Model transformations across views
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Model-based design; Model transformations; Z; CSP; Multiple views;
   Refinement
ID UML; SPECIFICATION; SEMANTICS
AB Models of software often describe systems by a number of (partially) orthogonal views: a state machine, a class diagram, a scenario might specify different aspects of the one system to be built. Such abstract, multi-view models are the starting point for transformations into platform-specific models and finally the code. However, during these transformations it is usually not possible to keep such a neat separation into different views: the specification language of the target models might not support all such views. The target model, however, still needs to preserve the behaviour of the abstract, multi-view model. Therefore, model transformations have to be capable of moving aspects of the behaviour across views.
   In this paper, we study model transformations migrating aspects from state-based views (i.e., class specifications with data and methods) to protocol-based views (i.e., process specifications on orderings of methods) and vice versa. The specification languages for these two views are equipped with a joint, formal semantics which enables a proof of behaviour preservation. We consequently derive conditions for our transformations to be behaviour-preserving, where behaviour preservation is characterised by refinement. (C) 2009 Elsevier B.V. All rights reserved.
C1 [Wehrheim, Heike] Univ Paderborn, Inst Informat, D-33098 Paderborn, Germany.
   [Derrick, John] Univ Sheffield, Dept Comp, Sheffield S1 4DP, S Yorkshire, England.
C3 University of Paderborn; University of Sheffield
RP Wehrheim, H (corresponding author), Univ Paderborn, Inst Informat, D-33098 Paderborn, Germany.
EM J.Derrick@dcs.shef.ac.uk; wehrheim@uni-paderborn.de
OI Derrick, John/0000-0002-6631-8914
CR [Anonymous], 2006, COMP 21 ACM SIGPLAN, DOI DOI 10.1145/1176617.1176691
   [Anonymous], THEORY PRACTICE REFI
   [Anonymous], SERIES COMPUTER SCI
   Baresi L, 2004, FOURTH WORKING IEEE/IFIP CONFERENCE ON SOFTWARE ARCHITECTURE (WICSA 2004), PROCEEDINGS, P155, DOI 10.1109/WICSA.2004.1310699
   Boiten E., 2002, ENTCS, V70
   BOLTON C, 2002, LECT NOTES COMPUTER, V2335, P225
   Bolton C, 2006, FORM ASP COMPUT, V18, P181, DOI 10.1007/s00165-005-0081-x
   BOTTONI P, 2003, ELECT NOTES THEORETI, V72
   de Roever Willem-Paul, 1998, Data Refinement Model-Oriented Proof methods and their Comparison
   Derrick J., 2003, Formal Aspects of Computing, V15, P182, DOI 10.1007/s00165-003-0007-4
   Derrick J, 2000, LECT NOTES COMPUT SC, V1945, P194
   Derrick J., 2001, FACIT, VSecond
   DERRICK J, 2006, BCS FACS REF WORKSH
   Derrick J, 2006, LECT NOTES COMPUT SC, V4019, P111
   Fischer C., 1999, IFM'99. Proceedings of the 1st International Conference on Integrated Formal Methods, P315
   FISCHER C, 2000, THESIS U OLDENBURG
   FISCHER C, 1997, 2 IFIP INT C FORM ME, P423
   *FORM SYST EUR LTD, 1997, FAIL DEV REF FDR2 US
   Hoare CAR., 1985, Communicating Sequential Processes
   JOSEPHS MB, 1988, DISTRIB COMPUT, V3, P9, DOI 10.1007/BF01788563
   KOEHLER J, 2003, EDOC 2003, P186
   Küster JM, 2003, 200S IEEE SYMPOSIUM ON HUMAN CENTRIC COMPUTING LANGUAGES AND ENVIRONMENTS, P145
   Mahony B, 2000, IEEE T SOFTWARE ENG, V26, P150, DOI 10.1109/32.841115
   McComb T, 2004, 2004 AUSTRALIAN SOFTWARE ENGINEERING CONFERENCE, PROCEEDINGS, P77, DOI 10.1109/ASWEC.2004.1290460
   Mens T, 2004, IEEE T SOFTWARE ENG, V30, P126, DOI 10.1109/TSE.2004.1265817
   Mens T, 2006, ELECTRON NOTES THEOR, V152, P125, DOI 10.1016/j.entcs.2005.10.021
   Möller M, 2008, FORM ASP COMPUT, V20, P161, DOI 10.1007/s00165-007-0042-7
   Moller M, 2004, LECT NOTES COMPUT SC, V2999, P267
   Oliveira M, 2007, ELECTRON NOTES THEOR, V187, P107, DOI 10.1016/j.entcs.2006.08.047
   Rasch H, 2003, LECT NOTES COMPUT SC, V2884, P229
   Ruhroth T, 2007, LECT NOTES COMPUT SC, V4468, P236
   Schneider S., 1999, Concurrent and Real Time Systems: The CSP Approach, V1st
   Schneider SM, 2006, COMMUN MEDIA POLIT, P21
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Suny┬u┬ G., 2001, LNCS, V2185, P134
   TREHARNE H, 2002, LNCS, V2272
   VISSERS CA, 1991, THEOR COMPUT SCI, V89, P179, DOI 10.1016/0304-3975(90)90111-T
   Wehrheim H, 2000, LECT NOTES COMPUT SC, V1783, P334
NR 38
TC 9
Z9 10
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAR
PY 2010
VL 75
IS 3
BP 192
EP 210
DI 10.1016/j.scico.2009.11.004
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 561LD
UT WOS:000274977800005
DA 2024-07-18
ER

PT J
AU Karsai, G
   Neema, S
   Sharp, D
AF Karsai, Gabor
   Neema, Sandeep
   Sharp, David
TI Model-driven architecture for embedded software: A synopsis and an
   example
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT Workshop on Model Driven Architecture - Foundations and Applications
CY JUN 26-27, 2003
CL Univ Twente, Enschede, NETHERLANDS
HO Univ Twente
DE Model-driven development; Embedded systems; Domain-specific modeling
AB MDA proposes a new paradigm for software development in general. We claim that MDA could be beneficial for embedded software development, especially if it is extended to address the special needs of embedded systems. The paper consists of two sections: the first is a brief synopsis on how MDA ought to be extended to handle embedded software development, while the second illustrates the concepts in practice using a prototype modeling language and tool chain designed for developing mission computing software. (C) 2008 Elsevier B.V. All rights reserved.
C1 [Karsai, Gabor; Neema, Sandeep] Vanderbilt Univ, Inst Software Integrated Syst, Nashville, TN 37235 USA.
   [Sharp, David] Boeing Co, St Louis, MO 63166 USA.
C3 Vanderbilt University; Boeing
RP Karsai, G (corresponding author), Vanderbilt Univ, Inst Software Integrated Syst, 221 Kirkland Hall, Nashville, TN 37235 USA.
EM gabor.karsai@vanderbilt.edu
OI Karsai, Gabor/0000-0001-7775-9099; Neema, Sandeep/0000-0002-9781-3619
CR Alur R., 2001, 1 WORKSH EMB SOFTW
   [Anonymous], MDA GUIDE VERSION 10
   BURCH JR, 2001, P 1 INT WORKSH EMB S
   CLARK T, 2002, S KENT ENG MODELING, P159
   Douglass B.P., 2002, REAL TIME DESIGN PAT
   DOUGLASS BP, 1999, REAL TIME UML
   GILL CD, 2001, INT J TIME CRITICAL, V20
   GROSU R, 1998, P 7 OOPSLA WORKSH BE
   HARRISON TH, 1997, P OOPSLA 97
   KARSAI G, 2006, LNCS, V4147
   KURTEV I, 2003, TRCTIT0327 U TWENT
   Lédeczi A, 2001, COMPUTER, V34, P44, DOI 10.1109/2.963443
   LEE E, 2000, IEEE COMPUTER    SEP, P18
   LEE EA, 1999, M9963 UCBERL EECS
   LEE EA, 1997, M9711 UCB ERL
   Schmidt D., 2000, Pattern-Oriented Software Architecture, Patterns for Concurrent and Networked Objects, V2
   SCHULTE M, 2002, COMMUNICATION
   Selic B., 1994, REAL TIME OBJECT ORI
   SIFAKIS J, LECT NOTES COMPUTER, V2211
   AUTOMATIC INTEGRATIO
   [No title captured]
NR 21
TC 22
Z9 24
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2008
VL 73
IS 1
SI SI
BP 26
EP 38
DI 10.1016/j.scico.2008.05.006
PG 13
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 357ZH
UT WOS:000259885400004
OA Bronze
DA 2024-07-18
ER

PT J
AU Bagnara, R
   Hill, PM
   Zaffanella, E
AF Bagnara, Roberto
   Hill, Patricia M.
   Zaffanella, Enea
TI The Parma Polyhedra Library: Toward a complete set of numerical
   abstractions for the analysis and verification of hardware and software
   systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT International Workshop on Advanced Software Development Tools and
   Techniques
CY JUL, 2008
CL Paphos, CYPRUS
DE formal methods; static analysis; computer-aided verification; abstract
   interpretation; numerical properties
ID PRECISE WIDENING OPERATORS; CLOSED CONVEX POLYHEDRA; ENUMERATION; VERTEX
AB Since its inception as a student project in 2001, initially just for the handling (as the name implies) of convex polyhedra, the Parma Polyhedra Library has been continuously improved and extended by joining scrupulous research on the theoretical foundations of (possibly non-convex) numerical abstractions to a total adherence to the best available practices in software development. Even though it is still not fully mature and functionally complete, the Parma Polyhedra Library already offers a combination of functionality, reliability, usability and performance that is not matched by similar, freely available libraries. In this paper, we present the main features of the current version of the library, emphasizing those that distinguish it from other similar libraries and those that are important for applications in the field of analysis and verification of hardware and software systems. (c) 2008 Elsevier B.V. All rights reserved.
C1 [Bagnara, Roberto] Univ Parma, Dept Math, Comp Sci Grp, I-43100 Parma, Italy.
   [Hill, Patricia M.] Univ Leeds, Sch Comp, Leeds LS2 9JT, W Yorkshire, England.
C3 University of Parma; University of Leeds
RP Bagnara, R (corresponding author), Univ Parma, Dept Math, Comp Sci Grp, Via Dazeglio 85, I-43100 Parma, Italy.
EM bagnara@cs.unipr.it; hill@comp.leeds.ac.uk; zaffanella@cs.unipr.it
RI Bagnara, Roberto/AAB-3202-2022; Bagnara, Roberto/B-2420-2017
OI Bagnara, Roberto/0000-0002-6163-6278; Bagnara,
   Roberto/0000-0002-6163-6278; Zaffanella, Enea/0000-0001-6388-2053
CR Allen J.F., 1985, Formal Theories of the Commonsense World. Ablex Pub, P251
   ANCOURT C, 1991, THESIS U PARIS 6 FRA
   [Anonymous], 1988, WILEY INTERSCIENCE S
   [Anonymous], 1970, CONVEXITY OPTIMIZATI
   [Anonymous], 2005, LECT NOTES COMPUTER
   Avis D, 2000, DMV SEMINAR, V29, P177
   Badros G. J., 2001, ACM Transactions on Computer-Human Interaction, V8, P267, DOI 10.1145/504704.504705
   Bagnara R, 2005, SCI COMPUT PROGRAM, V58, P28, DOI 10.1016/j.scico.2005.02.003
   Bagnara R, 2005, LECT NOTES COMPUT SC, V3672, P3
   Bagnara R, 2005, LECT NOTES COMPUT SC, V3672, P19
   Bagnara R, 2005, FORM ASP COMPUT, V17, P222, DOI 10.1007/s00165-005-0061-1
   Bagnara R, 2002, LECT NOTES COMPUT SC, V2477, P213
   Bagnara R, 2003, LECT NOTES COMPUT SC, V2694, P337
   Bagnara R, 1998, SCI COMPUT PROGRAM, V30, P119, DOI 10.1016/S0167-6423(97)00009-9
   BAGNARA R, 2007, APPL POLYHEDRAL COMP, P458
   BAGNARA R, 2006, PRACTICAL TOOL ANAL
   Bagnara R, 2007, LECT NOTES COMPUT SC, V4407, P219, DOI 10.1007/978-3-540-71410-1_16
   BALASUNDARAM V, 1989, ACM SIGPLAN NOTICES, V24
   Bellman R., 1957, Dynamic programming
   BERARD B, 1999, LECT NOTES COMPUTER, V1664
   BLANCHET B, 2003, P ACM SIGPLAN 2003 C
   Bozzano M., 2005, LECT NOTES COMPUTER, V3632
   Bremner D, 1998, DISCRETE COMPUT GEOM, V20, P333, DOI 10.1007/PL00009389
   Bultan T, 1999, ACM T PROGR LANG SYS, V21, P747, DOI 10.1145/325478.325480
   Chernikova N.V., 1965, USSR Comput. Math. Math. Phys, V5, P228, DOI [10.1016/0041-5553(65)90045-5, DOI 10.1016/0041-5553(65)90045-5]
   Chernikova N. V., 1964, USSR COMP MATH MATH, V4, P151
   Chernikova NV, 1968, USSR COMP MATH MATH, V8, P282, DOI DOI 10.1016/0041-5553(68)90115-8
   Cousot P., 1992, Journal of Logic and Computation, V2, P511, DOI 10.1093/logcom/2.4.511
   Cousot P., 1981, Program flow analysis. Theory and applications, P303
   COUSOT P, 1976, P 2 INT S PROGR DUN
   COUSOT P, 1979, P 6 ANN ACM S PRINC
   COUSOT P, 1978, 5 ANN ACM S PRINC PR
   Cousot P., 1992, LECT NOTES COMPUTER, V631
   COUSOT P, 1977, P 4 ANN ACM S PRINC
   DAVIS E, 1987, ARTIF INTELL, V32, P281, DOI 10.1016/0004-3702(87)90091-9
   DILL DL, 1989, P INT WORKSH AUT VER, V407
   DOOSE D, 2005, LECT NOTES COMPUTER, V3824
   DOYEN L, 2005, LECT NOTES COMPUTER, V3829
   ELLENBOGEN R, 2004, THESIS TELAVIV U TEL
   FREHSE C, 2004, P 43 IEEE C DEC CONT
   FREHSE G, 2006, P 9 C DES AUT TEST E
   FREHSE G, 2006, ELECT NOTES THEORETI, V153
   FREHSE G, 2005, LECT NOTES COMPUTER, V3414
   FUKUDA K, 1996, LECT NOTES COMPUTER, V1120
   GOPAN D, 2005, P 32 ACM SIGPLAN SIG
   GOPAN D, 2004, LECT NOTES COMPUTER, V2988
   GRANGER P, 1997, LECT NOTES COMPUTER, V1302
   GRANGER P, 1991, LECT NOTES COMPUTER, V493
   Halbwachs N, 1997, FORM METHOD SYST DES, V11, P157, DOI 10.1023/A:1008678014487
   HALBWACHS N, 1993, LECT NOTES COMPUTER, V697
   Halbwachs N., 1979, THESIS U SCI MED GRE
   HALBWACHS N, 1994, LECT NOTES COMPUTER, V864
   HALBWACHS N, 2003, LECT NOTES COMPUTER, V2694
   HALBWACHS N, 1995, POLYHEDRA INTEGRATED
   HENZINGER TA, 1995, LECT NOTES COMPUTER, V999
   HENZINGER TA, 2001, P 40 ANN C DEC CONTR
   HENZINGER TA, 1997, SOFTWARE TOOLS TECHN, V1, P110
   HYMANS C, 2004, LECT NOTES COMPUTER, V3148
   Jeannet B, 2002, CONVEX POLYHEDRA LIB
   KRUEGEL C, 2005, P SEC 05 14 USENIX S
   LARSEN K, 1997, P 18 IEEE REAL TIM S
   LEVERGE H, 1992, PUBLICATION INTERNE, V635
   Loechner, 1999, POLYLIB LIB MANIPULA
   Mesnard F, 2005, THEOR PRACT LOG PROG, V5, P243, DOI 10.1017/S1471O68404002017
   Mine A., 2001, P 8 WORK C REV ENG W
   MOTZKIN TS, 1953, ANN MATH STUD, V28, P51
   NAKANISHI T, 1999, P 1999 INT C PAR ARC
   NAKANISHI T, 2001, T INFORM PROCESSING, V42, P829
   Quinton P., 1997, Parallel Processing Letters, V7, P181, DOI 10.1142/S012962649700019X
   SANKARANARAYANA.S, 2006, LECT NOTES COMPUTER, V3927
   SANKARANARAYANA.S, 2006, LECT NOTES COMPUTER, V3855
   SANKARANARAYANA.S, 2004, LECT NOTES COMPUTER, V3148
   SANKARANARAYANA.S, 2005, LECT NOTES COMPUTER, V3385
   SHAHAM R, 2000, LECT NOTES COMPUTER, V1781
   SONG H, 2006, ELECT NOTES THEORETI, V145
   VANHEE K, 2006, LECT NOTES COMPUTER, V4378
   VENET A, 2004, P ACM SIGPLAN 2004 C
   WILDE DK, 1993, THESIS OREGON STATE, V785
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 82
TC 249
Z9 271
U1 0
U2 5
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2008
VL 72
IS 1-2
BP 3
EP 21
DI 10.1016/j.scico.2007.08.001
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 330AX
UT WOS:000257912800002
OA hybrid
DA 2024-07-18
ER

PT J
AU Li, X
   Liang, Y
   Mitra, T
   Roychoudhury, A
AF Li, Xianfeng
   Liang, Yun
   Mitra, Tulika
   Roychoudhury, Abhik
TI Chronos: A timing analyzer for embedded software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Worst Case Execution Time (WCET) analysis
AB Estimating the Worst Case Execution Time (WCET) of real-time embedded software is an important problem. WCET is defined as the upper bound b on the execution time of a program P on a processor X such that for any input the execution time of P on X is guaranteed to not exceed b. Such WCET estimates are crucial for schedulability analysis of real-time systems. In this paper, we present Chronos, a static analysis tool for generating WCET estimates of C programs. It performs detailed micro-architectural modeling to capture the timing effects of the underlying processor platform. Consequently, we can provide safe but tight WCET estimate of a given C program running on a complex modern processor. Chronos is an open-source distribution specifically suited to the needs of the research community. We support processor models captured by the popular SimpleScalar architectural simulator rather than targeting specific commercial processors. This makes the Chronos flexible, extensible and easily accessible to the researcher. (c) 2007 Elsevier B.V. All rights reserved.
C1 [Liang, Yun; Mitra, Tulika; Roychoudhury, Abhik] Natl Univ Singapore, Dept Comp Sci, Singapore 117548, Singapore.
   [Li, Xianfeng] Peking Univ, Dept Comp Sci & Technol, Beijing, Peoples R China.
C3 National University of Singapore; Peking University
RP Mitra, T (corresponding author), Natl Univ Singapore, Dept Comp Sci, Singapore 117548, Singapore.
EM lixianfeng@mprc.pku.edu.cn; liangyun@comp.nus.edu.sg;
   tulika@comp.nus.edu.sg; abhik@comp.nus.edu.sg
RI li, xianfeng/GYD-5825-2022; Mitra, Tulika/HCI-5887-2022; Li,
   Xianfeng/AAB-2538-2019; Mitra, Tulika/J-4464-2017
OI ROYCHOUDHURY, Abhik/0000-0002-7127-1137; Mitra,
   Tulika/0000-0003-4136-4188
CR AbsInt, AIT WORST CAS EX TIM
   BERKELAAR M, IP SOLVE MIXED INTEG
   BURGER DC, 1997, CSTR19971342 U WISC
   COUSOT P, 1977, ACM S PRINCIPLES PRO
   *CPLEX, 2002, ILOG CPLEX OPT V7 5
   GUSTAFSSON J, 2006, SWEDISH EXECUTION TI
   GUSTAFSSON J, 2007, 2 INT S LEV APPL FOR
   HEALY C, SUPPORTING TIMING AN, V18
   HEALY C, IEEE T SOFTWARE ENG, V28
   HECKMANN R, P IEEE, V91
   LI X, J REAL TIME SYSTEMS, V29
   LI X, J REAL TIME SYSTEMS, V34
   Li Y.S., 1999, Performance Analysis of Real-Time Embedded Software
   LUNDQVIST T, 1999, IEEE REAL TIME SYSTE
   *M RES GROUP, WCET BENCHM PROGR
   MITRA T, 2002, ACM SIGDA INT S SYST
   MITRA T, 2007, COMPILER DESIGN HDB
   PUAUT I, 2003, HEPTANE STATIC WCET
   PUSCHNER P, J REAL TIME SYSTEMS, V1
   SHAW A, IEEE T SOFTWARE ENG, V1
   Souyris Jean, COMPUTING WORST CASE
   STASCHULAT J, 2005, SYMTA P SYMBOLIC TIM
   *T LTD, 2005, BOUND T EX TIM AN
   WILHELM R, 2004, LNCS, V2937
   WILHELM R, IN PRESS ACM T EMBED
NR 25
TC 105
Z9 120
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2007
VL 69
IS 1-3
BP 56
EP 67
DI 10.1016/j.scico.2007.01.014
PG 12
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 253CQ
UT WOS:000252496700007
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Iversen, JB
AF Iversen, Jorgen Bondergaard
TI An action compiler targeting standard ML
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 5th Workshop on Language Descriptions, Tools and Application (LDTA 05)
CY 2005
CL Edinburgh, SCOTLAND
SP ACM SIGPLAN
DE compiler generation; action semantics; code generation; standard ML
AB We present an action compiler that can be used in connection with an action semantics based compiler generator. Our action compiler produces code with faster execution times than code produced by other action compilers, and for some nontrivial test examples it is only a factor of two slower than the code produced by the Gnu C Compiler. Targeting Standard ML makes the description of the code generation simple and easy to implement. The action compiler has been tested on a description of the Core of Standard ML and a subset of C. (C) 2007 Elsevier B.V. All rights reserved.
C1 Syst & Software Engn AS, DK-8000 Aarhus, Denmark.
RP Iversen, JB (corresponding author), Syst & Software Engn AS, Soren firchs Vej 39, DK-8000 Aarhus, Denmark.
EM jbiversen@gmail.com
CR [Anonymous], 1997, The Definition of Standard ML
   BERGSTRA JA, 1989, ACM PRESS FRONTIER S, pCH1
   Bondorf A., 1996, Journal of Functional Programming, V6, P269, DOI 10.1017/S0956796800001684
   Brown D., 1999, 2nd International Workshop on Action Semantics (AS'99), P43
   BROWN DF, 1992, LECT NOTES COMPUT SC, V641, P95
   GRAY RW, 1992, COMMUN ACM, V35, P121, DOI 10.1145/129630.129637
   IVERSEN J, MOSSES, P78
   IVERSEN J, IN PRESS IEE P SOFTW
   LASSEN SB, 2000, P 3 INT WORKSH ACT S, P19
   LEE KD, 1999, THESIS U IOWA
   MACEDO A, 2000, P 4 BRAZ S PROGR LAN, P259
   MOSSES PD, 1992, CAMBRIDGE TRACTS THE, V26
   MOSSES PD, 2002, 4 INT WORKSH ACT SEM
   ORBAEK P, 1993, THESIS U AARHUS
   ORBAEK P, 1994, LNCS, V786, P1
   van den Brand MGJ, 2000, SOFTWARE PRACT EXPER, V30, P259, DOI 10.1002/(SICI)1097-024X(200003)30:3<259::AID-SPE298>3.0.CO;2-Y
   van Deursen A., 1996, AMAST SERIES COMPUTI, V5
   VANDENBRAND MGJ, 2004, ELECT NOTES THEORETI
   VANDERSTORM T, MOSSES, P23
   VOLLMER J, 1991, LNCS, V528, P425
   [No title captured]
NR 21
TC 2
Z9 2
U1 0
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 1
PY 2007
VL 68
IS 2
BP 79
EP 94
DI 10.1016/j.scico.2006.05.013
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 218PY
UT WOS:000250028600003
DA 2024-07-18
ER

PT J
AU Viroli, M
   Denti, E
   Ricci, A
AF Viroli, Mirko
   Denti, Enrico
   Ricci, Alessandro
TI Engineering a BPEL orchestration engine as a multi-agent system
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on the Foundations of Coordination Languages
   and Software Architectures (FOCLASA'05)
CY AUG 27, 2005
CL San Francisco, CA
DE multiagent systems; orchestration languages; coordination models;
   languages process algebra
ID COMPENSATION; COORDINATION; CALCULUS
AB The BPEL language is currently the primary candidate for standardising Web Services orchestration. BPEL specifications are meant to be run by BPEL orchestration engines, which are therefore crucial components of today's business-to-business infrastructures, carrying the burden of dynamically composing existing services.
   In this paper, we present the design of a BPEL orchestration engine based on a multi-agent system: while the basic BPEL activities are autonomously executed by agents, workflow aspects are realised by the mediation of ReSpecT tuple centres, a coordination model extending LINDA with the ability of declaratively programming the tuple space behaviour.
   Our architecture separates the interaction, correlation, and workflow concerns into clearly identified tiers. In particular, we identify the workflow tier as the one encapsulating the core and most critical behaviour of the engine: due to its intrinsic complexity, we tackle its design formally. We introduce a core algebraic language of BPEL dealing with its workflow-related aspects, and provide it with a semantics based on a mapping into a net specification, modelling the dependencies between the activities to be executed by the engine. This mapping plays the role of a formal design, since it directly leads to an implementation of the workflow tier in the orchestration engine. (c) 2007 Elsevier B.V. All rights reserved.
C1 Univ Bologna, DEIS, Alma Mater Studiorum, I-40126 Bologna, Italy.
C3 University of Bologna
RP Denti, E (corresponding author), Univ Bologna, DEIS, Alma Mater Studiorum, I-40126 Bologna, Italy.
EM mirko.viroli@unibo.it; enrico.denti@unibo.it; a.ricci@unibo.it
RI Ricci, Alessandro/AFQ-1187-2022; Denti, Enrico/X-1803-2019
OI Ricci, Alessandro/0000-0002-9222-5092; Denti,
   Enrico/0000-0003-1687-8793; Viroli, Mirko/0000-0003-2702-5702
CR Acu B, 2006, LECT NOTES COMPUT SC, V4024, P65
   ANDREWS T, 2003, SPECIFICATION BUSINE
   [Anonymous], 1996, CONTEXT CONSCIOUSNES
   [Anonymous], JAVA LANGUAGE SPECIF
   [Anonymous], 2004, Workflow Management: Models, Methods, and Systems
   BEST E, UNIFIED MODEL NETS P, P873
   Bocchi L, 2003, LECT NOTES COMPUT SC, V2884, P124
   Butler M, 2000, LECT NOTES COMPUT SC, V1945, P61
   Cámara J, 2006, ELECTRON NOTES THEOR, V154, P159, DOI 10.1016/j.entcs.2005.12.038
   Christensen E., 2001, WEB SERVICES DESCRIP
   DASTANI M, 2005, 4 INT JOINT C AUT AG, P25
   Denti E, 1998, 1998 ACM S APPL COMP, P169, DOI DOI 10.1145/330560.330665
   Erl T, 2005, SERVICE ORIENTED ARC
   GELERNTER D, 1985, ACM T PROGR LANG SYS, V7, P80, DOI 10.1145/2363.2433
   Jennings NR, 2001, COMMUN ACM, V44, P35, DOI 10.1145/367211.367250
   KOSHKINA M, 2004, SIGSOFT SOFTW ENG NO, V29, P1
   Lucchi R, 2007, J LOGIC ALGEBR PROGR, V70, P96, DOI 10.1016/j.jlap.2006.05.007
   MAZZARA M, 2004, ENTCS, V105, P133
   Milner R., 1989, Communication and concurrency
   OLDEROG ER, 1991, NETS TERMS FORMULAS
   Omicini A., 1999, Autonomous Agents and Multi-Agent Systems, V2, P251, DOI 10.1023/A:1010060322135
   Omicini A, 2001, SCI COMPUT PROGRAM, V41, P277, DOI 10.1016/S0167-6423(01)00011-9
   OMICINI A, SCI COMPUTER PROGRAM, V41
   Omicini Andrea., 2001, DECLARATIVE PROGRAMM, V48, P179, DOI DOI 10.1016/S1571-0661(04)00156-2
   Peltz C, 2003, COMPUTER, V36, P46, DOI 10.1109/MC.2003.1236471
   Picco G. P., 1999, Proceedings of the 1999 International Conference on Software Engineering (IEEE Cat. No.99CB37002), P368, DOI 10.1109/ICSE.1999.841027
   Reisig W, 2005, LECT NOTES COMPUT SC, V3535, P243
   Ricci A, 2002, INT J COOP INF SYST, V11, P355, DOI 10.1142/S0218843002000637
   Ricci A, 2005, INFORM-J COMPUT INFO, V29, P433
   *TUCS, 2002, TUCS HOM PAG
   Viroli M., 2004, Electronic Notes in Theoretical Computer Science, V105, P51, DOI DOI 10.1016/J.ENTCS.2004.05.008
   Viroli M, 2007, J LOGIC ALGEBR PROGR, V70, P74, DOI 10.1016/j.jlap.2006.05.006
NR 32
TC 8
Z9 8
U1 1
U2 3
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 15
PY 2007
VL 66
IS 3
BP 226
EP 245
DI 10.1016/j.scico.2007.01.008
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 183OI
UT WOS:000247581700004
DA 2024-07-18
ER

PT J
AU Arató, P
   Mann, ZA
   Orbán, A
AF Arató, P
   Mann, ZA
   Orbán, A
TI Extending component-based design with hardware components
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE component-based design; hardware/software co-design; hardware/software
   partitioning
AB In order to cope with the increasing complexity of system design, component-based software engineering advocates the reuse and adaptation of existing software components. However, many applications-particularly embedded systems-consist of not only software, but also hardware components. Thus, component-based design should be extended to systems with both hardware and software components.
   Such an extension is not without challenges though. The extended methodology has to consider hard constraints on performance as well as different cost factors. Also, the dissimilarities between hardware and software (such as level of abstraction, communication primitives, etc.) have to be resolved.
   In this paper, the authors propose such an extended component-based design methodology to include hardware components as well. This methodology allows the designer to work at a very high level of abstraction, where the focus is on functionality only. Non-functional constraints are specified in a declarative manner, and the mapping of components to hardware or software is determined automatically based on those constraints in the so-called hardware/software partitioning step.
   Moreover, a tool is presented supporting the new design methodology. Beside automating the partitioning process, this tool also checks the consistency between hardware and software implementations of a component.
C1 Budapest Univ Technol & Econ, Dept Control Engn & Informat Technol, H-1117 Budapest, Hungary.
C3 Budapest University of Technology & Economics
RP Budapest Univ Technol & Econ, Dept Control Engn & Informat Technol, Magyar Tudosok Korutja 2, H-1117 Budapest, Hungary.
EM arato@iit.bme.hu; Zoltan.Mann@cs.bme.hu; Andras.Orban@cs.bme.hu
RI Mann, Zoltan/H-4597-2012; Arato, Peter/H-2557-2012
OI Arato, Peter/0000-0003-2627-0511
CR ARATO P, 2003, P IEEE INT S INT SIG
   ASSMANN U, INTERFACE SYNTHESIS
   Basu A, 1997, ELEVENTH INTERNATIONAL CONFERENCE ON VLSI DESIGN, PROCEEDINGS, P85, DOI 10.1109/ICVD.1998.646583
   BUCHENRIEDER K, 1999, 10 IEEE INT WORKSH R
   CASSEAU E, 2002, IEEE INT C EL CIRC S
   CESARIO W, 2002, DAC 02
   CHOU P, 1999, DAC, P44
   COUSSY P, 2002, C INT IEEE CICC
   DAVIS J, 2001, OVERVIEW PTOLEMY PRO
   GRAHAM SL, 1983, SOFTWARE PRACT EXPER, V13, P671, DOI 10.1002/spe.4380130803
   Heineman GeorgeT., 2001, COMPONENT BASED SOFT
   HU X, IEEE T VLSI SYST, V9
   KROLIKOSKI SJ, 1999, ISCAS
   MANN ZA, 2003, P 3 HUNG JAP S DISCR
   MARREC PL, 1998, IEEE INT WORKSH RAP
   MARTIN G, 2001, P DES AUT TEST EUR
   NIENLANN R., 1998, HARDWARE SOFTWARE CO
   OBERLIETNER J, 2002, P SOFTW ENG MIDDL WO
   POGODALLA F, 1999, CODES
   Reussner RH, 2003, FUTURE GENER COMP SY, V19, P627, DOI 10.1016/S0167-739X(02)00173-5
   ROOP P, 2000, AUTOMATIC COMPONENT
   SPECK A, 2002, INT J APPL MATH COMP, P581
   SPIVEY G, 2002, LOGIC FOUNDRY RAPID
   THATTE SR, 1994, P 21 ACM SIGPLAN SIG
   *VENT DEV CORP, 2002, EMB SOFTW STRAT MARK, V2
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
NR 26
TC 4
Z9 5
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 23
EP 39
DI 10.1016/j.scico.2004.11.003
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000003
OA Bronze, Green Submitted
DA 2024-07-18
ER

PT J
AU Völgyesi, P
   Maróti, M
   Dóra, S
   Osses, E
   Lédeczi, A
AF Völgyesi, P
   Maróti, M
   Dóra, S
   Osses, E
   Lédeczi, A
TI Software composition and verification for sensor networks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
AB Component-based design has become a necessity for networked embedded systems where hardware platforms come in a great variety and evolve extremely rapidly. Operating system components and higher level middleware services call for modular software construction along clear interfaces. The way we describe these interfaces and process the captured information is of crucial importance for exploiting the benefits of component-based design. In this paper we present a model based approach to the development of embedded applications with a special emphasis on interface specification. The proposed formalism captures the temporal and type aspects of interfaces and supports the composition and verification of components. Along with the formal definition of the proposed interface language and component compatibility rules, we present a modeling environment targeting TinyOS, a representative embedded operating system. Two prototype tools are also described that check the composability of components based on their interface models and verify that the implementation of a component matches its formal model, respectively. (c) 2004 Elsevier B.V. All rights reserved.
C1 Vanderbilt Univ, Inst Software Integrated Syst, Nashville, TN 37221 USA.
   Budapest Univ Technol & Econ, Hungarian Acad Sci, Embedded Informat Technol Res Grp, H-1117 Budapest, Hungary.
C3 Vanderbilt University; Budapest University of Technology & Economics;
   Hungarian Academy of Sciences
RP Vanderbilt Univ, Inst Software Integrated Syst, Nashville, TN 37221 USA.
EM miklos.maroti@Vanderbilt.Edu
OI Ledeczi, Akos/0000-0003-2876-585X
CR [Anonymous], 2003, The Spin Model Checker: Primer and Reference Manual
   CHAKRABARTI A, 2002, LNCS, V2404, P428
   Clarke Edmund M., 2001, Model Checking
   DEALFARO L, 2001, P 9 ANN S FDN SOFTW, P109
   Garland S.J., 2000, Foundations of component-based systems, P285
   GAY D, 2003, P PROGR LANG DES IMP
   HAREL D, 1987, SCI COMPUT PROGRAM, V8, P231, DOI 10.1016/0167-6423(87)90035-9
   HILL J, 2000, P ASPLOS
   Lédeczi A, 2001, COMPUTER, V34, P44, DOI 10.1109/2.963443
   Mikk E., 1997, LNCS, V1345
   SABADINI N, 2003, ELECT NOTES THEORETI, V78
   Schneider Klaus, 2004, TEXT THEORET COMP S, DOI 10.1007/978-3-662-10778-2
   *SICSTUS, SICSTUS PROL US MAN
   SPECK J, 2002, INT J APPL MATH COMP, V12, P581
   VOLGYESI P, 2002, 28 EUROMICRO C EUROM
   Wang J, 2002, LECT NOTES COMPUT SC, V2495, P435
   Warmer J., 2003, OBJECT CONSTRAINT LA, Vsecond
NR 17
TC 13
Z9 16
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR
PY 2005
VL 56
IS 1-2
BP 191
EP 210
DI 10.1016/j.scico.2004.11.012
PG 20
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 908SR
UT WOS:000227811000012
DA 2024-07-18
ER

PT J
AU Burgess, M
AF Burgess, M
TI Configurable immunity for evolving human-computer systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE autonomous computer management; cfengine; immunity model
AB The immunity model, as used in the GNU cfengine project, is a distributed framework for performing policy conformant system administration, used on hundreds of thousands of Unix-like and Windows systems. This paper describes the idealized approach to policy-guided maintenance, that is approximated by cfengine, building on the notion of 'convergent' operations, i.e. those that reach stable equilibrium. Agents gravitate towards a policy-determined configurations, through the repeated application of unintelligent 'anti-body' operations or discrete, coded counter-measures. The distributed agents turn passive discovery of state into active strategy for 'curing' systems of policy transgressions. (C) 2003 Elsevier B.V. All rights reserved.
C1 Olso Univ Coll, N-0254 Oslo, Norway.
RP Olso Univ Coll, Cort Adelers Gate 30, N-0254 Oslo, Norway.
EM mark.burgess@iu.hio.no
CR ANDERSON P, P 8 SYST ADM C, V19
   [Anonymous], 1944, THEORY GAMES EC BEHA, DOI DOI 10.1515/9781400829460
   [Anonymous], 1999, Swarm Intelligence
   BEGNUM KM, 2003, P 7 IFIP IEEE IM C N
   Burgess M, 1998, PROCEEDINGS OF THE TWELFTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XII), P283
   Burgess M, 2002, LECT NOTES COMPUT SC, V2506, P169
   Burgess M, 2003, SCI COMPUT PROGRAM, V49, P1, DOI 10.1016/j.scico.2003.08.001
   BURGESS M, 1995, COMPUT SYST, V8, P309
   BURGESS M, 2002, P 3 INT SYST ADM NET, P36
   BURGESS M, 2001, IFIP IEEE 12 ITN WOR, P293
   BURGESS M, 2000, P I INT SYST ADM NET
   BURGESS M, 2004, THEORY NETWORK SYSTE
   COUCH A, 2001, P 15 SYST ADM C LISA, P63
   Couch AL, 1999, USENIX ASSOCIATION PROCEEDINGS OF THE THIRTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XIII), P123
   DHAESELEER P, 1996, P 1996 IEEE S COMP S
   Diao YX, 2002, LECT NOTES COMPUT SC, V2506, P42
   GOUDARZI KM, 1996, P 3 INT C CONF DISTR, V62
   HAGEMARK B, 1989, P WORKSH LARG INST S, P1
   Hellerstein JL, 1999, INTEGRATED NETWORK MANAGEMENT VI, P309, DOI 10.1109/INM.1999.770691
   HOOGENBOOM P, 1993, PROCEEDINGS OF THE SUMMER 1993 USENIX CONFERENCE, P15
   KRAMER J, 1990, IEEE T SOFTWARE ENG, V16, P1293, DOI 10.1109/32.60317
   MARRIOTT D, 1996, IFIP IEEE 7 INT WORK
   Myerson R. B., 2013, Game theory
   Nash Jr J., 1996, Essays on Game Theory, P22
   Sloman M., 1994, Journal of Network and Systems Management, V2, P333, DOI 10.1007/BF02283186
   Somayaji A, 2000, USENIX ASSOCIATION PROCEEDINGS OF THE NINTH USENIX SECURITY SYMPOSIUM, P185
   SOMAYAJI A, 1997, NEW SEC PAR WORKSH, P75
   Traugott S, 2002, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTEENTH SYSTEMS ADMINISTRATION CONFERENCE (LISA XVI), P99
NR 28
TC 16
Z9 18
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN
PY 2004
VL 51
IS 3
BP 197
EP 213
DI 10.1016/j.scico.2003.12.004
PG 17
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 827YO
UT WOS:000221939800001
DA 2024-07-18
ER

PT J
AU Hesselink, WH
AF Hesselink, WH
TI Using eternity variables to specify and prove a serializable database
   interface
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE scrializability; specification; implementation; history variables;
   prophecy variables; forward invariant; backward invariant; mechanical
   verification
ID SPECIFICATION
AB Eternity variables are introduced to specify and verify serializability of transactions of a distributed database. Eternity variables are a new kind of auxiliary variables. They do not occur in the implementation but are used in specification and verification. Elsewhere it has been proved that eternity variables in combination with history variables are semantically complete for proving refinement relations.
   An eternity variable can be thought of as an unknown constant that is determined by the behaviour (execution sequence). In the specification of the database, one eternity variable is used to enforce serialization. In the verification, an additional eternity variable is needed for the connection of the local data with the shared database.
   The formalism is based on linear-time temporal logic, but the analysis of behaviours is completely reduced to the next-state relation together with progress arguments using variant functions. Forward invariants (inductive predicates) are complemented with other, so-called backward, invariants. The proof has been verified with the first-order theorem prover NQTHM to give additional confidence in the result and in the feasibility of the approach. (C) 2004 Elsevier B.V. All rights reserved.
C1 Univ Groningen, Dept Math & Comp Sci, NL-9700 AV Groningen, Netherlands.
C3 University of Groningen
RP Univ Groningen, Dept Math & Comp Sci, POB 800, NL-9700 AV Groningen, Netherlands.
EM wim@cs.rug.nl
OI Hesselink, Wim/0000-0002-1413-4320
CR ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   ABADI M, 1992, 86 SRC DIG SYST RES
   [Anonymous], 1995, Temporal verification of reactive systems-safety
   Boyer R. S., 1997, A Computational Logic Handbook
   BROY M, 1992, DISTRIB COMPUT, V6, P5, DOI 10.1007/BF02276638
   Hesselink W. H., 1999, Formal Aspects of Computing, V11, P45, DOI 10.1007/s001650050035
   Hesselink WH, 2002, LECT NOTES COMPUT SC, V2386, P117
   Hesselink WH, 2002, ACTA INFORM, V38, P343, DOI 10.1007/s002360200080
   HESSELINK WH, IN PRESS ACM T COMPU
   KURKISUONIO R, 1992, DISTRIB COMPUT, V6, P19, DOI 10.1007/BF02276639
   LAM SS, 1992, DISTRIB COMPUT, V6, P39, DOI 10.1007/BF02276640
   LAMPORT L, 1992, DISTRIB COMPUT, V6, P65, DOI 10.1007/BF02276641
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Lynch N. A., 1996, DISTRIBUTED ALGORITH
   Moore JS, 2002, ACM T PROGR LANG SYS, V24, P193, DOI 10.1145/514188.514189
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   SCHNEIDER FB, 1992, DISTRIB COMPUT, V6, P1, DOI 10.1007/BF02276637
NR 17
TC 10
Z9 10
U1 0
U2 0
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY
PY 2004
VL 51
IS 1-2
BP 47
EP 85
DI 10.1016/j.scico.2003.06.001
PG 39
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 817WR
UT WOS:000221208100004
OA Green Published, Green Submitted
DA 2024-07-18
ER

PT J
AU Aldalur, I
AF Aldalur, Inigo
TI Web Augmentation: A systematic mapping study
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Web Augmentation; Systematic mapping study
ID PERSONALIZATION; GUIDELINES; USABILITY
AB The potential of Web Augmentation lies in the fact that all users need to adapt the content, style, or behavior of the web pages they visit. This is because every human being has different desires and needs, yet everyone accesses web pages designed for the general public, which cannot satisfy everyone. Web Augmentation tools have diverse objectives, such as modifying content, style, or behavior. Similarly, some tools are designed to adapt web pages for mobile devices, while others target computers. This mapping study aims to provide insights into recent trends in Web Augmentation for each of its features. By analyzing the data provided, valuable information can be extracted to inform the development of new mechanisms for creating Web Augmentation tools in the future.
C1 [Aldalur, Inigo] Elect & Comp Dept, Loramendi 4, Arrasate Mondragon 20500, Basque Country, Spain.
RP Aldalur, I (corresponding author), Elect & Comp Dept, Loramendi 4, Arrasate Mondragon 20500, Basque Country, Spain.
EM ialdalur@mondragon.edu
RI Aldalur, Iñigo/AAJ-4386-2021
OI Aldalur, Iñigo/0000-0003-4840-8884
FU Software and Systems Engineering research group of Mondragon
   Unibertsitatea - Department of Education, Universities and Research of
   the Basque Government [IT519-22]; Department of Education, Universities
   and Research of the Basque Government [IT519-22]
FX This work was carried out by the Software and Systems Engineering
   research group of Mondragon Unibertsitatea, supported by the Department
   of Education, Universities and Research of the Basque Government
   (IT519-22). Thank Alain Perez for his help in reviewing the articles.
CR Aghaee S, 2011, Lecture notes in computer science, V7059, P347
   Aldalur I, 2017, New perspectives in end-user development, P433
   Aldalur I, 2021, LECT NOTES COMPUT SC, V12935, P221, DOI 10.1007/978-3-030-85610-6_14
   Aldalur I, 2021, IEEE ACCESS, V9, P112686, DOI 10.1109/ACCESS.2021.3104187
   Ansari A, 2003, J MARKETING RES, V40, P131, DOI 10.1509/jmkr.40.2.131.19224
   Arellano C, 2010, LECT NOTES COMPUT SC, V6488, P294, DOI 10.1007/978-3-642-17616-6_27
   Bosetti G, 2022, COMPUT STAND INTER, V82, DOI 10.1016/j.csi.2022.103633
   Bosetti G, 2019, LECT NOTES COMPUT SC, V11496, P223, DOI 10.1007/978-3-030-19274-7_17
   Bosetti G, 2017, LECT NOTES COMPUT SC, V10360, P115, DOI 10.1007/978-3-319-60131-1_7
   Bosetti GA, 2017, J WEB ENG, V16, P75
   Bouvin N. O., 1999, Hypertext '99. Returning to our Diverse Roots. The 10th ACM Conference on Hypertext and Hypermedia, P91, DOI 10.1145/294469.294493
   Chang Kerry Shih-Ping, 2012, Proceedings of the SIGCHI Conference on Human Factors in Computing Systems, P3205, DOI [10.1145/2207676.2208740, DOI 10.1145/2207676.2208740]
   Diaz O, 2013, 24 ACM C HYP SOC MED, P69
   Diaz O., 2012, P 8 ANN INT S WIK OP, P11
   Díaz O, 2014, LECT NOTES COMPUT SC, V8786, P293
   Díaz O, 2013, ACM T WEB, V7, DOI 10.1145/2460383.2460388
   Dong T, 2013, LECT NOTES COMPUT SC, V8120, P280
   Eirinaki M., 2003, ACM T INTERNET TECHN, V3, P1, DOI [10.1145/643477.643478, DOI 10.1145/643477.643478]
   Fernandez A, 2011, INFORM SOFTWARE TECH, V53, P789, DOI 10.1016/j.infsof.2011.02.007
   Firmenich D, 2022, INFORM SOFTWARE TECH, V141, DOI 10.1016/j.infsof.2021.106735
   Firmenich D, 2018, REQUIR ENG, V23, P33, DOI 10.1007/s00766-016-0257-3
   Firmenich Sergio, 2012, Web Engineering. Proceedings 12th International Conference, ICWE 2012, P268, DOI 10.1007/978-3-642-31753-8_20
   Firmenich S, 2019, UNIVERSAL ACCESS INF, V18, P771, DOI 10.1007/s10209-017-0608-y
   Firmenich S, 2016, LECT NOTES COMPUT SC, V9671, P77, DOI 10.1007/978-3-319-38791-8_5
   Firmenich S, 2014, INT J HUM-COMPUT ST, V72, P53, DOI 10.1016/j.ijhcs.2013.08.014
   Firmenich S, 2011, LECT NOTES COMPUT SC, V6757, P198, DOI 10.1007/978-3-642-22233-7_14
   Garcia-Lopez E, 2017, COMPUT STAND INTER, V52, P51, DOI 10.1016/j.csi.2017.01.011
   Gardiner S, 2011, LECT NOTES COMPUT SC, V6946, P426, DOI 10.1007/978-3-642-23774-4_36
   Gobert C, 2019, PROCEEDINGS OF IUI 2019, P481, DOI 10.1145/3301275.3302314
   Goffe L, 2022, INTERACT COMPUT, V33, P335, DOI 10.1093/iwc/iwac015
   Gollapudi S.P.V., 2019, J. Bank. Financ. Technol., V3, P131
   Gonzalez Rodolfo, 2019, End-User Development. 7th International Symposium, IS-EUD 2019. Proceedings: Lecture Notes in Computer Science (LNCS 11553), P234, DOI 10.1007/978-3-030-24781-2_22
   González-Mora C, 2020, LECT NOTES COMPUT SC, V12128, P547, DOI 10.1007/978-3-030-50578-3_42
   Grassi M, 2013, LIT LINGUIST COMPUT, V28, P640, DOI 10.1093/llc/fqt060
   Hagemann S, 2010, LECT NOTES ARTIF INT, V5990, P23, DOI 10.1007/978-3-642-12145-6_3
   Hertel Henrik, 2020, EICS '20 Companion: Companion Proceedings of the 12th ACM SIGCHI Symposium on Engineering Interactive Computing Systems, DOI 10.1145/3393672.3398641
   Horváth R, 2013, LECT NOTES COMPUT SC, V8095, P609, DOI 10.1007/978-3-642-40814-4_75
   Jagan S., 2015, International Research Journal of Engineering and Technology, V2, P6
   Koidl K., 2014, 25 ACM C HYP SOC MED, P66
   Krishnaraju Vinodh, 2013, Journal of Systems and Information Technology, V15, P254, DOI 10.1108/JSIT-11-2012-0065
   Lobo J, 2017, EIGHTH INTERNATIONAL WORKSHOP ON THE WEB OF THINGS (WOT), P11, DOI 10.1145/3199919.3199923
   Miján JL, 2016, LECT NOTES COMPUT SC, V9671, P588, DOI 10.1007/978-3-319-38791-8_54
   Lv JM, 2018, CIKM'18: PROCEEDINGS OF THE 27TH ACM INTERNATIONAL CONFERENCE ON INFORMATION AND KNOWLEDGE MANAGEMENT, P1611, DOI 10.1145/3269206.3269249
   Malik Zeeshan Khawar, 2012, Journal of Emerging Technologies in Web Intelligence, V4, P285, DOI 10.4304/jetwi.4.3.285-296
   Marticorena LG, 2023, MULTIMED TOOLS APPL, V82, P11793, DOI 10.1007/s11042-022-13694-2
   Rivero JM, 2018, LECT NOTES COMPUT SC, V10845, P162, DOI 10.1007/978-3-319-91662-0_12
   Mobasher B, 2000, COMMUN ACM, V43, P142, DOI 10.1145/345124.345169
   Mulvenna MD, 2000, COMMUN ACM, V43, P123, DOI 10.1145/345124.345165
   Nebeling M, 2013, ACM SIGCHI S ENG INT, P23
   Petersen K, 2015, INFORM SOFTWARE TECH, V64, P1, DOI 10.1016/j.infsof.2015.03.007
   POLEY E., 2010, P SIGCHI C HUMAN FAC, P4357
   Salonen V, 2016, TELEMAT INFORM, V33, P1088, DOI 10.1016/j.tele.2016.03.004
   Setti S., 2019, J. Online Inform, V3, P110, DOI DOI 10.15575/JOIN.V3I2.205
   Sottile Cristian, 2019, End-User Development. 7th International Symposium, IS-EUD 2019. Proceedings: Lecture Notes in Computer Science (LNCS 11553), P239, DOI 10.1007/978-3-030-24781-2_23
   Tayeh Ahmed A. O., 2015, Web Information Systems Engineering - WISE 2015. 16th International Conference. Proceedings: LNCS 9418, P61, DOI 10.1007/978-3-319-26190-4_5
   Urbieta M, 2020, SOFTW SYST MODEL, V19, P1541, DOI 10.1007/s10270-020-00779-5
   Vaddadi Praveen, 2011, International Journal of Information and Communication Technology, V3, P93, DOI 10.1504/IJICT.2011.039526
   Valderas P, 2020, COMPUTING, V102, P1909, DOI 10.1007/s00607-020-00796-8
   Wischenbart M, 2021, MULTIMED TOOLS APPL, V80, P6785, DOI 10.1007/s11042-020-09803-8
   Zhang JP, 2020, ECOL ECON, V176, DOI 10.1016/j.ecolecon.2020.106725
NR 60
TC 0
Z9 0
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 232
AR 103045
DI 10.1016/j.scico.2023.103045
EA OCT 2023
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Y1HW4
UT WOS:001102858000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Harbo, SKR
   Voldby, EP
   Madsen, J
   Albano, M
AF Harbo, Sean Kristian Remond
   Voldby, Emil Palmelund
   Madsen, Jonas
   Albano, Michele
TI ACSmt: A plugin for eclipse papyrus to model systems of systems
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Papyrus; UML profile; Metamodel; SoS modeling; DSML
AB While System of Systems (SoS) architectures for large and complex software projects are gaining momentum, the commonly used modeling and tooling approaches are still generalpurpose or oriented towards single systems. Developers could benefit from methods and tools that avoid system-centric details in favor of native SoS modeling support. This paper presents a diagram-centric modeling tool with native SoS modeling support. The tool is implemented as a plugin for the Eclipse Papyrus modeling tool. The tool was showcased as a demo at MODELS'22. The code of the plugin is freely available via Github.
   (c) 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Harbo, Sean Kristian Remond; Voldby, Emil Palmelund; Madsen, Jonas; Albano, Michele] Aalborg Univ, Dept Comp Sci, Selma Lagerlofs Vej 300, DK-9220 Aalborg, Denmark.
C3 Aalborg University
RP Harbo, SKR (corresponding author), Aalborg Univ, Dept Comp Sci, Selma Lagerlofs Vej 300, DK-9220 Aalborg, Denmark.
EM seankrh@cs.aau.dk; mialb@cs.aau.dk
RI Albano, Michele/Q-2177-2015
OI Albano, Michele/0000-0002-3777-9981
FU ERC Advanced Grant LASSO [669844]; Villum Fonden [37819]; European
   Research Council (ERC) [669844] Funding Source: European Research
   Council (ERC)
FX Research funded in part by the ERC Advanced Grant LASSO (669844) ; by
   the S4OS Villum Investigator Grant (37819) from Villum Fonden.We thank
   Saadia Dhouib (CEA List, France) and Geza Kulcsar (IncQuery Labs,
   Hungary) for their support while designing and implementing our tool as
   a plugin for the Eclipse Framework, and for participating in usability
   testing of ACSmt, which is reported in [29] .
CR Al-Sarawi S, 2020, PROCEEDINGS OF THE 2020 FOURTH WORLD CONFERENCE ON SMART TRENDS IN SYSTEMS, SECURITY AND SUSTAINABILITY (WORLDS4 2020), P449, DOI 10.1109/WorldS450073.2020.9210375
   Albano Michele, 2020, 2020 IEEE Conference on Industrial Cyberphysical Systems (ICPS), P429, DOI 10.1109/ICPS48405.2020.9274746
   [Anonymous], 2023, index-org.eclipse.papyrus.git
   [Anonymous], 2023, Modelio the open source modeling environment
   Axelsson J, 2019, 2019 14TH ANNUAL CONFERENCE SYSTEM OF SYSTEMS ENGINEERING (SOSE), P31, DOI [10.1109/sysose.2019.8753846, 10.1109/SYSOSE.2019.8753846]
   COMPASS Consortium, 2014, Comprehensive Modelling for Advanced Systems of Systems
   DANSE Consortium, 2015, DANSE-Designing for Adaptability and evolutioN in System of systems Engineering
   DANSE Consortium, 2015, Configure DANSE Tool-Net environment
   Delsing J, 2017, IoT Automation, P79
   Harbo Sean Kristian Remond, 2022, MODELS '22: Proceedings of the 25th International Conference on Model Driven Engineering Languages and Systems: Companion Proceedings, P51, DOI 10.1145/3550356.3559093
   Harbo SKR, 2021, 2021 16TH INTERNATIONAL SYSTEM OF SYSTEMS ENGINEERING CONFERENCE (SOSE), P88, DOI 10.1109/SOSE52739.2021.9497495
   Laursen Per Lange, 2020, Leveraging Applications of Formal Methods, Verification and Validation. Applications. 9th International Symposium on Leveraging Applications of Formal Methods, ISoLA 2020. Proceedings. Lecture Notes in Computer Science (LNCS 12478), P415, DOI 10.1007/978-3-030-61467-6_27
   Lethbridge TC, 2021, SCI COMPUT PROGRAM, V208, DOI 10.1016/j.scico.2021.102665
   Madni AM, 2018, SYSTEMS ENG, V21, P172, DOI 10.1002/sys.21438
   Maggi B., 2020, Papyrus-list
   Maier M., 1998, SYST ENG, V1, P267, DOI [DOI 10.1002/(SICI)1520-6858(1998)1:43.0.CO;2-D, 10.1002/(SICI)1520-6858(1998)1:4lt;267::AID-SYS3gt;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4LT;267::AID-SYS3GT;3.0.CO;2-D, DOI 10.1002/(SICI)1520-6858(1998)1:4<267::AID-SYS3>3.0.CO;2-D]
   Mohamed MA, 2020, J COMPUT LANG, V59, DOI 10.1016/j.cola.2020.100972
   Mori M, 2018, J SOFTW-EVOL PROC, V30, DOI 10.1002/smr.1878
   Oquendo F, 2016, IEEE INT C ENG COMP, P13, DOI [10.1109/ICECCS.2016.35, 10.1109/ICECCS.2016.012]
   Remond Harbo S.K., 2022, The ACS modeling tool
   The Eclipse Foundation, 2017, Papyrus RT Git
   The Eclipse Foundation, 2022, Papyrus SysML Git
   The Eclipse Foundation, 2022, Papyrus robotics Git
   The Eclipse Foundation, 2022, Eclipse modeling tools
   The Eclipse Foundation, 2021, Papyrus OPC UA Git
   The Eclipse Foundation, 2022, Eclipse papyrusTM modeling environment
   The Eclipse Foundation, 2019, Papyrus UML Light Git
   UPPAAL developers, 2023, Features of the UPPAAL model checking tool
   Van Tendeloo Y, 2017, SIMUL-T SOC MOD SIM, V93, P103, DOI 10.1177/0037549716678330
   Voldby E.P., 2022, A modeling tool for system of systems
   Wainer G, 2002, SOFTWARE PRACT EXPER, V32, P1261, DOI 10.1002/spe.482
   Zhang LC, 2014, PROCEEDINGS OF THE 2014 20TH INTERNATIONAL CONFERENCE ON AUTOMATION AND COMPUTING (ICAC'14), P55, DOI 10.1109/IConAC.2014.6935460
NR 32
TC 1
Z9 1
U1 1
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103008
DI 10.1016/j.scico.2023.103008
EA AUG 2023
PG 6
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA S3XZ1
UT WOS:001070545900001
OA hybrid
DA 2024-07-18
ER

PT J
AU Bucchiarone, A
   Martorella, T
   Frageri, D
   Colombo, D
AF Bucchiarone, Antonio
   Martorella, Tommaso
   Frageri, Davide
   Colombo, Diego
TI PolyGloT: A personalized and gamified eTutoring system for learning
   modelling and programming skills
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Adaptive learning; 1-1 eTutoring; Modelling; Programming; Gamification
AB The digital age is changing the role of educators and pushing for a paradigm shift in the education system. By formalizing a learning framework that considers the perspectives of both teachers and students, taking into account their unique needs and diverse experiences, we aim to define and implement an open, content-agnostic, and extensible eTutoring platform to design and consume adaptive and gamified learning experiences. We present PolyGloT, a system able to help teachers to design and implement adaptive learning paths. We demonstrate through a concrete case study the use of a mixed narrative, that is a gamified learning path mixing lessons, quizzes and modelling exercises to learn concepts of the SysML-v2 modelling language.& COPY; 2023 Elsevier B.V. All rights reserved.
C1 [Bucchiarone, Antonio] Fdn Bruno Kessler, Trento, Italy.
   [Martorella, Tommaso] Ecole Polytech Fed Lausanne EPFL, Lausanne, Switzerland.
   [Frageri, Davide] Univ Trento, Trento, Italy.
   [Colombo, Diego] Microsoft Corp, Redmond, WA USA.
C3 Fondazione Bruno Kessler; Swiss Federal Institutes of Technology Domain;
   Ecole Polytechnique Federale de Lausanne; University of Trento;
   Microsoft
RP Bucchiarone, A (corresponding author), Fdn Bruno Kessler, Trento, Italy.
EM bucchiarone@fbk.eu
RI Bucchiarone, Antonio/K-3128-2016
OI Bucchiarone, Antonio/0000-0003-1154-1382
FU Erasmus+ Programme of the European Union;  [101055893]
FX This project was undertaken with the support of the Erasmus+ Programme
   of the European Union: "Partnerships for Innovation: Alliances"
   (ERASMUS-EDU-2021-PI-ALL-INNO) . Project ENriching Circular use of OeR
   for Education (ENCORE) (Reference number 101055893) .
CR Bassanelli S, 2022, ACTA PSYCHOL, V228, DOI 10.1016/j.actpsy.2022.103657
   BENWARE CA, 1984, AM EDUC RES J, V21, P755, DOI 10.3102/00028312021004755
   Bertoli P, 2009, 2009 IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, VOLS 1 AND 2, P17, DOI 10.1109/ICWS.2009.31
   Bucchiarone A, 2021, 2021 INTERNATIONAL SYMPOSIUM ON SOFTWARE ENGINEERING FOR ADAPTIVE AND SELF-MANAGING SYSTEMS (SEAMS 2021), P149, DOI 10.1109/SEAMS51251.2021.00028
   Deslauriers L, 2019, P NATL ACAD SCI USA, V116, P19251, DOI 10.1073/pnas.1821936116
   Deterding S., 2011, P C HUM FACT CHI 11, P2425, DOI [10.1145/1979742.1979575, DOI 10.1145/1979742.1979575, 10.1145/ 1979742.1979575]
   Deterding S., 2011, P 15 INT AC MINDTREK, P9, DOI [DOI 10.1145/2181037.2181040, 10.1145/2181037.2181040]
   Koedinger KR, 2016, LAK '16 CONFERENCE PROCEEDINGS: THE SIXTH INTERNATIONAL LEARNING ANALYTICS & KNOWLEDGE CONFERENCE,, P388, DOI 10.1145/2883851.2883957
NR 8
TC 0
Z9 0
U1 4
U2 13
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2024
VL 231
AR 103003
DI 10.1016/j.scico.2023.103003
EA AUG 2023
PG 10
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA Q1OR2
UT WOS:001055286800001
DA 2024-07-18
ER

PT J
AU Larsen, KG
   Mariegaard, A
   Schmid, S
   Srba, J
AF Larsen, Kim G.
   Mariegaard, Anders
   Schmid, Stefan
   Srba, Jiri
TI AllSynth: A BDD-based approach for network update synthesis
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Computer networks; Software defined networking; Update synthesis; Binary
   decision diagrams
AB The increasingly stringent dependability requirements on communication networks as well as the need to render these networks more adaptive to improve performance, demand for more automated approaches to operate networks. We present AllSynth, a symbolic synthesis tool for updating communication networks in a provably correct and efficient manner. AllSynth automatically synthesizes network update schedules which transiently ensure a wide range of policy properties expressed using linear temporal logic (LTL). In particular, in contrast to existing approaches, AllSynth symbolically computes and compactly represents all feasible and cost-optimal solutions. At its heart, AllSynth relies on a novel parameterized use of binary decision diagrams (BDDs) which greatly improves performance. Indeed, AllSynth not only provides formal correctness guarantees and outperforms existing state-of-the-art tools in terms of generality, but also in terms of runtime as documented by experiments on a benchmark of real-world network topologies.& COPY; 2023 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons .org /licenses /by /4 .0/).
C1 [Larsen, Kim G.; Mariegaard, Anders; Srba, Jiri] Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
   [Schmid, Stefan] TU Berlin, Berlin, Germany.
   [Schmid, Stefan] Univ Vienna, Vienna, Austria.
C3 Aalborg University; Technical University of Berlin; University of Vienna
RP Srba, J (corresponding author), Aalborg Univ, Dept Comp Sci, Aalborg, Denmark.
EM srba@cs.aau.dk
OI Schmid, Stefan/0000-0002-7798-1711; Srba, Jiri/0000-0001-5551-6547;
   Guldstrand Larsen, Kim/0000-0002-5953-3384
FU Vienna Science and Technology Fund (WWTF); ERC Advanced Grant LASSO;
   Villum Investigator Grant S4OS from Villum Fonden [37819]; DFF project
   QASNET; DIREC: Digital Research Centre Denmark
FX We want to thank the anonymous reviewers for their useful comments and
   suggestions. The research has been funded by the Vienna Science and
   Technology Fund (WWTF) [10.47379/ICT19045] , the ERC Advanced Grant
   LASSO, the Villum Investigator Grant S4OS (37819) from Villum Fonden,
   DFF project QASNET as well as DIREC: Digital Research Centre Denmark.
CR Akhoondian Amiri S., 2018, 45 INT C AUTOMATA LA, P143
   Anderson CJ, 2014, ACM SIGPLAN NOTICES, V49, P113, DOI 10.1145/2535838.2535862
   [Anonymous], 2021, DD PYTH PACK
   [Anonymous], 2018, Duluth News Tribune
   Avin C., 2020, PROC ACM SIGMETRICS
   Beckett R, 2016, PROCEEDINGS OF THE 2016 ACM CONFERENCE ON SPECIAL INTEREST GROUP ON DATA COMMUNICATION (SIGCOMM '16), P328, DOI 10.1145/2934872.2934909
   Benson T., 2010, P 10 ACM SIGCOMM C I, P267, DOI DOI 10.1145/1879141.1879175
   Bonsma P, 2013, THEOR COMPUT SCI, V510, P1, DOI 10.1016/j.tcs.2013.09.012
   Brain M.N., 2017, P 2 INT WORKSHOP SAT, P1
   Brandt S, 2016, IEEE INFOCOM SER
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Canini Marco, 2015, 2015 IEEE Conference on Computer Communications (INFOCOM). Proceedings, P190, DOI 10.1109/INFOCOM.2015.7218382
   Cerny Pavol, 2016, Distributed Computing. 30th International Symposium, DISC 2016. Proceedings: LNCS 9888, P114, DOI 10.1007/978-3-662-53426-7_9
   Chirgwin Richard, 2017, Google routing blunder sent japan's internet dark on friday
   Cimatti A., 2000, Int. J. Softw. Tools for Technol. Transf. (STTT), V2, P410, DOI [DOI 10.1007/S100090050046, 10.1007/s100090050046]
   Cittadini L., 2016, IEEE INFOCOM 2016, P1
   De Giacomo Giuseppe., International Joint Conference on Artificial Intelligence, IJCAI. IJCAI/AAAI, P854, DOI DOI 10.5555/2540128.2540252
   Dudycz Szymon, 2016, 2016 46th Annual IEEE/IFIP International Conference on Dependable Systems and Networks (DSN). Proceedings, P133, DOI 10.1109/DSN.2016.21
   El-Hassany A, 2018, PROCEEDINGS OF THE 15TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION (NSDI'18), P579
   Feamster N., 2017, P 2018 APPL NETW
   Finkbeiner B, 2019, Arxiv, DOI arXiv:1907.11061
   Foerster KT, 2019, IEEE COMMUN SURV TUT, V21, P1435, DOI 10.1109/COMST.2018.2876749
   Foerster KT, 2017, 2017 IEEE 16TH INTERNATIONAL SYMPOSIUM ON NETWORK COMPUTING AND APPLICATIONS (NCA), P153
   Foerster KT, 2018, THEOR COMPUT SCI, V709, P48, DOI 10.1016/j.tcs.2016.11.018
   Glavind M., 2020, PROC 38 INT S COMPUT
   Heller Brandon., 2013, Proceedings of the Second ACM SIGCOMM Workshop on Hot Topics in Software Defined Networking, HotSDN '13, P37
   Jin X, 2014, ACM SIGCOMM COMP COM, V44, P539, DOI 10.1145/2740070.2626307
   Kazemian P., 2012, P 9 USENIX S NETWORK, P113
   Kazemian P., 2013, NSDI
   Kellerer W., 2019, P IEEE PIEEE
   Knight S, 2011, IEEE J SEL AREA COMM, V29, P1765, DOI 10.1109/JSAC.2011.111002
   Kreutz D, 2015, P IEEE, V103, P14, DOI 10.1109/JPROC.2014.2371999
   Larsen Kim G, 2022, Zenodo, DOI 10.5281/ZENODO.6534948
   Larsen KG, 2022, LECT NOTES COMPUT SC, V13299, P344, DOI 10.1007/978-3-031-10363-6_23
   LEE CY, 1959, BELL SYST TECH J, V38, P985, DOI 10.1002/j.1538-7305.1959.tb01585.x
   Liu HH, 2013, ACM SIGCOMM COMP COM, V43, P411, DOI 10.1145/2534169.2486005
   Ludwig A, 2016, SIGMETRICS/PERFORMANCE 2016: PROCEEDINGS OF THE SIGMETRICS/PERFORMANCE JOINT INTERNATIONAL CONFERENCE ON MEASUREMENT AND MODELING OF COMPUTER SCIENCE, P273, DOI [10.1145/2964791.2901476, 10.1145/2896377.2901476]
   Ludwig A, 2015, PODC'15: PROCEEDINGS OF THE 2015 ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P13, DOI 10.1145/2767386.2767412
   Ludwig Arne., 2014, HotNets-XIII, P15, DOI DOI 10.1145/2670518.2673873
   Mahajan Ratul., 2013, Proceedings of the Twelfth ACM Workshop on Hot Topics in Networks, P20, DOI 10.1145/2535771.2535791
   McClurg J, 2015, ACM SIGPLAN NOTICES, V50, P196, DOI [10.1145/2737924.2737980, 10.1145/2813885.2737980]
   Monsanto Christopher, 2013, 10 USENIX S NETW SYS, P1
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Prabhu S, 2020, PROCEEDINGS OF THE 17TH USENIX SYMPOSIUM ON NETWORKED SYSTEMS DESIGN AND IMPLEMENTATION, P953
   Reitblatt M, 2012, ACM SIGCOMM COMP COM, V42, P323, DOI 10.1145/2377677.2377748
   Somenzi Fabio, 2015, CUDD: CU decision diagram package release 3.0.0
   Steffen S, 2020, SIGCOMM '20: PROCEEDINGS OF THE 2020 ANNUAL CONFERENCE OF THE ACM SPECIAL INTEREST GROUP ON DATA COMMUNICATION ON THE APPLICATIONS, TECHNOLOGIES, ARCHITECTURES, AND PROTOCOLS FOR COMPUTER COMMUNICATION, P750, DOI 10.1145/3387514.3405900
   Yufei Wang, 1999, Proceedings Eight International Conference on Computer Communications and Networks (Cat. No.99EX370), P582, DOI 10.1109/ICCCN.1999.805577
   Zerwas J., 2018, PROC IFIP NETWORKING
   Zhang Q, 2017, PROCEEDINGS OF THE 2017 INTERNET MEASUREMENT CONFERENCE (IMC'17), P78, DOI 10.1145/3131365.3131375
   Zhou W., 2015, P 12 USENIX C NETWOR, P73
NR 51
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102992
DI 10.1016/j.scico.2023.102992
EA JUL 2023
PG 19
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA P0BX6
UT WOS:001047389900001
OA Green Published, hybrid
DA 2024-07-18
ER

PT J
AU Moharil, A
   Sharma, A
AF Moharil, Ambarish
   Sharma, Arpit
TI TABASCO: A transformer based contextualization toolkit
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Ambiguity; Requirements; Quality; Natural language; Transformer
ID REQUIREMENTS; AMBIGUITY
AB Ambiguity means that a single reader can interpret the natural language (NL) software requirement in more than one way or that multiple readers come to different interpretations. Ambiguous NL software requirements may result in the production of poor quality software artifacts in later stages of software development life cycle. In the literature, several approaches have been proposed to identify multiple meanings of commonly used terms in different application domains, i.e., cross-domain ambiguities. Unfortunately, none of these approaches are able to identify different contexts in which a term has been used within the requirements document of a single application domain or in a multidisciplinary project document. We call this type of ambiguity as intra-domain ambiguity. We have designed and developed TABASCO, a tool for detecting and identifying such ambiguities present in the software requirements and other project-related documents. TABASCO focuses on detecting nouns which have been used in different contexts by computing contextual embeddings represented as real-valued vector for every instance of a candidate noun present in the document using the Bidirectional Encoder Representations from Transformers (BERT) as a language model. In the next step, K-means clustering algorithm with cosine similarity metric is applied which allows creating multiple clusters for a candidate noun such that each cluster contains all those instances which have been used in a similar context. TABASCO provides an intuitive graphical user interface which can be used to generate a summary report and a detailed report for each target noun providing the details of different contexts in which this noun has been used in the project. The detailed report also presents the most similar words for every occurrence of the target noun and some example sentences from the corpus to show the context-specific meaning. Our demonstrative experiments using two case studies show that TABASCO can be very useful for identifying intra-domain ambiguities in software requirements and other project-related documents written using NL text.
C1 [Moharil, Ambarish] Eindhoven Univ Technol, Eindhoven, Netherlands.
   [Sharma, Arpit] Indian Inst Sci Educ & Res, Bhopal, India.
C3 Eindhoven University of Technology; Indian Institute of Science
   Education & Research (IISER) - Bhopal
RP Sharma, A (corresponding author), Indian Inst Sci Educ & Res, Bhopal, India.
EM a.moharil@student.tue.nl; arpit.sharma@iiserb.ac.in
CR Ajagbe M, 2022, 2022 30TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE (RE 2022), P309, DOI 10.1109/RE54965.2022.00046
   Alhoshan W, 2023, INFORM SOFTWARE TECH, V159, DOI 10.1016/j.infsof.2023.107202
   Alhoshan W, 2018, PROCEEDINGS OF THE 12TH ACM/IEEE INTERNATIONAL SYMPOSIUM ON EMPIRICAL SOFTWARE ENGINEERING AND MEASUREMENT (ESEM 2018), DOI 10.1145/3239235.3267441
   [Anonymous], 2014, ESEM
   Arora C, 2017, IEEE T SOFTWARE ENG, V43, P918, DOI 10.1109/TSE.2016.2635134
   Berry D.M., 2003, HANDBOOK
   Berry DM, 2005, IEEE SOFTWARE, V22, P55, DOI 10.1109/MS.2005.22
   Bhatia K, 2021, 36TH ANNUAL ACM SYMPOSIUM ON APPLIED COMPUTING, SAC 2021, P1312, DOI 10.1145/3412841.3442005
   Bhatia K, 2020, ISOFT: PROCEEDINGS OF THE 13TH INNOVATIONS IN SOFTWARE ENGINEERING CONFERENCE, DOI 10.1145/3385032.3385039
   Bojanowski P., 2017, Transactions of the Association for Computational Linguistics, V5, P135, DOI DOI 10.1162/TACLA00051
   Bucchiarone A., 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P473, DOI 10.1109/ASE.2008.77
   Chantree F, 2006, RE'06: 14TH IEEE INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE, PROCEEDINGS, P59
   Dalpiaz F, 2019, INFORM SOFTWARE TECH, V110, P3, DOI 10.1016/j.infsof.2018.12.007
   Devlin J, 2019, 2019 CONFERENCE OF THE NORTH AMERICAN CHAPTER OF THE ASSOCIATION FOR COMPUTATIONAL LINGUISTICS: HUMAN LANGUAGE TECHNOLOGIES (NAACL HLT 2019), VOL. 1, P4171
   Efstathiou V, 2018, IEEE WORK CONF MIN S, P38, DOI 10.1145/3196398.3196448
   Ezzini S, 2022, PROC INT CONF SOFTW, P187, DOI 10.1145/3510003.3510157
   Ezzini S, 2021, PROC INT CONF SOFTW, P1485, DOI 10.1109/ICSE43902.2021.00133
   Femmer H, 2017, J SYST SOFTWARE, V123, P190, DOI 10.1016/j.jss.2016.02.047
   Fernández DM, 2017, EMPIR SOFTW ENG, V22, P2298, DOI 10.1007/s10664-016-9451-7
   Ferrari A, 2019, AUTOMAT SOFTW ENG, V26, P559, DOI 10.1007/s10515-019-00261-7
   Ferrari A, 2018, 2018 5TH INTERNATIONAL WORKSHOP ON ARTIFICIAL INTELLIGENCE FOR REQUIREMENTS ENGINEERING (AIRE 2018), P31, DOI 10.1109/AIRE.2018.00011
   Ferrari A, 2017, 2017 IEEE 25TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW), P393, DOI 10.1109/REW.2017.20
   Ferrari A, 2017, INT REQUIR ENG CONF, P502, DOI 10.1109/RE.2017.29
   Gleich B, 2010, LECT NOTES COMPUT SC, V6182, P218, DOI 10.1007/978-3-642-14192-8_20
   Guelle KJ, 2020, 2020 IEEE SEVENTH INTERNATIONAL WORKSHOP ON ARTIFICIAL INTELLIGENCE FOR REQUIREMENTS ENGINEERING (AIRE 2020), P52, DOI 10.1109/AIRE51212.2020.00015
   Hey T, 2020, INT REQUIR ENG CONF, P169, DOI 10.1109/RE48521.2020.00028
   Jain V., 2020, CEUR WORKSHOP PROC, V2584
   Kamsties E, 2005, ENGINEERING AND MANAGING SOFTWARE REQUIREMENTS, P245, DOI 10.1007/3-540-28244-0_11
   Mikolov T, 2013, Arxiv, DOI [arXiv:1301.3781, 10.48550/arXiv.1301.3781]
   Mikolov Tomas, 2013, Advances in Neural Information Processing Systems, P3111, DOI DOI 10.48550/ARXIV.1310.4546
   Mishra Siba, 2021, ISEC 2021: Proceedings of the 14th Innovations in Software Engineering Conference (formerly known as India Software Engineering Conference), DOI 10.1145/3452383.3452387
   Mishra Siba, 2021, ISEC 2021: Proceedings of the 14th Innovations in Software Engineering Conference (formerly known as India Software Engineering Conference), DOI 10.1145/3452383.3452401
   Mishra S, 2020, LECT NOTES COMPUT SC, V12045, P203, DOI 10.1007/978-3-030-44429-7_15
   Mishra S, 2019, 2019 IEEE 27TH INTERNATIONAL REQUIREMENTS ENGINEERING CONFERENCE WORKSHOPS (REW 2019), P234, DOI 10.1109/REW.2019.00048
   Moharil A, 2022, 2022 IEEE/ACM 1ST INTERNATIONAL WORKSHOP ON NATURAL LANGUAGE-BASED SOFTWARE ENGINEERING (NLBSE 2022), P51, DOI 10.1145/3528588.3528651
   Pohl K, 2010, REQUIREMENTS ENGINEERING: FUNDAMENTALS, PRINCIPLES, AND TECHNIQUES, P1, DOI 10.1007/978-3-642-12578-2
   Rosadini B, 2017, LECT NOTES COMPUT SC, V10153, P344, DOI 10.1007/978-3-319-54045-0_24
   Tjong Sri Fatimah, 2013, Requirements Engineering: Foundation for Software Quality. 19th International Working Conference, REFSQ 2013. Proceedings, P80, DOI 10.1007/978-3-642-37422-7_6
   Wang YW, 2020, INT REQUIR ENG CONF, P180, DOI 10.1109/RE48521.2020.00029
   Yang H, 2011, REQUIR ENG, V16, P163, DOI 10.1007/s00766-011-0119-y
   Zhao L, 2022, ACM COMPUT SURV, V54, DOI 10.1145/3444689
NR 41
TC 0
Z9 0
U1 2
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG
PY 2023
VL 230
AR 102994
DI 10.1016/j.scico.2023.102994
EA JUL 2023
PG 16
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA N5OO4
UT WOS:001037505700001
DA 2024-07-18
ER

PT J
AU Parolini, F
   Miné, A
AF Parolini, Francesco
   Mine, Antoine
TI Sound static analysis of regular expressions for vulnerabilities to
   denial of service attacks
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Regular expressions; Denial of service; Algorithmic complexity attacks;
   Static analysis; Security
ID DERIVATIVES; AMBIGUITY
AB Modern programming languages often provide functions to manipulate regular expressions in standard libraries. If they offer support for advanced features, the matching algorithm has an exponential worst-case time complexity: for some so-called vulnerable regular expressions, an attacker can craft ad hoc strings to force the matcher to exhibit an exponential behavior and perform a Regular Expression Denial of Service (ReDoS) attack. In this paper, we introduce a framework based on a tree semantics to statically identify ReDoS vulnerabilities. In particular, we put forward an algorithm to extract an overapproximation of the set of words that are dangerous for a regular expression, effectively catching all possible attacks. We have implemented the analysis in a tool called rat, and testing it on a dataset of 74,669 regular expressions, we observed that in 99.78% of the instances the analysis terminates in less than one second. We compared rat to seven other ReDoS detectors, and we found that our tool is faster, often by orders of magnitude, than most other tools. While raising a low number of false positives, rat is the only ReDoS detector that does not report false negatives.(c) 2023 Elsevier B.V. All rights reserved.
C1 [Parolini, Francesco; Mine, Antoine] Sorbonne Univ, LIP6, F-75005 Paris, France.
   [Mine, Antoine] CNRS, Paris, France.
C3 Sorbonne Universite; Centre National de la Recherche Scientifique (CNRS)
RP Parolini, F (corresponding author), Sorbonne Univ, LIP6, F-75005 Paris, France.
EM francesco.parolini@lip6.fr; antoine.mine@lip6.fr
OI Parolini, Francesco/0000-0002-1077-7812
FU European Research Council [681393-MOPSA]
FX This work is partially supported by the European Research Council under
   Consolidator Grant Agreement 681393-MOPSA.
CR Allauzen C, 2011, INT J FOUND COMPUT S, V22, P883, DOI 10.1142/S0129054111008477
   [Anonymous], 2020, SNORT DATABASE
   [Anonymous], REDOS DETECTOR TOOL
   [Anonymous], PERLS REGEX MATCHING
   [Anonymous], RUBYS REGEX MODULE D
   [Anonymous], SONARSOURCE TOOL
   [Anonymous], SAFE REGEX TOOL
   [Anonymous], RUSTS REGEX MATCHING
   [Anonymous], PYPI PACKET MANAGER
   [Anonymous], 2019, CLOUDFLARES OUTAGE P
   [Anonymous], PHPS REGEX MATCHING
   [Anonymous], PERLS REGEX MODULE D
   [Anonymous], JAVAS REGEX MATCHING
   [Anonymous], V8 NEW MATCHING ENGI
   [Anonymous], PCRE2 REGEX ENGINE D
   [Anonymous], REGEXPLOIT TOOL
   [Anonymous], RUBYS REGEX MATCHING
   [Anonymous], Node Package Manager
   [Anonymous], RUSTS REGEX MODULE D
   [Anonymous], PYTHONS REGEX MODULE
   [Anonymous], 1961, Surveys, DOI [10.1070/RM1961v016n05ABEH004112, DOI 10.1070/RM1961V016N05ABEH004112]
   [Anonymous], 2016, STACK OVERFLOW OUTAG
   [Anonymous], REGEXLIB DATABASE
   [Anonymous], GOOGLES RE2 MATCHING
   [Anonymous], PYTHONS REGEX MATCHI
   [Anonymous], V8 S REGEX MATCHING
   [Anonymous], 2020, National vulnerability database
   Antimirov V, 1996, THEOR COMPUT SCI, V155, P291, DOI 10.1016/0304-3975(95)00182-4
   Becchi M, 2007, IEEE INFOCOM SER, P1064, DOI 10.1109/INFCOM.2007.128
   Berglund M, 2017, THEOR COMPUT SCI, V679, P69, DOI 10.1016/j.tcs.2016.09.006
   Berglund M, 2014, ELECTRON PROC THEOR, P109, DOI 10.4204/EPTCS.151.7
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Chapman C., 2016, P 25 INT S SOFTWARE, P282, DOI DOI 10.1145/2931037.2931073
   Cody-Kenny B, 2017, PROCEEDINGS OF THE 2017 GENETIC AND EVOLUTIONARY COMPUTATION CONFERENCE (GECCO'17), P1280, DOI 10.1145/3071178.3071196
   Crosby SA, 2003, USENIX ASSOCIATION PROCEEDINGS OF THE 12TH USENIX SECURITY SYMPOSIUM, P29
   David Jean, 2021, Penn ar Bed (Brest), V244, P1, DOI 10.1109/SP40001.2021.00032
   Davis JC, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P246, DOI 10.1145/3236024.3236027
   Friedl J.E.F., 2006, Mastering Regular Expressions, V3rd Edn.
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   Kirrage James, 2013, NSS 13, P135
   Lam M., 2006, COMPILERS PRINCIPLES
   Li YT, 2020, IEEE INT CONF AUTOM, P659, DOI 10.1145/3324884.3416556
   Lin Cheng-Hung., 2011, IEEE Global Telecommunications Conference, GLOBECOMM 2011, P1, DOI DOI 10.1109/GLOCOM.2011.6133663
   Lopez Felix., 2014, Mastering python regular expressions
   Michael LG, 2019, 34TH IEEE/ACM INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING (ASE 2019), P415, DOI 10.1109/ASE.2019.00047
   Midtgaard J, 2016, LECT NOTES COMPUT SC, V9837, P338, DOI 10.1007/978-3-662-53413-7_17
   Owens S, 2009, J FUNCT PROGRAM, V19, P173, DOI 10.1017/S0956796808007090
   Pan R, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3360565
   Parolini F., 2022, RAT REDOS ABSTRACT T
   Parolini F., 2022, 16 INT S THEOR ASP S, P73
   Petsios T, 2017, CCS'17: PROCEEDINGS OF THE 2017 ACM SIGSAC CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P2155, DOI 10.1145/3133956.3134073
   Rathnayake A., 2015, THESIS U BIRMINGHAM
   Rathnayake A, 2017, Arxiv, DOI arXiv:1405.7058
   Shen YJ, 2018, IEEE INT CONF AUTOM, P225, DOI 10.1145/3238147.3238159
   Staicu CA, 2018, PROCEEDINGS OF THE 27TH USENIX SECURITY SYMPOSIUM, P361
   WEBER A, 1991, THEOR COMPUT SCI, V88, P325, DOI 10.1016/0304-3975(91)90381-B
   Weideman N, 2016, LECT NOTES COMPUT SC, V9705, P322, DOI 10.1007/978-3-319-40946-7_27
   Wüstholz V, 2017, LECT NOTES COMPUT SC, V10206, P3, DOI 10.1007/978-3-662-54580-5_1
   Yu X., 2013, Proceedings of the ACM International Conference on Computing Frontiers, P18, DOI DOI 10.1145/2482767.2482791
NR 59
TC 0
Z9 0
U1 2
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUL
PY 2023
VL 229
AR 102960
DI 10.1016/j.scico.2023.102960
EA MAY 2023
PG 21
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA J2OB4
UT WOS:001008043900001
OA hybrid, Green Submitted
DA 2024-07-18
ER

PT J
AU Zhu, CY
   Butler, M
   Cirstea, C
   Hoang, TS
AF Zhu, Chenyang
   Butler, Michael
   Cirstea, Corina
   Hoang, Thai Son
TI A fairness-based refinement strategy to transform liveness properties in
   Event-B models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 23rd International Conference on Coordination Models and Languages
   (COORDINATION)
CY JUN 14-18, 2021
CL ELECTR NETWORK
DE Event -B; Linear temporal logic; Fairness assumptions; Refinement
AB Stepwise development supported by the Event-B formalism has been used in the domain of system design and verification. This refinement approach guarantees that safety properties are preserved with Event-B proof obligations, while additional reasoning and fairness assumptions are required to prove the transformation of liveness properties in Event-B models. This paper presents a new proof-based approach that integrates Linear Temporal Logic (LTL) and Event-B for reasoning about the refinement of liveness properties. We first developed an extended version of LTL that could be used in Event-B models with three basic atomic propositions: state-related propositions, event-related propositions, and enabledness of events. Then we employed this extended LTL to express four important temporal properties with Event-B proof obligations and fairness assumptions. Besides the typical Event-B proof obligations, we specified conditions such as relative deadlock freeness, conditional convergence, and fairness assumptions to allow temporal properties to be transformed during refinement steps. The generic fairness-based refinement strategies were developed to replace or strengthen the fairness assumptions in the refinement steps of Event-B models. A reliable retransmission example is used to illustrate the approach. (c) 2022 Elsevier B.V. All rights reserved.
C1 [Zhu, Chenyang] Changzhou Univ, Sch Comp Sci & Artificial Intelligence, Changzhou 213000, Peoples R China.
   [Butler, Michael; Cirstea, Corina; Hoang, Thai Son] Univ Southampton, Dept Elect & Comp Sci, Southampton SO17 1BJ, England.
C3 Changzhou University; University of Southampton
RP Zhu, CY (corresponding author), Changzhou Univ, Sch Comp Sci & Artificial Intelligence, Changzhou 213000, Peoples R China.
EM zcy@cczu.edu.cn
RI Hoang, Thai Son/H-6159-2019
OI Hoang, Thai Son/0000-0003-4095-0732; Cirstea,
   Corina/0000-0003-3165-5678; Zhu, Chenyang/0000-0002-2145-0559
FU National Natural Science Foundation of China; Natural Science Foundation
   of the Higher Education Institutions of Jiangsu Province;  [62202067]; 
   [22KJB520012]
FX Acknowledgement Our sincere thanks go to anonymous reviewers who
   provided helpful suggestions to improve the quality of the paper. This
   work is supported in part by National Natural Science Foundation of
   China (No. 62202067) , Natural Science Foundation of the Higher
   Education Institutions of Jiangsu Province (No. 22KJB520012) .
CR ABADI M, 1994, ACM T PROGR LANG SYS, V16, P1543, DOI 10.1145/186025.186058
   ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abrial J.-R., 2009, MODELING EVENT B
   Alur R, 2015, PRINCIPLES OF CYBER-PHYSICAL SYSTEMS, P1
   Alur R, 1995, LECT NOTES COMPUT SC, V939, P166
   BACK RJR, 1990, LECT NOTES COMPUT SC, V430, P67
   Butler M, 2017, LECT NOTES COMPUT SC, V10215, P51, DOI 10.1007/978-3-319-56841-6_3
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Devlin K.J., 1979, FUNDAMENTALS CONT SE
   Hoang T.S., 2010, INTERPRET FAILED PRO
   Hoang TS, 2009, SEFM 2009: SEVENTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P210, DOI 10.1109/SEFM.2009.17
   Hudon S., 2013, INT C INTEGRATED FOR, P16
   Jastram M., 2014, RODIN USERS HDB COVE
   LAMPORT L, 1977, IEEE T SOFTWARE ENG, V3, P125, DOI 10.1109/TSE.1977.229904
   Leuschel M, 2003, LECT NOTES COMPUT SC, V2805, P855
   MANNA Z, 1990, PROCEEDINGS OF THE NINTH ANNUAL ACM SYMPOSIUM ON PRINCIPLES OF DISTRIBUTED COMPUTING, P377, DOI 10.1145/93385.93442
   Méry D, 2017, SOFTW SYST MODEL, V16, P1083, DOI 10.1007/s10270-015-0504-y
   Misra Jayadev., 1988, Parallel program design: a foundation
   Ostroff JS, 1999, ACM T SOFTW ENG METH, V8, P1, DOI 10.1145/295558.295560
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Robinson K, SYSTEM MODELLING DES
   Schneider S, 2014, LECT NOTES COMPUT SC, V8739, P221, DOI 10.1007/978-3-319-10181-1_14
   Tassey G, 2002, 7007011 RTI NAT I ST
   Hoang TS, 2016, FORM ASP COMPUT, V28, P909, DOI 10.1007/s00165-016-0376-0
   van Glabbeek R, 2019, J LOG ALGEBR METHODS, V109, DOI 10.1016/j.jlamp.2019.100480
   Williams David M., 2012, Theoretical Aspects of Computing - ICTAC 2012. Proceedings of the 9th International Colloquium, P168, DOI 10.1007/978-3-642-32943-2_14
   Zhu CY, 2021, 2021 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2021), P143, DOI 10.1109/TASE52547.2021.00035
   Zhu CY, 2020, SCI COMPUT PROGRAM, V197, DOI 10.1016/j.scico.2020.102513
   Zhu CY, 2019, 2019 13TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2019), P1, DOI [10.1109/TASE.2019.00008, 10.1109/TASE.2019.00-26]
   Zhu CY, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P150, DOI 10.1109/TASE.2018.00028
NR 30
TC 3
Z9 3
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN
PY 2023
VL 225
SI SI
AR 102907
DI 10.1016/j.scico.2022.102907
EA NOV 2022
PG 23
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA 7T5ZH
UT WOS:000911523700001
DA 2024-07-18
ER

PT J
AU Futatsugi, K
AF Futatsugi, Kokichi
TI Advances of proof scores in CafeOBJ
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Formal; algebraic specifications; Specification verification and
   validation; Interactive theorem proving; Proof scores; CafeOBJ
ID SPECIFICATIONS; VERIFICATION; ALGEBRA
AB Critical flaws continue to exist at the level of domain, requirement, and/or design specifi-cation, and specification verification (i.e., to check whether a specification has desirable properties) is still one of the most important challenges in software/system engineer-ing. CafeOBJ is an executable algebraic specification language system and domain/require-ment/design engineers can write proof scores for improving quality of specifications by the specification verification. This paper describes advances of the proof scores for the specifi-cation verification in CafeOBJ.(c) 2022 Elsevier B.V. All rights reserved.
C1 [Futatsugi, Kokichi] Japan Adv Inst Sci & Technol JAIST, Nomi, Ishikawa 9231292, Japan.
C3 Japan Advanced Institute of Science & Technology (JAIST)
RP Futatsugi, K (corresponding author), Japan Adv Inst Sci & Technol JAIST, Nomi, Ishikawa 9231292, Japan.
EM futatsugi@jaist.ac.jp
OI Futatsugi, Kokichi/0000-0002-5853-3243
FU Japan Society for the Promo-tion of Science (JSPS);  [23220002]
FX Acknowledgements The author appreciates comments given by D. G?in?, N.
   Hirokawa, M. Nakamura, K. Ogata, N. Preining, A. Riesco, T. Sawada, H.
   Yatsu, H. Yoshida. Comments from anonymous referees were great help to
   improve the quality of the paper.This work was supported in part by
   Grant-in-Aid for Scientific Research (S) 23220002 from Japan Society for
   the Promo-tion of Science (JSPS) .
CR [Anonymous], ISABELLE HOL
   [Anonymous], ACL2
   [Anonymous], Rodin
   [Anonymous], 1999, Introduction to Set Theory
   [Anonymous], PVS
   [Anonymous], CAFEOBJ
   [Anonymous], COQ WEB PAGE
   [Anonymous], OBJ3
   [Anonymous], PTCALC MAN
   Astesiano E, 2002, THEOR COMPUT SCI, V286, P153, DOI 10.1016/S0304-3975(01)00368-1
   B, B WEBPAGE
   BURSTALL RM, 1969, COMPUT J, V12, P41, DOI 10.1093/comjnl/12.1.41
   Chandy K.M., 1989, Parallel program design
   Clavel M, 2006, J UNIVERS COMPUT SCI, V12, P1618
   Diaconescu R, 2002, THEOR COMPUT SCI, V285, P289, DOI 10.1016/S0304-3975(01)00361-9
   Diaconescu Razvan., 1998, CAFEOBJ REPORT, V6
   Eutatsugi K., 1980, Information Processing 80. Proceedings of the IFIP Congress 80, P287
   Futatsugi Kokichi, 2015, Software, Services and Systems: Essays Dedicated to Martin Wirsing on the Occasion of his Retirement from the Chair of Programming and Software Engineering: LNCS 8950, P171
   Futatsugi K, 1997, FIRST IEEE INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P170, DOI 10.1109/ICFEM.1997.630424
   Futatsugi K., 2017, INTRO SPECIFICATION
   Futatsugi K., 2020, PREPROC WRLA 2020, P64
   Futatsugi K, 2008, LECT NOTES COMPUT SC, V4171, P277
   Futatsugi K, 2006, IEEE INT CONF AUTOM, P3
   Futatsugi K, 2021, 2021 INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2021), P3, DOI 10.1109/TASE52547.2021.00012
   Futatsugi K, 2012, THEOR COMPUT SCI, V464, P90, DOI 10.1016/j.tcs.2012.07.041
   Futatsugi K, 2010, LECT NOTES COMPUT SC, V6447, P1, DOI 10.1007/978-3-642-16901-4_1
   Futatsugi Kokichi., 1985, POPL 85, P52, DOI DOI 10.1145/318593.318610
   Gaina Daniel, 2015, Journal of Logic and Computation, V25, P95, DOI 10.1093/logcom/exs044
   Gaina Daniel, 2014, Specification, Algebra, and Software. Essays Dedicated to Kokichi Futatsugi: LNCS 8373, P578, DOI 10.1007/978-3-642-54624-2_29
   Gaina Daniel, 2013, Algebra and Coalgebra in Computer Science. 5th International Conference, CALCO 2013. Proceedings: LNCS 8089, P328, DOI 10.1007/978-3-642-40206-7_26
   Gaina D, 2020, THEOR COMPUT SCI, V848, P82, DOI 10.1016/j.tcs.2020.09.024
   Gaina D, 2020, J ACM, V67, DOI 10.1145/3400294
   Goguen J., 2000, SOFTWARE ENG OBJ ALG, P3
   Goguen J.A., 2021, arXiv
   GOGUEN JA, 1992, THEOR COMPUT SCI, V105, P217, DOI 10.1016/0304-3975(92)90302-V
   Guttag JohnV., 1993, LARCH LANGUAGES TOOL
   Lucas S, 2005, INFORM PROCESS LETT, V95, P446, DOI 10.1016/j.ipl.2005.05.002
   Maude, MAUDE
   Meseguer J, 1998, LECT NOTES COMPUT SC, V1376, P18
   Meseguer J, 2017, THEOR COMPUT SCI, V672, P1, DOI 10.1016/j.tcs.2016.12.026
   Meseguer J, 2012, J LOGIC ALGEBR PROGR, V81, P721, DOI 10.1016/j.jlap.2012.06.003
   MiniSAT, MINISAT
   Nakamura Masaki, 2014, Specification, Algebra, and Software. Essays Dedicated to Kokichi Futatsugi: LNCS 8373, P92, DOI 10.1007/978-3-642-54624-2_5
   Nakamura M, 2022, IEICE T FUND ELECTR, VE105A, P823, DOI 10.1587/transfun.2021MAP0007
   Nakamura M, 2021, INT J SOFTW ENG KNOW, V31, P1541, DOI 10.1142/S0218194021400118
   Ogata K, 2003, LECT NOTES COMPUT SC, V2884, P170
   Ogata K, 2008, IEICE T INF SYST, VE91D, P2804, DOI 10.1093/ietisy/e91-d.12.2804
   Preining N, 2015, LECT NOTES COMPUT SC, V8981, P182, DOI 10.1007/978-3-319-17822-6_11
   Riesco A, 2022, J SYST SOFTWARE, V189, DOI 10.1016/j.jss.2022.111302
   Riesco A, 2018, ACM T SOFTW ENG METH, V27, DOI 10.1145/3208951
   Riesco A, 2017, FORM ASP COMPUT, V29, P309, DOI 10.1007/s00165-016-0398-7
   Terese, 2003, Term rewriting systems
   van den Brand M. G. J., 2001, Electronic Notes in Theoretical Computer Science, V44, DOI 10.1016/S1571-0661(04)80917-4
   VDM, OVERTURETOOL
   WIRSING M, 1986, THEOR COMPUT SCI, V42, P123, DOI 10.1016/0304-3975(86)90051-4
   Yices, YICES
   Yoshida Hiroyuki, 2015, Formal Methods and Software Engineering. 17th International Conference on Formal Engineering Methods (ICFEM 2015). Proceedings: LNCS 9407, P33, DOI 10.1007/978-3-319-25423-4_3
   Z, Z WEB PAGE
   Z3, GITHUBCOM Z3PROVER
NR 59
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2022
VL 224
AR 102893
DI 10.1016/j.scico.2022.102893
EA OCT 2022
PG 35
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5O3QK
UT WOS:000872392000001
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Gariano, IO
   Servetto, M
   Potanin, A
AF Gariano, Isaac Oscar
   Servetto, Marco
   Potanin, Alex
TI Using capabilities for strict runtime invariant checking
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Reference capabilities; Object capabilities; Runtime verification; Class
   invariants
ID REFERENCE IMMUTABILITY; VERIFICATION; UNIQUENESS; OWNERSHIP; SYSTEM
AB In this paper we use pre-existing language support for both reference and object capabilities to enable sound runtime verification of representation invariants. Our invariant protocol is stricter than the other protocols, since it guarantees that invariants hold for all objects involved in execution. Any language already offering appropriate support for reference and object capabilities can support our invariant protocol with minimal added complexity. In our protocol, invariants are simply specified as methods whose execution is statically guaranteed to be deterministic and to not access any externally mutable state. We formalise our approach and prove that our protocol is sound, in the context of a language supporting mutation, dynamic dispatch, exceptions, and non-deterministic I/O. We present case studies showing that our system requires a lighter annotation burden compared to Spec#, and performs orders of magnitude less runtime invariant checks compared to the 'visible state semantics' protocols of D and Eiffel.(c) 2022 The Author(s). Published by Elsevier B.V. This is an open access article under the CC BY license (http://creativecommons.org/licenses/by/4.0/).
C1 [Gariano, Isaac Oscar; Servetto, Marco] Victoria Univ Wellington, Kelburn, Wellington 6012, New Zealand.
   [Potanin, Alex] Australian Natl Univ, Canberra, ACT 2600, Australia.
C3 Australian National University
RP Servetto, M (corresponding author), Victoria Univ Wellington, Kelburn, Wellington 6012, New Zealand.
EM isaac@ecs.vuw.ac.nz; marco.servetto@ecs.vuw.ac.nz;
   alex.potanin@anu.edu.au
OI Servetto, Marco/0000-0003-1458-2868
CR Abrahams D, 2000, LECT NOTES COMPUT SC, V1766, P69
   AdaCore A. U. Ltd, 2020, SPARK 2014 REF MAN V
   Aiken A, 2003, ACM SIGPLAN NOTICES, V38, P129, DOI 10.1145/780822.781146
   Alexandrescu A., 2010, The D Programming Language
   [Anonymous], 2009, P IWACO
   [Anonymous], 2004, J. Obj. Technol., DOI [10.5381/jot.2004.3.6.a2, DOI 10.5381/JOT.2004.3.6.A2]
   Barnett M, 2005, LECT NOTES COMPUT SC, V3362, P49
   Barnett M, 2004, LECT NOTES COMPUT SC, V3125, P54
   Barnett M, 2003, J SYST SOFTWARE, V65, P199, DOI 10.1016/S0164-1212(02)00041-9
   Barnett M., 2004, ECOOP WORKSHOP FORMA
   Barnett M, 2006, LECT NOTES COMPUT SC, V4111, P364
   Barnett M, 2011, COMMUN ACM, V54, P81, DOI 10.1145/1953122.1953145
   Baudin P., 2016, ACSL ANSI ISO C SPEC
   Birka A, 2004, ACM SIGPLAN NOTICES, V39, P35, DOI 10.1145/1035292.1028980
   Bloch J., 2016, Effective Java
   Bobot F., 2022, WHY3 PLATFORM VERSIO
   Bolz C.F., 2011, P 20 ACM SIGPLAN WOR, P43, DOI DOI 10.1145/1929501.1929508
   Boyland J, 2003, LECT NOTES COMPUT SC, V2694, P55
   Boyland J, 2001, SOFTWARE PRACT EXPER, V31, P533, DOI 10.1002/spe.370
   Boyland J, 2006, J OBJECT TECHNOL, V5, P5, DOI 10.5381/jot.2006.5.5.a1
   Boyland JT, 2010, ACM T PROGR LANG SYS, V32, DOI 10.1145/1749608.1749611
   Burdy L., 2005, International Journal on Software Tools for Technology Transfer, V7, P212, DOI 10.1007/s10009-004-0167-4
   Chalin P, 2008, LECT NOTES COMPUT SC, V5014, P246, DOI 10.1007/978-3-540-68237-0_18
   Chalin P, 2007, FORM ASP COMPUT, V19, P139, DOI 10.1007/s00165-006-0016-1
   Clarke Dave, 2013, Aliasing in Object-Oriented Programming. Types, Analysis and Verification: LNCS 7850, P15, DOI 10.1007/978-3-642-36946-9_3
   Clarke D, 2003, LECT NOTES COMPUT SC, V2743, P176
   Clebsch S., 2015, P 5 INT WORKSHOP PRO, P1, DOI DOI 10.1145/2824815.2824816
   Clebsch S., 2017, THESIS
   Clebsch S, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133896
   Cunningham D, 2008, LECT NOTES COMPUT SC, V5382, P72, DOI 10.1007/978-3-540-92188-2_4
   Detlefs DavidL., 1998, Wrestling with Rep Exposure
   Dietl W, 2007, LECT NOTES COMPUT SC, V4609, P28
   Dietl W, 2005, J OBJECT TECHNOL, V4, P5, DOI 10.5381/jot.2005.4.8.a1
   Drossopoulou S, 2008, LECT NOTES COMPUT SC, V5142, P412, DOI 10.1007/978-3-540-70592-5_18
   Fahndrich M., 2010, S APPL COMP, P2103, DOI DOI 10.1145/1774088.1774531
   Falcone Y, 2018, LECT NOTES COMPUT SC, V11237, P241, DOI 10.1007/978-3-030-03769-7_14
   Feldman YA, 2006, I C SOFTW ENG FORM M, P80
   Findler RB, 2001, ACM SIGPLAN NOTICES, V36, P1, DOI 10.1145/504311.504283
   Finifter M, 2008, CCS'08: PROCEEDINGS OF THE 15TH ACM CONFERENCE ON COMPUTER AND COMMUNICATIONS SECURITY, P161
   Flanagan C., 2006, INT WORKSH FDN DEV O
   Giannini P., 2016, ICTCS 16 ITALIAN C T, V1720, P62
   Giannini P, 2019, THEOR COMPUT SCI, V764, P145, DOI 10.1016/j.tcs.2018.09.001
   Gopinathan M, 2008, LECT NOTES COMPUT SC, V5289, P158
   Gorbovitski M., 2008, P 6 INT WORKSHOP DYN, DOI [10.1145/1401827.1401837, DOI 10.1145/1401827.1401837]
   Gordon CS, 2012, ACM SIGPLAN NOTICES, V47, P21, DOI 10.1145/2398857.2384619
   Haller P, 2010, LECT NOTES COMPUT SC, V6183, P354
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   HOGG J, 1991, OOPSLA 91 CONFERENCE PROCEEDINGS : OBJECT-ORIENTED PROGRAMMING SYSTEMS, LANGUAGES, AND APPLICATIONS, P271, DOI 10.1145/118014.117975
   Igarashi A, 2001, ACM T PROGR LANG SYS, V23, P396, DOI 10.1145/503502.503505
   Intermetrics I, 2012, ADA EUROPE ADA REFER
   Karger P.A., 1988, THESIS
   Lagorio G, 2011, J OBJECT TECHNOL, V10, DOI 10.5381/jot.2011.10.1.a1
   Leavens G.T., 2013, JML Reference Manual
   Leino KRM, 2008, LECT NOTES COMPUT SC, V5295, P192, DOI 10.1007/978-3-540-87873-5_17
   Leino KRM, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P1488, DOI 10.1109/ICSE.2013.6606754
   Leino KRM, 2004, PROCEEDINGS OF THE SECOND INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING AND FORMAL METHODS, P218, DOI 10.1109/SEFM.2004.1347523
   Leino KRM, 2004, LECT NOTES COMPUT SC, V3086, P491
   Matsakis N. D., 2014, P 2014 ACM SIGADA AN, V34, P103, DOI [DOI 10.1145/2663171.2663188, 10.1145/2663171.2663188]
   Meredith Patrick, 2012, International Journal on Software Tools for Technology Transfer, V14, P249, DOI 10.1007/s10009-011-0198-6
   Meyer B., 1988, Object-Oriented Software Construction
   Meyer B., 1992, Eiffel: The Language
   Meyer Bertrand, 2021, arXiv
   Miller M.S., 2006, Robust Composition: Towards a Unified Approach to Access Control and Concurrency Control
   Miller M. S., 2003, Technical Report No. SRL2003-02
   Muller P., 2002, Modular specification and verification of object-oriented programs
   Müller P, 2006, SCI COMPUT PROGRAM, V62, P253, DOI 10.1016/j.scico.2006.03.001
   Naumann DA, 2006, THEOR COMPUT SCI, V365, P143, DOI 10.1016/j.tcs.2006.07.035
   Noble J., 2016, ABSTRACT DATA TYPES
   Östlund J, 2008, LECT NOTES BUS INF P, V11, P178
   Parkinson M.J., 2007, Proceedings of the International Workshop on Aliasing, Confinement and Ownership in Object-Oriented Programming (IWACO), P9
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Polikarpova N, 2014, LECT NOTES COMPUT SC, V8442, P514, DOI 10.1007/978-3-319-06410-9_35
   Potanin A., 2013, IMMUTABILITY, P233
   Rowe RNS, 2014, THEOR COMPUT SCI, V517, P34, DOI 10.1016/j.tcs.2013.08.017
   Servetto M, 2015, LECT NOTES COMPUT SC, V9458, P208, DOI 10.1007/978-3-319-26529-2_12
   Servetto Marco, 2013, WODET 2014 WORKSH DE
   Smith F, 2000, LECT NOTES COMPUT SC, V1782, P366
   Stephens R., 2015, BEGINNING SOFTWARE E
   Strickland TS, 2012, ACM SIGPLAN NOTICES, V47, P943, DOI 10.1145/2398857.2384685
   Takikawa A, 2012, ACM SIGPLAN NOTICES, V47, P793, DOI 10.1145/2398857.2384674
   Takikawa Asumu., 2015, Proc. European Conference on Object-Oriented Programming, P4
   Tschantz MS, 2005, ACM SIGPLAN NOTICES, V40, P211, DOI 10.1145/1103845.1094828
   Voigt J., 2013, COMP EVALUATING EXIS, P49
   Wrigstad T, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P377, DOI 10.1145/1706299.1706343
   Zibin Y, 2010, ACM SIGPLAN NOTICES, V45, P598, DOI 10.1145/1932682.1869509
NR 85
TC 0
Z9 0
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 1
PY 2022
VL 224
AR 102878
DI 10.1016/j.scico.2022.102878
EA OCT 2022
PG 57
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 5O3QK
UT WOS:000872392000002
OA hybrid
DA 2024-07-18
ER

PT J
AU Yu, YS
   Huang, ZQ
   Shen, GH
   Li, WW
   Shao, YC
AF Yu, Yaoshen
   Huang, Zhiqiu
   Shen, Guohua
   Li, Weiwei
   Shao, Yichao
TI ASTENS-BWA: Searching partial syntactic similar regions between source
   code fragments via AST-based encoded sequence alignment
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Code clone search; Syntactical similarity; Code representation model;
   Abstract syntax tree; Sequence alignment algorithm
AB Code search is a common activity in software development, and code-to-code search can benefit in a wide range of use-case scenarios. Code-to-code search uses a code fragment as the query for searching similar code fragments from large corpora. The results of a search can be applied to some software engineering tasks, such as search-based code recommendation, data-driven program repairing, and software plagiarism detection. To be put into daily use, the code-to-code search needs to find similar code fragments accurately and efficiently in a large dataset. Some search engines can locate exactly similar code, but are not able to search syntactical clones. Therefore, we propose ASTENS-BWA, a novel approach for searching syntactic similar code regions between code fragments via a tree-based sequence alignment. Source code has been transformed into a tree-based sequence that contains the structure information, and a sequence alignment algorithm has been applied to find similar regions. We evaluate ASTENS-BWA on three different tasks, the results demonstrate that our approach can find syntactical similar regions for programming code and retrieve similar code fragments fast and with high accuracy. As a code clone detection tool, ASTENS-BWA can report clone pairs in a high recall, but it needs manually check to reduce the false alarms. ASTENS-BWA is scalable and can report cloned code fragments in seconds for a code corpus of million lines of code. (C) 2022 Elsevier B.V. All rights reserved.
C1 [Yu, Yaoshen; Huang, Zhiqiu; Shen, Guohua; Li, Weiwei; Shao, Yichao] Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.
   [Huang, Zhiqiu; Shen, Guohua; Li, Weiwei] Collaborat Innovat Ctr Novel Software Technol & In, Nanjing, Peoples R China.
   [Huang, Zhiqiu; Shen, Guohua; Li, Weiwei] Minist Ind & Informat Technol, Key Lab Safety Crit Software, Nanjing, Peoples R China.
C3 Nanjing University of Aeronautics & Astronautics
RP Yu, YS; Huang, ZQ (corresponding author), Nanjing Univ Aeronaut & Astronaut, Coll Comp Sci & Technol, Nanjing, Peoples R China.
EM yaoshen.yu@outlook.com; zqhuang@nuaa.edu.cn
RI Li, Weiwei/AAC-2192-2020
OI Li, Weiwei/0000-0001-5781-5401
FU National Key R&D Program of China [2018YFB1003900]
FX Acknowledgement This research is supported by National Key R&D Program
   of China (Grant No. 2018YFB1003900) . References
CR Acar Y, 2016, P IEEE S SECUR PRIV, P289, DOI 10.1109/SP.2016.25
   Ai L, 2019, P INT COMP SOFTW APP, P27, DOI 10.1109/COMPSAC.2019.00014
   [Anonymous], 2010, P 32 ACMIEEE INT C S
   Baxter ID, 1998, PROC IEEE INT CONF S, P368, DOI 10.1109/ICSM.1998.738528
   Bellon S, 2007, IEEE T SOFTWARE ENG, V33, P577, DOI 10.1109/TSE.2007.70725
   Bui NDQ, 2021, PROC INT CONF SOFTW, P1186, DOI 10.1109/ICSE43902.2021.00109
   Burrows M., 1994, BLOCK SORTING LOSSLE
   Chae DK, 2013, PROCEEDINGS OF THE 22ND ACM INTERNATIONAL CONFERENCE ON INFORMATION & KNOWLEDGE MANAGEMENT (CIKM'13), P1577, DOI 10.1145/2505515.2507848
   Falke R, 2008, EMPIR SOFTW ENG, V13, P601, DOI 10.1007/s10664-008-9073-9
   Farmahinifarahani F, 2019, 2019 IEEE 26TH INTERNATIONAL CONFERENCE ON SOFTWARE ANALYSIS, EVOLUTION AND REENGINEERING (SANER), P84, DOI [10.1109/saner.2019.8668015, 10.1109/SANER.2019.8668015]
   Hoffmann R, 2007, UIST 2007: PROCEEDINGS OF THE 20TH ANNUAL ACM SYMPOSIUM ON USER INTERFACE SOFTWARE AND TECHNOLOGY, P13
   Ishio T, 2017, IEEE WORK CONF MIN S, P257, DOI 10.1109/MSR.2017.19
   Ji JH, 2008, ICHIT 2008: INTERNATIONAL CONFERENCE ON CONVERGENCE AND HYBRID INFORMATION TECHNOLOGY, PROCEEDINGS, P56, DOI 10.1109/ICHIT.2008.277
   Jiang H, 2019, IEEE T SERV COMPUT, V12, P34, DOI 10.1109/TSC.2016.2592909
   Jiang JJ, 2018, ISSTA'18: PROCEEDINGS OF THE 27TH ACM SIGSOFT INTERNATIONAL SYMPOSIUM ON SOFTWARE TESTING AND ANALYSIS, P298, DOI 10.1145/3213846.3213871
   Jiang LX, 2007, PROC INT CONF SOFTW, P96
   Kamiya T, 2002, IEEE T SOFTWARE ENG, V28, P654, DOI 10.1109/TSE.2002.1019480
   Ke YL, 2015, IEEE INT CONF AUTOM, P295, DOI 10.1109/ASE.2015.60
   Keivanloo I, 2014, 36TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2014), P664, DOI 10.1145/2568225.2568292
   Khajeh-Saeed A, 2010, J COMPUT PHYS, V229, P4247, DOI 10.1016/j.jcp.2010.02.009
   Kim K, 2018, PROCEEDINGS 2018 IEEE/ACM 40TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P946, DOI 10.1145/3180155.3180187
   Koschke R, 2006, WORK CONF REVERSE EN, P253
   Krinke J, 2001, EIGHTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P301, DOI 10.1109/WCRE.2001.957835
   Lee M.-W., 2010, Proceedings of the Eighteenth ACM SIGSOFT International Symposium on Foundations of Software Engineering, FSE '10, P167
   Li H, 2010, BIOINFORMATICS, V26, P589, DOI 10.1093/bioinformatics/btp698
   Lin Y, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P520, DOI 10.1145/2786805.2786871
   Lopes CV, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133908
   Mayrand J, 1996, INTERNATIONAL CONFERENCE ON SOFTWARE MAINTENANCE, PROCEEDINGS, P244, DOI 10.1109/ICSM.1996.565012
   McMillan C, 2012, IEEE T SOFTWARE ENG, V38, P1069, DOI 10.1109/TSE.2011.84
   Mou LL, 2016, AAAI CONF ARTIF INTE, P1287
   Murakami H, 2013, CONF PROC INT SYMP C, P93, DOI 10.1109/ICPC.2013.6613837
   Nakagawa T, 2021, PROCEEDINGS OF THE 29TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE '21), P830, DOI 10.1145/3468264.3468564
   Ragkhitwetsagul C, 2019, EMPIR SOFTW ENG, V24, P2236, DOI 10.1007/s10664-019-09697-7
   Rahman MM, 2014, IEEE INT WORK C SO, P285, DOI 10.1109/SCAM.2014.15
   Roy CK, 2009, IEEE ICST WORKSHOP, P157, DOI 10.1109/ICSTW.2009.18
   Roy CK, 2008, INT C PROGRAM COMPRE, P172, DOI 10.1109/ICPC.2008.41
   Roy CK, 2009, SCI COMPUT PROGRAM, V74, P470, DOI 10.1016/j.scico.2009.02.007
   Sadowski C, 2015, 2015 10TH JOINT MEETING OF THE EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND THE ACM SIGSOFT SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING (ESEC/FSE 2015) PROCEEDINGS, P191, DOI 10.1145/2786805.2786855
   Saini V, 2018, ESEC/FSE'18: PROCEEDINGS OF THE 2018 26TH ACM JOINT MEETING ON EUROPEAN SOFTWARE ENGINEERING CONFERENCE AND SYMPOSIUM ON THE FOUNDATIONS OF SOFTWARE ENGINEERING, P354, DOI 10.1145/3236024.3236026
   Sajnani H, 2016, PROC INT CONF SOFTW, P1157, DOI 10.1145/2884781.2884877
   SHENEAMER A, 2016, INT J COMPUTER APPL, V137, P1, DOI DOI 10.5120/IJCA2016908896
   SMITH TF, 1981, J MOL BIOL, V147, P195, DOI 10.1016/0022-2836(81)90087-5
   Stolee KT, 2014, ACM T SOFTW ENG METH, V23, DOI 10.1145/2581377
   Svajlenko J, 2017, PROC IEEE ACM INT C, P177, DOI 10.1109/ICSE-C.2017.78
   Svajlenko J, 2017, PROC IEEE ACM INT C, P27, DOI 10.1109/ICSE-C.2017.3
   Svajlenko J, 2014, PROC IEEE INT CONF S, P476, DOI 10.1109/ICSME.2014.77
   Wei HH, 2017, PROCEEDINGS OF THE TWENTY-SIXTH INTERNATIONAL JOINT CONFERENCE ON ARTIFICIAL INTELLIGENCE, P3034
   Yang YM, 2018, P INT COMP SOFTW APP, P286, DOI 10.1109/COMPSAC.2018.00045
   Zhang J, 2019, PROC INT CONF SOFTW, P783, DOI 10.1109/ICSE.2019.00086
   Zhao JL, 2015, 2015 10TH INTERNATIONAL CONFERENCE ON BROADBAND AND WIRELESS COMPUTING, COMMUNICATION AND APPLICATIONS (BWCCA 2015), P178, DOI 10.1109/BWCCA.2015.52
NR 50
TC 1
Z9 1
U1 1
U2 6
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2022
VL 222
AR 102839
DI 10.1016/j.scico.2022.102839
EA AUG 2022
PG 28
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA 4N6NR
UT WOS:000854135700006
DA 2024-07-18
ER

PT J
AU Zhang, YR
   Mallet, F
   Zhu, HB
   Chen, YX
   Liu, B
   Liu, ZM
AF Zhang, Yuanrui
   Mallet, Frederic
   Zhu, Huibiao
   Chen, Yixiang
   Liu, Bo
   Liu, Zhiming
TI Aclock-based dynamic logic for schedulability analysis of CCSL
   specifications
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Clock constraint specification language; Dynamic logic; Real-time
   embedded systems; Schedulability analysis; Theorem proving
AB The Clock Constraint Specification Language (CCSL) is a clock-based formalism for the specification and analysis of real-time embedded systems. The major goal of schedulability analysis of CCSL specifications is to solve the schedule problem, which is to answer 'whether there exists a clock behaviour (also called a 'schedule') that conforms to a given CCSL specification'. Existing works on schedulability analysis of CCSL specifications are mainly based on model checking or SMT-solving. In this paper, however, we propose a theorem-proving approach to the problem. To this end, we define a clock-based dynamic logic (cDL) in which we can specify the clock behaviours and the clock relations in CCSL. With cDL, given a CCSL specification SP, we can express its schedule problem as a cDL formula phi(sp). Then solving the schedule problem is equivalent to checking the validity of phi(sp) in the proof system of cDL. By analyzing the proof tree of phi(sp), we can generate a concrete schedule satisfying SP. Compared to the previous approaches, our method is not limited to special types of CCSL specifications and schedules and does not depend on the bounds that are set for approximate checking. We implement our cDL in Coq. We use an example throughout the paper to illustrate our method. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Zhang, Yuanrui] Southwest Univ, Sch Math & Stat, Chongqing, Peoples R China.
   [Zhang, Yuanrui; Liu, Bo; Liu, Zhiming] Southwest Univ, Coll Comp & Informat Sci, RISE, Chongqing, Peoples R China.
   [Zhang, Yuanrui; Chen, Yixiang] East China Normal Univ, MoE Engn Res Ctr Software Hardware Codesign Techn, Shanghai, Peoples R China.
   [Mallet, Frederic] Univ Nice Sophia Antipolis, CNRS, INRIA, I3S Lab,UMR 7271, Nice, France.
   [Zhu, Huibiao] East China Normal Univ, Shanghai Key Lab Trustworthy Comp, Shanghai, Peoples R China.
C3 Southwest University - China; Southwest University - China; East China
   Normal University; Universite Cote d'Azur; Inria; Centre National de la
   Recherche Scientifique (CNRS); East China Normal University
RP Liu, ZM (corresponding author), Southwest Univ, Coll Comp & Informat Sci, RISE, Chongqing, Peoples R China.
EM zhangyrmath@126.com; zhimingliu88@swu.edu.cn
RI Mallet, Frederic/HKW-6782-2023; Mallet, Frédéric/H-3942-2011
OI Mallet, Frédéric/0000-0002-9088-9821; Zhang, Yuanrui/0000-0002-0685-6905
FU Capacity Development Grant of Southwest University [SWU116007]; NSFC
   (Key Project) [61732019]; NSFC (Regular Project) [61672435]; NSFC-RS
   Project [61811530327]; Special Foundation for Basic Science and Frontier
   Technology Research Program of Chongqing [cstc2017jcyjAX0295]; National
   Key Research and Development Program of China [2018YFB2101300]; National
   Natural Science Foundation of China [61872145]
FX We thank all the anonymous reviewers including those who reviewed the
   conference version published at TASE 2019 for their valuable comments on
   this work. This work was partly supported by the Capacity Development
   Grant of Southwest University (No. SWU116007), the NSFC (Key Project)
   (No. 61732019), the NSFC (Regular Project) (No. 61672435), the NSFC-RS
   Project (No. 61811530327), the Special Foundation for Basic Science and
   Frontier Technology Research Program of Chongqing (No.
   cstc2017jcyjAX0295), the National Key Research and Development Program
   of China (No. 2018YFB2101300), and the National Natural Science
   Foundation of China (No. 61872145).
CR [Anonymous], 2019, LCP ISABELLE 2019
   [Anonymous], 2007, LECT NOTES COMPUTER
   [Anonymous], 2009, Res. Rep. RR-6925
   [Anonymous], 1931, MONATSHEFTE MATH PHY, DOI DOI 10.1007/BF01700692
   Arden D.N., 1961, 2 ANN S SWITCHING CI, P133, DOI DOI 10.1109/FOCS.1961.13
   Barrett C., 2017, TECH REP
   Beckert B., 2001, Automated Reasoning. First International Joint Conference, IJCAR 2001. Proceedings (Lecture Notes in Artificial Intelligence Vol.2083), P626
   Bertot Y., 2004, AN EATCS SERIES
   Blass Andreas, 2001, ACM Trans. Comput. Logic, V2, P1
   BRZOZOWSKI JA, 1964, J ACM, V11, P481, DOI 10.1145/321239.321249
   Gentzen G., 1934, THESIS
   HAREL D, 1982, J COMPUT SYST SCI, V25, P144, DOI 10.1016/0022-0000(82)90003-4
   Harel D., 2001, HDB PHILOS LOGIC, P99, DOI [DOI 10.1145/568438.568456, 10.1145/568438.568456]
   Harel David, 1979, LNCS, V68, DOI 10.1007/3-540-09237-4
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Jeannin JB, 2014, LECT NOTES ARTIF INT, V8562, P292, DOI 10.1007/978-3-319-08587-6_22
   Kang E., 2014, P 29 ANN ACM S APPL, P1080, DOI DOI 10.1145/2554850.2554929
   LAMPORT L, 1978, COMMUN ACM, V21, P558, DOI 10.1145/359545.359563
   Li K, 2018, DESTECH TRANS COMP, P120
   Mallet F., 2012, 2012 23rd IEEE International Symposium on Rapid System Prototyping (RSP 2012), P86, DOI 10.1109/RSP.2012.6380695
   Mallet F, 2015, SCI COMPUT PROGRAM, V106, P78, DOI 10.1016/j.scico.2015.03.001
   Mallet F, 2013, P ACM IEEE INT CONF, P157
   Mallet F, 2013, LECT NOTES COMPUT SC, V8144, P20, DOI 10.1007/978-3-642-41202-8_3
   Mallet F, 2008, INNOV SYST SOFTW ENG, V4, P309, DOI 10.1007/s11334-008-0055-2
   OMG, 2011, BUSINESS PROCESS MOD
   Peters J., 2015, DAC
   Platzer A, 2007, LECT NOTES COMPUT SC, V4514, P457, DOI 10.1007/978-3-540-72734-7_32
   Pratt V.R., 1976, 17 ANN S FDN COMPUTE, P109, DOI [10.1109/SFCS.1976.27, DOI 10.1109/SFCS.1976.27]
   Thomas W., 1991, AUTOMATA INFINITE OB, P133
   Yin L, 2013, ASIA PAC SOFWR ENG, P414, DOI 10.1109/APSEC.2013.62
   Yu HC, 2011, STUD COMPUT INTELL, V332, P21
   Zhang M, 2018, SCI COMPUT PROGRAM, V154, P42, DOI 10.1016/j.scico.2017.08.015
   Zhang M, 2016, LECT NOTES COMPUT SC, V10009, P433, DOI 10.1007/978-3-319-47846-3_27
   Zhang YR, 2019, 2019 13TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2019), P25, DOI [10.1109/TASE.2019.00-23, 10.1109/TASE.2019.00011]
   Zhou Y, 2017, BMC ENDOCR DISORD, V17, DOI 10.1186/s12902-017-0209-z
NR 35
TC 2
Z9 2
U1 0
U2 4
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2021
VL 202
AR 102546
DI 10.1016/j.scico.2020.102546
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA PC2SJ
UT WOS:000596856600004
DA 2024-07-18
ER

PT J
AU Ouederni, M
AF Ouederni, Meriem
TI Compatibility checking for asynchronously communicating software
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Distributed systems; Interaction; Compatibility checking; Transition
   systems; Asynchronous communication
ID MODEL; FIFO; VERIFICATION; SYSTEMS; TIME
AB Compatibility is a crucial problem that is encountered while constructing new software by reusing and composing existing components. A set of software components is called compatible if their composition preserves certain properties, such as deadlock freedom. However, checking compatibility for systems communicating asynchronously is an undecidable problem, and asynchronous communication is a common interaction mechanism used in building software systems. A typical approach in analyzing such systems is to bound the state space. In this article, we propose a different approach and do not impose any bounds on the number of participants or the sizes of the message buffers. Instead, we present a sufficient condition for checking compatibility of a set of asynchronously communicating components. Our approach relies on the synchronizability property which identifies systems for which interaction behavior remains the same when asynchronous communication is replaced with synchronous communication. Using the synchronizability property, we can check the compatibility of systems with unbounded message buffers by analyzing only a finite part of their behavior. We have implemented a prototype tool to automate our approach and we have applied it to many examples. (C) 2021 Elsevier B.V. All rights reserved.
C1 [Ouederni, Meriem] IRIT, Toulouse INP, Toulouse, France.
C3 Universite de Toulouse; Universite Toulouse III - Paul Sabatier;
   Universite Federale Toulouse Midi-Pyrenees (ComUE); Institut National
   Polytechnique de Toulouse
RP Ouederni, M (corresponding author), IRIT, Toulouse INP, Toulouse, France.
EM meriem.ouederni@irit.fr
CR Abdulla PA, 1998, LECT NOTES COMPUT SC, V1427, P305, DOI 10.1007/BFb0028754
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   Akroun L, 2018, FORM METHOD SYST DES, V52, P260, DOI 10.1007/s10703-017-0285-8
   Alur R, 2006, LECT NOTES COMPUT SC, V4052, P107
   [Anonymous], 1980, Lecture Notes in Computer Science
   [Anonymous], 2011, P WWW 2011, DOI DOI 10.1145/1963405.1963516
   [Anonymous], 2004, Singularity design note 5 : Channel contracts. singularity rdk documentation (v1.1)
   [Anonymous], 2000, Introduction to Process Algebra
   Basu S., 2014, ACM/IEEE International Conference on Automated Software Engineering, P743
   Basu S, 2012, POPL 12: PROCEEDINGS OF THE 39TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P191
   Basu S, 2012, LECT NOTES COMPUT SC, V7148, P56, DOI 10.1007/978-3-642-27940-9_5
   Bauer SS, 2011, ELECTRON PROC THEOR, P1, DOI 10.4204/EPTCS.46.1
   Bauer SS, 2010, LECT NOTES COMPUT SC, V6015, P175, DOI 10.1007/978-3-642-12002-2_15
   Beyer Dirk., 2005, 15 WORLD WIDE WEB C, P148
   Bianculli D, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P501, DOI 10.1145/1985793.1985862
   Bordeaux L, 2005, LECT NOTES COMPUT SC, V3324, P15
   Bouajjani A, 2012, LECT NOTES COMPUT SC, V7214, P451, DOI 10.1007/978-3-642-28756-5_31
   BRAND D, 1983, J ACM, V30, P323, DOI 10.1145/322374.322380
   BROOKES SD, 1984, J ACM, V31, P560, DOI 10.1145/828.833
   Canal C, 2001, SCI COMPUT PROGRAM, V41, P105, DOI 10.1016/S0167-6423(01)00002-8
   Carmona J, 2013, THEOR COMPUT SCI, V484, P1, DOI 10.1016/j.tcs.2013.03.006
   Cécé G, 2005, INFORM COMPUT, V202, P166, DOI 10.1016/j.ic.2005.05.006
   Darondeau P, 2008, LECT NOTES COMPUT SC, V5201, P310, DOI 10.1007/978-3-540-85361-9_26
   de Alfaro L., 2001, Software Engineering Notes, V26, P109, DOI 10.1145/503271.503226
   De Alfaro L, 2003, LNCS, V2772
   Denielou PM, 2010, LECT NOTES COMPUT SC, V6269, P343, DOI 10.1007/978-3-642-15375-4_24
   Dong R., 2012, PROC 15 S COMPONENT, P103
   Durán F, 2012, SCI COMPUT PROGRAM, V77, P870, DOI 10.1016/j.scico.2011.03.009
   Farah Z, 2017, INT J SOFTW TOOLS TE, V19, P465, DOI 10.1007/s10009-016-0421-6
   Finkel A., 2017, LIPIcs, V80
   Foster H, 2004, IEEE INTERNATIONAL CONFERENCE ON WEB SERVICES, PROCEEDINGS, P738, DOI 10.1109/ICWS.2004.1314806
   Garavel H, 2011, LECT NOTES COMPUT SC, V6605, P372, DOI 10.1007/978-3-642-19835-9_33
   Giusto C.D., 2019, ARXIV190901627 ABS
   GOUDA MG, 1984, INFORM CONTROL, V63, P200, DOI 10.1016/S0019-9958(84)80014-5
   Groote JF, 1996, THEOR COMPUT SCI, V170, P47, DOI 10.1016/S0304-3975(96)80702-X
   GROOTE JF, 1990, LECT NOTES COMPUT SC, V443, P626
   Gudemann Matthias, 2012, Automated Technology for Verification and Analysis. Proceedings of the 10th International Symposium, ATVA 2012, P238, DOI 10.1007/978-3-642-33386-6_20
   Haddad Serge, 2013, Application and Theory of Petri Nets and Concurrency. 34th International Conference, PETRI NETS 2013. Proceedings: LNCS 7927, P369, DOI 10.1007/978-3-642-38697-8_20
   Hennicker R, 2016, LECT NOTES COMPUT SC, V9686, P138, DOI 10.1007/978-3-319-39519-7_9
   Hopcroft J.E., 1979, Introduction to Automata Theory, Languages, and Computation
   ISO/IEC, 1989, INT STANDARD 8807
   Jaghoori MM, 2008, REAL TIM SYST SYMP P, P70, DOI 10.1109/RTSS.2008.28
   JERON T, 1993, THEOR COMPUT SCI, V113, P93, DOI 10.1016/0304-3975(93)90212-C
   Johnsen EB, 2006, THEOR COMPUT SCI, V365, P23, DOI 10.1016/j.tcs.2006.07.031
   Kaschner K, 2009, LECT NOTES COMPUT SC, V5701, P193, DOI 10.1007/978-3-642-03848-8_14
   Leue S, 2004, LECT NOTES COMPUT SC, V2989, P216
   Lin F, 2011, AUTOMATICA, V47, P496, DOI 10.1016/j.automatica.2011.01.002
   Lohmann N, 2009, LECT NOTES COMPUT SC, V5387, P191, DOI 10.1007/978-3-642-01364-5_12
   Martens A., 2006, INT C INTERNET WEB A, P147
   Mateescu R, 2008, LECT NOTES COMPUT SC, V5014, P148, DOI 10.1007/978-3-540-68237-0_12
   Milner R., 1989, Communication and concurrency
   Ouederni M., 2014, LNCS, V8348, P310
   Poizat P, 2006, LECT NOTES COMPUT SC, V4037, P33
   Salan G., 2006, INT J BUSINESS PROCE, V1, P116, DOI [10.1504/IJBPIM.2006.010025, DOI 10.1504/IJBPIM.2006.010025]
   Severoni F, 2007, P ASSE 07
   Sirjani M, 2011, LECT NOTES COMPUT SC, V7000, P20, DOI 10.1007/978-3-642-24933-4_3
   van der Aalst WMP, 2009, LECT NOTES COMPUT SC, V5569, P42
   van Glabbeek R, 2008, LECT NOTES COMPUT SC, V5162, P16
   van Glabbeek R, 2013, LOG METH COMPUT SCI, V9, DOI 10.2168/LMCS-9(3:17)2013
   van Glabbeek R, 2009, FUND INFORM, V93, P371, DOI 10.3233/FI-2009-109
   VanGlabbeek RJ, 1996, J ACM, V43, P555, DOI 10.1145/233551.233556
   Wijs A, 2013, LECT NOTES COMPUT SC, V7795, P565, DOI 10.1007/978-3-642-36742-7_41
   Wong PYH, 2008, INT CONF QUAL SOFTW, P126, DOI 10.1109/QSIC.2008.6
   Yellin DM, 1997, ACM T PROGR LANG SYS, V19, P292, DOI 10.1145/244795.244801
   Zhan N, 2013, LNCS, V8348, P119
NR 65
TC 1
Z9 1
U1 1
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2021
VL 205
AR 102569
DI 10.1016/j.scico.2020.102569
EA JAN 2021
PG 31
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA RC1OV
UT WOS:000632572100005
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Correia, A
   Iyoda, J
   Mota, A
AF Correia, Alexandre
   Iyoda, Juliano
   Mota, Alexandre
TI A family of multi-concept program synthesisers in Alloy*
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Program synthesis; Alloy*; SAT solving; Genetic Algorithm
ID FRAMEWORK
AB Program synthesis aims to mechanise the task of programming from the user intent (using pre and post condition, examples and sketches). There are many approaches (or concepts) in program synthesis that are usually implemented in isolation: deductive, syntax-based, inductive, etc. In this paper, we present a characterisation of program synthesis as model finding, using Alloy*. Such a characterisation unifies several of these concepts in a single model. Through model finding, we obtain a general framework for rapid development of a program synthesiser accommodating denotational semantics based synthesis, simultaneous deductive and inductive synthesis, software reuse, syntactic ingredients (the Alloy* scope of entities), and a new one: a soft sketch(a set of commands that must appear in the synthesised program but in no particular order of execution). Our family of synthesisers produce general purpose programs in the Java language. As the Alloy* synthesiser requires several rounds of user assistance to set scope, sketches, etc., particularly for complex problems, we integrated the model finder to a genetic algorithm module, where candidate solutions and user inputs are generated and mutated automatically. We carried out empirical evaluations on program synthesis successfully. As results, we verified that: (i) we can synthesise thirteen programs (Maj5, Maj8, IntSQRT, Max4, Modu, Fact, Fib, aMax, aDouble, aSum, eCount, aBubSort, aSelSort); (ii) inductive synthesis was faster than deductive synthesis; (iii) synthesis with reuse was faster; and (iv) Genetic Algorithm is better than user trial and error approach. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Correia, Alexandre] Inst Fed Sertao Pernambucano, BR-56316686 Petrolina, PE, Brazil.
   [Correia, Alexandre; Iyoda, Juliano; Mota, Alexandre] Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
C3 Instituto Federal do Sertao Pernambucano; Universidade Federal de
   Pernambuco
RP Correia, A (corresponding author), Inst Fed Sertao Pernambucano, BR-56316686 Petrolina, PE, Brazil.; Correia, A (corresponding author), Univ Fed Pernambuco, Ctr Informat, BR-50740560 Recife, PE, Brazil.
EM alexandre.correia@ifsertao-pe.edu.br; jmi@cin.ufpe.br; acm@cin.ufpe.br
OI Correia, Alex/0000-0002-2407-4608; Mota, Alexandre/0000-0003-4416-8123;
   Iyoda, Juliano Manabu/0000-0001-7137-8287
FU Brazilian National Council for Scientific and Technological Development
   (CNPq) [305729/2018-7]
FX Alexandre Mota would like to thank the Brazilian National Council for
   Scientific and Technological Development (CNPq) to support his work
   under grant number 305729/2018-7.
CR Alur R, 2017, ELECTRON P THEOR COM, P97, DOI 10.4204/EPTCS.260.9
   Alur R, 2015, NATO SCI PEAC SECUR, V40, P1, DOI 10.3233/978-1-61499-495-4-1
   [Anonymous], 2010, THESIS
   [Anonymous], 1994, PRENTICE HALL INT SE
   [Anonymous], 2017, ARXIV170905703
   Cha S.-H., 2007, Int. J. Math. Models Methods Appl. Sci., V1, P300
   Chen MS, 2009, COMPUT J, V52, P545, DOI 10.1093/comjnl/bxm057
   Correia A, 2020, INFORM PROCESS LETT, V154, DOI 10.1016/j.ipl.2019.105866
   Gulwani S, 2017, FOUND TRENDS PROGRAM, V4, P1, DOI 10.1561/2500000010
   Gulwani S, 2011, ACM SIGPLAN NOTICES, V46, P317, DOI 10.1145/1925844.1926423
   Gulwani S, 2011, POPL 11: PROCEEDINGS OF THE 38TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P317, DOI 10.1145/1926385.1926423
   Hlupi, 2018, 2018 41 INT CONV INF
   HOARE CAR, 1987, COMMUN ACM, V30, P672, DOI 10.1145/27651.27653
   Hofmann M, 2010, PEPM '10: PROCEEDINGS OF THE 2010 ACM SIGPLAN WORKSHOP ON PARTIAL EVALUATION AND PROGRAM MANIPULATION, P29, DOI 10.1145/1706356.1706364
   Ibrahim WRA, 2002, IEEE T POWER DELIVER, V17, P668, DOI 10.1109/61.997958
   Jackson D, 2012, SOFTWARE ABSTRACTIONS: LOGIC, LANGUAGE, AND ANALYSIS, P1
   Kitzelmann E, 2010, LECT NOTES COMPUT SC, V5812, P50
   Krawiec K, 2016, STUD COMPUT INTELL, V618, P1, DOI 10.1007/978-3-319-27565-9
   Le V, 2014, ACM SIGPLAN NOTICES, V49, P542, DOI [10.1145/2594291.2594333, 10.1145/2666356.2594333]
   MANNA Z, 1971, COMMUN ACM, V14, P151, DOI 10.1145/362566.362568
   Maranhao H.P., 2016, THESIS
   Milicevic A., 2014, TECHNICAL REPORT
   Milicevic A., 2015, THESIS
   Milicevic A, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 1, P609, DOI [10.1109/ICSE.2015.77, 10.1007/s10703-016-0267-2]
   Mota A, 2016, INFORM PROCESS LETT, V116, P701, DOI 10.1016/j.ipl.2016.06.003
   Murthy SK, 1998, DATA MIN KNOWL DISC, V2, P345, DOI 10.1023/A:1009744630224
   Nelson T, 2013, PROCEEDINGS OF THE 35TH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE 2013), P232, DOI 10.1109/ICSE.2013.6606569
   Parisotto Emilio, 2016, ARXIV161101855
   Polikarpova N, 2019, P ACM PROGRAM LANG, V3, DOI 10.1145/3290385
   Polikarpova N, 2016, ACM SIGPLAN NOTICES, V51, P522, DOI [10.1145/2908080.2908093, 10.1145/2980983.2908093]
   Polozov O, 2015, ACM SIGPLAN NOTICES, V50, P107, DOI [10.1145/2814270.2814310, 10.1145/2858965.2814310]
   Qiu XK, 2017, P ACM PROGRAM LANG, V1, DOI 10.1145/3133889
   Singh R, 2012, PROC VLDB ENDOW, V5, P740
   Solar-Lezama A, 2006, ACM SIGPLAN NOTICES, V41, P404, DOI 10.1145/1168917.1168907
   Solar-Lezama Armando, 2008, THESIS
   Srivastava S, 2010, POPL'10: PROCEEDINGS OF THE 37TH ANNUAL ACM SIGPLAN-SIGACT SYMPOSIUM ON PRINCIPLES OF PROGRAMMING LANGUAGES, P313, DOI 10.1145/1706299.1706337
   Torlak Emina, 2013, P 2013 ACM INT S NEW, P135, DOI DOI 10.1145/2509578.2509586
   White DR, 2013, GENET PROGRAM EVOL M, V14, P3, DOI 10.1007/s10710-012-9177-2
   Winskel G., 1993, FORMAL SEMANTICS PRO
   Winskel G., 1993, The Formal Semantics of Programming Languages
NR 40
TC 1
Z9 1
U1 0
U2 0
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 1
PY 2021
VL 201
AR 102536
DI 10.1016/j.scico.2020.102536
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA OS0ZN
UT WOS:000589893400003
DA 2024-07-18
ER

PT J
AU Zhu, CY
   Butler, M
   Cirstea, C
AF Zhu, Chenyang
   Butler, Michael
   Cirstea, Corina
TI Trace semantics and refinement patterns for real-time properties in
   event-B models
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 13th International Symposium on Theoretical Aspects of Software
   Engineering (TASE)
CY JUL 29-AUG 01, 2019
CL Guilin, PEOPLES R CHINA
SP IEEE Comp Soc, Guangxi Normal Univ, Coll Comp Sci & Informat Technol
DE Event-B; Trace semantics; Refinement semantics; Discrete time modeling;
   Hiding operator
AB Event-B is a formal method that utilizes a stepwise development approach for system-level modeling and analysis. We are interested in reasoning about real-time deadlines and delays between trigger and response events. There is existing work on treating these properties in Event-B but it lacks a semantic treatment in terms of trace behaviors. Because timing properties require fairness assumptions, we use infinite traces and develop conditions under which all infinite traces of a machine satisfy trigger-response and timing properties. We present refinement semantics of models whose behavior traces are infinite. In addition, we generalize our previous work by allowing a relation between concrete states and abstract states to simulate infinite state traces. Forward simulation, which is a proof technique for refinement, has been used to verify the consistency between different refinement levels regarding finite traces. Based on forward simulation, fairness assumptions, relative deadlock freedom, and conditional convergence are adopted as additional conditions that guarantee infinite trace refinement of timed models. The bounded retransmission protocol is used to illustrate the required proof obligations for timed traces. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Zhu, Chenyang; Butler, Michael; Cirstea, Corina] Univ Southampton, Southampton, Hants, England.
C3 University of Southampton
RP Zhu, CY (corresponding author), Univ Southampton, Southampton, Hants, England.
EM cz4g16@soton.ac.uk
OI Cirstea, Corina/0000-0003-3165-5678; Zhu, Chenyang/0000-0002-2145-0559
FU China Scholarship Council (CSC) [201708060147]
FX Our sincere thanks go to anonymous reviewers who provided helpful
   suggestions to improve the quality of the paper. This work is supported
   in part by the scholarship from China Scholarship Council (CSC) under
   the Grant CSC NO.201708060147.
CR ABADI M, 1994, ACM T PROGR LANG SYS, V16, P1543, DOI 10.1145/186025.186058
   ABADI M, 1991, THEOR COMPUT SCI, V82, P253, DOI 10.1016/0304-3975(91)90224-P
   Abid N., 2013, CORR
   Abrial Jean-Raymond, 2010, International Journal on Software Tools for Technology Transfer, V12, P447, DOI 10.1007/s10009-010-0145-y
   Abrial J R, 2010, Modeling in Event-B: system and softeng
   ALUR R, 1994, THEOR COMPUT SCI, V126, P183, DOI 10.1016/0304-3975(94)90010-8
   Alur R, 1998, ACM T PROGR LANG SYS, V20, P1171, DOI 10.1145/295656.295659
   [Anonymous], 2005, B BOOK ASSIGNING PRO
   BACK RJR, 1990, LECT NOTES COMPUT SC, V430, P67
   BACK RJR, 1988, ACM T PROGR LANG SYS, V10, P513, DOI 10.1145/48022.48023
   Back RJR, 1998, ACTA INFORM, V35, P131, DOI 10.1007/s002360050116
   Butler M., 2013, MASTERING SYSTEM ANA
   Butler M., 2002, APPROACH MODELLING R
   Butler Michael J., 1992, THESIS
   Clarke EM, 1996, ACM COMPUT SURV, V28, P626, DOI 10.1145/242223.242257
   Conrad K., 2016, EXPOSITORY PAPERS
   DArgenio PR, 1997, LECT NOTES COMPUT SC, V1217, P416, DOI 10.1007/BFb0035403
   Dershowitz N., 2003, BOUNDED FAIRNESS, P304, DOI [10.1007/978-3-540-39910-0, 10.1007/978-3-540-39910-014, DOI 10.1007/978-3-540-39910-014]
   Devlin K., 2012, JOY SETS FUNDAMENTAL
   Dijkstra E. W., 1978, Programming methodology. A collection of articles by members of IFIP WG2.3, P166
   Hallerstede S, 2013, SCI COMPUT PROGRAM, V78, P272, DOI 10.1016/j.scico.2011.03.005
   He J., 1989, WORKSH SCH S REX PRO, P340
   HENZINGER TA, 1992, LECT NOTES COMPUT SC, V600, P226, DOI 10.1007/BFb0031995
   Lamport L., 2016, ACM T PROGR LANG SYS
   Lynch N, 1996, INFORM COMPUT, V128, P1, DOI 10.1006/inco.1996.0060
   Ostroff JS, 1999, ACM T SOFTW ENG METH, V8, P1, DOI 10.1145/295558.295560
   Robinson K, 2012, SYSTEM MODELLING DES
   Sarshogh M.R., 2011, AVOCS 2011
   Schneider S, 2014, FORM ASP COMPUT, V26, P251, DOI 10.1007/s00165-012-0265-0
   Sheng F, 2019, ACM T SOFTW ENG METH, V28, DOI 10.1145/3295699
   Sulskus G, 2015, LECT NOTES COMPUT SC, V9392, P292, DOI 10.1007/978-3-319-24644-4_20
   Xie WL, 2018, FORM ASP COMPUT, V30, P713, DOI 10.1007/s00165-018-0467-1
   Zhu CY, 2020, SCI COMPUT PROGRAM, V189, DOI 10.1016/j.scico.2020.102390
   Zhu CY, 2019, 2019 13TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2019), P1, DOI [10.1109/TASE.2019.00008, 10.1109/TASE.2019.00-26]
   Zhu CY, 2018, PROCEEDINGS 2018 12TH INTERNATIONAL SYMPOSIUM ON THEORETICAL ASPECTS OF SOFTWARE ENGINEERING (TASE 2018), P150, DOI 10.1109/TASE.2018.00028
NR 35
TC 3
Z9 4
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2020
VL 197
AR 102513
DI 10.1016/j.scico.2020.102513
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA NS6CO
UT WOS:000572347300005
OA Green Accepted
DA 2024-07-18
ER

PT J
AU Nuñez-Varela, AS
   Pérez-Gonzalez, HG
   Martínez-Perez, FE
   Soubervielle-Montalvo, C
   Perez-Cham, OE
AF Nunez-Varela, Alberto S.
   Perez-Gonzalez, Hector G.
   Martinez-Perez, Francisco E.
   Soubervielle-Montalvo, Carlos
   Perez-Cham, Oscar E.
TI Dynamic creation of source code models for the extraction of code
   metrics data through grammar querying
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Source code metrics; Metrics extraction; Software metrics tool
ID TOOL
AB Source code metrics extraction is a complex task that has to be done automatically given the current size of software. They are extracted using software metric tools and more generic extraction mechanisms. These mechanisms usually work by querying a source code representation model. These models are static, and the information that can be obtained from them is limited. In this work an extraction methodology is presented in which the model is created every time certain information is needed. This is accomplished by querying the language context-free grammar, and from the information obtained by the query, a dynamic model is created. Current extraction mechanisms work by querying a model, while the proposed methodology queries the grammar directly, thus the model is created afterwards from the query result, and contains all the needed information. A metrics tool is created based on the proposed methodology, and in order to prove the correct functioning of extracting the desired information from the source code, not as already predefined as in current tools, several metrics are extracted as defined by four existing metrics tools. Querying the language grammar allows access to all available data in the source code, regardless of the programming language and paradigm. (C) 2020 Elsevier B.V. All rights reserved.
C1 [Nunez-Varela, Alberto S.; Perez-Gonzalez, Hector G.; Martinez-Perez, Francisco E.; Soubervielle-Montalvo, Carlos; Perez-Cham, Oscar E.] Univ Autonoma San Luis Potosi, Fac Ingn, Manuel Nava 8, San Luis Potosi 78216, San Luis Potosi, Mexico.
C3 Universidad Autonoma de San Luis Potosi
RP Nuñez-Varela, AS (corresponding author), Univ Autonoma San Luis Potosi, Fac Ingn, Manuel Nava 8, San Luis Potosi 78216, San Luis Potosi, Mexico.
EM alberto_snv@hotmail.com; hectorgerardo@yahoo.com;
   eduardo.perez@uaslp.mx; carlos.soubervielle@uaslp.mx;
   operezcham@gmail.com
RI Soubervielle-Montalvo, Carlos/AAM-2743-2021; Perez-Cham, Oscar
   Ernesto/ABA-3528-2021; Perez-Gonzalez, Hector/AAD-5414-2020;
   Nuñez-Varela, Alberto/ABE-4552-2020; Martínez-Pérez, Francisco
   Eduardo/ABC-4237-2021
OI Soubervielle-Montalvo, Carlos/0000-0002-0179-3933; Perez-Cham, Oscar
   Ernesto/0000-0002-0110-5475; Perez-Gonzalez, Hector/0000-0003-3331-2230;
   Martínez-Pérez, Francisco Eduardo/0000-0002-3133-9045
CR AlGhamdi J, 2002, INFORM SCIENCES, V140, P217, DOI 10.1016/S0020-0255(01)00172-4
   Alghamdi JS, 2005, Ninth European Conference on Software Maintenance and Reengineering, Proceedings, P190, DOI 10.1109/CSMR.2005.44
   Alikacem E, 2009, IEEE INT WORK C SO, P159, DOI 10.1109/SCAM.2009.27
   Allier S, 2010, IEEE INT WORK C SO, P43, DOI 10.1109/SCAM.2010.25
   Alshayeb M, 2018, ACM J DATA INF QUAL, V9, DOI 10.1145/3185049
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2007, COMPILERS PRINCIPLES
   [Anonymous], [No title captured]
   [Anonymous], [No title captured]
   [Anonymous], 2014, P 5 INT WORKSH EM TR
   [Anonymous], 2017, 2017 INT C COMP NETW
   Aral A, 2013, 2013 IEEE 37TH ANNUAL COMPUTER SOFTWARE AND APPLICATIONS CONFERENCE WORKSHOPS (COMPSACW), P505, DOI 10.1109/COMPSACW.2013.115
   Araújo CW, 2018, SBES'18: PROCEEDINGS OF THE XXXII BRAZILIAN SYMPOSIUM ON SOFTWARE ENGINEERING, P122, DOI 10.1145/3266237.3266271
   Budimac Z, 2012, EUR CON SFTWR MTNCE, P491, DOI 10.1109/CSMR.2012.64
   CHIDAMBER SR, 1994, IEEE T SOFTWARE ENG, V20, P476, DOI 10.1109/32.295895
   Cogan B, 2002, SOFTWARE QUAL J, V10, P149, DOI 10.1023/A:1020575907785
   Collard ML, 2003, PROG COMPREHEN, P134
   Da-wei E., 2009, COMP INT SOFTW ENG 2, P1, DOI [10.1109/CISE.2009.5363987, DOI 10.1109/CISE.2009.5363987]
   Fioravanti F, 2000, J SYST SOFTWARE, V53, P111, DOI 10.1016/S0164-1212(00)00050-9
   HALSTEAD MH, 1997, ELEMENTS SOFTWARE SC
   Harmer TJ, 2002, SCAM 2002: SECOND IEEE INTERNATIONAL WORKSHOP ON SOURCE CODE ANALYSIS MANIPULATION, PROCEEDINGS, P26, DOI 10.1109/SCAM.2002.1134102
   Higo Y., 2011, 2011 Proceedings of Joint Conf of 21st Int'l Workshop on Software Measurement and the 6th Int'l Conference on Software Process and Product Measurement (IWSM-MENSURA 2011), P3, DOI 10.1109/IWSM-MENSURA.2011.43
   Hyndman RJ, 2006, INT J FORECASTING, V22, P679, DOI 10.1016/j.ijforecast.2006.03.001
   IEEE Standards Association, 2010, 247652010 ISOIECIEEE
   Kaur PJ, 2015, 2015 1ST INTERNATIONAL CONFERENCE ON FUTURISTIC TRENDS ON COMPUTATIONAL ANALYSIS AND KNOWLEDGE MANAGEMENT (ABLAZE), P364, DOI 10.1109/ABLAZE.2015.7155021
   Klint P, 2009, IEEE INT WORK C SO, P168, DOI 10.1109/SCAM.2009.28
   Lafi M, 2019, 2019 IEEE JORDAN INTERNATIONAL JOINT CONFERENCE ON ELECTRICAL ENGINEERING AND INFORMATION TECHNOLOGY (JEEIT), P663, DOI 10.1109/JEEIT.2019.8717457
   Lee T., 2011, Proceedings of the 19th ACM SIGSOFT symposium and the 13th European conference on Foundations of software engineering, P311
   LI W, 1993, J SYST SOFTWARE, V23, P111, DOI 10.1016/0164-1212(93)90077-B
   Maletic JI, 2015, 2015 IEEE/ACM 37TH IEEE INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, VOL 2, P951, DOI 10.1109/ICSE.2015.302
   Malhotra R, 2017, 2017 2ND INTERNATIONAL CONFERENCE FOR CONVERGENCE IN TECHNOLOGY (I2CT), P901, DOI 10.1109/I2CT.2017.8226259
   Marin C., 2005, 100% RES - A challenge for Island Sustainable Development, P11
   McCabe T. J., 1976, IEEE Transactions on Software Engineering, VSE-2, P308, DOI 10.1109/TSE.1976.233837
   Núñez-Varela A, 2013, PROC TECH, V7, P336, DOI 10.1016/j.protcy.2013.04.042
   Nunez-Varela AS, 2017, J SYST SOFTWARE, V128, P164, DOI 10.1016/j.jss.2017.03.044
   Olszak Andrzej, 2014, Proceedings of the 9th International Conference on Software Engineering and Applications ICSOFT-EA 2014, P48
   Parthipan S, 2014, 2014 INTERNATIONAL CONFERENCE ON ADVANCED COMMUNICATION CONTROL AND COMPUTING TECHNOLOGIES (ICACCCT), P1708, DOI 10.1109/ICACCCT.2014.7019400
   Rakic G, 2010, ICSOFT 2010: PROCEEDINGS OF THE FIFTH INTERNATIONAL CONFERENCE ON SOFTWARE AND DATA TECHNOLOGIES, VOL 2, P263
   Rakic N, 2017, 2017 40TH INTERNATIONAL CONVENTION ON INFORMATION AND COMMUNICATION TECHNOLOGY, ELECTRONICS AND MICROELECTRONICS (MIPRO), P570, DOI 10.23919/MIPRO.2017.7973490
   Rudiger Lincke., 2008, International Symposium on Software Testing and Analysis, P131, DOI 10.1145/1390630.1390648
   Schaefer I, 2010, LECT NOTES COMPUT SC, V6287, P77, DOI 10.1007/978-3-642-15579-6_6
   Scotto Marco., 2004, SAC 04 P 2004 ACM S, P1536, DOI [10.1145/967900.968207, DOI 10.1145/967900.968207]
   Shao JQ, 2003, CAN J ELECT COMPUT E, V28, P69, DOI 10.1109/CJECE.2003.1532511
   Singh NK, 2014, GENOM DATA, V2, P1, DOI 10.1016/j.gdata.2013.10.001
   Spinellis D, 2005, IEEE SOFTWARE, V22, P9, DOI 10.1109/MS.2005.111
   Ul Ain Q, 2019, IEEE ACCESS, V7, P86121, DOI 10.1109/ACCESS.2019.2918202
   Valença K, 2018, IEEE 2018 INTERNATIONAL CONGRESS ON CYBERMATICS / 2018 IEEE CONFERENCES ON INTERNET OF THINGS, GREEN COMPUTING AND COMMUNICATIONS, CYBER, PHYSICAL AND SOCIAL COMPUTING, SMART DATA, BLOCKCHAIN, COMPUTER AND INFORMATION TECHNOLOGY, P1852, DOI 10.1109/Cybermatics_2018.2018.00308
   Vinobha A, 2014, 2014 INTERNATIONAL CONFERENCE ON ADVANCED COMMUNICATION CONTROL AND COMPUTING TECHNOLOGIES (ICACCCT), P1715, DOI 10.1109/ICACCCT.2014.7019401
   Yasir RM, 2019, 2019 IEEE/ACM 3RD INTERNATIONAL WORKSHOP ON REFACTORING (IWOR 2019), P47, DOI 10.1109/IWoR.2019.00016
NR 51
TC 0
Z9 0
U1 0
U2 2
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29a, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD SEP 15
PY 2020
VL 196
AR 102480
DI 10.1016/j.scico.2020.102480
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA LY6WG
UT WOS:000540668900005
DA 2024-07-18
ER

PT J
AU Marmsoler, D
AF Marmsoler, Diego
TI A calculus for dynamic architectures
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Dynamic architectures; Architecture verification; Architecture traces;
   Behavior traces; Interactive theorem proving
ID SOFTWARE; REO; RECONFIGURATION; SYSTEMS; DESIGN; MODEL
AB With the emergence of mobile and adaptive computing, dynamic architectures have become increasingly important. In such architectures, components may appear or disappear, and connections between them may change over time. Dynamic architectures are usually specified in terms of two separate specifications: a specification of component behavior and a specification of component activation and reconfiguration. To verify them, both specifications are first interpreted over a common model for dynamic architectures and verified against a property specified over the same model. Interpreting the specifications over the model, however, introduce repetitive proof steps, which increase the length of proofs, and thus the effort to develop and maintain them. To address this problem, we developed a calculus for dynamic architectures providing rules to reason about component behavior in a dynamic environment. We proved soundness and relative completeness of the rules, implemented them in the interactive theorem prover Isabelle, and mechanized the corresponding soundness proofs. The calculus can be used to support the abstract verification of dynamic architectures in Isabelle. This is demonstrated by means of a running example and evaluated in terms of four case studies. Our results suggest that the calculus has the potential to reduce the length of proofs for the verification of dynamic architectures, thus reducing the effort to develop and maintain verification results. (C) 2019 Elsevier B.V. All rights reserved.
C1 [Marmsoler, Diego] Tech Univ Munich, TUM Dept Informat, Boltzmannstr 3, D-85748 Garching, Germany.
C3 Technical University of Munich
RP Marmsoler, D (corresponding author), Tech Univ Munich, TUM Dept Informat, Boltzmannstr 3, D-85748 Garching, Germany.
EM diego.marmsoler@tum.de
FU German Federal Ministry of Education and Research (BMBF) [01Is16043A];
   German Federal Ministry of Economics and Technology (BMWi) [0325811A]
FX We would like to thank Manfred Broy, Mario Gleirscher, Maximilian
   Dunker, and the anonymous reviewers of ICTAC 2017 and Science of
   Computer Programming for their comments and helpful suggestions on
   earlier versions of this paper. The work was partially funded by the
   German Federal Ministry of Education and Research (BMBF) under grant
   number 01Is16043A and the German Federal Ministry of Economics and
   Technology (BMWi) under grant number 0325811A.
CR ABADI M, 1989, THEOR COMPUT SCI, V65, P35, DOI 10.1016/0304-3975(89)90138-2
   Aguirre N, 2002, ASE 2002: 17TH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, P271, DOI 10.1109/ASE.2002.1115028
   Aguirre N, 2002, P IDPT
   Allen R, 1998, LECT NOTES COMPUT SC, V1382, P21, DOI 10.1007/BFb0053581
   Allen R. J., 1997, TECH REP
   [Anonymous], 2001, Specification and Development of Interactive Systems: FOCUS on Streams, Interfaces, and Refinement
   [Anonymous], 1992, TEMPORAL LOGIC REACT, DOI DOI 10.1007/978-1-4612-0931-7
   [Anonymous], 1996, Pattern oriented software architecture: a system of patters
   [Anonymous], 1999, Communicating and Mobile Systems: The Calculus
   [Anonymous], 2010, P INT WORKSH FORM AS
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Baier C, 2006, SCI COMPUT PROGRAM, V61, P75, DOI 10.1016/j.scico.2005.10.008
   Ballarin C, 2004, ANN NY ACAD SCI, V3085, P34
   Bergstra J. A., 1986, Mathematics and Computer Science. Proceedings of the CWI Symposium, P89
   BERRY G, 1992, THEOR COMPUT SCI, V96, P217, DOI 10.1016/0304-3975(92)90185-I
   Blanchette Jasmin Christian, 2014, Interactive Theorem Proving. 5th International Conference, ITP 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8558, P93, DOI 10.1007/978-3-319-08970-6_7
   Broy M., 1996, Algebraic Methodology and Software Technology. 5th International Conference, AMAST '96. Proceedings, P487, DOI 10.1007/BFb0014335
   Broy M, 2014, LECT NOTES COMPUT SC, V8415, P39, DOI 10.1007/978-3-642-54848-2_3
   Broy M, 2010, COMPUT J, V53, P1758, DOI 10.1093/comjnl/bxq005
   Bruni R, 2008, LECT NOTES COMPUT SC, V5065, P37, DOI 10.1007/978-3-540-68679-8_4
   Canal C, 2012, SCI COMPUT PROGRAM, V78, P46, DOI 10.1016/j.scico.2011.09.003
   Cardelli L, 2000, THEOR COMPUT SCI, V240, P177, DOI 10.1016/S0304-3975(99)00231-5
   Castro PF, 2010, LECT NOTES COMPUT SC, V6255, P306, DOI 10.1007/978-3-642-14808-8_21
   Chandy K.M., 1989, Parallel program design
   Clavel M, 2007, All About Maude: A High-Performance Logical Framework
   Englemore R., 1988, BLACKBOARD SYSTEMS
   Fiadeiro JL, 2013, SOFTW SYST MODEL, V12, P349, DOI 10.1007/s10270-012-0236-1
   Hirsch D., 2002, ELECT NOTES THEOR CO, V51, P177, DOI DOI 10.1016/S1571-0661(04)80201-9
   HOARE CAR, 1978, COMMUN ACM, V21, P666, DOI 10.1145/359576.359585
   Jackson D, 2002, ACM T SOFTW ENG METH, V11, P256, DOI 10.1145/505145.505149
   Jacobs B., 1997, B EUR ASS THEOR COMP, V62, P62
   Jagannathan V., 1989, BLACKBOARD ARCHITECT
   Krause C, 2011, SCI COMPUT PROGRAM, V76, P23, DOI 10.1016/j.scico.2009.10.006
   LAMPORT L, 1994, ACM T PROGR LANG SYS, V16, P872, DOI 10.1145/177492.177726
   Le Metayer D, 1998, IEEE T SOFTWARE ENG, V24, P521, DOI 10.1109/32.708567
   Lochbihler A., COINDUCTION ARCH FOR
   Magee J., 1996, Software Engineering Notes, V21, P3, DOI 10.1145/250707.239104
   Marmsoler Diego, 2018, Formal Aspects of Component Software. 15th International Conference (FACS 2018). Proceedings: Lecture Notes in Computer Science (LNCS 11222), P279, DOI 10.1007/978-3-030-02146-7_14
   Marmsoler D., 2017, 11 INT S THEOR ASP S
   Marmsoler D., DYNAMIC ARCHITECTURE
   Marmsoler D., THEORY ARCHITECTURAL
   Marmsoler D, 2018, LECT NOTES COMPUT SC, V11232, P251, DOI 10.1007/978-3-030-02450-5_15
   Marmsoler D, 2017, LECT NOTES COMPUT SC, V10580, P79, DOI 10.1007/978-3-319-67729-3_6
   Marmsoler D, 2016, SCI ANN COMPUT SCI, V26, P187, DOI 10.7561/SACS.2016.2.187
   Marmsoler D, 2016, LECT NOTES COMPUT SC, V9965, P235, DOI 10.1007/978-3-319-46750-4_14
   MEDVIDOVIC N, 1996, JOINT P 2 INT SOFTW, P24, DOI [10.1145/243327.243340, DOI 10.1145/243327.243340]
   Mikkonen T, 1998, PROC INT CONF SOFTW, P115, DOI 10.1109/ICSE.1998.671108
   Nipkow Tobias, 2002, ISABELLE HOL PROOF A, V2283
   Oquendo F., 2004, ACM SIGSOFT SOFTWARE, V29, P1, DOI DOI 10.1145/986710.986728
   Sanchez A, 2012, FORMAL ASPECTS COMPO, P313
   Sanchez A, 2015, COMPUT LANG SYST STR, V44, P218, DOI 10.1016/j.cl.2015.07.001
   Wenzel M., 2007, Stud. Log. Gramm. Rhetor., V10, P277
   Wermelinger M., 2001, Software Engineering Notes, V26, P21, DOI 10.1145/503271.503213
   Wermelinger M, 2002, SCI COMPUT PROGRAM, V44, P133, DOI 10.1016/S0167-6423(02)00036-9
   Wirsing M., 1990, HDB THEORETICAL COMP, VB, P675, DOI [10.1016/B978-0-444-88074-1.50018-4, DOI 10.1016/B978-0-444-88074-1.50018-4]
NR 55
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD AUG 1
PY 2019
VL 182
BP 1
EP 41
DI 10.1016/j.scico.2019.06.001
PG 41
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA JA1IN
UT WOS:000487570800001
OA Bronze
DA 2024-07-18
ER

PT J
AU Scott, E
   Johnstone, A
AF Scott, Elizabeth
   Johnstone, Adrian
TI GLL syntax analysers for EBNF grammars
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE General context-free grammars; Generalised LL parsing; Extended BNF
AB GLL is a worst-case cubic, recursive descent based parsing technique which can be applied to all BNF grammars without the need for grammar modification. However, EBNF grammars are often used, both for their compactness and their relative expressive simplicity. In this paper we give a formal specification for a parse tree representation of derivations which reflects the EBNF structure of the grammar, is worst case cubic size, and captures all derivations in the case of ambiguity. Particular care is need in the case of closures with nullable bodies. We also describe an extension of GLL which directly supports the EBNF constructs. The resulting parsers are worst case cubic and follow the structure of the specifying EBNF grammar, making the parser behaviour easy to reason about. The parsers exploit the efficiency of factorisation and the use of iteration rather than recursion, retaining the structure of the specification in the presence of embedded semantic actions. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Scott, Elizabeth; Johnstone, Adrian] Royal Holloway Univ London, Egham, Surrey, England.
C3 University of London; Royal Holloway University London
RP Scott, E; Johnstone, A (corresponding author), Royal Holloway Univ London, Egham, Surrey, England.
EM e.scott@rhul.ac.uk; ajohnstone@rhul.ac.uk
FU EPSRC [EP/I032509/1] Funding Source: UKRI
CR [Anonymous], COMMUN ACM
   [Anonymous], 1986, Efficient parsing for natural language
   [Anonymous], P 2002 INT C FUNCT P
   [Anonymous], LECT NOTES COMPUTER
   [Anonymous], SOURCE CODE ANAL MAN
   [Anonymous], GEN LR PARSING
   Aycock J, 1999, LECT NOTES COMPUT SC, V1575, P32
   Aycock J, 2001, ACTA INFORM, V37, P633, DOI 10.1007/PL00013319
   Nederhof M., 1996, Recent Advances in Parsing Technology, P35
   Cardona PAN, 2015, CUAD ACT, P154
   Parr T., 1996, Language translation using PCCTS and C++
   Rosu G, 2010, J LOGIC ALGEBR PROGR, V79, P397, DOI 10.1016/j.jlap.2010.03.012
   Scott E, 2006, ACM T PROGR LANG SYS, V28, P577, DOI 10.1145/1146809.1146810
   Scott E, 2016, SCI COMPUT PROGRAM, V125, P1, DOI 10.1016/j.scico.2016.04.003
   Scott E, 2013, SCI COMPUT PROGRAM, V78, P1828, DOI 10.1016/j.scico.2012.03.005
   Van den Brand MGJ, 2002, ACM T PROGR LANG SYS, V24, P334, DOI 10.1145/567097.567099
   Visser E, 2003, LECT NOTES COMPUT SC, V3016, P216
NR 17
TC 6
Z9 6
U1 0
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD NOV 15
PY 2018
VL 166
BP 120
EP 145
DI 10.1016/j.scico.2018.06.001
PG 26
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GV5OO
UT WOS:000446152000006
OA Bronze
DA 2024-07-18
ER

PT J
AU Triska, M
AF Triska, Markus
TI Boolean constraints in SWI-Prolog: A comprehensive system description
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE CLP(B); Boolean unification; Decision diagrams; BDD
AB We present a new constraint solver over Boolean variables, freely available as library(clpb)(1) in SWI-Prolog. In this paper, we explain the core algorithms and implementation trade-offs of our system. Our solver distinguishes itself from other available CLP(13) solvers by several unique features: First, it is written entirely in Prolog and is hence portable to other systems that provide a few interface predicates that we outline. Second, our system provides new interface predicates, and we show that they allow us to solve new types of problems with CLP(B) constraints. Finally, we present performance results and comparisons with the native CLP(B) solver of SICStus Prolog, and also with a new SICStus port of our system. Despite being written entirely in Prolog, both versions of our system can solve several benchmark instances that the native CLP(B) solver of SICStus Prolog cannot solve. (C) 2018 Elsevier B.V. All rights reserved.
C1 [Triska, Markus] TU Wien, Vienna, Austria.
C3 Technische Universitat Wien
RP Triska, M (corresponding author), TU Wien, Vienna, Austria.
EM triska@dbai.tuwien.ac.at
CR Abío I, 2012, J ARTIF INTELL RES, V45, P443, DOI 10.1613/jair.3653
   [Anonymous], 2009, The Art of Computer Programming, Volume 4, Fascicle 1: Bitwise Tricks Techniques; Binary Decision Diagrams
   Benhamou F., 1995, JFPL 95 4 JOURN FRAN, P51
   Bergman D, 2016, ARTIF INTELL-FOUND, P1, DOI 10.1007/978-3-319-42849-9
   Brock-Nannestad Taus, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P94, DOI 10.1007/978-3-319-29604-3_7
   BRYANT RE, 1986, IEEE T COMPUT, V35, P677, DOI 10.1109/TC.1986.1676819
   Burckel S., 2000, WLP 15, P123
   Carlsson M., T9109 SICS TR
   Codish M, 2008, THEOR PRACT LOG PROG, V8, P121, DOI 10.1017/S1471068407003146
   Codognet P, 1996, J AUTOM REASONING, V17, P97, DOI 10.1007/BF00247670
   Colin S., 1999, HUIT JOURN FRANC PRO, P23
   Demoen B., 2002, 350 CW KU LEUV DEP C
   Diaz D, 2012, THEOR PRACT LOG PROG, V12, P253, DOI 10.1017/S1471068411000470
   Dincbas Mehmet., 1988, Fifth Generation Computer Systems (FGCS), P693
   FREUDER EC, 1978, COMMUN ACM, V21, P958, DOI 10.1145/359642.359654
   HAKEN A, 1985, THEOR COMPUT SCI, V39, P297, DOI 10.1016/0304-3975(85)90144-6
   Hooker JN, 2016, CONSTRAINTS, V21, P59, DOI 10.1007/s10601-015-9201-2
   Howe JM, 2012, THEOR COMPUT SCI, V435, P43, DOI 10.1016/j.tcs.2012.02.024
   Jaffar J., 1987, Conference Record of the Fourteenth Annual ACM Symposium on Principles of Programming Languages, P111, DOI 10.1145/41625.41635
   Knuth D.E, 1993, The Stanford graph base: A platform for combinatorial computing, P577
   Mantadelis T, 2010, LECT NOTES ARTIF INT, V6341, P260, DOI 10.1007/978-3-642-15675-5_23
   Marques -Silva J. P., 2000, LNCS, V1894
   MINATO S, 1993, ACM IEEE D, P272
   Neumerkel U., TEACHING PROLOG CLP
   Neumerkel Ulrich, 2002, WLPE, P77
   Selman B., 2 DIMACS IMPLEMENTAT
   Sterling L. S., 1994, The Art of Prolog, V2nd
   Tarau P., ARXIV08080555 CORR
   Tarau P, 2012, INT SYMP SYMB NUMERI, P384, DOI 10.1109/SYNASC.2012.20
   Triska Markus, 2016, Functional and Logic Programming. 13th International Symposium, FLOPS 2016. Proceedings: LNCS 9613, P45, DOI 10.1007/978-3-319-29604-3_4
   Wielemaker J, 2012, THEOR PRACT LOG PROG, V12, P67, DOI 10.1017/S1471068411000494
   Zhang H., 1997, LNAI, V1249
NR 32
TC 0
Z9 0
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2018
VL 164
SI SI
BP 98
EP 115
DI 10.1016/j.scico.2018.02.001
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GR5WX
UT WOS:000442713700008
OA hybrid
DA 2024-07-18
ER

PT J
AU Best, E
   Devillers, R
AF Best, Eike
   Devillers, Raymond
TI Pre-synthesis of Petri nets based on prime cycles and distance paths
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Choice-freeness; Labelled transition systems; Petri nets; Synthesis
ID SYSTEMS
AB This paper proposes a fail-fast pre-synthesis method supporting the synthesis of unlabelled Petri nets from labelled transition systems, while focusing on the class of choice-free systems. Such systems have applications, amongst others, in hardware design and in manufacturing. Necessary conditions which must be satisfied by any choice-freely Petri net synthesisable transition system will be identified. They include the prime cycle property and the distance path property, as well as various forms of determinism. Checking such properties before synthesis allows the early detection of non-synthesisable transition systems and the production of meaningful messages about the reasons of synthesis failure. Various interdependencies between these properties will be revealed. The prime cycle property and the distance path property will be shown to imply other ones. This allows pre-synthesis to be organised in an efficient way, because implied properties do not need to be checked if the properties they are implied by are already checked. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Best, Eike] Carl von Ossietzky Univ Oldenburg, Dept Comp Sci, D-26111 Oldenburg, Germany.
   [Devillers, Raymond] Univ Libre Bruxelles, Dept Informat, Blvd Triomphe CP 212, B-1050 Brussels, Belgium.
C3 Carl von Ossietzky Universitat Oldenburg; Universite Libre de Bruxelles
RP Best, E (corresponding author), Carl von Ossietzky Univ Oldenburg, Dept Comp Sci, D-26111 Oldenburg, Germany.
EM eike.best@informatik.uni-oldenburg.de; rdevil@ulb.ac.be
FU DFG (German Research Foundation) [Be 1267/15-1 ARS, Be 1267/16-1 AsYsT]
FX Supported by DFG (German Research Foundation) through grants Be
   1267/15-1 ARS (Algorithms for Reengineering and Synthesis) and Be
   1267/16-1 AsYsT (Algorithms for Synthesis and Pre -Synthesis Based on
   Petri Net Structure Theory).
CR [Anonymous], 1985, EATCS Monographs on Theoretical Computer Science
   Badouel E, 1997, THEOR COMPUT SCI, V186, P107, DOI 10.1016/S0304-3975(96)00219-8
   Badouel E., 2002, Formal Aspects of Computing, V13, P447, DOI 10.1007/s001650200022
   Badouel E., 1998, Lectures on Petri Nets I: Basic Models. Advances in Petri Nets, P529
   Badouel E, 2015, TEXTS THEORETICAL CO
   Barylska K., 2015, P ATAED 2015, P1
   Best E., 2017, ACTA INFORM IN PRESS
   Best E., 2015, P 26 INT C CONC THEO, P128, DOI [10.4230/LIPIcs.CONCUR.2015.128, DOI 10.4230/LIPICS.CONCUR.2015.128]
   Best E., 2012, ERSH MEM C, V7162, P1, DOI DOI 10.1007/978-3-642-29709-01
   Best E, 2016, LECT NOTES COMPUT SC, V9698, P59, DOI 10.1007/978-3-319-39086-4_5
   Best E, 2015, ELECTRON P THEOR COM, P53, DOI 10.4204/EPTCS.189.6
   Best E, 2009, ACTA INFORM, V46, P237, DOI 10.1007/s00236-009-0095-6
   Carmona J, 2010, IEEE T COMPUT, V59, P371, DOI 10.1109/TC.2009.131
   Commoner F., 1971, Journal of Computer and System Sciences, V5, P511, DOI 10.1016/S0022-0000(71)80013-2
   Cortadella J, 1997, IEICE T INF SYST, VE80D, P315
   Crespi-Reghizzi S., 1975, Information Processing Letters, V3, P78, DOI 10.1016/0020-0190(75)90020-4
   Darondeau P, 2004, LECT NOTES COMPUT SC, V3098, P413, DOI 10.1007/978-3-540-27755-2_11
   Desel J., 1995, CAMBRIDGE TRACTS THE
   EHRENFEUCHT A, 1990, ACTA INFORM, V27, P315, DOI 10.1007/BF00264611
   HOPKINS RP, 1991, LECT NOTES COMPUT SC, V524, P161
   Julvez J, 2006, IEEE T AUTOMAT CONTR, V51, P1472, DOI 10.1109/TAC.2006.880957
   Keller R. M., 1975, Parallel Processing, P102
   Khachiyan L, 2009, SELECTED WORKS
   KONDRATYEV A, 1995, EUR CONF DESIG AUTOM, P325, DOI 10.1109/EDTC.1995.470376
   Schlachter U, 2016, LECT NOTES COMPUT SC, V9698, P79, DOI 10.1007/978-3-319-39086-4_6
   Teruel E., 1993, Applications and Theory of Petri Nets 1993. 14th International Conference Proceedings, P415
   Teruel E, 1997, IEEE T SYST MAN CY A, V27, P73, DOI 10.1109/3468.553226
   van Glabbeek R, 2012, LECT NOTES COMPUT SC, V7213, P331, DOI 10.1007/978-3-642-28729-9_22
NR 28
TC 5
Z9 5
U1 0
U2 2
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JUN 1
PY 2018
VL 157
SI SI
BP 41
EP 55
DI 10.1016/j.scico.2017.07.005
PG 15
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA GB9KE
UT WOS:000429391900004
DA 2024-07-18
ER

PT J
AU Charalambidis, A
   Rondogiannis, P
   Troumpoukis, A
AF Charalambidis, Angelos
   Rondogiannis, Panos
   Troumpoukis, Antonis
TI Higher-order logic programming: An expressive language for representing
   qualitative preferences
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Preferences; Higher-order logic programming; Hilog
ID QUERIES; SEMANTICS; GRAMMARS; SETS
AB We consider the problem of concisely representing and handling preferences in logic programming and relational databases. Our starting point is the well-known proposal developed in [2] which advocates the embedding of first-order preference formulas into relational algebra through a winnow operator that is parameterized by a database relation and a preference formula. We argue that despite its elegance, the above proposal has certain shortcomings: only intrinsic preference formulas are supported, the preference relations and the preference queries are expressed in two different languages, and there is no direct way to define alternative operators beyond winnow. We propose the use of higher-order logic programming as a logical framework that remedies the above deficiencies. In particular, the proposed framework supports both intrinsic and extrinsic preference formulas, it can represent both preference relations as-well-as queries, and it can be used to define a variety of interesting alternative operators beyond winnow. We demonstrate the feasibility of our approach by presenting an implementation and an experimental evaluation of all the proposed concepts in the higher-order logic programming language Hilog. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Charalambidis, Angelos; Rondogiannis, Panos; Troumpoukis, Antonis] Univ Athens, Dept Informat & Telecommun, Athens, Greece.
   [Charalambidis, Angelos; Troumpoukis, Antonis] NCSR Demokritos, Inst Informat & Telecommun, Athens, Greece.
C3 National & Kapodistrian University of Athens; National Centre of
   Scientific Research "Demokritos"
RP Rondogiannis, P (corresponding author), Univ Athens, Dept Informat & Telecommun, Athens, Greece.
EM a.charalambidis@di.uoa.gr; prondo@di.uoa.gr; antru@di.uoa.gr
OI Charalambidis, Angelos/0000-0001-7437-410X
CR Agrawal R, 2000, SIGMOD RECORD, V29, P297, DOI 10.1145/335191.335423
   Bancilhon F., 1986, PODS 86, P1
   Brewka G, 1999, ARTIF INTELL, V109, P297, DOI 10.1016/S0004-3702(99)00015-6
   Brewka G, 1996, J ARTIF INTELL RES, V4, P19, DOI 10.1613/jair.284
   Charalambidis A, 2014, FOURTEENTH INTERNATIONAL CONFERENCE ON THE PRINCIPLES OF KNOWLEDGE REPRESENTATION AND REASONING, P12
   Charalambidis A, 2016, PROCEEDINGS OF THE 18TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2016), P24, DOI 10.1145/2967973.2968607
   Charalambidis A, 2013, ACM T COMPUT LOG, V14, DOI 10.1145/2499937.2499942
   CHEN WD, 1993, J LOGIC PROGRAM, V15, P187, DOI 10.1016/0743-1066(93)90039-J
   Chomicki J, 2003, ACM T DATABASE SYST, V28, P427, DOI 10.1145/958942.958946
   Cui BQ, 2002, ARTIF INTELL, V138, P117, DOI 10.1016/S0004-3702(02)00185-6
   Dantsin E., 1991, LNCS, P152
   Domshlak C, 2011, ARTIF INTELL, V175, P1037, DOI 10.1016/j.artint.2011.03.004
   Field A.J., 1988, FUNCTIONAL PROGRAMMI
   Govindarajan K., 1996, Conference Record of POPL '96: The 23rd ACM SIGPLAN-SIGACT Symposium on Principles of Programming Languages, P91, DOI 10.1145/237721.237735
   Govindarajan K, 2001, NEW GENERAT COMPUT, V19, P57, DOI 10.1007/BF03037534
   Govindarajan K., 1995, P 12 INT C LOGIC PRO, P731
   Guo HF, 2008, J LOGIC ALGEBR PROGR, V78, P1, DOI 10.1016/j.jlap.2007.11.003
   Jayaraman B, 1998, COMPUT LANG, V24, P179, DOI 10.1016/S0096-0551(98)00008-3
   Kersting K., 2000, IND LOG PROGR P 10 I
   Kiessling W., 2002, Proceedings of the Twenty-eighth International Conference on Very Large Data Bases, P311
   Kiessling W., 2002, Proceedings of the Twenty-eighth International Conference on Very Large Data Bases, P990
   KieSSling W., 2001, Wirtschaftsinformatik, P32
   Koutrika G, 2004, PROC INT CONF DATA, P597, DOI 10.1109/ICDE.2004.1320030
   Lacroix M., 1987, Proceedings of the Thirteenth International Conference on Very Large Data Bases: 1987 13th VLDB, P217
   Miller D., 2012, PROGRAMMING HIGHER O
   Muggleton Stephen, 1996, Advances in Inductive Logic Programming, V32, P254
   Nelan Jr G. C., 1992, THESIS
   O'Keefe R. A., 1990, THE CRAFT OF PROLOG
   Raedt L. D., 2007, P 20 INT JOINT C ART, P2462
   Rondogiannis P, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P208, DOI 10.1145/2790449.2790511
   Sakama C, 2000, ARTIF INTELL, V123, P185, DOI 10.1016/S0004-3702(00)00054-0
   Stefanidis K, 2011, ACM T DATABASE SYST, V36, DOI 10.1145/2000824.2000829
   Tamaki H., 1984, P 2 INT LOG PROGR C, P127
   VANEMDEN MH, 1986, J LOGIC PROGRAM, V3, P37, DOI 10.1016/0743-1066(86)90003-8
   WADGE WW, 1991, LOGIC PROGRAMM, P289
   Wei-Ngan Chin, 1996, LISP and Symbolic Computation, V9, P287, DOI 10.1007/BF01806315
   Zhang X, 2011, PROC INT CONF DATA, P1019, DOI 10.1109/ICDE.2011.5767866
   Zhang Y, 1997, LOGIC PROGRAMM, P69
NR 38
TC 2
Z9 2
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD APR 1
PY 2018
VL 155
BP 173
EP 197
DI 10.1016/j.scico.2017.09.002
PG 25
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FZ1JJ
UT WOS:000427332600008
DA 2024-07-18
ER

PT J
AU Rivas, E
   Jaskelioff, M
   Schrijvers, T
AF Rivas, Exequiel
   Jaskelioff, Mauro
   Schrijvers, Tom
TI A unified view of monadic and applicative non-determinism
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Monoid; Near-semiring; Monadplus; Alternative; Free construction
ID COPRODUCTS
AB It is well-known that monads are monoids in the category of endofunctors, and in fact so are applicative functors. Unfortunately, monoids do not have enough structure to account for computational effects with non-determinism operators.
   This article recovers a unified view of computational effects with non-determinism by extending monoids to near-semirings with both additive and multiplicative structure. This enables us to generically define free constructions as well as a novel double Cayley representation that optimises both left-nested sums and left-nested products. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Rivas, Exequiel; Jaskelioff, Mauro] Univ Nacl Rosario, CONICET, Ctr Int Franco Argentino Ciencias Informac & Sist, Rosario, Santa Fe, Argentina.
   [Schrijvers, Tom] Katholieke Univ Leuven, Leuven, Belgium.
C3 Consejo Nacional de Investigaciones Cientificas y Tecnicas (CONICET);
   National University of Rosario; KU Leuven
RP Rivas, E (corresponding author), Univ Nacl Rosario, CONICET, Ctr Int Franco Argentino Ciencias Informac & Sist, Rosario, Santa Fe, Argentina.
EM rivas@cifasis-conicet.gov.ar; jaskelioff@cifasis-conicet.gov.ar;
   tom.schrijvers@cs.kuleuven.be
RI Schrijvers, Tom/A-6696-2016
OI Schrijvers, Tom/0000-0001-8771-5559; Rivas, Exequiel/0000-0002-2114-624X
FU Flemish Fund for Scientific Research (FWO) [G088414N]; KU Leuven Latin
   America Fund [ISPLA1/15/11]
FX This work has been partially funded by the Flemish Fund for Scientific
   Research (FWO) (grant G088414N) and the KU Leuven Latin America Fund
   (grant ISPLA1/15/11).
CR Adámek J, 2012, IEEE S LOG, P45, DOI 10.1109/LICS.2012.16
   Baars AI, 2004, J FUNCT PROGRAM, V14, P635, DOI 10.1017/S0956796804005143
   Brown N., 2011, MONAD READER, V17, P13
   Capriotti P, 2014, ELECTRON P THEOR COM, P2, DOI 10.4204/EPTCS.153.2
   Day B., 1973, Bull. Austral. Math. Soc, V8, P1
   Ghani N, 2004, RAIRO-THEOR INF APPL, V38, P321, DOI 10.1051/ita:2004016
   Grandis M, 1993, REND IST MAT U TRIES, V25, P223
   Hinze R, 2000, ACM SIGPLAN NOTICES, V35, P186, DOI 10.1145/357766.351258
   Hoogewijs A., 1970, SEMINEARRING EMBEDDI
   Hughes J, 2000, SCI COMPUT PROGRAM, V37, P67, DOI 10.1016/S0167-6423(99)00023-4
   HUGHES RJM, 1986, INFORM PROCESS LETT, V22, P141, DOI 10.1016/0020-0190(86)90059-1
   Hutton G., 1998, Journal of Functional Programming, V8, P437, DOI 10.1017/S0956796898003050
   Jacobs B, 2009, J FUNCT PROGRAM, V19, P403, DOI 10.1017/S0956796809007308
   Jaskelioff M., 2009, THESIS
   Jaskelioff M, 2015, PROCEEDINGS OF THE 20TH ACM SIGPLAN INTERNATIONAL CONFERENCE ON FUNCTIONAL PROGRAMMING (ICFP'15), P355, DOI 10.1145/2784731.2784743
   Kiselyov O, 2005, ACM SIGPLAN NOTICES, V40, P192, DOI 10.1145/1090189.1086390
   Krishna K.V, 2007, SE ASIAN B MATH, V31, P903
   Lüth C, 2002, ACM SIGPLAN NOTICES, V37, P133, DOI 10.1145/583852.581492
   MAC LANE S., 1998, GRAD TEXTS MATH, V5
   Mcbride C, 2008, J FUNCT PROGRAM, V18, P1, DOI 10.1017/S0956796807006326
   MOGGI E, 1991, INFORM COMPUT, V93, P55, DOI 10.1016/0890-5401(91)90052-4
   Piróg M, 2016, ELECTRON P THEOR COM, P23, DOI 10.4204/EPTCS.207.2
   Postan E., 2017, P S LAT TEOR COMP C
   Rivas E, 2017, J FUNCT PROGRAM, V27, DOI 10.1017/S0956796817000132
   Rivas E, 2015, PROCEEDINGS OF THE 17TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING (PPDP 2015), P196, DOI 10.1145/2790449.2790514
   Schrijvers T, 2014, PPDP'14: PROCEEDINGS OF THE 16TH INTERNATIONAL SYMPOSIUM ON PRINCIPLES AND PRACTICE OF DECLARATIVE PROGRAMMING, P259, DOI 10.1145/2643135.2643145
   Spivey JM, 2009, J FUNCT PROGRAM, V19, P469, DOI 10.1017/S0956796809007321
   Spivey M, 2012, J FUNCT PROGRAM, V22, P747, DOI 10.1017/S0956796812000329
   Statman Rick, 2014, Rewriting and Typed Lambda Calculi. Joint International Conference, RTA-TLCA 2014, Held as Part of the Vienna Summer of Logic, VSL 2014. Proceedings: LNCS 8560, P410, DOI 10.1007/978-3-319-08918-8_28
   Swierstra D., 2013, LNCS, V8106, P234
   Uustalu T, 2016, J LOG ALGEBR METHODS, V85, P1086, DOI 10.1016/j.jlamp.2016.06.004
   van der Ploeg A, 2014, ACM SIGPLAN NOTICES, V49, P133, DOI [10.1145/2633357.2633360, 10.1145/2775050.2633360]
   Voigtländer J, 2008, LECT NOTES COMPUT SC, V5133, P388
NR 33
TC 3
Z9 3
U1 0
U2 1
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD JAN 15
PY 2018
VL 152
BP 70
EP 98
DI 10.1016/j.scico.2017.09.007
PG 29
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FR3OJ
UT WOS:000418975700004
OA Green Accepted, Bronze
DA 2024-07-18
ER

PT J
AU Proença, J
   Clarke, D
AF Proenca, Jose
   Clarke, Dave
TI Typed connector families and their semantics
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Calculus of connectors; Variability in connectors; Composition of
   families; Type system; Tile Model
AB Typed models of connector/component composition specify interfaces describing ports of components and connectors. Typing ensures that these ports are plugged together appropriately, so that data can flow out of each output port and into an input port. These interfaces typically consider the direction of data flow and the type of values flowing. Components, connectors, and systems are often parameterised in such a way that the parameters affect the interfaces. Typing such connector families is challenging. This paper takes a first step towards addressing this problem by presenting a calculus of connector families with integer and boolean parameters. The calculus is based on monoidal categories, with a dependent type system that describes the parameterised interfaces of these connectors. We use families of Reo connectors as running examples, and show how this calculus can be applied to Petri Nets and to BIP systems. The paper focuses on the structure of connectors-well-connectedness-and less on their behaviour, making it easily applicable to a wide range of coordination and component-based models. A type-checking algorithm based on constraints is used to analyse connector families, supported by a proof of-concept implementation. (C) 2017 Elsevier B.V. All rights reserved.
C1 [Proenca, Jose] INESC TEC, P-4710057 Braga, Portugal.
   [Proenca, Jose] Univ Minho, Dept Informat, P-4710057 Braga, Portugal.
   [Clarke, Dave] Uppsala Univ, Box 337, SE-75105 Uppsala, Sweden.
C3 INESC TEC; Universidade do Minho; Uppsala University
RP Proença, J (corresponding author), INESC TEC, P-4710057 Braga, Portugal.; Proença, J (corresponding author), Univ Minho, Dept Informat, P-4710057 Braga, Portugal.
EM jose.proenca@di.uminho.pt; dave.clarke@it.uu.se
RI Proenca, Jose/K-4256-2016
OI Proenca, Jose/0000-0003-0971-8919
FU ERDF-European Regional Development Fund through the Operational
   Programme for Competitiveness and Internationalisation-COMPETE
   Programme; Portuguese funding agency, FCT-Fundacao para a Ciencia e a
   Tecnologia [POCI-01-0145-FEDER-016826]; FCT-Fundacao para a Ciencia e a
   Tecnologia [SFRH/BPD/91908/2012]; Fundação para a Ciência e a Tecnologia
   [SFRH/BPD/91908/2012] Funding Source: FCT
FX This work is financed by the ERDF-European Regional Development Fund
   through the Operational Programme for Competitiveness and
   Internationalisation-COMPETE 2020 Programme and by National Funds
   through the Portuguese funding agency, FCT-Fundacao para a Ciencia e a
   Tecnologia, within project POCI-01-0145-FEDER-016826. This work is also
   partially funded by the personal grant from FCT-Fundacao para a Ciencia
   e a Tecnologia-with reference SFRH/BPD/91908/2012.
CR Apel S., 2011, 2011 26th IEEE/ACM International Conference on Automated Software Engineering, P372, DOI 10.1109/ASE.2011.6100075
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2009, LECT NOTES COMPUT SC, V5486, P37, DOI 10.1007/978-3-642-03429-9_4
   Batory D, 2005, LECT NOTES COMPUT SC, V3714, P7
   Bliudze Simon, 2011, Software Composition. Proceedings of the 10th International Conference, SC 2011, P51, DOI 10.1007/978-3-642-22045-6_4
   Bonchi F, 2015, ACM SIGPLAN NOTICES, V50, P515, DOI [10.1145/2775051.2676993, 10.1145/2676726.2676993]
   Bruni R., 2012, LNCS, V7162, P19, DOI DOI 10.1007/978-3-642-29709-0
   Bruni R, 2006, THEOR COMPUT SCI, V366, P98, DOI 10.1016/j.tcs.2006.07.005
   Clarke D, 2007, SCI COMPUT PROGRAM, V66, P205, DOI 10.1016/j.scico.2007.01.009
   Dimovski A. S., 2015, LIPICS, V37, P247
   Gadducci F, 2000, FOUNDAT COMPUT, P133
   Gibbons J., 1999, Journal of Functional Programming, V9, P339, DOI 10.1017/S0956796899003354
   JONES MP, 1994, SCI COMPUT PROGRAM, V22, P231, DOI 10.1016/0167-6423(94)00005-0
   Kastner Christian, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P258, DOI 10.1109/ASE.2008.36
   Lack S., 2004, Theory Appl. Categ., V13, P147
   Mavridou A, 2016, LECT NOTES COMPUT SC, V9539, P256, DOI 10.1007/978-3-319-28934-2_14
   MURATA T, 1989, P IEEE, V77, P541, DOI 10.1109/5.24143
   Muschevici R., 2015, SOFTW SYST MODEL, P1
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Pohl K., 2005, SOFTWARE PRODUCT LIN, V10
   Post Hendrik, 2008, 2008 23rd IEEE/ACM International Conference on Automated Software Engineering, P347, DOI 10.1109/ASE.2008.45
   Proença J, 2016, LECT NOTES COMPUT SC, V9539, P294, DOI 10.1007/978-3-319-28934-2_16
   Rondon PM, 2008, PLDI'08: PROCEEDINGS OF THE 2008 SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN & IMPLEMENTATION, P159, DOI 10.1145/1375581.1375602
   Selinger P, 2011, LECT NOTES PHYS, V813, P289, DOI 10.1007/978-3-642-12821-9_4
   Sobocinski P, 2010, LECT NOTES COMPUT SC, V6269, P554, DOI 10.1007/978-3-642-15375-4_38
   Thaker Sahil., 2007, P 6 INT C GENERATIVE, P95
   Thum T., 2012, P 11 INT C GEN PROGR, P11, DOI DOI 10.1145/2371401.2371404
NR 27
TC 1
Z9 2
U1 0
U2 4
PU ELSEVIER SCIENCE BV
PI AMSTERDAM
PA PO BOX 211, 1000 AE AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 15
PY 2017
VL 146
SI SI
BP 28
EP 49
DI 10.1016/j.scico.2017.03.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA FD2ZE
UT WOS:000407402500003
OA Green Submitted
DA 2024-07-18
ER

PT J
AU Ganea, G
   Verebi, I
   Marinescu, R
AF Ganea, George
   Verebi, Ioana
   Marinescu, Radu
TI Continuous quality assessment with inCode
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 4th International Workshop on Academic Software Development Tools and
   Techniques
CY JUL 01, 2013
CL Montpellier, FRANCE
DE Quality assessment; Design quality; Design problems; Code smells;
   Software metrics
AB In spite of the progress that has been made over the last ten years in the research fields of software evolution and quality assessment, developers still do not take full advantage of the benefits of new assessment techniques that have been proposed by researchers. Beyond social factors, we believe that there are at least two main elements that contribute to this lack of adoption: (i) the insufficient integration of existing techniques in mainstream IDEs and (ii) the lack of support for a continuous (daily) usage of QA tools. In this context this paper introduces INCODE, an Eclipse plugin aimed at transforming quality assessment and code inspections from a standalone activity, into a continuous process, fully integrated in the development life-cycle. But INCODE not only assesses continuously the quality of Java systems; it also assists developers in taking restructuring decisions, and even supports them in triggering non-standard, complex refactorings. This paper introduces INCODE'S differentiating features, it presents the design goals that shaped our construction decisions, and describes a controlled experiment designed to validate the usability of the tool. The experiment has indicated that developers using INCODE are more efficient in refactoring design fragments affected by design flaws. (C) 2015 Elsevier B.V. All rights reserved.
C1 [Ganea, George; Verebi, Ioana; Marinescu, Radu] Univ Politehn Timisoara, Bvd V Parvan 2, Timisoara, Romania.
C3 Universitatea Politehnica Timisoara
RP Verebi, I (corresponding author), Univ Politehn Timisoara, Bvd V Parvan 2, Timisoara, Romania.
EM georgeganea@gmail.com; ioanaverebi@gmail.com; radu.marinescu@cs.upt.ro
CR [Anonymous], 2005, PMD applied
   [Anonymous], 2010, R LANG ENV STAT COMP
   [Anonymous], 1997, Object-oriented software construction
   [Anonymous], 2010, ECLIPSE METRICS PLUG
   Bessey A, 2010, COMMUN ACM, V53, P66, DOI 10.1145/1646353.1646374
   Brown WH., 1998, AntiPatterns: refactoring software, architectures, and projects in crisis
   Campbell DT., 1963, EXPT QUASIEXPERIMENT
   Ciupke O., 1999, Proceedings of Technology of Object-Oriented Languages and Systems - TOOLS 30 (Cat. No.PR00278), P18, DOI 10.1109/TOOLS.1999.787532
   Deissenboeck F., 2005, Software Technology and Engineering Practice, P127
   DUCASSE S, 2005, P ESEC FSE 2005 SEPT, P99
   Eichberg M, 2008, ICSE'08 PROCEEDINGS OF THE THIRTIETH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING, P391, DOI 10.1145/1368088.1368142
   Fokaefs Marios, 2007, 2007 IEEE International Conference on Software Maintenance, P519, DOI 10.1109/ICSM.2007.4362679
   Fowler M., 2018, Refactoring: Improving the Design of Existing Code
   Hattie J, 2007, REV EDUC RES, V77, P81, DOI 10.3102/003465430298487
   KEMERER CF, 1992, IEEE SOFTWARE, V9, P23, DOI 10.1109/52.136161
   Khomh F, 2012, EMPIR SOFTW ENG, V17, P243, DOI 10.1007/s10664-011-9171-y
   Lanza Michele, 2006, Objectoriented metrics in practice: using software metrics to characterize, evaluate, and improve the design of object-oriented systems
   Marinescu R, 2004, PROC IEEE INT CONF S, P350, DOI 10.1109/ICSM.2004.1357820
   Marinescu R, 2012, IBM J RES DEV, V56, DOI 10.1147/JRD.2012.2204512
   Martin R. C., 2002, AGILE SOFTWARE DEV P
   MCCREIGHT EM, 1976, J ACM, V23, P262, DOI 10.1145/321941.321946
   Mens K, 2006, COMPUT LANG SYST STR, V32, P140, DOI 10.1016/j.cl.2005.09.002
   Moha N, 2010, IEEE T SOFTWARE ENG, V36, P20, DOI 10.1109/TSE.2009.50
   Riel AJ., 1996, Object-Oriented Design Heuristics
   Telea AC, 2010, IEEE SOFTWARE, V27, P46, DOI 10.1109/MS.2010.115
   Trifu A, 2005, WCRE: 12TH WORKING CONFERENCE ON REVERSE ENGINEERING 2005, PROCEEDINGS, P155
   Tsantalis N, 2008, CSMR 2008: 12TH EUROPEAN CONFERENCE ON SOFTWARE MAINTENANCE AND REENGINEERING, P329
   Tsantalis N, 2009, IEEE T SOFTWARE ENG, V35, P347, DOI 10.1109/TSE.2009.1
   van Emden E, 2002, NINTH WORKING CONFERENCE ON REVERSE ENGINEERING, PROCEEDINGS, P97, DOI 10.1109/WCRE.2002.1173068
   Wettel R, 2011, 2011 33RD INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING (ICSE), P551, DOI 10.1145/1985793.1985868
   Zeller A, 2007, FOSE 2007: FUTURE OF SOFTWARE ENGINEERING, P316, DOI 10.1109/FOSE.2007.31
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
   [No title captured]
NR 43
TC 21
Z9 22
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD FEB 1
PY 2017
VL 134
SI SI
BP 19
EP 36
DI 10.1016/j.scico.2015.02.007
PG 18
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA EF1GE
UT WOS:000390072500003
OA hybrid
DA 2024-07-18
ER

PT J
AU de Carvalho, FH
   Rezende, CA
   Silva, JD
   Al-Alam, WG
   de Alencar, JMU
AF de Carvalho Junior, Francisco Heron
   Rezende, Cenez Araujo
   Silva, Jefferson de Carvalho
   Al-Alam, Wagner Guimaraes
   Uchoa de Alencar, Joao Marcelo
TI Contextual abstraction in a type system for component-based high
   performance computing platforms
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Component-based software engineering; High performance computing;
   Component-based high performance computing; Parallel programming; Type
   systems
ID SKELETONS; MODEL
AB HTS (Hash Type System) is a type system designed for component-based high performance computing (CBHPC) platforms, aimed at reconciling portability, modularity by separation of concerns, a high-level of abstraction and high performance. Portability and modularity are properties of component-based systems that have been extensively validated. For improving the performance of HPC applications, HTS introduces an automated approach for dynamically discovering, loading and binding parallel components tuned for the characteristics of the parallel computing platforms where the application will execute. To do so, it is based on contextual abstraction, where the performance of components that encapsulate parallel computations, communication patterns and data structures may be tuned according to the features of parallel computing platforms and the application requirements. In turn, for providing a higher level of abstraction in parallel programming, HTS supports an expressive approach for skeleton-based programming. A study of the safety properties of HTS using a calculus of component composition has provided solid foundations for the design of configuration languages for the safe specification and deployment of parallel components. The features of HTS are validated with three case studies that exercise the programming techniques behind contextual abstraction, including skeletons and performance tuning. (C) 2016 Elsevier B.V. All rights reserved.
C1 [de Carvalho Junior, Francisco Heron; Rezende, Cenez Araujo; Silva, Jefferson de Carvalho; Al-Alam, Wagner Guimaraes; Uchoa de Alencar, Joao Marcelo] Univ Fed Ceara, Ciencia Comp, Fortaleza, CE, Brazil.
C3 Universidade Federal do Ceara
RP de Carvalho, FH (corresponding author), Univ Fed Ceara, Ciencia Comp, Fortaleza, CE, Brazil.
EM heron@lia.ufc.br; cenezaraujo@lia.ufc.br; jeffersoncarvalho@lia.ufc.br;
   joao.marcelo@lia.ufc.br
RI Carvalho, Francisco/AAR-9865-2021; Rezende, Cenez Araujo de/V-4469-2017
OI Carvalho, Francisco/0000-0003-2286-2376; Rezende, Cenez Araujo
   de/0000-0002-1236-6443; Uchoa de Alencar, Joao
   Marcelo/0000-0002-7523-3242
FU CNPq [486021/2011-4]
FX This research work has been funded by CNPq, through grant 486021/2011-4.
CR Aldinucci M, 2008, EUROMICRO WORKSHOP P, P54, DOI 10.1109/PDP.2008.46
   Allan BA, 2002, CONCURR COMP-PRACT E, V14, P323, DOI 10.1002/cpe.651
   Amedro B, 2010, COMPUT COMMUN NETW S, P163, DOI 10.1007/978-1-84996-241-4_10
   Andre F., 2004, P WORKSH COMP MOD SY, P143
   Andrzejak A, 2006, FUTURE GENERATION GRIDS, P29, DOI 10.1007/978-0-387-29445-2_2
   [Anonymous], 2003, Introduction to parallel computing
   Antonopoulos N, 2010, COMPUT COMMUN NETW S, P1, DOI 10.1007/978-1-84996-241-4
   Armstrong R, 2006, CONCURR COMP-PRACT E, V18, P215, DOI 10.1002/cpe.911
   Armstrong R., 1999, 8 IEEE INT S HIGH PE
   Bailey DavidH., 1995, NAS PARALLEL BENCHMA
   Baude F, 2003, LECT NOTES COMPUT SC, V2888, P1226
   Baude F., 2007, 7 INT S CLUST COMP G
   Baude F, 2009, ANN TELECOMMUN, V64, P5, DOI 10.1007/s12243-008-0068-8
   Bertran F., 2005, 19 IEEE INT PAR DIST
   Bertrand F., 2004, P 9 INT WORKSH HIGHL
   Blair G, 2009, ANN TELECOMMUN, V64, P1, DOI 10.1007/s12243-009-0086-1
   Bouziane HL, 2010, PARALLEL COMPUT, V36, P86, DOI 10.1016/j.parco.2009.12.012
   Bruneton E., 2002, EUR C OBJ OR PROGR E
   Buono D, 2010, PROCEDIA COMPUT SCI, V1, P2089, DOI 10.1016/j.procs.2010.04.234
   Carvalho FH, 2007, CONCURR COMP-PRACT E, V19, P697, DOI 10.1002/cpe.1121
   Cole M, 2004, PARALLEL COMPUT, V30, P389, DOI 10.1016/j.parco.2004.12.002
   Cole M., 1989, ALGORITHM SKELETONS
   Courtrai L., 2003, Proceedings International Parallel and Distributed Processing Symposium, DOI 10.1109/IPDPS.2003.1213258
   Danelutto M, 2006, PARALLEL COMPUT, V32, P449, DOI 10.1016/j.parco.2006.04.001
   de Carvalho F. H.  Jr., 2003, Proceedings International Parallel and Distributed Processing Symposium
   de Carvalho FH., 2005, INFORMATION, V8, P621
   de Carvalho FH, 2013, J PARALLEL DISTR COM, V73, P557, DOI 10.1016/j.jpdc.2012.12.007
   de Carvalho-Junior FH, 2007, INT SYM COMP ARCHIT, P237, DOI 10.1109/SBAC-PAD.2007.34
   de Carvalho FH, 2008, ELECTRON NOTES THEOR, V195, P113, DOI 10.1016/j.entcs.2007.08.029
   Dean J, 2004, USENIX ASSOCIATION PROCEEDINGS OF THE SIXTH SYMPOSIUM ON OPERATING SYSTEMS DESIGN AND IMPLEMENTATION (OSDE '04), P137
   Dennis A., 2001, P 7 INT EUR 2001 C, P835
   Dünnweber J, 2009, HIGHER-ORDER COMPONENTS FOR GRID PROGRAMMING: MAKING GRIDS MORE USABLE, P1, DOI 10.1007/978-3-642-00841-2_1
   Duran A., 2012, 2012 International Conference on High Performance Computing & Simulation (HPCS 2012), P365, DOI 10.1109/HPCSim.2012.6266938
   ECMA International, 2006, 335 ECMA INT
   Epperly TGW, 2012, INT J HIGH PERFORM C, V26, P260, DOI 10.1177/1094342011414036
   Fan Z., 2004, SC 04, P47, DOI [DOI 10.1109/SC.2004.26, 10.1109/SC.2004.26]
   Forum C., 2009, P200907231 SAND NAT
   Foster I., 2004, The Grid 2: Blueprint for a New Computing Infrastructure, VSecond
   Hall MW, 2008, P IEEE, V96, P849, DOI 10.1109/JPROC.2008.917733
   Herbordt MC, 2007, COMPUTER, V40, P50, DOI 10.1109/MC.2007.79
   Heron de Carvalho-Junior Francisco, 2010, Proceedings 2010 11th IEEE/ACM International Conference on Grid Computing (GRID 2010), P339, DOI 10.1109/GRID.2010.5698007
   Keahey K, 1997, SIXTH IEEE INTERNATIONAL SYMPOSIUM ON HIGH PERFORMANCE DISTRIBUTED COMPUTING, PROCEEDINGS, P31, DOI 10.1109/HPDC.1997.622360
   Kephart JO, 2003, COMPUTER, V36, P41, DOI 10.1109/MC.2003.1160055
   Krishnan M., 2005, P 2005 ACM IEEE C SU, P23, DOI DOI 10.1109/SC.2005.46
   Krishnan S., 2004, P HIPS2004 9 INT WOR
   Leavens G.T., 2000, FDN COMPONENT BASED
   Leavens GaryT., 2000, FDN COMPONENT BASED, P113
   Liu H, 2005, 14TH IEEE INTERNATIONAL SYMPOSIUM ON HIGH PERFORMANCE DISTRIBUTED COMPUTING, PROCEEDINGS, P59
   Mahmood N., 2004, LECT NOTES COMPUTER, V2958
   Malawski M., 2005, Proceedings. 19th IEEE International Parallel and Distributed Processing Symposium
   Malawski M, 2007, TOWARDS NEXT GENERATION GRIDS, P95, DOI 10.1007/978-0-387-72498-0_9
   Milli H., 2004, WORKSH EARL ASP ASP, P411
   Mittal S, 2015, ACM COMPUT SURV, V48, DOI 10.1145/2856125
   Object Management Group, 2006, 20060103 OMG
   Parashar M., 2009, Advanced Computational Infras-tructures for Parallel and Distributed Adaptive Application
   Pérez C, 2002, LECT NOTES COMPUT SC, V2536, P88
   Pierce Benjamin C., 2002, TYPES PROGRAMMING LA, V1st
   Plimpton SJ, 2011, PARALLEL COMPUT, V37, P610, DOI 10.1016/j.parco.2011.02.004
   Post DE, 2005, PHYS TODAY, V58, P35, DOI 10.1063/1.1881898
   Rene C., 2000, Cluster Computing, V3, P255, DOI 10.1023/A:1019096607706
   Sussman A, 2006, ENG COMPUT-GERMANY, V22, P311, DOI 10.1007/s00366-006-0037-7
   Szyperski C., 1999, COMPONENT SOFTWARE O, V2nd
   van der Steen AJ, 2006, CONCURR COMP-PRACT E, V18, P141, DOI 10.1002/cpe.908
   Wang A.J. A., 2005, COMPONENT ORIENTED P
   Yoon Y, 2007, CONCURR COMP-PRACT E, V19, P721, DOI 10.1002/cpe.1149
   Zhang K., 2004, P 9 INT WORKSH HIGHL
NR 66
TC 5
Z9 5
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD DEC 15
PY 2016
VL 132
BP 96
EP 128
DI 10.1016/j.scico.2016.07.005
PN 1
PG 33
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA EC3YB
UT WOS:000388061900006
OA Bronze
DA 2024-07-18
ER

PT J
AU Walther, S
   Wehrheim, H
AF Walther, Sven
   Wehrheim, Heike
TI On-the-fly construction of provably correct service compositions -
   templates and proofs
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article; Proceedings Paper
CT 11th International Symposium on Formal Aspects of Component Software
   (FACS) Colocated with the 11th International Conference on Integrated
   Formal Methods (IFM)
CY SEP 10-12, 2014
CL Bertinoro, ITALY
DE Verification; Hoare-calculus; Templates; Service compositions;
   Correctness by construction
ID MODEL
AB Today, service compositions often need to be assembled or changed on-the-fly, which leaves only little time for quality assurance. Moreover, quality assurance is complicated by service providers only giving information on their services in terms of domain specific concepts with only limited semantic meaning.
   In this paper, we propose a method for constructing service compositions based on pre-verified templates. Templates, given as workflow descriptions, are typed over a (domain independent) template ontology defining concepts and predicates. Their meaning is defined by an abstract semantics, leaving the specific meaning of ontology concepts open, however, only up to given ontology rides. Templates are proven correct using a Hoare-style proof calculus, extended by a specific rule for service calls. Construction of service compositions amounts to instantiation of tethplates with domain-specific services. Correctness of an instantiation can then simply be checked by verifying that the domain ontology (a) adheres to the rules of the template ontology, and (b) fulfills the constraints of the employed template. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Walther, Sven; Wehrheim, Heike] Univ Paderborn, Dept Comp Sci, Paderborn, Germany.
C3 University of Paderborn
RP Walther, S (corresponding author), Univ Paderborn, Dept Comp Sci, Paderborn, Germany.
EM swalther@mail.upb.de; wehrheim@upb.de
CR [Anonymous], 2004, W3C MEMB SUBMISS
   [Anonymous], P 29 ACM IEEE INT C
   [Anonymous], LNCS
   [Anonymous], FORMAL ASPECTS WORLD
   [Anonymous], ARXIV08110987 CORR
   [Anonymous], ABSTRACT OPERATIONAL
   [Anonymous], 2012, P 6 WORKSHOP PROGRAM
   [Anonymous], 2012, OWL 2 WEB ONTOLOGY L
   [Anonymous], P 5 BALK C INF BCI 1
   Antoniou G., 2009, Handbook on Ontologies, P91, DOI [DOI 10.1007/978-3-540-92673-3_4, DOI 10.1007/978-3-540-92673-34]
   Apt K.R., 2009, Texts in Computer Science, DOI 10.1007/978-1-84882-745-5
   Arbab F, 2004, MATH STRUCT COMP SCI, V14, P329, DOI 10.1017/S0960129504004153
   Arbab F, 2003, LECT NOTES COMPUT SC, V2755, P34
   Baader F, 2008, FOUND ARTIF INTELL, P135, DOI 10.1016/S1574-6526(07)03003-9
   Barrett C, 2015, Tech. rep.
   Becker Matthias., 2013, Proceedings of the 9th international ACM Sigsoft conference on Quality of software architectures. QoSA 2013, P43
   Becker S, 2009, J SYST SOFTWARE, V82, P3, DOI 10.1016/j.jss.2008.03.066
   Bures T, 2006, FOURTH INTERNATIONAL CONFERENCE ON SOFTWARE ENGINEERING RESEARCH, MANAGEMENT AND APPLICATIONS, PROCEEDINGS, P40, DOI 10.1109/SERA.2006.62
   Calinescu R, 2012, COMMUN ACM, V55, P69, DOI 10.1145/2330667.2330686
   Cimatti A, 2013, LECT NOTES COMPUT SC, V7795, P93
   CYTRON R, 1991, ACM T PROGR LANG SYS, V13, P451, DOI 10.1145/115372.115320
   Detlefs D, 2005, J ACM, V52, P365, DOI 10.1145/1066100.1066102
   Dillig I, 2013, ACM SIGPLAN NOTICES, V48, P443, DOI [10.1145/2509136.2509511, 10.1145/2544173.2509511]
   Flanagan C, 2001, ACM SIGPLAN NOTICES, V36, P193, DOI 10.1145/373243.360220
   Franconi E, 2004, LECT NOTES COMPUT SC, V3208, P50
   Gamma E., 1994, Design patterns: Elements of reusable object-oriented software
   Gandon F., 2014, RDF 11 XML SYNTAX
   Godefroid Patrice., 2011, LASER SUMMER SCH, V7682, P31
   GRUBER TR, 1993, KNOWL ACQUIS, V5, P199, DOI 10.1006/knac.1993.1008
   GRUMBERG O, 1991, LECT NOTES COMPUT SC, V527, P250
   Guarino N., 2009, HDB ONTOLOGIES, P1, DOI [DOI 10.1007/978-3-540-92673-30, 10.1007/978-3-540-92673-3_0, DOI 10.1007/978-3-540-92673-3_0]
   Hahnle Reiner, 2012, Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change. Technologies for Mastering Change. Proceedings of the 5th International Symposium, ISoLA 2012, P32, DOI 10.1007/978-3-642-34026-0_4
   Happe M, 2013, INT SYMP OBJECT COMP
   HOARE CAR, 1969, COMMUN ACM, V12, P576, DOI 10.1145/363235.363259
   Holzmann GJ, 1997, IEEE T SOFTWARE ENG, V23, P279, DOI 10.1109/32.588521
   Kovács M, 2008, ELECTRON NOTES THEOR, V211, P221, DOI 10.1016/j.entcs.2008.04.044
   Kumar SK, 2013, COMPUT IND, V64, P19, DOI 10.1016/j.compind.2012.09.004
   Lindsay P., 1996, Proceedings 1996 Australian Software Engineering Conference, P27, DOI 10.1109/ASWEC.1996.534120
   Martin D., 2005, Semantic Web Services and Web Process Composition. First International Workshop, SWSSWPC 2004. Revised Selected Papers (Lecture Notes in Computer Science Vol.3387), P26
   Mohr Felix, 2014, Software Reuse for Dynamic Systems in the Cloud and Beyond 14th International Conference on Software Reuse, ICSR 2015. Proceedings: LNCS 8919, P188, DOI 10.1007/978-3-319-14130-5_14
   Noy NatalyaF., 2009, Handbook on Ontologies, V2nd, P573
   *OASIS, WEB SERV BUS PROC EX
   Ouyang C, 2007, SCI COMPUT PROGRAM, V67, P162, DOI 10.1016/j.scico.2007.03.002
   OWICKI S, 1976, ACTA INFORM, V6, P319, DOI 10.1007/BF00268134
   Pnueli A., 1977, 18th Annual Symposium on Foundations of Computer Science, P46, DOI 10.1109/SFCS.1977.32
   Soleimanifard Siavash, 2015, Formal Aspects of Component Software - 11th International Symposium, FACS 2014. Revised Selected Papers: LNCS 8997, P327, DOI 10.1007/978-3-319-15317-9_20
   Srivastava S, 2009, PLDI'09 PROCEEDINGS OF THE 2009 ACM SIGPLAN CONFERENCE ON PROGRAMMING LANGUAGE DESIGN AND IMPLEMENTATION, P223, DOI 10.1145/1542476.1542501
   Turon A, 2013, ACM SIGPLAN NOTICES, V48, P377, DOI [10.1145/2500365.2500600, 10.1145/2544174.2500600]
   Walther Sven, 2015, Formal Aspects of Component Software - 11th International Symposium, FACS 2014. Revised Selected Papers: LNCS 8997, P31, DOI 10.1007/978-3-319-15317-9_3
   Walther S, 2013, IEEE INT C ENG COMP, P24, DOI 10.1109/ICECCS.2013.14
   Woodcock J., 1996, Using Z: Specification, Refinement, and Proof
NR 51
TC 2
Z9 2
U1 0
U2 7
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD OCT 1
PY 2016
VL 127
SI SI
BP 2
EP 23
DI 10.1016/j.scico.2016.04.002
PG 22
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED); Conference Proceedings Citation Index - Science (CPCI-S)
SC Computer Science
GA DQ5ZA
UT WOS:000379282600002
OA Bronze
DA 2024-07-18
ER

PT J
AU Belli, F
   Budnik, CJ
   Hollmann, A
   Tuglular, T
   Wong, WE
AF Belli, Fevzi
   Budnik, Christof J.
   Hollmann, Axel
   Tuglular, Tugkan
   Wong, W. Eric
TI Model-based mutation testing-Approach and case studies
SO SCIENCE OF COMPUTER PROGRAMMING
LA English
DT Article
DE Mutation testing; Model-based testing; Model-based mutation testing;
   Mutation operator; Fault detection capability
ID DESIGN
AB This paper rigorously introduces the concept of model-based mutation testing (MBMT) and positions it in the landscape of mutation testing. Two elementary mutation operators, insertion and omission, are exemplarily applied to a hierarchy of graph-based models of increasing expressive power including directed graphs, event sequence graphs, finite-state machines and statecharts. Test cases generated based on the mutated models (mutants) are used to determine not only whether each mutant can be killed but also whether there are any faults in the corresponding system under consideration (SUC) developed based on the original model. Novelties of our approach are: (1) evaluation of the fault detection capability (in terms of revealing faults in the SUC) of test sets generated based on the mutated models, and (2) superseding of the great variety of existing mutation operators by iterations and combinations of the two proposed elementary operators. Three case studies were conducted on industrial and commercial real-life systems to demonstrate the feasibility of using the proposed MBMT approach in detecting faults in SUC, and to analyze its characteristic features. Our experimental data suggest that test sets generated based on the mutated models created by insertion operators are more effective in revealing faults in SUC than those generated by omission operators. Worth noting is that test sets following the MBMT approach were able to detect faults in the systems that were tested by manufacturers and independent testing organizations before they were released. (C) 2016 Elsevier B.V. All rights reserved.
C1 [Belli, Fevzi] Univ Paderborn, Dept Comp Sci Elect Engn & Math, Paderborn, Germany.
   [Budnik, Christof J.] Siemens Corp, Corp Technol, New York, NY USA.
   [Hollmann, Axel] Andagon GmbH, Cologne, Germany.
   [Tuglular, Tugkan] Izmir Inst Technol, Dept Comp Engn, Izmir, Turkey.
   [Wong, W. Eric] Univ Texas Dallas, Dept Comp Sci, Dallas, TX 75230 USA.
C3 University of Paderborn; Siemens AG; Izmir Institute of Technology;
   University of Texas System; University of Texas Dallas
RP Tuglular, T (corresponding author), Izmir Inst Technol, Dept Comp Engn, Izmir, Turkey.
EM belli@adt.upb.de; christof.budnik@siemens.com; a.hollmann@andagon.com;
   tugkantuglular@iyte.edu.tr; ewong@utdallas.edu
RI Hollmann, Axel/J-4931-2013; Tuglular, Tugkan/AAI-8008-2020
OI Tuglular, Tugkan/0000-0001-6797-3913
CR Acree A. T., 1980, On Mutation
   Agrawal H., 1989, Design of mutant operators for the C programming language
   Aichernig B. K., 2012, 12 INT C QUAL SOFTW
   Aichernig BK, 2015, SOFTW TEST VERIF REL, V25, P716, DOI 10.1002/stvr.1522
   Aichernig BK, 2012, ELECTRON PROC THEOR, P88, DOI 10.4204/EPTCS.80.7
   Ammann P. E., 2001, INT J RELIABILITY QU, V8, P275, DOI DOI 10.1142/S0218539301000530
   Ammann Paul, 2008, Introduction to software testing, V1st
   Ammann PE, 1998, SECOND INTERNATIONAL CONFERENCE ON FORMAL ENGINEERING METHODS, PROCEEDINGS, P46, DOI 10.1109/ICFEM.1998.730569
   [Anonymous], THESIS U QUEENSLAND
   [Anonymous], GITSERC8802
   [Anonymous], 1980, THESIS YALE U NEW HA
   [Anonymous], WORKSH SOFTW TEST TE
   [Anonymous], GITICS8004
   [Anonymous], ACM T SOFTWARE ENG M
   Belli F, 2006, SOFTW TEST VERIF REL, V16, P3, DOI 10.1002/stvr.335
   Belli F, 2005, LECT NOTES ARTIF INT, V3533, P321
   Belli F, 2004, LECT NOTES COMPUT SC, V3280, P907
   Belli Fevzi, 2013, Implementation and Application of Automata. 18th International Conference, CIAA 2013. Proceedings: LNCS 7982, P48, DOI 10.1007/978-3-642-39274-0_6
   Belli F, 2007, APPL INTELL, V26, P161, DOI 10.1007/s10489-006-0008-0
   Belli F, 2009, ELECTRON P THEOR COM, P69, DOI 10.4204/EPTCS.3.6
   Belli F, 2015, IEEE T SOFTWARE ENG, V41, P113, DOI 10.1109/TSE.2014.2360690
   Belli F, 2012, IEICE T INF SYST, VE95D, P2211, DOI 10.1587/transinf.E95.D.2211
   Belli F, 2008, APPLIED COMPUTING 2008, VOLS 1-3, P718
   Black PE, 2001, KLUW INT S ADV DATA, V24, P14
   Black PE, 2000, FIFTEENTH IEEE INTERNATIONAL CONFERENCE ON AUTOMATED SOFTWARE ENGINEERING, PROCEEDINGS, P81, DOI 10.1109/ASE.2000.873653
   Budd T. A., 1978, AFIPS Conference Proceedings vol.47. 1978 National Computer Conference, P623
   Choi BJ., 1989, P 22 ANN HAW INT C S, V2, P275, DOI [10.1109/HICSS.1989.48002, DOI 10.1109/HICSS.1989.48002]
   CHOW TS, 1978, IEEE T SOFTWARE ENG, V4, P178, DOI 10.1109/TSE.1978.231496
   Clark JA, 2013, SCI COMPUT PROGRAM, V78, P345, DOI 10.1016/j.scico.2011.03.011
   Clarke Edmund M., 2001, Model Checking
   COLEMAN D, 1987, SOFTWARE ENG J, V2, P95, DOI 10.1049/sej.1987.0013
   Delamaro ME, 2001, IEEE T SOFTWARE ENG, V27, P228, DOI 10.1109/32.910859
   DELAMARO ME, 1996, SERCTR168P PURD U
   DEMILLO RA, 1978, COMPUTER, V11, P34, DOI 10.1109/C-M.1978.218136
   Dingning Yang, 2012, 2012 IEEE 11th International Conference on Trust, Security and Privacy in Computing and Communications (TrustCom), P1070, DOI 10.1109/TrustCom.2012.99
   El-Fakih KA, 2012, PROGRAM COMPUT SOFT+, V38, P201, DOI 10.1134/S0361768812040019
   Fabbri S. C. P. F., 1999, Proceedings 10th International Symposium on Software Reliability Engineering (Cat. No.PR00443), P210, DOI 10.1109/ISSRE.1999.809326
   Fabbri S. C. P. F., 1999, Proceedings. SCCC'99 XIX International Conference of the Chilean Computer Science Society, P96, DOI 10.1109/SCCC.1999.810159
   Fabbri S.C.P.F., 1995, 8 IFIP C FORM DESCR, P329
   Goodenough J. B., 1975, IEEE Transactions on Software Engineering, VSE-1, P156, DOI 10.1109/TSE.1975.6312836
   Gorbunov S, 2010, INT J COMPUT SCI NET, V10, P239
   Grabowski J, 2003, COMPUT NETW, V42, P375, DOI 10.1016/S1389-1286(03)00249-4
   Harman M., 2010, 5 WORKSH MUT AN PAR
   Henard C, 2013, IEEE ICST WORKSHOP, P188, DOI 10.1109/ICSTW.2013.30
   Hsu YT, 2008, I C NETWORK PROTOCOL, P114, DOI 10.1109/ICNP.2008.4697030
   Jia Y, 2011, IEEE T SOFTWARE ENG, V37, P649, DOI 10.1109/TSE.2010.62
   Jia Y, 2009, INFORM SOFTWARE TECH, V51, P1379, DOI 10.1016/j.infsof.2009.04.016
   Kim SW, 2001, SOFTW TEST VERIF REL, V11, P207, DOI 10.1002/stvr.238
   KING KN, 1991, SOFTWARE PRACT EXPER, V21, P685, DOI 10.1002/spe.4380210704
   Kovács G, 2003, LECT NOTES COMPUT SC, V2708, P269
   Lee SC, 2001, 12TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P200, DOI 10.1109/ISSRE.2001.989474
   Li J. B., 2005, 29 ANN INT COMP SOFT, P26
   Liu L, 2005, IEEE INT C ENG COMP, P498
   Ma YS, 2005, SOFTW TEST VERIF REL, V15, P97, DOI 10.1002/stvr.308
   Ma YS, 2002, 13TH INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P352, DOI 10.1109/ISSRE.2002.1173287
   Martin, 1987, MOTHRA SOFTWARE TEST
   Memon AM, 2007, SOFTW TEST VERIF REL, V17, P137, DOI 10.1002/stvr.364
   Oehlert P, 2005, IEEE SECUR PRIV, V3, P58, DOI 10.1109/MSP.2005.55
   OFFUTT AJ, 1996, ISSETR9609 G MAS U
   Offutt J., 2006, 2 WORKSH MUT AN ISSR, P12
   Pinto Ferraz Fabbri S. C., 1994, Proceedings. 5th International Symposium on Software Reliability Engineering (Cat. No.94TH8017), P220, DOI 10.1109/ISSRE.1994.341378
   SARIKAYA B, 1989, COMPUT NETWORKS ISDN, V17, P111, DOI 10.1016/0169-7552(89)90004-4
   Smith Graeme., 2000, OBJECT Z SPECIFICATI
   Sugeta T, 2004, LECT NOTES COMPUT SC, V2978, P193
   von Bochmann G., 1994, SIGSOFT Software Engineering Notes, P109
   Wong W.E., 2008, P INT C SOFTWARE ENG, P25, DOI [10.1145/1370042.1370049, DOI 10.1145/1370042.1370049]
   WOODWARD MR, 1993, SOFTWARE ENG J, V8, P211, DOI 10.1049/sej.1993.0027
   Xu WZ, 2005, 16TH IEEE INTERNATIONAL SYMPOSIUM ON SOFTWARE RELIABILITY ENGINEERING, PROCEEDINGS, P257, DOI 10.1109/ISSRE.2005.44
   Zhao Zhang, 2012, 2012 International Conference on Computer Science and Service System (CSSS), P814, DOI 10.1109/CSSS.2012.208
   Zhu H, 1997, ACM COMPUT SURV, V29, P366, DOI 10.1145/267580.267590
NR 70
TC 48
Z9 53
U1 1
U2 9
PU ELSEVIER
PI AMSTERDAM
PA RADARWEG 29, 1043 NX AMSTERDAM, NETHERLANDS
SN 0167-6423
EI 1872-7964
J9 SCI COMPUT PROGRAM
JI Sci. Comput. Program.
PD MAY 1
PY 2016
VL 120
BP 25
EP 48
DI 10.1016/j.scico.2016.01.003
PG 24
WC Computer Science, Software Engineering
WE Science Citation Index Expanded (SCI-EXPANDED)
SC Computer Science
GA DH3NJ
UT WOS:000372693400002
OA Green Published
DA 2024-07-18
ER

EF